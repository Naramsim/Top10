{"config":{"indexing":"full","lang":["en","fr","ja","ar","it"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u2693\ufe0e Welcome to the OWASP Top 10 - 2021 \u2693\ufe0e Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU! What's changed in the Top 10 for 2021 \u2693\ufe0e There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time. Methodology \u2693\ufe0e This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use an community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10. How the categories are structured \u2693\ufe0e A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework. How the data is used for selecting categories \u2693\ufe0e In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation. Why not just pure statistical data? \u2693\ufe0e The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data). Why incidence rate instead of frequency? \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Thank you to our sponsors \u2693\ufe0e The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Home"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#welcome-to-the-owasp-top-10-2021","text":"Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU!","title":"Welcome to the OWASP Top 10 - 2021"},{"location":"#whats-changed-in-the-top-10-for-2021","text":"There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time.","title":"What's changed in the Top 10 for 2021"},{"location":"#methodology","text":"This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use an community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10.","title":"Methodology"},{"location":"#how-the-categories-are-structured","text":"A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework.","title":"How the categories are structured"},{"location":"#how-the-data-is-used-for-selecting-categories","text":"In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation.","title":"How the data is used for selecting categories"},{"location":"#why-not-just-pure-statistical-data","text":"The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data).","title":"Why not just pure statistical data?"},{"location":"#why-incidence-rate-instead-of-frequency","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category.","title":"Why incidence rate instead of frequency?"},{"location":"#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order.","title":"What is your data collection and analysis process?"},{"location":"#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"#thank-you-to-our-sponsors","text":"The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Thank you to our sponsors"},{"location":"0x00-notice/","text":"Release \u2693\ufe0e Released 24th September 2021 Lead Authors \u2693\ufe0e Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet ) Contributors \u2693\ufe0e Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination How you can help \u2693\ufe0e At this stage, we are asking for Data scientists - please peer review our analysis Web designers - we need to make a mobile friendly version Translators - please review the English text to make sure it's translatable ASVS, Testing Guide, and Code Review Guide leadership - please use our data and help us link our documents and standards together Log issues and pull requests \u2693\ufe0e Please log any corrections or issues: https://github.com/OWASP/Top10/issues","title":"Notice"},{"location":"0x00-notice/#release","text":"Released 24th September 2021","title":"Release"},{"location":"0x00-notice/#lead-authors","text":"Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet )","title":"Lead Authors"},{"location":"0x00-notice/#contributors","text":"Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination","title":"Contributors"},{"location":"0x00-notice/#how-you-can-help","text":"At this stage, we are asking for Data scientists - please peer review our analysis Web designers - we need to make a mobile friendly version Translators - please review the English text to make sure it's translatable ASVS, Testing Guide, and Code Review Guide leadership - please use our data and help us link our documents and standards together","title":"How you can help"},{"location":"0x00-notice/#log-issues-and-pull-requests","text":"Please log any corrections or issues: https://github.com/OWASP/Top10/issues","title":"Log issues and pull requests"},{"location":"A00-about-owasp/","text":"About OWASP \u2693\ufe0e The Open Web Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications and APIs that can be trusted. At OWASP, you'll find free and open: Application security tools and standards Cutting edge research Standard security controls and libraries Complete books on application security testing, secure code development, and secure code review Presentations and videos Cheat sheets on many common topics Chapters meetings Events, training, and conferences . Google Groups Learn more at: https://www.owasp.org . All OWASP tools, documents, videos, presentations, and chapters are free and open to anyone interested in improving application security. We advocate approaching application security as a people, process, and technology problem, because the most effective approaches to application security require improvements in these areas. OWASP is a new kind of organization. Our freedom from commercial pressures allows us to provide unbiased, practical, and cost-effective information about application security. OWASP is not affiliated with any technology company, although we support the informed use of commercial security technology. OWASP produces many types of materials in a collaborative, transparent, and open way. The OWASP Foundation is the non-profit entity that ensures the project's long-term success. Almost everyone associated with OWASP is a volunteer, including the OWASP board, chapter leaders, project leaders, and project members. We support innovative security research with grants and infrastructure. Come join us! Copyright and License \u2693\ufe0e Copyright \u00a9 2003-2021 The OWASP\u2122 Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"About OWASP"},{"location":"A00-about-owasp/#about-owasp","text":"The Open Web Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications and APIs that can be trusted. At OWASP, you'll find free and open: Application security tools and standards Cutting edge research Standard security controls and libraries Complete books on application security testing, secure code development, and secure code review Presentations and videos Cheat sheets on many common topics Chapters meetings Events, training, and conferences . Google Groups Learn more at: https://www.owasp.org . All OWASP tools, documents, videos, presentations, and chapters are free and open to anyone interested in improving application security. We advocate approaching application security as a people, process, and technology problem, because the most effective approaches to application security require improvements in these areas. OWASP is a new kind of organization. Our freedom from commercial pressures allows us to provide unbiased, practical, and cost-effective information about application security. OWASP is not affiliated with any technology company, although we support the informed use of commercial security technology. OWASP produces many types of materials in a collaborative, transparent, and open way. The OWASP Foundation is the non-profit entity that ensures the project's long-term success. Almost everyone associated with OWASP is a volunteer, including the OWASP board, chapter leaders, project leaders, and project members. We support innovative security research with grants and infrastructure. Come join us!","title":"About OWASP"},{"location":"A00-about-owasp/#copyright-and-license","text":"Copyright \u00a9 2003-2021 The OWASP\u2122 Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"Copyright and License"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/","text":"How to start an AppSec Program with the OWASP Top 10 \u2693\ufe0e Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient. Stage 1. Identify the gaps and goals of your appsec program \u2693\ufe0e Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts. Stage 2. Plan for a paved road secure development lifecycle \u2693\ufe0e Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business. Stage 3. Implement the paved road with your development teams \u2693\ufe0e Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days. Stage 4. Migrate all upcoming and existing applications to the paved road \u2693\ufe0e Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly. Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10 \u2693\ufe0e Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better start using a library that is known safe against injection. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar. Stage 6. Build your program into a mature AppSec program \u2693\ufe0e You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level. Going beyond \u2693\ufe0e All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"How to start an AppSec program with the OWASP Top 10"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#how-to-start-an-appsec-program-with-the-owasp-top-10","text":"Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient.","title":"How to start an AppSec Program with the OWASP Top 10"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-1-identify-the-gaps-and-goals-of-your-appsec-program","text":"Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts.","title":"Stage 1. Identify the gaps and goals of your appsec program"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-2-plan-for-a-paved-road-secure-development-lifecycle","text":"Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business.","title":"Stage 2. Plan for a paved road secure development lifecycle"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-3-implement-the-paved-road-with-your-development-teams","text":"Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days.","title":"Stage 3. Implement the paved road with your development teams"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-4-migrate-all-upcoming-and-existing-applications-to-the-paved-road","text":"Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly.","title":"Stage 4. Migrate all upcoming and existing applications to the paved road"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-5-test-that-the-paved-road-has-mitigated-the-issues-found-in-the-owasp-top-10","text":"Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better start using a library that is known safe against injection. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar.","title":"Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-6-build-your-program-into-a-mature-appsec-program","text":"You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level.","title":"Stage 6. Build your program into a mature AppSec program"},{"location":"A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#going-beyond","text":"All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"Going beyond"},{"location":"A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/","text":"How to use the OWASP Top 10 as a standard \u2693\ufe0e The OWASP Top 10 is primarily an awareness document. However, this has not stopped organizations using it as a de facto industry AppSec standard since its inception in 2003. If you want to use the OWASP Top 10 as a coding or testing standard, know that it is the bare minimum and just a starting point. One of the difficulties of using the OWASP Top 10 as a standard is that we document appsec risks, and not necessarily easily testable issues. For example, A04:2021-Insecure Design is beyond the scope of most forms of testing. Another example is testing in place, in use, and effective logging and monitoring can only be done with interviews and requesting a sampling of effective incident responses. A static code analysis tool can look for the absence of logging, but it might be impossible to determine if business logic or access control is logging critical security breaches. Penetration testers may only be able to determine that they have invoked incident response in a test environment, which are rarely monitored in the same way as production. Here are our recommendations for when it is appropriate to use the OWASP Top 10: Use Case OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Yes Training Entry level Comprehensive Design and architecture Occasionally Yes Coding standard Bare minimum Yes Secure Code review Bare minimum Yes Peer review checklist Bare minimum Yes Unit testing Occasionally Yes Integration testing Occasionally Yes Penetration testing Bare minimum Yes Tool support Bare minimum Yes Secure Supply Chain Occasionally Yes We would encourage anyone wanting to adopt an application security standard to use the OWASP Application Security Verification Standard ( ASVS ), as it\u2019s designed to be verifiable and tested, and can be used in all parts of a secure development lifecycle. The ASVS is the only acceptable choice for tool vendors. Tools cannot comprehensively detect, test, or protect against the OWASP Top 10 due to the nature of several of the OWASP Top 10 risks, with reference to A04:2021-Insecure Design. OWASP discourages any claims of full coverage of the OWASP Top 10, because it\u2019s simply untrue.","title":"How to use the OWASP Top 10 as a standard"},{"location":"A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#how-to-use-the-owasp-top-10-as-a-standard","text":"The OWASP Top 10 is primarily an awareness document. However, this has not stopped organizations using it as a de facto industry AppSec standard since its inception in 2003. If you want to use the OWASP Top 10 as a coding or testing standard, know that it is the bare minimum and just a starting point. One of the difficulties of using the OWASP Top 10 as a standard is that we document appsec risks, and not necessarily easily testable issues. For example, A04:2021-Insecure Design is beyond the scope of most forms of testing. Another example is testing in place, in use, and effective logging and monitoring can only be done with interviews and requesting a sampling of effective incident responses. A static code analysis tool can look for the absence of logging, but it might be impossible to determine if business logic or access control is logging critical security breaches. Penetration testers may only be able to determine that they have invoked incident response in a test environment, which are rarely monitored in the same way as production. Here are our recommendations for when it is appropriate to use the OWASP Top 10: Use Case OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Yes Training Entry level Comprehensive Design and architecture Occasionally Yes Coding standard Bare minimum Yes Secure Code review Bare minimum Yes Peer review checklist Bare minimum Yes Unit testing Occasionally Yes Integration testing Occasionally Yes Penetration testing Bare minimum Yes Tool support Bare minimum Yes Secure Supply Chain Occasionally Yes We would encourage anyone wanting to adopt an application security standard to use the OWASP Application Security Verification Standard ( ASVS ), as it\u2019s designed to be verifiable and tested, and can be used in all parts of a secure development lifecycle. The ASVS is the only acceptable choice for tool vendors. Tools cannot comprehensively detect, test, or protect against the OWASP Top 10 due to the nature of several of the OWASP Top 10 risks, with reference to A04:2021-Insecure Design. OWASP discourages any claims of full coverage of the OWASP Top 10, because it\u2019s simply untrue.","title":"How to use the OWASP Top 10 as a standard"},{"location":"A00_2021_Introduction/","text":"Introduction \u2693\ufe0e Welcome to the OWASP Top 10 - 2021 \u2693\ufe0e Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU! What's changed in the Top 10 for 2021 \u2693\ufe0e There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time. Methodology \u2693\ufe0e This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use a community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10. How the categories are structured \u2693\ufe0e A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework. How the data is used for selecting categories \u2693\ufe0e In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation. Why not just pure statistical data? \u2693\ufe0e The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data). Why incidence rate instead of frequency? \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Thank you to our sponsor \u2693\ufe0e The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Introduction"},{"location":"A00_2021_Introduction/#introduction","text":"","title":"Introduction"},{"location":"A00_2021_Introduction/#welcome-to-the-owasp-top-10-2021","text":"Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU!","title":"Welcome to the OWASP Top 10 - 2021"},{"location":"A00_2021_Introduction/#whats-changed-in-the-top-10-for-2021","text":"There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time.","title":"What's changed in the Top 10 for 2021"},{"location":"A00_2021_Introduction/#methodology","text":"This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use a community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10.","title":"Methodology"},{"location":"A00_2021_Introduction/#how-the-categories-are-structured","text":"A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework.","title":"How the categories are structured"},{"location":"A00_2021_Introduction/#how-the-data-is-used-for-selecting-categories","text":"In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation.","title":"How the data is used for selecting categories"},{"location":"A00_2021_Introduction/#why-not-just-pure-statistical-data","text":"The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data).","title":"Why not just pure statistical data?"},{"location":"A00_2021_Introduction/#why-incidence-rate-instead-of-frequency","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category.","title":"Why incidence rate instead of frequency?"},{"location":"A00_2021_Introduction/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order.","title":"What is your data collection and analysis process?"},{"location":"A00_2021_Introduction/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"A00_2021_Introduction/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"A00_2021_Introduction/#thank-you-to-our-sponsor","text":"The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Thank you to our sponsor"},{"location":"A01_2021-Broken_Access_Control/","text":"A01:2021 \u2013 Broken Access Control \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013 Overview \u2693\ufe0e Moving up from the fifth position, 94% of applications were tested for some form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included are CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , and CWE-352: Cross-Site Request Forgery . Description \u2693\ufe0e Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include: Violation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone. Bypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests. Permitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references) Accessing API with missing access controls for POST, PUT and DELETE. Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user. Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation. CORS misconfiguration allows API access from unauthorized/untrusted origins. Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user. How to Prevent \u2693\ufe0e Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata. Except for public resources, deny by default. Implement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage. Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record. Unique application business limit requirements should be enforced by domain models. Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots. Log access control failures, alert admins when appropriate (e.g., repeated failures). Rate limit API and controller access to minimize the harm from automated attack tooling. Stateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highy recommended to follow the OAuth standards to revoke access. Developers and QA staff should include functional access control unit and integration tests. Example Attack Scenarios \u2693\ufe0e Scenario #1: The application uses unverified data in a SQL call that is accessing account information: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); An attacker simply modifies the browser's 'acct' parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo If an unauthenticated user can access either page, it's a flaw. If a non-admin can access the admin page, this is a flaw. References \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access List of Mapped CWEs \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"A01 Broken Access Control"},{"location":"A01_2021-Broken_Access_Control/#a012021-broken-access-control","text":"","title":"A01:2021 \u2013 Broken Access Control"},{"location":"A01_2021-Broken_Access_Control/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013","title":"Factors"},{"location":"A01_2021-Broken_Access_Control/#overview","text":"Moving up from the fifth position, 94% of applications were tested for some form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included are CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , and CWE-352: Cross-Site Request Forgery .","title":"Overview"},{"location":"A01_2021-Broken_Access_Control/#description","text":"Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include: Violation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone. Bypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests. Permitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references) Accessing API with missing access controls for POST, PUT and DELETE. Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user. Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation. CORS misconfiguration allows API access from unauthorized/untrusted origins. Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user.","title":"Description"},{"location":"A01_2021-Broken_Access_Control/#how-to-prevent","text":"Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata. Except for public resources, deny by default. Implement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage. Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record. Unique application business limit requirements should be enforced by domain models. Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots. Log access control failures, alert admins when appropriate (e.g., repeated failures). Rate limit API and controller access to minimize the harm from automated attack tooling. Stateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highy recommended to follow the OAuth standards to revoke access. Developers and QA staff should include functional access control unit and integration tests.","title":"How to Prevent"},{"location":"A01_2021-Broken_Access_Control/#example-attack-scenarios","text":"Scenario #1: The application uses unverified data in a SQL call that is accessing account information: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); An attacker simply modifies the browser's 'acct' parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo If an unauthenticated user can access either page, it's a flaw. If a non-admin can access the admin page, this is a flaw.","title":"Example Attack Scenarios"},{"location":"A01_2021-Broken_Access_Control/#references","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access","title":"References"},{"location":"A01_2021-Broken_Access_Control/#list-of-mapped-cwes","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"List of Mapped CWEs"},{"location":"A02_2021-Cryptographic_Failures/","text":"A02:2021 \u2013 Cryptographic Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075 Overview \u2693\ufe0e Shifting up one position to #2, previously known as Sensitive Data Exposure , which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included are CWE-259: Use of Hard-coded Password , CWE-327: Broken or Risky Crypto Algorithm , and CWE-331 Insufficient Entropy . Description \u2693\ufe0e The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. Are any old or weak cryptographic algorithms or protocols used either by default or in older code? Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories? Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing? Is the received server certificate and the trust chain properly validated? Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate? Are passwords being used as cryptographic keys in absence of a password base key derivation function? Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability? Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed? Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use? Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks? See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10) How to Prevent \u2693\ufe0e Do the following, at a minimum, and consult the references: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Apply required security controls as per the data classification. Do not use legacy protocols such as FTP and SMTP for transporting sensitive data. Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2. Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key. Always use authenticated encryption instead of just encryption. Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function. Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security. Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 . Verify independently the effectiveness of configuration and settings. Example Attack Scenarios \u2693\ufe0e Scenario #1 : An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text. Scenario #2 : A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer. Scenario #3 : The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted. References \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography List of Mapped CWEs \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"A02 Cryptographic Failures"},{"location":"A02_2021-Cryptographic_Failures/#a022021-cryptographic-failures","text":"","title":"A02:2021 \u2013 Cryptographic Failures"},{"location":"A02_2021-Cryptographic_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075","title":"Factors"},{"location":"A02_2021-Cryptographic_Failures/#overview","text":"Shifting up one position to #2, previously known as Sensitive Data Exposure , which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included are CWE-259: Use of Hard-coded Password , CWE-327: Broken or Risky Crypto Algorithm , and CWE-331 Insufficient Entropy .","title":"Overview"},{"location":"A02_2021-Cryptographic_Failures/#description","text":"The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. Are any old or weak cryptographic algorithms or protocols used either by default or in older code? Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories? Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing? Is the received server certificate and the trust chain properly validated? Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate? Are passwords being used as cryptographic keys in absence of a password base key derivation function? Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability? Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed? Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use? Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks? See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)","title":"Description"},{"location":"A02_2021-Cryptographic_Failures/#how-to-prevent","text":"Do the following, at a minimum, and consult the references: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Apply required security controls as per the data classification. Do not use legacy protocols such as FTP and SMTP for transporting sensitive data. Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2. Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key. Always use authenticated encryption instead of just encryption. Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function. Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security. Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 . Verify independently the effectiveness of configuration and settings.","title":"How to Prevent"},{"location":"A02_2021-Cryptographic_Failures/#example-attack-scenarios","text":"Scenario #1 : An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text. Scenario #2 : A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer. Scenario #3 : The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted.","title":"Example Attack Scenarios"},{"location":"A02_2021-Cryptographic_Failures/#references","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"References"},{"location":"A02_2021-Cryptographic_Failures/#list-of-mapped-cwes","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"List of Mapped CWEs"},{"location":"A03_2021-Injection/","text":"A03:2021 \u2013 Injection \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078 Overview \u2693\ufe0e Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurances. Notable Common Weakness Enumerations (CWEs) included are CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path . Description \u2693\ufe0e An application is vulnerable to attack when: User-supplied data is not validated, filtered, or sanitized by the application. Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include static (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD pipeline to identify introduced injection flaws before production deployment. How to Prevent \u2693\ufe0e Preventing injection requires keeping data separate from commands and queries: The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec(). Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications. For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software. Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection. Example Attack Scenarios \u2693\ufe0e Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Similarly, an application\u2019s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In both cases, the attacker modifies the \u2018id\u2019 parameter value in their browser to send: \u2018 or \u20181\u2019=\u20191. For example: http://example.com/app/accountView?id=' or '1'='1 This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures. References \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection List of Mapped CWEs \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"A03 Injection"},{"location":"A03_2021-Injection/#a032021-injection","text":"","title":"A03:2021 \u2013 Injection"},{"location":"A03_2021-Injection/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078","title":"Factors"},{"location":"A03_2021-Injection/#overview","text":"Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurances. Notable Common Weakness Enumerations (CWEs) included are CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path .","title":"Overview"},{"location":"A03_2021-Injection/#description","text":"An application is vulnerable to attack when: User-supplied data is not validated, filtered, or sanitized by the application. Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include static (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD pipeline to identify introduced injection flaws before production deployment.","title":"Description"},{"location":"A03_2021-Injection/#how-to-prevent","text":"Preventing injection requires keeping data separate from commands and queries: The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec(). Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications. For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software. Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.","title":"How to Prevent"},{"location":"A03_2021-Injection/#example-attack-scenarios","text":"Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Similarly, an application\u2019s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In both cases, the attacker modifies the \u2018id\u2019 parameter value in their browser to send: \u2018 or \u20181\u2019=\u20191. For example: http://example.com/app/accountView?id=' or '1'='1 This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures.","title":"Example Attack Scenarios"},{"location":"A03_2021-Injection/#references","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"References"},{"location":"A03_2021-Injection/#list-of-mapped-cwes","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"List of Mapped CWEs"},{"location":"A04_2021-Insecure_Design/","text":"A04:2021 \u2013 Insecure Design \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691 Overview \u2693\ufe0e A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) include CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials . Description \u2693\ufe0e Insecure design is a broad category representing different weaknesses, expressed as \u201cmissing or ineffective control design.\u201d Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required. Requirements and Resource Management \u2693\ufe0e Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities. Secure Design \u2693\ufe0e Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software. Secure Development Lifecycle \u2693\ufe0e Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the OWASP Software Assurance Maturity Model (SAMM) to help structure your secure software development efforts. How to Prevent \u2693\ufe0e Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls Establish and use a library of secure design patterns or paved road ready to use components Use threat modeling for critical authentication, access control, business logic, and key flows Integrate security language and controls into user stories Integrate plausibility checks at each tier of your application (from frontend to backend) Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases and misuse-cases for each tier of your application. Segregate tier layers on the system and network layers depending on the exposure and protection needs Segregate tenants robustly by design throughout all tiers Limit resource consumption by user or service Example Attack Scenarios \u2693\ufe0e Scenario #1: A credential recovery workflow might include \u201cquestions and answers,\u201d which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design. Scenario #2: A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income. Scenario #3: A retail chain\u2019s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions. References \u2693\ufe0e OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling List of Mapped CWEs \u2693\ufe0e CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"A04 Insecure Design"},{"location":"A04_2021-Insecure_Design/#a042021-insecure-design","text":"","title":"A04:2021 \u2013 Insecure Design"},{"location":"A04_2021-Insecure_Design/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691","title":"Factors"},{"location":"A04_2021-Insecure_Design/#overview","text":"A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) include CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials .","title":"Overview"},{"location":"A04_2021-Insecure_Design/#description","text":"Insecure design is a broad category representing different weaknesses, expressed as \u201cmissing or ineffective control design.\u201d Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.","title":"Description"},{"location":"A04_2021-Insecure_Design/#requirements-and-resource-management","text":"Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.","title":"Requirements and Resource Management"},{"location":"A04_2021-Insecure_Design/#secure-design","text":"Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.","title":"Secure Design"},{"location":"A04_2021-Insecure_Design/#secure-development-lifecycle","text":"Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the OWASP Software Assurance Maturity Model (SAMM) to help structure your secure software development efforts.","title":"Secure Development Lifecycle"},{"location":"A04_2021-Insecure_Design/#how-to-prevent","text":"Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls Establish and use a library of secure design patterns or paved road ready to use components Use threat modeling for critical authentication, access control, business logic, and key flows Integrate security language and controls into user stories Integrate plausibility checks at each tier of your application (from frontend to backend) Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases and misuse-cases for each tier of your application. Segregate tier layers on the system and network layers depending on the exposure and protection needs Segregate tenants robustly by design throughout all tiers Limit resource consumption by user or service","title":"How to Prevent"},{"location":"A04_2021-Insecure_Design/#example-attack-scenarios","text":"Scenario #1: A credential recovery workflow might include \u201cquestions and answers,\u201d which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design. Scenario #2: A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income. Scenario #3: A retail chain\u2019s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions.","title":"Example Attack Scenarios"},{"location":"A04_2021-Insecure_Design/#references","text":"OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling","title":"References"},{"location":"A04_2021-Insecure_Design/#list-of-mapped-cwes","text":"CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"List of Mapped CWEs"},{"location":"A05_2021-Security_Misconfiguration/","text":"A05:2021 \u2013 Security Misconfiguration \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789 Overview \u2693\ufe0e Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference . Description \u2693\ufe0e The application might be vulnerable if the application is: Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). Default accounts and their passwords are still enabled and unchanged. Error handling reveals stack traces or other overly informative error messages to users. For upgraded systems, the latest security features are disabled or not configured securely. The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. The server does not send security headers or directives, or they are not set to secure values. The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components ). Without a concerted, repeatable application security configuration process, systems are at a higher risk. How to Prevent \u2693\ufe0e Secure installation processes should be implemented, including: A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components ). Review cloud storage permissions (e.g., S3 bucket permissions). A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). Sending security directives to clients, e.g., Security Headers. An automated process to verify the effectiveness of the configurations and settings in all environments. Example Attack Scenarios \u2693\ufe0e Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. Scenario #4: A cloud service provider (CSP) has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed. References \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V14 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration List of Mapped CWEs \u2693\ufe0e CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"A05 Security Misconfiguration"},{"location":"A05_2021-Security_Misconfiguration/#a052021-security-misconfiguration","text":"","title":"A05:2021 \u2013 Security Misconfiguration"},{"location":"A05_2021-Security_Misconfiguration/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789","title":"Factors"},{"location":"A05_2021-Security_Misconfiguration/#overview","text":"Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference .","title":"Overview"},{"location":"A05_2021-Security_Misconfiguration/#description","text":"The application might be vulnerable if the application is: Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). Default accounts and their passwords are still enabled and unchanged. Error handling reveals stack traces or other overly informative error messages to users. For upgraded systems, the latest security features are disabled or not configured securely. The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. The server does not send security headers or directives, or they are not set to secure values. The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components ). Without a concerted, repeatable application security configuration process, systems are at a higher risk.","title":"Description"},{"location":"A05_2021-Security_Misconfiguration/#how-to-prevent","text":"Secure installation processes should be implemented, including: A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components ). Review cloud storage permissions (e.g., S3 bucket permissions). A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). Sending security directives to clients, e.g., Security Headers. An automated process to verify the effectiveness of the configurations and settings in all environments.","title":"How to Prevent"},{"location":"A05_2021-Security_Misconfiguration/#example-attack-scenarios","text":"Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. Scenario #4: A cloud service provider (CSP) has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed.","title":"Example Attack Scenarios"},{"location":"A05_2021-Security_Misconfiguration/#references","text":"OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V14 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration","title":"References"},{"location":"A05_2021-Security_Misconfiguration/#list-of-mapped-cwes","text":"CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"List of Mapped CWEs"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/","text":"A06:2021 \u2013 Vulnerable and Outdated Components \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 Overview \u2693\ufe0e It was #2 from the Top 10 community survey but also had enough data to make the Top 10 via data. Vulnerable Components are a known issue that we struggle to test and assess risk and is the only category to not have any Common Weakness Enumerations (CWEs) mapped to the included CWEs, so a default exploits/impact weight of 5.0 is used. Notable CWEs included are CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017. Description \u2693\ufe0e You are likely vulnerable: If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities. If software developers do not test the compatibility of updated, upgraded, or patched libraries. If you do not secure the components\u2019 configurations (see A05:2021-Security Misconfiguration). How to Prevent \u2693\ufe0e There should be a patch management process in place to: Remove unused dependencies, unnecessary features, components, files, and documentation. Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use. Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures). Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue. Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio. Example Attack Scenarios \u2693\ufe0e Scenario #1: Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are: CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches. While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices). There are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014. References \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf List of Mapped CWEs \u2693\ufe0e CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"A06 Vulnerable and Outdated Components"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#a062021-vulnerable-and-outdated-components","text":"","title":"A06:2021 \u2013 Vulnerable and Outdated Components"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"Factors"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#overview","text":"It was #2 from the Top 10 community survey but also had enough data to make the Top 10 via data. Vulnerable Components are a known issue that we struggle to test and assess risk and is the only category to not have any Common Weakness Enumerations (CWEs) mapped to the included CWEs, so a default exploits/impact weight of 5.0 is used. Notable CWEs included are CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017.","title":"Overview"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#description","text":"You are likely vulnerable: If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities. If software developers do not test the compatibility of updated, upgraded, or patched libraries. If you do not secure the components\u2019 configurations (see A05:2021-Security Misconfiguration).","title":"Description"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#how-to-prevent","text":"There should be a patch management process in place to: Remove unused dependencies, unnecessary features, components, files, and documentation. Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use. Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures). Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue. Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio.","title":"How to Prevent"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#example-attack-scenarios","text":"Scenario #1: Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are: CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches. While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices). There are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014.","title":"Example Attack Scenarios"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#references","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"References"},{"location":"A06_2021-Vulnerable_and_Outdated_Components/#list-of-mapped-cwes","text":"CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"List of Mapped CWEs"},{"location":"A07_2021-Identification_and_Authentication_Failures/","text":"A07:2021 \u2013 Identification and Authentication Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897 Overview \u2693\ufe0e Previously known as Broken Authentication , this category slid down from the second position and now includes Common Weakness Enumerations (CWEs) related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation . Description \u2693\ufe0e Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin\". Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures ). Has missing or ineffective multi-factor authentication. Exposes session identifier in the URL. Reuse session identifier after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity. How to Prevent \u2693\ufe0e Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts. Example Attack Scenarios \u2693\ufe0e Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated. References \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets List of Mapped CWEs \u2693\ufe0e CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"A07 Identification and Authentication Failures"},{"location":"A07_2021-Identification_and_Authentication_Failures/#a072021-identification-and-authentication-failures","text":"","title":"A07:2021 \u2013 Identification and Authentication Failures"},{"location":"A07_2021-Identification_and_Authentication_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897","title":"Factors"},{"location":"A07_2021-Identification_and_Authentication_Failures/#overview","text":"Previously known as Broken Authentication , this category slid down from the second position and now includes Common Weakness Enumerations (CWEs) related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation .","title":"Overview"},{"location":"A07_2021-Identification_and_Authentication_Failures/#description","text":"Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin\". Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures ). Has missing or ineffective multi-factor authentication. Exposes session identifier in the URL. Reuse session identifier after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.","title":"Description"},{"location":"A07_2021-Identification_and_Authentication_Failures/#how-to-prevent","text":"Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts.","title":"How to Prevent"},{"location":"A07_2021-Identification_and_Authentication_Failures/#example-attack-scenarios","text":"Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated.","title":"Example Attack Scenarios"},{"location":"A07_2021-Identification_and_Authentication_Failures/#references","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"References"},{"location":"A07_2021-Identification_and_Authentication_Failures/#list-of-mapped-cwes","text":"CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"List of Mapped CWEs"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/","text":"A08:2021 \u2013 Software and Data Integrity Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152 Overview \u2693\ufe0e A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data . Description \u2693\ufe0e Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization. How to Prevent \u2693\ufe0e Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data Example Attack Scenarios \u2693\ufe0e Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server. References \u2693\ufe0e [OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent List of Mapped CWEs \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"A08 Software and Data Integrity Failures"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#a082021-software-and-data-integrity-failures","text":"","title":"A08:2021 \u2013 Software and Data Integrity Failures"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152","title":"Factors"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#overview","text":"A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data .","title":"Overview"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#description","text":"Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization.","title":"Description"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#how-to-prevent","text":"Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data","title":"How to Prevent"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#example-attack-scenarios","text":"Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server.","title":"Example Attack Scenarios"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#references","text":"[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent","title":"References"},{"location":"A08_2021-Software_and_Data_Integrity_Failures/#list-of-mapped-cwes","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"List of Mapped CWEs"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/","text":"A09:2021 \u2013 Security Logging and Monitoring Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242 Overview \u2693\ufe0e Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File . Description \u2693\ufe0e Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ). How to Prevent \u2693\ufe0e Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting. Example Attack Scenarios \u2693\ufe0e Scenario #1: A children's health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator. References \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events List of Mapped CWEs \u2693\ufe0e CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"A09 Security Logging and Monitoring Failures"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#a092021-security-logging-and-monitoring-failures","text":"","title":"A09:2021 \u2013 Security Logging and Monitoring Failures"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242","title":"Factors"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#overview","text":"Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File .","title":"Overview"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#description","text":"Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ).","title":"Description"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#how-to-prevent","text":"Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting.","title":"How to Prevent"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#example-attack-scenarios","text":"Scenario #1: A children's health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator.","title":"Example Attack Scenarios"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#references","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"References"},{"location":"A09_2021-Security_Logging_and_Monitoring_Failures/#list-of-mapped-cwes","text":"CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"List of Mapped CWEs"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/","text":"A10:2021 \u2013 Server-Side Request Forgery (SSRF) \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Overview \u2693\ufe0e This category is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of Common Weakness Enumerations (CWEs) for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition. Description \u2693\ufe0e SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures. How to Prevent \u2693\ufe0e Developers can prevent SSRF by implementing some or all the following defense in depth controls: From Network layer \u2693\ufe0e Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic. Hints: ~ Establish an ownership and a lifecycle for firewall rules based on applications. ~ Log all accepted and blocked network flows on firewalls (see A09:2021-Security Logging and Monitoring Failures ). From Application layer: \u2693\ufe0e Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists. Additional Measures to consider: \u2693\ufe0e Don't deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost) For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs Example Attack Scenarios \u2693\ufe0e Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers \u2013 If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure \u2013 Attackers can access local files such as or internal services to gain sensitive information such as file:///etc/passwd</span> and http://localhost:28017/ . Scenario #3: Access metadata storage of cloud services \u2013 Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS). References \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! List of Mapped CWEs \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10 Server Side Request Forgery (SSRF)"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#a102021-server-side-request-forgery-ssrf","text":"","title":"A10:2021 \u2013 Server-Side Request Forgery (SSRF)"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Factors"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#overview","text":"This category is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of Common Weakness Enumerations (CWEs) for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition.","title":"Overview"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#description","text":"SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.","title":"Description"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#how-to-prevent","text":"Developers can prevent SSRF by implementing some or all the following defense in depth controls:","title":"How to Prevent"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#from-network-layer","text":"Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic. Hints: ~ Establish an ownership and a lifecycle for firewall rules based on applications. ~ Log all accepted and blocked network flows on firewalls (see A09:2021-Security Logging and Monitoring Failures ).","title":"From Network layer"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#from-application-layer","text":"Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists.","title":"From Application layer:"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#additional-measures-to-consider","text":"Don't deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost) For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs","title":"Additional Measures to consider:"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#example-attack-scenarios","text":"Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers \u2013 If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure \u2013 Attackers can access local files such as or internal services to gain sensitive information such as file:///etc/passwd</span> and http://localhost:28017/ . Scenario #3: Access metadata storage of cloud services \u2013 Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS).","title":"Example Attack Scenarios"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#references","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"References"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#list-of-mapped-cwes","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"List of Mapped CWEs"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/","text":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF) \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Vis\u00e3o Geral \u2693\ufe0e Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura. Descri\u00e7\u00e3o \u2693\ufe0e As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas. Como Previnir \u2693\ufe0e Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade: Para a Camada de Rede \u2693\ufe0e Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ). Para a Camada de Aplica\u00e7\u00e3o: \u2693\ufe0e Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o. Medidas Adicionais a Considerar: \u2693\ufe0e N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas. Cen\u00e1rio de exemplo de um ataque \u2693\ufe0e Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS). Refer\u00eancias \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista de CWEs mapeadas \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)    ![icon](assets/TOP_10_Icons_Final_SSRF.png)"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#a102021-falsificacao-de-solicitacao-do-lado-do-servidor-ssrf","text":"","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#fatores","text":"CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fatores"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#visao-geral","text":"Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura.","title":"Vis\u00e3o Geral"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#descricao","text":"As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas.","title":"Descri\u00e7\u00e3o"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#como-previnir","text":"Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade:","title":"Como Previnir"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-rede","text":"Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ).","title":"Para a Camada de Rede"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-aplicacao","text":"Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o.","title":"Para a Camada de Aplica\u00e7\u00e3o:"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#medidas-adicionais-a-considerar","text":"N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas.","title":"Medidas Adicionais a Considerar:"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#cenario-de-exemplo-de-um-ataque","text":"Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS).","title":"Cen\u00e1rio de exemplo de um ataque"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#referencias","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Refer\u00eancias"},{"location":"A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#lista-de-cwes-mapeadas","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista de CWEs mapeadas"},{"location":"A11_2021-Next_Steps/","text":"A11:2021 \u2013 Next Steps \u2693\ufe0e By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate. Code Quality issues \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References OWASP Code Review Guide Google Code Review Guide Denial of Service \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service Memory Management Errors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of attackers over the years. The attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function\u2019s return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker\u2019s data. References OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"Next Steps"},{"location":"A11_2021-Next_Steps/#a112021-next-steps","text":"By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate.","title":"A11:2021 \u2013 Next Steps"},{"location":"A11_2021-Next_Steps/#code-quality-issues","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References OWASP Code Review Guide Google Code Review Guide","title":"Code Quality issues"},{"location":"A11_2021-Next_Steps/#denial-of-service","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service","title":"Denial of Service"},{"location":"A11_2021-Next_Steps/#memory-management-errors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of attackers over the years. The attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function\u2019s return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker\u2019s data. References OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"Memory Management Errors"},{"location":"ar/assets/readme/","text":"","title":"Readme"},{"location":"ar/","text":"\u0645\u0642\u062f\u0645\u0629 \u2693\ufe0e \u0645\u0631\u062d\u0628\u0627\u064b \u0628\u0643\u0645 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 \u2693\ufe0e \u0645\u0631\u062d\u0628\u064b\u0627 \u0628\u0643\u0645 \u0641\u064a \u0623\u062d\u062f\u062b \u0625\u0635\u062f\u0627\u0631 \u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0648\u0647\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0634\u0643\u0644 \u062c\u062f\u064a\u062f \u062a\u0645\u0627\u0645\u064b\u0627 \u0648\u0645\u062f\u0639\u0645\u0629 \u0628\u0631\u0633\u0648\u0645\u0627\u062a \u0627\u0646\u0641\u0648\u062c\u0631\u0627\u0641\u064a\u0643 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0637\u064a\u0639 \u0637\u0628\u0627\u0639\u062a\u0647\u0627 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0648\u064a\u0645\u0643\u0646 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u064a\u0647\u0627 \u0645\u0646 \u0635\u0641\u062d\u062a\u0646\u0627 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629. \u0643\u0645\u0627 \u0646\u062a\u0642\u062f\u0645 \u0628\u062c\u0632\u064a\u0644 \u0627\u0644\u0634\u0643\u0631 \u0648\u0627\u0644\u0639\u0631\u0641\u0627\u0646 \u0644\u0643\u0644\u0651 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0628\u0641\u0643\u0631\u0629\u060c \u0623\u0648 \u0648\u0642\u062a\u060c \u0623\u0648 \u062c\u0647\u062f \u0641\u064a \u0633\u0628\u064a\u0644 \u0625\u0646\u062c\u0627\u062d \u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0644\u060c \u0645\u0645\u062a\u0646\u0651\u0648\u0646 \u0644\u0645\u0627 \u0628\u0630\u0644\u062a\u0645\u0648\u0647\u060c \u0648\u0644\u0645\u0627 \u062d\u0642\u0651\u0642\u0646\u0627\u0647 \u0628\u0641\u0636\u0644 \u0627\u0644\u0644\u0647 \u062b\u0645 \u0628\u0645\u0633\u0627\u0639\u062f\u062a\u0643\u0645 \u0648\u062f\u0639\u0645\u0643\u0645.. \u0645\u0627 \u0647\u064a \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0637\u0631\u0623\u062a \u0639\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 \u2693\ufe0e \u0628\u0634\u0643\u0644 \u0639\u0627\u0645 \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 3 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062c\u062f\u064a\u062f\u0629 \u0648 4 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u060c \u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0627\u0633\u0645 \u0648\u0643\u0630\u0644\u0643 \u0627\u0644\u0646\u0637\u0627\u0642 \u0627\u0644\u062e\u0627\u0635 \u0628\u0647\u0627\u060c \u0648\u0628\u0639\u0636 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062f\u0645\u062c \u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0645\u0639 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 A01:2021-\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u062d\u062a\u0644 (\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644) \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0641\u064a \u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u062e\u0627\u0645\u0633\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0646 \u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637 \u0628\u0640 34 CWEs \u0647\u0648 \u0645\u0646 \u0623\u0643\u062b\u0631 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. A02:2021-\u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u064a\u0623\u062a\u064a \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 #2 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629\u060c \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0643\u0648\u0646 \u0623\u0633\u0628\u0627\u0628\u0647\u0627 \u0645\u062a\u0639\u062f\u062f\u0629 \u062f\u0648\u0646 \u0623\u0646 \u062a\u0639\u0648\u062f \u062c\u0645\u064a\u0639\u0647\u0627 \u0644\u0633\u0628\u0628 \u062c\u0630\u0631\u064a \u0648\u0627\u062d\u062f\u060c \u0648\u064a\u0623\u062a\u064a \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0647\u0646\u0627 \u0628\u0634\u0643\u0644 \u0645\u062a\u062c\u062f\u062f \u0639\u0644\u0649 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0641\u064a \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u062a\u064a \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u0624\u062f\u064a \u0625\u0644\u0649 \u0643\u0634\u0641 \u063a\u064a\u0631 \u0645\u0635\u0631\u0651\u062d \u0628\u0647 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0623\u0646\u0638\u0645\u0629. A03:2021-\u0627\u0644\u062d\u0642\u0646 \u062a\u062a\u0631\u0627\u062c\u0639 \u0627\u0644\u062d\u0642\u0646 \u0627\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 3. \u062d\u064a\u062b \u0627\u0646\u0647 \u062a\u0645 \u0627\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646. \u0627\u0646 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 33 CWEs \u062a\u0639\u062a\u0628\u0631 \u062b\u0627\u0646\u064a \u0627\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0625\u0635\u0627\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u0647\u0627. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0627\u0646 \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0645 \u062f\u0645\u062c\u0647\u0627 \u0647\u0646\u0627 \u0645\u0639 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629. A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0647\u0648 \u062a\u0635\u0646\u064a\u0641 \u062c\u062f\u064a\u062f \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0639\u064a\u0648\u0628 \u0648\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u062a\u0635\u0645\u064a\u0645. \u0648\u0625\u0630\u0627 \u0623\u0631\u062f\u0646\u0627 \u0627\u0644\u062a\u062d\u0631\u0643 \u0644\u0625\u062b\u0628\u0627\u062a \u0623\u0647\u0645\u064a\u0629 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0641\u0646\u062d\u0646 \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0648\u0643\u0630\u0644\u0643 \u0648\u062c\u0648\u062f \u0628\u0646\u064a\u0629 \u062a\u062d\u062a\u064a\u0629 \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0648\u0627\u0644\u0636\u0648\u0627\u0628\u0637. A05:2021- \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0647\u0648 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6 \u0627\u0644\u0622\u0646 \u0646\u0631\u0627\u0647 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 #4\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 90% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0648\u062c\u062f \u0628\u0647\u0627 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u062d\u0629. \u0648\u0647\u0630\u0627 \u064a\u062d\u062f\u062b \u0645\u0639 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0644\u0632\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631 \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u062e\u0637\u0623 \u0641\u064a \u0627\u0631\u062a\u0641\u0627\u0639\u060c \u0648\u0647\u0630\u0627 \u0627\u0644\u0630\u064a \u062c\u0639\u0644 (\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629) \u062a\u0631\u062a\u0641\u0639 \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0625\u0644\u0649 \u0627\u0644\u0631\u0627\u0628\u0639\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646\u0647 \u062a\u0645 \u0636\u0645 \" XML External Entities XXE\" \u0644\u0647\u0630\u0627 \u0627\u0644\u0646\u0648\u0639 \u0645\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629. A06:2021-\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0627\u0644\u0645\u062d\u062f\u062b\u0629 \u0633\u0627\u0628\u0642\u064b\u0627 \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0640 \u201c\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0648\u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0630\u0627\u062a \u062b\u063a\u0631\u0627\u062a \u0645\u0639\u0631\u0648\u0641\u0629\". \u0648\u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0639\u0644\u0649 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0643\u0627\u0646\u062a \u0647\u064a #2 \u0623\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u062e\u0637\u0631 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #9 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 #2017 \u0627\u0631\u062a\u0641\u0639\u062a \u0641\u064a \u0625\u0635\u062f\u0627\u0631 #2021 \u0625\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0645\u0639\u0627\u064a\u064a\u0631 CVEs \u0623\u0648 CWEs \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0628\u0627\u0644\u062e\u0637\u0648\u0631\u0629. \u0648\u0644\u0630\u0644\u0643 \u064a\u062a\u0645 \u062a\u0635\u0646\u064a\u0641 \u062e\u0637\u0648\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0647\u0648 5.0. A07:2021-\u0627\u0644\u0647\u0648\u064a\u0629 \u0648 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \"\u0636\u0639\u0641 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629\" \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0643\u0630\u0644\u0643 \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #2. \u0648\u0628\u0639\u062f \u0639\u0645\u0644\u064a\u0629 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u0648\u062a\u0633\u0645\u064a\u062a\u0647\u0627 \u0628\u0640 \u201c\u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642. \u0648\u0643\u0645\u0627 \u0646\u0642\u0648\u0644 \u0623\u0646 \u0632\u064a\u0627\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u064a\u064a\u0631 \u0623\u062f\u0651\u062a \u0625\u0644\u0649 \u062a\u0642\u0644\u064a\u0644 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0648\u0644\u0643\u0646 \u0644\u064a\u0633 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0644\u0630\u0644\u0643 \u0646\u0631\u0627\u0647\u0627 \u0647\u0646\u0627 \u0645\u0646 \u0636\u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. A08:2021- \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647\u0627 \u062d\u062f\u064a\u062b\u064b\u0627 \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 2021. \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0628\u0634\u0643\u0644 \u0643\u0628\u064a\u0631 \u0639\u0644\u0649 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0639 \u0627\u0644\u062a\u0623\u0643\u062f \u0639\u0644\u0649 \u0639\u062f\u0645 \u062a\u0623\u062b\u0631 \u0633\u0644\u0627\u0645\u0629 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 CI/CD. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062d\u062a\u0645\u0644\u0629 \u062d\u0633\u0628 \u062a\u0635\u0646\u064a\u0641 CVE/CVSS \u0648\u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0645\u0639 CWEs \u0646\u062c\u062f \u0623\u0646 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u062e\u0637\u0631 \u0647\u0648 10 \u0648\u064a\u0639\u062a\u0628\u0631 \u0645\u0631\u062a\u0641\u0639 \u062c\u062f\u064b\u0627. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \"Insecure Deserialization\" \u0623\u0635\u0628\u062d\u062a \u062c\u0632\u0621 \u0645\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641. A09:2021-\u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0633\u0627\u0628\u0642\u064b\u0627 \u0628\u0640 \u201c\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0628\u0634\u0643\u0644 \u063a\u064a\u0631 \u0635\u062d\u064a\u062d. \u0648\u0628\u0639\u062f \u0639\u0645\u0644 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062c\u0631\u0627\u0621\u0647\u0627 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u062d\u062a\u0644\u062a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 3 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639. \u0648\u0627\u0644\u0630\u064a \u062c\u0639\u0644\u0647\u0627 \u062a\u0635\u0639\u062f \u0645\u0631\u062a\u0628\u0629 \u0648\u0627\u062d\u062f\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 10. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0641\u064a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0627\u0644\u062a\u064a \u062a\u0645 \u0636\u0645\u0647\u0627 \u0647\u0646\u0627. \u0648\u062d\u064a\u0646\u0645\u0627 \u0646\u0631\u0649 CVE/CVSS \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0648\u0627\u0636\u062d \u0648\u0644\u0643\u0646 \u0645\u0639 \u0627\u0644\u0642\u0635\u0648\u0631 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u064a \u062a\u0634\u0643\u0644 \u062a\u0623\u062b\u064a\u0631\u064b\u0627 \u0628\u0627\u0644\u063a\u064b\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0623\u0646\u0638\u0645\u0629\u060c \u0648\u0627\u0644\u062a\u0646\u0628\u064a\u0647 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u062d\u0648\u0627\u062f\u062b \u0623\u0648 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062c\u0646\u0627\u0626\u064a \u0627\u0644\u0631\u0642\u0645\u064a. A10:2021-\u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0631\u0642\u0645 #1. \u0648\u062a\u0638\u0647\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0628 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0623\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0639\u062f\u0644 \u0627\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u0647 \u0641\u0648\u0642 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0645\u0639 \u0627\u0631\u062a\u0641\u0627\u0639 \u0645\u0646\u062e\u0641\u0636. \u0648\u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647 \u0628\u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644. \u0648\u064a\u0641\u064a\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0641\u064a \u0627\u0644\u0645\u062c\u0627\u0644 \u0623\u0646 \u0648\u062c\u0648\u062f \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0636\u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0647\u0648 \u0623\u0645\u0631 \u0645\u0647\u0645 \u062c\u062f\u064b\u0627 \u062d\u062a\u0649 \u0648\u0625\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u063a\u064a\u0631 \u0645\u0643\u062a\u0645\u0644\u0629 \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u062d\u0627\u0644\u064a. \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629 \u2693\ufe0e \u0644\u0623\u0648\u0644 \u0645\u0631\u0629 \u064a\u062a\u0645 \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u064a\u062c\u0628 \u0627\u0644\u062a\u0646\u0648\u064a\u0647 \u0623\u0646\u0647\u0627 \u0644\u0627 \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u064f\u0644\u064a. \u062d\u064a\u062b \u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u062b\u0646\u064a\u0646 \u0645\u0646\u0647\u0645 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u0630\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647 \u0641\u064a \u0646\u0637\u0627\u0642 \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0648\u062a\u0642\u0648\u0645 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0628\u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0623\u064a \u0645\u0635\u0627\u062f\u0631 \u0623\u062e\u0631\u0649 \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0623\u0646 \u0627\u0644\u0628\u0627\u062d\u062b\u064a\u0646 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0633\u062a\u063a\u0631\u0642\u0648\u0646 \u0648\u0642\u062a \u0648\u062c\u0647\u062f \u0643\u0628\u064a\u0631 \u0641\u064a \u0625\u064a\u062c\u0627\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0623\u0648 \u0637\u0631\u0642 \u062c\u062f\u064a\u062f\u0629 \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627. \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u064a\u0633\u062a\u063a\u0631\u0642 \u0648\u0642\u062a \u0623\u0643\u0628\u0631 \u0648\u0642\u062f \u062a\u0635\u0644 \u0625\u0644\u0649 \u0633\u0646\u0648\u0627\u062a. \u0648\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062a\u0648\u0627\u0632\u0646 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u062f\u0641 \u0635\u0646\u0627\u0639\u0629 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0648\u062c\u064a\u0647 \u0623\u0633\u0626\u0644\u0629 \u0644\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0641\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u062a\u0638\u0647\u0631\u0647\u0627 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0628\u0639\u0636 \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062c\u0648\u0647\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0639\u062a\u0645\u0627\u062f\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0644\u0645\u0648\u0627\u0635\u0644\u0629 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0645\u062a\u0651\u0628\u0639\u0629 \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. \u0643\u064a\u0641 \u064a\u062a\u0645 \u062a\u0646\u0638\u064a\u0645 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u2693\ufe0e \u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0648\u0647\u0646\u0627 \u0645\u0644\u062e\u0635 \u0644\u0645\u0627 \u062a\u0645 \u062a\u063a\u064a\u0631\u0647 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062a\u0631\u0643\u0632 \u0627\u0644\u062c\u0647\u0648\u062f \u0627\u0644\u0645\u0628\u0630\u0648\u0644\u0629 \u0641\u064a \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CWEs \u0628\u0639\u062f\u062f 30 \u0645\u062c\u0627\u0644 \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0627\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u062a\u062d\u062a\u0627\u062c \u0627\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0646\u062a\u0627\u0626\u062c \u0625\u0636\u0627\u0641\u064a\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0623\u0646\u0647\u0627 \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 30 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 CWEs \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0648\u0642\u062f \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0627\u0644\u0646\u0638\u0631 \u0641\u064a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062a\u0641\u0631\u0639\u0629 \u0645\u0646\u0647\u0627 \u0648\u0633\u064a\u0643\u0648\u0646 \u0641\u064a \u0646\u0637\u0627\u0642 \u0645\u062d\u062f\u0648\u062f \u0648\u0636\u064a\u0651\u0642. \u0648\u062a\u0628\u0639\u064b\u0627 \u0644\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u0639\u062a\u0627\u062f\u0629 \u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u062f\u0648\u0646 \u0623\u064a \u0642\u064a\u0648\u062f \u0639\u0644\u0649 CWEs. \u0648\u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0639\u062f\u062f \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0644\u0633\u0646\u0648\u0627\u062a \u0645\u062d\u062f\u062f\u0629 (\u0628\u062f\u0621\u064b\u0627 \u0645\u0646 \u0639\u0627\u0645 2017)\u060c \u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062a\u0642\u064a\u064a\u0645\u0647\u0627 \u0628\u0625\u0635\u0627\u0628\u062a\u0647\u0627 \u0628\u0623\u062d\u062f CWEs \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u062a\u0633\u0645\u062d \u0644\u0646\u0627 \u0647\u0630\u0647 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u062a\u0635\u0646\u064a\u0641\u0627\u062a CWEs. \u0645\u0639 \u0627\u0644\u0623\u062e\u0630 \u0628\u0639\u064a\u0646 \u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0623\u0646\u0646\u0627 \u062a\u062c\u0627\u0647\u0644\u0646\u0627 \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0644\u0623\u0633\u0628\u0627\u0628 \u0645\u0639\u064a\u0651\u0646\u0629\u060c \u0648\u0623\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062d\u0627\u0644\u0627\u062a \u064a\u0643\u0648\u0646 \u0636\u0631\u0648\u0631\u064a\u064b\u0627 \u0627\u0644\u0623\u062e\u0630 \u0628\u0647 \u0648\u0627\u0644\u0630\u064a \u0642\u062f \u064a\u0624\u062b\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0646\u062a\u0634\u0631 \u0648\u0645\u0634\u0647\u0648\u0631 \u0648\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0643\u062b\u0631\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0645\u0647\u0645\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0635\u0627\u0628 \u0628\u0640 4 \u0645\u0646 CWEs \u0623\u0648 4,000 \u0641\u0647\u0630\u0627 \u0644\u0627 \u064a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0622\u0644\u064a\u0629 \u0627\u062d\u062a\u0633\u0627\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u062f\u064a\u0646\u0627. \u0648\u0644\u0642\u062f \u0643\u0627\u0646 \u0644\u062f\u064a\u0646\u0627 \u062d\u0648\u0627\u0644\u064a 400 CWEs \u062a\u0642\u0631\u064a\u0628\u064b\u0627 \u0648\u0642\u0645\u0646\u0627 \u0628\u062d\u0635\u0631\u0647\u0627 \u0648\u062a\u0642\u0644\u064a\u0644\u0647\u0627 \u0625\u0644\u0649 30 CWEs \u0648\u0630\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0646\u062e\u0637\u0637 \u0641\u064a \u0627\u0644\u0645\u0633\u062a\u0642\u0628\u0644 \u0641\u064a \u0625\u062c\u0631\u0627\u0621 \u062a\u062d\u0644\u064a\u0644\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u0648\u0627\u0644\u062a\u064a \u0628\u062f\u0648\u0631\u0647\u0627 \u0633\u062a\u0646\u0639\u0643\u0633 \u0639\u0644\u0649 \u0625\u0636\u0627\u0641\u0629 \u0628\u0639\u0636 \u0645\u0646 CWEs \u0648\u0642\u062f \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u063a\u064a\u064a\u0631 \u0643\u0630\u0644\u0643 \u0639\u0644\u0649 \u0647\u064a\u0643\u0644\u0629 \u0648\u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. \u0644\u0642\u062f \u0623\u0645\u0636\u064a\u0646\u0627 \u0639\u062f\u0629 \u0623\u0634\u0647\u0631 \u0641\u064a \u062a\u062c\u0645\u064a\u0639 \u0648\u062a\u0635\u0646\u064a\u0641 CWEs \u0648\u0643\u0627\u0646 \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0623\u0646 \u0646\u0633\u062a\u0645\u0631 \u0644\u0623\u0634\u0647\u0631 \u0625\u0636\u0627\u0641\u064a\u0629. \u0648\u0644\u0643\u0646 \u0643\u0627\u0646 \u0639\u0644\u064a\u0646\u0627 \u0627\u0644\u062a\u0648\u0642\u0641 \u0639\u0646\u062f \u0646\u0642\u0637\u0629 \u0645\u0627. \u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0623\u0646\u0648\u0627\u0639 \u0641\u064a CWEs \u0645\u0627 \u064a\u0633\u0645\u0649 \u0628\u0640 \u201c\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\". \u0648\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \"\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0643\u0641\u0634\u0644 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0623\u0648 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0648\u0627\u0644\u0630\u064a \u064a\u062a\u0645 \u0625\u0642\u0631\u0627\u0646\u0647 \u0628\u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0645\u062b\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0645\u0643\u0634\u0648\u0641\u0629 \u0623\u0648 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u0646\u0627 \u0623\u0646 \u0646\u0631\u0643\u0632 \u0639\u0644\u0649 \"\u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\" \u0642\u062f\u0631 \u0627\u0644\u0625\u0645\u0643\u0627\u0646 \u0648\u0630\u0644\u0643 \u0644\u062a\u0648\u0641\u0651\u0631 \u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0648\u0627\u0644\u0625\u0631\u0634\u0627\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u062a\u0644\u0627\u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0623\u0633\u0628\u0627\u0628. \u0643\u0645\u0627 \u0623\u0646 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0644\u064a\u0633 \u0645\u0641\u0647\u0648\u0645 \u062c\u062f\u064a\u062f\u060c \u0643\u0645\u0627 \u0623\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u062c\u0627\u0621\u062a \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0637 \u0645\u0627 \u0628\u064a\u0646 \"\u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\" \u0648\u0647\u0648 \u0627\u0644\u0623\u0633\u0644\u0648\u0628 \u0627\u0644\u0645\u062a\u0651\u0628\u0639 \u0641\u064a CWEs \u0643\u0630\u0644\u0643. \u0648\u0647\u062f\u0641\u0646\u0627 \u0623\u0646 \u0646\u0643\u0648\u0646 \u0639\u0644\u0649 \u062a\u0648\u0627\u0632\u0646 \u0628\u064a\u0646\u0647\u0645. \u0625\u0646 \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062d\u0633\u0628 CWEs \u0647\u0648 19.6 \u062d\u064a\u062b \u062d\u0635\u0644\u062a A10 \u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u0639\u0644\u0649 1 CWEs \u0648 40 CWEs \u0644\u0635\u0627\u0644\u062d A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 . \u0625\u0646 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0630\u064a \u062c\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0641\u064a\u062f \u062c\u062f\u064b\u0627 \u0644\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0645\u0646\u0627\u0641\u0639 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0639\u0644\u0649 CWEs \u0648\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0643\u0644\u063a\u0629 \u0639\u0645\u0644 \u0648\u0625\u0637\u0627\u0631. \u0643\u064a\u0641 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u062a\u0627\u0631\u0629 \u2693\ufe0e \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 2017\u060c \u062c\u0639\u0644\u0646\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0644\u062a\u062d\u062f\u064a\u062f \u0627\u062d\u062a\u0645\u0627\u0644\u064a\u062a\u0647\u0627. \u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0646\u0642\u0627\u0634 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0639\u0642\u0648\u062f \u0645\u0646 \u0627\u0644\u062e\u0628\u0631\u0627\u062a \u0641\u064a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u062d\u062a\u0645\u0627\u0644\u064a\u0629 \u062d\u062f\u0648\u062b\u0647\u0627 \u0623\u064a\u0636\u064b\u0627 \u0648\u0645\u0627 \u0647\u0648 \u0627\u0644\u0623\u062b\u0631 \u0627\u0644\u062a\u0642\u0646\u064a \u0627\u0644\u0630\u064a \u0633\u064a\u062d\u062f\u062b. \u0644\u0630\u0644\u0643 \u0623\u0631\u062f\u0646\u0627 \u0641\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062c\u062f\u064a\u062f\u0629 \u0645\u0646 \u0639\u0627\u0645 2021 \u0645\u0646 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0625\u0646 \u0623\u0645\u0643\u0646 \u0630\u0644\u0643. \u0642\u0645\u0646\u0627 \u0628\u062a\u0646\u0632\u064a\u0644 \" OWASP Dependency Check\" \u0648\u0627\u0633\u062a\u062e\u0631\u062c\u0646\u0627 \u0646\u062a\u0627\u0626\u062c CVSS \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0622\u062b\u0627\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u062c\u0645\u0639\u0647\u0627 \u0633\u0627\u0628\u0642\u0627\u064b \u0645\u0646 CWEs \u0630\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0642\u0629. \u0648\u0644\u0627 \u064a\u062e\u0641\u0649 \u0639\u0644\u064a\u0643\u0645 \u0627\u0646 \u0647\u0630\u0627 \u0627\u0644\u062c\u0647\u062f \u0645\u0646 \u0627\u0644\u0628\u062d\u062b \u0627\u062e\u0630 \u0642\u062f\u0631 \u0644\u0627 \u0628\u0627\u0633 \u0628\u0647 \u0644\u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0644\u062f\u064a\u0647\u0627 \u062f\u0631\u062c\u0627\u062a \u0645\u0646 CVSSv2 \u0643\u0630\u0644\u0643. \u0648\u0644\u0643\u0646 \u0647\u0646\u0627 \u0628\u0639\u0636 \u0627\u0644\u062e\u0644\u0644 \u0645\u0627 \u0628\u064a\u0646 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u0630\u064a \u064a\u062c\u0628 \u0645\u0639\u0627\u0644\u062c\u062a\u0647. \u0648\u0633\u0646\u0631\u0649 \u0641\u064a \u0627\u0644\u0642\u0631\u064a\u0628 \u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 CVSSv3. \u0648\u0646\u0648\u062f \u0627\u0646 \u0646\u0644\u0641\u062a \u0627\u0644\u0627\u0646\u062a\u0628\u0627\u0647 \u0627\u0646 \u0645\u0639\u0627\u062f\u0644\u0629 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u062f\u0631\u062c\u0627\u062a \u0645\u062a\u063a\u064a\u0631\u0629 \u0648\u0645\u062a\u062d\u062f\u062b\u0629. \u0641\u064a CVSSv2\u060c \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u064a\u0635\u0644 \u0627\u0644\u0623\u062b\u0631 \u0648 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u0649 10.0\u060c \u0648\u0644\u0643\u0646 \u0628\u0639\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0642\u062f \u062a\u0646\u062e\u0641\u0636 \u0627\u0644\u0649 60% \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 40% \u0644\u0644\u062a\u0623\u062b\u064a\u0631. \u0648\u0641\u064a CVSSv3 \u0643\u0627\u0646 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0639\u0644\u0649 \u0647\u0648 6.0 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 4.0 \u0644\u0644\u0623\u062b\u0631. \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0645\u062f\u0649 \u062b\u0642\u0644 \u0623\u062d\u062f\u0647\u0645\u0627. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 CVSSv3 \u0646\u0631\u0649 \u0627\u0646 \u0627\u0644\u0623\u062b\u0631 \u0627\u0631\u062a\u0641\u0639 \u062d\u0648\u0627\u0644\u064a \u0646\u0642\u0637\u0629 \u0648\u0646\u0635\u0641\u060c \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0646\u062e\u0641\u0636 \u0628\u0645\u0642\u062f\u0627\u0631 \u0627\u0644\u0646\u0635\u0641 \u0646\u0642\u0637\u0629 \u062a\u0642\u0631\u064a\u0628\u0627\u064b. \u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 125 \u0623\u0644\u0641 \u0633\u062c\u0644 \u0645\u0646 CVE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0641\u064a \u0645\u0646\u0635\u0629 NVD \u0648\u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0641\u064a \" OWASP Dependency Check\". \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 241 \u062a\u0635\u0646\u064a\u0641 \u0641\u0631\u0639\u064a \u0641\u0631\u064a\u062f \u0641\u064a CWEs \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a \u0623\u0643\u062b\u0631 \u0645\u0646 CVE. \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 62 \u0623\u0644\u0641 \u0645\u0646 CWE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a CVSSv3. \u0648\u0627\u0644\u062a\u064a \u062a\u0645\u062b\u0644 \u0646\u0635\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062d\u0635\u0631\u0647\u0627. \u0641\u064a \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0642\u0645\u0646\u0627 \u0628\u062d\u0633\u0627\u0628 \u0645\u062a\u0648\u0633\u0637 \u0646\u0642\u0627\u0637 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0628\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u062a\u0627\u0644\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062a\u062c\u0645\u064a\u0639 \u062f\u0631\u062c\u0627\u062a CVEs \u0645\u0639 CVSS \u0628\u0648\u0627\u0633\u0637\u0629 CWE \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0642\u064a\u064a\u0645 \u0643\u0644 \u0645\u0646 \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a CVSSv3 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0649 \u062c\u0645\u064a\u0639 \u0645\u0627 \u064a\u0648\u062c\u062f \u0641\u064a CVSSv2 \u0644\u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u0625\u062c\u0645\u0627\u0644\u064a. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0631\u0628\u0637 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0628\u0640 CWEs \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0630\u0644\u0643 \u0644\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0644\u062a\u0642\u064a\u064a\u0645 \u062f\u0631\u062c\u0627\u062a \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0643\u0630\u0644\u0643 \u0641\u064a \u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0628\u0646\u0627\u0621 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629. \u0644\u0645\u0627\u0630\u0627 \u0644\u0627 \u062a\u0643\u0648\u0646 \u0645\u062c\u0631\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0625\u062d\u0635\u0627\u0626\u064a\u0629 \u0628\u062d\u062a\u0629\u061f \u2693\ufe0e \u062a\u0642\u062a\u0635\u0631 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0639\u0644\u0649 \u0645\u0627 \u064a\u0645\u0643\u0646 \u0627\u062e\u062a\u0628\u0627\u0631\u0647 \u0628\u0634\u0643\u0644 \u0622\u0644\u064a. \u0648\u062d\u064a\u0646\u0645\u0627 \u062a\u062a\u062d\u062f\u062b \u0625\u0644\u0649 \u0623\u062d\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0627\u0644\u0645\u062d\u062a\u0631\u0641\u064a\u0646 \u0641\u064a \u0645\u062c\u0627\u0644 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0633\u064a\u062e\u0628\u0631\u0648\u0646\u0643 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a \u0648\u0627\u0644\u0627\u062d\u0635\u0627\u0626\u064a\u0627\u062a \u0644\u0627 \u064a\u0648\u062c\u062f \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0639\u062f. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0639\u0646\u062f \u0625\u0639\u062f\u0627\u062f \u0645\u0646\u0647\u062c\u064a\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u060c \u062a\u0633\u062a\u063a\u0631\u0642 \u0641\u062a\u0631\u0629 \u0645\u0646 \u0627\u0644\u0632\u0645\u0646 \u0648\u0645\u0646 \u062b\u0645 \u0623\u0646\u062a \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0648\u0642\u062a \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0623\u062a\u0645\u062a\u0629 \u062a\u0644\u0643 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0648\u062a\u0634\u063a\u064a\u0644\u0647\u0627 \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0629 \u0643\u0628\u064a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0633\u0628\u0628 \u0639\u062f\u0645 \u0627\u0643\u062a\u0645\u0627\u0644 \u0648\u0646\u0636\u062c \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0648\u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0644\u062a\u0635\u0646\u064a\u0641\u064a\u0646 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u0642\u0645\u0646\u0627 \u0628\u0639\u0645\u0644 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0645\u0645\u0627 \u064a\u0633\u0645\u062d \u0644\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0627\u0644\u062a\u0635\u0648\u064a\u062a \u0644\u0645\u0627 \u064a\u0631\u0648\u0646\u0647 \u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062d\u0642 \u0623\u0646 \u062a\u0636\u0627\u0641 \u0625\u0644\u0649 \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u064a\u0643\u0648\u0646 \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u062a\u0646\u0627\u0633\u0642\u0629 \u0623\u0648 \u063a\u064a\u0631 \u0645\u0646\u0627\u0633\u0628\u0629. \u0644\u0645\u0627\u0630\u0627 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u0627 \u0645\u0646 \u0627\u0644\u062a\u0643\u0631\u0627\u0631\u061f \u2693\ufe0e \u0647\u0646\u0627\u0643 \u062b\u0644\u0627\u062b\u0629 \u0645\u0635\u0627\u062f\u0631 \u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0646\u062d\u062f\u062f\u0647\u0627 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \u0627\u0644\u0627\u0646\u0633\u0627\u0646 \u064a\u0633\u0627\u0639\u062f \u0627\u0644\u0623\u062f\u0648\u0627\u062a (HaT) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0633\u0627\u0639\u062f \u0627\u0644\u0625\u0646\u0633\u0627\u0646 (TaH) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0645\u0646 \u063a\u064a\u0631 \u0623\u064a \u062a\u0639\u062f\u064a\u0644\u0627\u062a. \u062a\u0642\u0648\u0645 HaT \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0628\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0639\u0627\u0644\u064a. \u062d\u064a\u062b \u0627\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0628\u062d\u062b \u0639\u0646 \u0646\u0642\u0627\u0637 \u0636\u0639\u0641 \u0645\u062d\u062f\u062f\u0629 \u0645\u0639 \u062a\u062c\u0631\u0628\u0629 \u062c\u0645\u064a\u0639 \u0627\u0644\u0627\u062d\u062a\u0645\u0627\u0644\u0627\u062a \u0627\u0644\u0645\u062a\u0648\u0642\u0639\u0629 \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0629. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0639\u0627\u062f\u0629 \u0627\u0645\u0627 \u0627\u0646 \u062a\u0643\u0648\u0646 \u0645\u0646\u062e\u0641\u0636\u0629 \u0627\u0644\u062e\u0637\u0648\u0631\u0629 \u0627\u0648 \u0628\u0633\u064a\u0637\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0633\u0628\u0628 \u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0648 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u0635\u0641\u064a\u0629. \u0648\u0639\u0646\u062f\u0645\u0627 \u062a\u0643\u0648\u0646 \u0627\u0644\u062b\u063a\u0631\u0629 \u0628\u0633\u0628\u0628 \u062e\u0637\u0627\u0621 \u0641\u064a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u062a\u0631\u062a\u0641\u0639 \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u062a\u0643\u0631\u0627\u0631 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0644\u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u062a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0645\u062e\u0631\u062c\u0627\u062a \u0627\u0644\u062a\u0642\u0631\u064a\u0631 \u0627\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0623\u062e\u0631\u0649\u060c \u0646\u062c\u062f \u0623\u0646 TaH \u0623\u062e\u0631\u062c\u062a \u0644\u0646\u0627 \u0646\u0637\u0627\u0642 \u0648\u0627\u0633\u0639 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0644\u0643\u0646 \u0645\u0639 \u062a\u0643\u0631\u0627\u0631 \u0623\u0642\u0644 \u0628\u0643\u062b\u064a\u0631 \u0628\u0633\u0628\u0628 \u0636\u064a\u0642 \u0627\u0644\u0648\u0642\u062a. \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0642\u064a\u0627\u0645 \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0641\u062d\u0635 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u064a\u0631\u0648\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0645\u062b\u0644 XSS \u0633\u064a\u0642\u0648\u0645\u0648\u0646 \u0628\u0625\u064a\u062c\u0627\u062f \u0663 \u0623\u0648 \u0664 \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u064a\u062a\u0648\u0642\u0641\u0648\u0646 \u0639\u0646 \u0627\u0644\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0625\u064a\u062c\u0627\u062f \u0633\u0628\u0628 \u0627\u0644\u062e\u0637\u0623 \u0648\u0643\u062a\u0627\u0628\u0629 \u062a\u0642\u0631\u064a\u0631 \u0639\u0646\u0647\u0627 \u0648\u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0627\u0644\u0645\u0645\u0643\u0646\u0629 \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d\u0647\u0627 \u0648\u0627\u0644\u062a\u064a \u0633\u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d \u062c\u0645\u064a\u0639 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u064a\u0633 \u0647\u0646\u0627\u0643 \u062d\u0627\u062c\u0629 \u0623\u0648 \u0648\u0642\u062a \u0644\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u062a\u0643\u0631\u0631. \u0644\u0646\u0641\u062a\u0631\u0636 \u0623\u0646\u0646\u0627 \u0623\u062e\u0630\u0646\u0627 \u0645\u062c\u0645\u0648\u0639\u062a\u064a\u0646 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0645\u064a\u0651\u0632\u0629 \u0648\u0627\u0644\u063a\u064a\u0631 \u0645\u062a\u0634\u0627\u0628\u0647\u0629 \u0648\u062d\u0627\u0648\u0644\u0646\u0627 \u062f\u0645\u062c\u0647\u0627 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0643\u0631\u0627\u0631. \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629 \u0633\u0646\u062c\u062f \u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0645\u0644\u0627\u062d\u0638\u0629 \u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a TaH. \u0648\u0647\u0630\u0627 \u064a\u0638\u0647\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0628\u0634\u0643\u0644 \u0625\u064a\u062c\u0627\u0628\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u0630\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u064a\u0642\u0648\u0645 \u0628\u0631\u0641\u0639 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0645\u0646\u062e\u0641\u0636 \u0625\u0644\u0649 \u0645\u062a\u0648\u0633\u0637 \u0628\u0633\u0628\u0628 \u0627\u0644\u0639\u062f\u062f \u0627\u0644\u0647\u0627\u0626\u0644 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c. (\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 XSS \u0645\u0646 \u0627\u0644\u0633\u0647\u0644 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0648\u0627\u0644\u062e\u0631\u0648\u062c \u0628\u0646\u062a\u0627\u0626\u062c \u0645\u0639\u0642\u0648\u0644\u0629) \u0641\u064a \u0639\u0627\u0645 2017 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0625\u0644\u0642\u0627\u0621 \u0646\u0638\u0631\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062f\u0645\u062c\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u0646\u0627\u0633\u0628 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u0648 TaH. \u062d\u064a\u062b \u064a\u0643\u0648\u0646 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u064a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0646\u0633\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u0646\u0648\u0639 \u0645\u0646 \u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a. \u0648\u062d\u0642\u064a\u0642\u0629 \u0646\u062d\u0646 \u0641\u064a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0644\u0627 \u0646\u0647\u062a\u0645 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0645\u0639\u062f\u0644 \u062d\u062f\u0648\u062b\u0647\u0627 \u0645\u062a\u0643\u0631\u0631. \u0648\u0647\u062f\u0641\u0646\u0627 \u0647\u0648 \u0645\u0639\u0631\u0641\u0629 \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u0647\u0630\u0627 \u064a\u0639\u0637\u064a\u0646\u0627 \u062a\u0635\u0648\u0651\u0631 \u0648\u0627\u0636\u062d \u0645\u0646 \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u0639\u062a\u0628\u0631 \u0644\u062f\u064a\u0646\u0627 \u0623\u0641\u0636\u0644 \u0645\u0646 \u0625\u063a\u0631\u0627\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u062a\u0643\u0631\u0627\u0631 \u0644\u064a\u0633 \u0644\u0647 \u0641\u0627\u0626\u062f\u0629. \u0645\u0627 \u0647\u064a \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062a\u062d\u0644\u064a\u0644\u0647\u0627\u061f \u2693\ufe0e \u062a\u0645 \u0625\u0636\u0641\u0627\u0621 \u0627\u0644\u0637\u0627\u0628\u0639 \u0627\u0644\u0631\u0633\u0645\u064a \u0639\u0644\u0649 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0641\u064a \u0642\u0645\u0629 Open Security Summit \u0641\u064a \u0639\u0627\u0645 2017. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0623\u0645\u0636\u0649 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0641\u064a \u0645\u0646\u0638\u0645\u0629 \u0622\u0648\u0627\u0633\u0628 \u064a\u0648\u0645\u064a\u0646 \u0641\u064a \u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u0649 \u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0633\u064a\u0627\u0633\u0629 \u0648\u0627\u0636\u062d\u0629 \u0648\u0634\u0641\u0627\u0641\u0629. \u062a\u0639\u062f \u0646\u0633\u062e\u0629 2021 \u0647\u064a \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629 \u0627\u0644\u062a\u064a \u0646\u0633\u062a\u062e\u062f\u0645 \u0641\u064a\u0647\u0627 \u0647\u0630\u0647 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062f\u0639\u0648\u0629 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0642\u0646\u0648\u0627\u062a \u0627\u0644\u062a\u0648\u0627\u0635\u0644 \u0627\u0644\u0627\u062c\u062a\u0645\u0627\u0639\u064a \u0627\u0644\u0645\u062a\u0627\u062d\u0629 \u0644\u0646\u0627\u060c \u0644\u0643\u0644\u0651\u064b\u0627 \u0645\u0646 \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0648 OWASP. \u0648\u0641\u064a \u0635\u0641\u062d\u0629 \u0645\u0634\u0631\u0648\u0639 OWASP , \u0646\u0642\u0648\u0645 \u0628\u0625\u062f\u0631\u0627\u062c \u0639\u0646\u0627\u0635\u0631 \u0648\u0647\u064a\u0643\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0646\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0643\u064a\u0641\u064a\u0629 \u0625\u0631\u0633\u0627\u0644\u0647\u0627. \u0648\u0641\u064a \u0645\u0634\u0631\u0648\u0639 GitHub , \u0644\u062f\u064a\u0646\u0627 \u0623\u0645\u062b\u0644\u0629 \u0644\u0645\u0644\u0641\u0627\u062a \u062a\u0639\u0645\u0644 \u0643\u0642\u0648\u0627\u0644\u0628. \u0646\u0639\u0645\u0644 \u0645\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u0623\u062e\u0631\u0649 \u062d\u0633\u0628 \u0627\u0644\u062d\u0627\u062c\u0629 \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0647\u064a\u0643\u0644\u0648\u0631\u0633\u0645\u0647 \u0648\u0631\u0628\u0637\u0647 \u0628\u0640 CWEs. \u0646\u062d\u0635\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0628\u0627\u062f\u0644\u0629\u060c \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u0646\u0635\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0627\u062a\u060c \u0648\u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0647\u0645 \u0628\u0628\u064a\u0627\u0646\u0627\u062a\u0647\u0627 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629. \u0648\u0628\u0645\u062c\u0631\u062f \u062d\u0635\u0648\u0644\u0646\u0627 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0646\u0642\u0648\u0645 \u0628\u062a\u062d\u0645\u064a\u0644\u0647\u0627 \u0645\u0639\u064b\u0627 \u0648\u0646\u062c\u0631\u064a \u062a\u062d\u0644\u064a\u0644\u064b\u0627 \u0648\u0641\u0647\u0645\u0627\u064b \u0639\u0646 \u0623\u0633\u0627\u0633\u064a\u064b\u0627\u062a \u0627\u0644\u0631\u0628\u0637 \u0628\u0640 CWEs \u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0628\u0639\u0636 CWEs\u060c \u0628\u0633\u0628\u0628 \u0627\u0644\u062a\u0634\u0627\u0628\u0647 \u0628\u064a\u0646\u0647\u0645 (\u0645\u062b\u0644 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0641\u064a \u0627\u0644\u062a\u0634\u0641\u064a\u0631). \u062d\u064a\u062b \u064a\u062a\u0645 \u062a\u0648\u062b\u064a\u0642 \u0648\u0646\u0634\u0631 \u0623\u064a \u0642\u0631\u0627\u0631\u0627\u062a \u062a\u062a\u0639\u0644\u0642 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0623\u0648\u0644\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0645\u0629 \u0644\u062a\u0643\u0648\u0646 \u0645\u0641\u062a\u0648\u062d\u0629 \u0648\u0648\u0627\u0636\u062d\u0629 \u0645\u0639 \u0643\u064a\u0641\u064a\u0629 \u0645\u0648\u0627\u0621\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u064a\u062a\u0645 \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u062b\u0645\u0627\u0646\u064a\u0629 \u0630\u0627\u062a \u0623\u0639\u0644\u0649 \u0645\u0639\u062f\u0644\u0627\u062a \u062d\u062f\u0648\u062b \u0644\u0625\u062f\u0631\u0627\u062c\u0647\u0627 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0648\u0646\u0646\u0638\u0631 \u0623\u064a\u0636\u064b\u0627 \u0641\u064a \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0623\u064a \u0645\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0633\u064a\u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u0623\u0639\u0644\u0649 \u062a\u0642\u064a\u064a\u0645\u064a\u0646 \u063a\u064a\u0631 \u0645\u0648\u062c\u0648\u062f\u064a\u0646 \u0628\u0627\u0644\u0641\u0639\u0644 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u062d\u0644\u0644\u0629 \u0633\u0627\u0628\u0642\u0627\u064b \u0648\u0627\u0636\u0641\u062a\u0647\u0627 \u0627\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0628\u0645\u062c\u0631\u062f \u0627\u062e\u062a\u064a\u0627\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0639\u0634\u0631\u0629 \u060c \u064a\u062a\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0627\u062a\u0641\u0627\u0642 \u0639\u0644\u064a\u0647\u0627 \u0648\u0647\u064a (\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u062a\u0623\u062b\u064a\u0631)\u061b \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u0631\u062a\u064a\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u2693\ufe0e \u0647\u0646\u0627\u0643 \u0639\u0648\u0627\u0645\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u062f\u0631\u062c\u0629 \u0644\u0643\u0644 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0648\u0625\u0644\u064a\u0643 \u0645\u0627 \u062a\u0639\u0646\u064a\u0647: \u0631\u0628\u0637 \u0628\u0640 CWEs : \u0639\u062f\u062f CWEs \u0627\u0644\u0630\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0641\u0631\u064a\u0642. \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0648\u0647\u0648 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0631\u0636\u0629 \u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0628\u0645\u0639\u064a\u0627\u0631 CWE \u062e\u0644\u0627\u0644 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a. \u0623\u062c\u0631\u062a\u0647\u0627 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0641\u064a \u0633\u0646\u0629 \u0645\u062d\u062f\u062f\u0629. (\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a) \u0648\u0627\u0644\u062a\u063a\u0637\u064a\u0629 :\u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0644\u0640 CWE \u0645\u064f\u0639\u064a\u0651\u0646. \u062e\u0637\u0648\u0631\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 : \u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0644\u0647 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0645\u062a\u0648\u0642\u0639 : \u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627. \u0625\u062c\u0645\u0627\u0644\u064a CVEs : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f CVEs \u0641\u064a NVD DB \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627. \u0639\u0644\u0627\u0642\u0627\u062a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0644\u0639\u0627\u0645 2021 \u0645\u0639 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0639\u0627\u0645 2017 \u2693\ufe0e \u0647\u0646\u0627\u0643 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u062d\u062f\u064a\u062b \u0639\u0646 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0639\u0634\u0631\u0629 \u0627\u0644\u0623\u0648\u0644\u0649. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0639\u0631\u064a\u0641 \u0643\u0644 (\u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0645\u062f\u0631\u062c\u0629 \u0641\u064a CWEs)\u060c \u0648\u0644\u0643\u0646 \u0627\u0644\u0630\u064a \u064a\u0638\u0647\u0631 \u0644\u0646\u0627 \u0623\u0646\u0647 \u0644\u0627 \u064a\u0648\u062c\u062f \u0623\u064a \u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0647\u0627 \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u0645\u0646 \u0627\u0644\u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u0646\u0638\u0631\u064a\u0629\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0623\u0648 \u062a\u0623\u062b\u0631 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u062a\u0633\u0645\u064a\u0629. \u0648\u0646\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062e\u0637\u0637\u0627\u062a Venn \u0644\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0643\u0645\u0627 \u0648\u0631\u062f \u0641\u064a \u0627\u0644\u0645\u062b\u0627\u0644 \u0623\u062f\u0646\u0627\u0647. \u064a\u0645\u062b\u0644 \u0645\u062e\u0637\u0637 Venn \u0623\u0639\u0644\u0627\u0647 \u0627\u0644\u062a\u0631\u0627\u0628\u0637 \u0628\u064a\u0646 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2017. \u0648\u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0630\u0644\u0643\u060c \u0623\u0635\u0628\u062d\u062a \u0628\u0636\u0639 \u0646\u0642\u0627\u0637 \u0623\u0633\u0627\u0633\u064a\u0629 \u0648\u0627\u0636\u062d\u0629: \u0643\u0627\u0646 \u064a\u064f\u0631\u0649 \u0628\u0623\u0646 \u0647\u062c\u0648\u0645 - \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0646\u062a\u0645\u064a \u0641\u064a \u062d\u0642\u064a\u0642\u0629 \u0627\u0644\u0623\u0645\u0631 \u0625\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646(Injection) \u0644\u0623\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0623\u0633\u0627\u0633 \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u062d\u0642\u0646 \u0627\u0644\u0645\u062d\u062a\u0648\u0649. \u0628\u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0627\u0645 2021 \u060c \u0623\u0635\u0628\u062d \u0645\u0646 \u0627\u0644\u0648\u0627\u0636\u062d \u0623\u0646 ( XSS )\u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0625\u0644\u0649 \u0627\u0644\u062d\u0642\u0646(Injection). \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0645\u0627 \u0628\u064a\u0646\u0647\u0645 \u063a\u0627\u0644\u0628\u064b\u0627 \u064a\u0643\u0648\u0646 \u0641\u064a \u0627\u062a\u062c\u0627\u0647 \u0648\u0627\u062d\u062f. \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u0646\u0635\u0646\u0651\u0641 \u0627\u0644\u062b\u063a\u0631\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \"\u0627\u0644\u0639\u064e\u0631\u064e\u0636\"\u060c \u0648\u0644\u064a\u0633 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a (\u0627\u0644\u0630\u064a \u064a\u062d\u062a\u0645\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0639\u0645\u064a\u0642\u064b\u0627). \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0642\u062f \u062a\u0643\u0648\u0646 \" \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629 \" \u0646\u062a\u064a\u062c\u0629 \"\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u062e\u0627\u0637\u0626\u0629 \u0627\u0644\u0623\u0645\u0627\u0646\u060c \u0648\u0641\u064a \u0627\u0644\u063a\u0627\u0644\u0628 \u0644\u0646 \u062a\u0631\u0627\u0647\u0627 \u0628\u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0645\u0639\u0627\u0643\u0633. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u064a\u062a\u0645 \u0631\u0633\u0645 \u0627\u0644\u0623\u0633\u0647\u0645 \u0641\u064a \u0645\u0646\u0627\u0637\u0642 \u0627\u0644\u062a\u0623\u062b\u0631 \u0644\u0644\u0625\u0634\u0627\u0631\u0629 \u0625\u0644\u0649 \u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0630\u064a \u064a\u062d\u062f\u062b \u0641\u064a\u0647. \u0623\u062d\u064a\u0627\u0646\u064b\u0627 \u064a\u062a\u0645 \u0631\u0633\u0645 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0637\u0637\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0643\u0645\u0627 \u0641\u064a A06: 2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b . \u0641\u064a \u062d\u064a\u0646 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0642\u062f \u064a\u0643\u0648\u0646 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a \u0647\u064a \u062b\u063a\u0631\u0627\u062a \u0645\u0646 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u0641\u0625\u0646\u0647 \u064a\u062a\u0645 \u0625\u062f\u0627\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0641 \u0648\u0645\u0633\u0624\u0648\u0644\u064a\u0627\u062a \u0645\u062e\u062a\u0644\u0641\u0629. \u0648\u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0623\u062e\u0631\u0649 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u062a\u0645\u062b\u0651\u0644 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u0623\u0648\u0644. \u0634\u0643\u0631\u0627\u064b \u0644\u0643\u0644 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0645\u0639\u0646\u0627 \u0641\u064a \u062c\u0645\u0639 \u0647\u0630\u0647 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u2693\ufe0e \u0633\u0627\u0647\u0645\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u062a\u0627\u0644\u064a\u0629 (\u062c\u0646\u0628\u064b\u0627 \u0625\u0644\u0649 \u062c\u0646\u0628 \u0645\u0639 \u0628\u0639\u0636 \u0627\u0644\u0645\u0633\u0627\u0647\u0645\u064a\u0646-\u0627\u0644\u0645\u062a\u0628\u0631\u0639\u064a\u0646 \u0627\u0644\u0645\u062c\u0647\u0648\u0644\u064a\u0646) \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 500,000 \u062a\u0637\u0628\u064a\u0642 \u0648\u062c\u0639\u0644\u0647\u0627 \u0647\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0643\u0628\u0631 \u0648\u0627\u0644\u0623\u0643\u062b\u0631 \u0648\u0627\u0644\u0623\u0634\u0645\u0644 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0639\u0644\u064a\u0647\u0627 \u0648\u062c\u0639\u0644\u0647\u0627 \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u062a\u0623\u0643\u062f \u0623\u0646\u0647 \u0645\u0646 \u063a\u064a\u0631 \u0627\u0633\u0647\u0627\u0645\u0627\u062a\u0643 \u0644\u0646 \u064a\u0643\u0648\u0646 \u0647\u0630\u0627 \u0645\u0645\u0643\u0646. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT) \u0634\u0643\u0631\u0627 \u0644\u062c\u0645\u064a\u0639 \u062f\u0627\u0639\u0645\u064a\u0646\u0627 \u0627\u0644\u0645\u0627\u0644\u064a\u064a\u0646 \u2693\ufe0e","title":"\u0627\u0644\u0635\u0641\u062d\u0629 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629"},{"location":"ar/#_1","text":"","title":"\u0645\u0642\u062f\u0645\u0629"},{"location":"ar/#2021","text":"\u0645\u0631\u062d\u0628\u064b\u0627 \u0628\u0643\u0645 \u0641\u064a \u0623\u062d\u062f\u062b \u0625\u0635\u062f\u0627\u0631 \u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0648\u0647\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0634\u0643\u0644 \u062c\u062f\u064a\u062f \u062a\u0645\u0627\u0645\u064b\u0627 \u0648\u0645\u062f\u0639\u0645\u0629 \u0628\u0631\u0633\u0648\u0645\u0627\u062a \u0627\u0646\u0641\u0648\u062c\u0631\u0627\u0641\u064a\u0643 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0637\u064a\u0639 \u0637\u0628\u0627\u0639\u062a\u0647\u0627 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0648\u064a\u0645\u0643\u0646 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u064a\u0647\u0627 \u0645\u0646 \u0635\u0641\u062d\u062a\u0646\u0627 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629. \u0643\u0645\u0627 \u0646\u062a\u0642\u062f\u0645 \u0628\u062c\u0632\u064a\u0644 \u0627\u0644\u0634\u0643\u0631 \u0648\u0627\u0644\u0639\u0631\u0641\u0627\u0646 \u0644\u0643\u0644\u0651 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0628\u0641\u0643\u0631\u0629\u060c \u0623\u0648 \u0648\u0642\u062a\u060c \u0623\u0648 \u062c\u0647\u062f \u0641\u064a \u0633\u0628\u064a\u0644 \u0625\u0646\u062c\u0627\u062d \u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0644\u060c \u0645\u0645\u062a\u0646\u0651\u0648\u0646 \u0644\u0645\u0627 \u0628\u0630\u0644\u062a\u0645\u0648\u0647\u060c \u0648\u0644\u0645\u0627 \u062d\u0642\u0651\u0642\u0646\u0627\u0647 \u0628\u0641\u0636\u0644 \u0627\u0644\u0644\u0647 \u062b\u0645 \u0628\u0645\u0633\u0627\u0639\u062f\u062a\u0643\u0645 \u0648\u062f\u0639\u0645\u0643\u0645..","title":"\u0645\u0631\u062d\u0628\u0627\u064b \u0628\u0643\u0645 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021"},{"location":"ar/#2021_1","text":"\u0628\u0634\u0643\u0644 \u0639\u0627\u0645 \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 3 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062c\u062f\u064a\u062f\u0629 \u0648 4 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u060c \u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0627\u0633\u0645 \u0648\u0643\u0630\u0644\u0643 \u0627\u0644\u0646\u0637\u0627\u0642 \u0627\u0644\u062e\u0627\u0635 \u0628\u0647\u0627\u060c \u0648\u0628\u0639\u0636 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062f\u0645\u062c \u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0645\u0639 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 A01:2021-\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u062d\u062a\u0644 (\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644) \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0641\u064a \u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u062e\u0627\u0645\u0633\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0646 \u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637 \u0628\u0640 34 CWEs \u0647\u0648 \u0645\u0646 \u0623\u0643\u062b\u0631 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. A02:2021-\u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u064a\u0623\u062a\u064a \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 #2 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629\u060c \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0643\u0648\u0646 \u0623\u0633\u0628\u0627\u0628\u0647\u0627 \u0645\u062a\u0639\u062f\u062f\u0629 \u062f\u0648\u0646 \u0623\u0646 \u062a\u0639\u0648\u062f \u062c\u0645\u064a\u0639\u0647\u0627 \u0644\u0633\u0628\u0628 \u062c\u0630\u0631\u064a \u0648\u0627\u062d\u062f\u060c \u0648\u064a\u0623\u062a\u064a \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0647\u0646\u0627 \u0628\u0634\u0643\u0644 \u0645\u062a\u062c\u062f\u062f \u0639\u0644\u0649 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0641\u064a \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u062a\u064a \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u0624\u062f\u064a \u0625\u0644\u0649 \u0643\u0634\u0641 \u063a\u064a\u0631 \u0645\u0635\u0631\u0651\u062d \u0628\u0647 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0623\u0646\u0638\u0645\u0629. A03:2021-\u0627\u0644\u062d\u0642\u0646 \u062a\u062a\u0631\u0627\u062c\u0639 \u0627\u0644\u062d\u0642\u0646 \u0627\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 3. \u062d\u064a\u062b \u0627\u0646\u0647 \u062a\u0645 \u0627\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646. \u0627\u0646 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 33 CWEs \u062a\u0639\u062a\u0628\u0631 \u062b\u0627\u0646\u064a \u0627\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0625\u0635\u0627\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u0647\u0627. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0627\u0646 \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0645 \u062f\u0645\u062c\u0647\u0627 \u0647\u0646\u0627 \u0645\u0639 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629. A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0647\u0648 \u062a\u0635\u0646\u064a\u0641 \u062c\u062f\u064a\u062f \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0639\u064a\u0648\u0628 \u0648\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u062a\u0635\u0645\u064a\u0645. \u0648\u0625\u0630\u0627 \u0623\u0631\u062f\u0646\u0627 \u0627\u0644\u062a\u062d\u0631\u0643 \u0644\u0625\u062b\u0628\u0627\u062a \u0623\u0647\u0645\u064a\u0629 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0641\u0646\u062d\u0646 \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0648\u0643\u0630\u0644\u0643 \u0648\u062c\u0648\u062f \u0628\u0646\u064a\u0629 \u062a\u062d\u062a\u064a\u0629 \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0648\u0627\u0644\u0636\u0648\u0627\u0628\u0637. A05:2021- \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0647\u0648 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6 \u0627\u0644\u0622\u0646 \u0646\u0631\u0627\u0647 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 #4\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 90% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0648\u062c\u062f \u0628\u0647\u0627 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u062d\u0629. \u0648\u0647\u0630\u0627 \u064a\u062d\u062f\u062b \u0645\u0639 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0644\u0632\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631 \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u062e\u0637\u0623 \u0641\u064a \u0627\u0631\u062a\u0641\u0627\u0639\u060c \u0648\u0647\u0630\u0627 \u0627\u0644\u0630\u064a \u062c\u0639\u0644 (\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629) \u062a\u0631\u062a\u0641\u0639 \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0625\u0644\u0649 \u0627\u0644\u0631\u0627\u0628\u0639\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646\u0647 \u062a\u0645 \u0636\u0645 \" XML External Entities XXE\" \u0644\u0647\u0630\u0627 \u0627\u0644\u0646\u0648\u0639 \u0645\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629. A06:2021-\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0627\u0644\u0645\u062d\u062f\u062b\u0629 \u0633\u0627\u0628\u0642\u064b\u0627 \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0640 \u201c\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0648\u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0630\u0627\u062a \u062b\u063a\u0631\u0627\u062a \u0645\u0639\u0631\u0648\u0641\u0629\". \u0648\u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0639\u0644\u0649 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0643\u0627\u0646\u062a \u0647\u064a #2 \u0623\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u062e\u0637\u0631 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #9 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 #2017 \u0627\u0631\u062a\u0641\u0639\u062a \u0641\u064a \u0625\u0635\u062f\u0627\u0631 #2021 \u0625\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0645\u0639\u0627\u064a\u064a\u0631 CVEs \u0623\u0648 CWEs \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0628\u0627\u0644\u062e\u0637\u0648\u0631\u0629. \u0648\u0644\u0630\u0644\u0643 \u064a\u062a\u0645 \u062a\u0635\u0646\u064a\u0641 \u062e\u0637\u0648\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0647\u0648 5.0. A07:2021-\u0627\u0644\u0647\u0648\u064a\u0629 \u0648 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \"\u0636\u0639\u0641 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629\" \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0643\u0630\u0644\u0643 \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #2. \u0648\u0628\u0639\u062f \u0639\u0645\u0644\u064a\u0629 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u0648\u062a\u0633\u0645\u064a\u062a\u0647\u0627 \u0628\u0640 \u201c\u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642. \u0648\u0643\u0645\u0627 \u0646\u0642\u0648\u0644 \u0623\u0646 \u0632\u064a\u0627\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u064a\u064a\u0631 \u0623\u062f\u0651\u062a \u0625\u0644\u0649 \u062a\u0642\u0644\u064a\u0644 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0648\u0644\u0643\u0646 \u0644\u064a\u0633 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0644\u0630\u0644\u0643 \u0646\u0631\u0627\u0647\u0627 \u0647\u0646\u0627 \u0645\u0646 \u0636\u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. A08:2021- \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647\u0627 \u062d\u062f\u064a\u062b\u064b\u0627 \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 2021. \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0628\u0634\u0643\u0644 \u0643\u0628\u064a\u0631 \u0639\u0644\u0649 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0639 \u0627\u0644\u062a\u0623\u0643\u062f \u0639\u0644\u0649 \u0639\u062f\u0645 \u062a\u0623\u062b\u0631 \u0633\u0644\u0627\u0645\u0629 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 CI/CD. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062d\u062a\u0645\u0644\u0629 \u062d\u0633\u0628 \u062a\u0635\u0646\u064a\u0641 CVE/CVSS \u0648\u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0645\u0639 CWEs \u0646\u062c\u062f \u0623\u0646 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u062e\u0637\u0631 \u0647\u0648 10 \u0648\u064a\u0639\u062a\u0628\u0631 \u0645\u0631\u062a\u0641\u0639 \u062c\u062f\u064b\u0627. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \"Insecure Deserialization\" \u0623\u0635\u0628\u062d\u062a \u062c\u0632\u0621 \u0645\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641. A09:2021-\u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0633\u0627\u0628\u0642\u064b\u0627 \u0628\u0640 \u201c\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0628\u0634\u0643\u0644 \u063a\u064a\u0631 \u0635\u062d\u064a\u062d. \u0648\u0628\u0639\u062f \u0639\u0645\u0644 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062c\u0631\u0627\u0621\u0647\u0627 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u062d\u062a\u0644\u062a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 3 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639. \u0648\u0627\u0644\u0630\u064a \u062c\u0639\u0644\u0647\u0627 \u062a\u0635\u0639\u062f \u0645\u0631\u062a\u0628\u0629 \u0648\u0627\u062d\u062f\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 10. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0641\u064a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0627\u0644\u062a\u064a \u062a\u0645 \u0636\u0645\u0647\u0627 \u0647\u0646\u0627. \u0648\u062d\u064a\u0646\u0645\u0627 \u0646\u0631\u0649 CVE/CVSS \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0648\u0627\u0636\u062d \u0648\u0644\u0643\u0646 \u0645\u0639 \u0627\u0644\u0642\u0635\u0648\u0631 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u064a \u062a\u0634\u0643\u0644 \u062a\u0623\u062b\u064a\u0631\u064b\u0627 \u0628\u0627\u0644\u063a\u064b\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0623\u0646\u0638\u0645\u0629\u060c \u0648\u0627\u0644\u062a\u0646\u0628\u064a\u0647 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u062d\u0648\u0627\u062f\u062b \u0623\u0648 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062c\u0646\u0627\u0626\u064a \u0627\u0644\u0631\u0642\u0645\u064a. A10:2021-\u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0631\u0642\u0645 #1. \u0648\u062a\u0638\u0647\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0628 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0623\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0639\u062f\u0644 \u0627\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u0647 \u0641\u0648\u0642 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0645\u0639 \u0627\u0631\u062a\u0641\u0627\u0639 \u0645\u0646\u062e\u0641\u0636. \u0648\u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647 \u0628\u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644. \u0648\u064a\u0641\u064a\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0641\u064a \u0627\u0644\u0645\u062c\u0627\u0644 \u0623\u0646 \u0648\u062c\u0648\u062f \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0636\u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0647\u0648 \u0623\u0645\u0631 \u0645\u0647\u0645 \u062c\u062f\u064b\u0627 \u062d\u062a\u0649 \u0648\u0625\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u063a\u064a\u0631 \u0645\u0643\u062a\u0645\u0644\u0629 \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u062d\u0627\u0644\u064a.","title":"\u0645\u0627 \u0647\u064a \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0637\u0631\u0623\u062a \u0639\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021"},{"location":"ar/#_2","text":"\u0644\u0623\u0648\u0644 \u0645\u0631\u0629 \u064a\u062a\u0645 \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u064a\u062c\u0628 \u0627\u0644\u062a\u0646\u0648\u064a\u0647 \u0623\u0646\u0647\u0627 \u0644\u0627 \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u064f\u0644\u064a. \u062d\u064a\u062b \u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u062b\u0646\u064a\u0646 \u0645\u0646\u0647\u0645 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u0630\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647 \u0641\u064a \u0646\u0637\u0627\u0642 \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0648\u062a\u0642\u0648\u0645 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0628\u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0623\u064a \u0645\u0635\u0627\u062f\u0631 \u0623\u062e\u0631\u0649 \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0623\u0646 \u0627\u0644\u0628\u0627\u062d\u062b\u064a\u0646 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0633\u062a\u063a\u0631\u0642\u0648\u0646 \u0648\u0642\u062a \u0648\u062c\u0647\u062f \u0643\u0628\u064a\u0631 \u0641\u064a \u0625\u064a\u062c\u0627\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0623\u0648 \u0637\u0631\u0642 \u062c\u062f\u064a\u062f\u0629 \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627. \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u064a\u0633\u062a\u063a\u0631\u0642 \u0648\u0642\u062a \u0623\u0643\u0628\u0631 \u0648\u0642\u062f \u062a\u0635\u0644 \u0625\u0644\u0649 \u0633\u0646\u0648\u0627\u062a. \u0648\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062a\u0648\u0627\u0632\u0646 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u062f\u0641 \u0635\u0646\u0627\u0639\u0629 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0648\u062c\u064a\u0647 \u0623\u0633\u0626\u0644\u0629 \u0644\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0641\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u062a\u0638\u0647\u0631\u0647\u0627 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0628\u0639\u0636 \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062c\u0648\u0647\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0639\u062a\u0645\u0627\u062f\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0644\u0645\u0648\u0627\u0635\u0644\u0629 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0645\u062a\u0651\u0628\u0639\u0629 \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631.","title":"\u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629"},{"location":"ar/#_3","text":"\u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0648\u0647\u0646\u0627 \u0645\u0644\u062e\u0635 \u0644\u0645\u0627 \u062a\u0645 \u062a\u063a\u064a\u0631\u0647 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062a\u0631\u0643\u0632 \u0627\u0644\u062c\u0647\u0648\u062f \u0627\u0644\u0645\u0628\u0630\u0648\u0644\u0629 \u0641\u064a \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CWEs \u0628\u0639\u062f\u062f 30 \u0645\u062c\u0627\u0644 \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0627\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u062a\u062d\u062a\u0627\u062c \u0627\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0646\u062a\u0627\u0626\u062c \u0625\u0636\u0627\u0641\u064a\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0623\u0646\u0647\u0627 \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 30 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 CWEs \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0648\u0642\u062f \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0627\u0644\u0646\u0638\u0631 \u0641\u064a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062a\u0641\u0631\u0639\u0629 \u0645\u0646\u0647\u0627 \u0648\u0633\u064a\u0643\u0648\u0646 \u0641\u064a \u0646\u0637\u0627\u0642 \u0645\u062d\u062f\u0648\u062f \u0648\u0636\u064a\u0651\u0642. \u0648\u062a\u0628\u0639\u064b\u0627 \u0644\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u0639\u062a\u0627\u062f\u0629 \u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u062f\u0648\u0646 \u0623\u064a \u0642\u064a\u0648\u062f \u0639\u0644\u0649 CWEs. \u0648\u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0639\u062f\u062f \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0644\u0633\u0646\u0648\u0627\u062a \u0645\u062d\u062f\u062f\u0629 (\u0628\u062f\u0621\u064b\u0627 \u0645\u0646 \u0639\u0627\u0645 2017)\u060c \u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062a\u0642\u064a\u064a\u0645\u0647\u0627 \u0628\u0625\u0635\u0627\u0628\u062a\u0647\u0627 \u0628\u0623\u062d\u062f CWEs \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u062a\u0633\u0645\u062d \u0644\u0646\u0627 \u0647\u0630\u0647 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u062a\u0635\u0646\u064a\u0641\u0627\u062a CWEs. \u0645\u0639 \u0627\u0644\u0623\u062e\u0630 \u0628\u0639\u064a\u0646 \u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0623\u0646\u0646\u0627 \u062a\u062c\u0627\u0647\u0644\u0646\u0627 \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0644\u0623\u0633\u0628\u0627\u0628 \u0645\u0639\u064a\u0651\u0646\u0629\u060c \u0648\u0623\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062d\u0627\u0644\u0627\u062a \u064a\u0643\u0648\u0646 \u0636\u0631\u0648\u0631\u064a\u064b\u0627 \u0627\u0644\u0623\u062e\u0630 \u0628\u0647 \u0648\u0627\u0644\u0630\u064a \u0642\u062f \u064a\u0624\u062b\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0646\u062a\u0634\u0631 \u0648\u0645\u0634\u0647\u0648\u0631 \u0648\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0643\u062b\u0631\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0645\u0647\u0645\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0635\u0627\u0628 \u0628\u0640 4 \u0645\u0646 CWEs \u0623\u0648 4,000 \u0641\u0647\u0630\u0627 \u0644\u0627 \u064a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0622\u0644\u064a\u0629 \u0627\u062d\u062a\u0633\u0627\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u062f\u064a\u0646\u0627. \u0648\u0644\u0642\u062f \u0643\u0627\u0646 \u0644\u062f\u064a\u0646\u0627 \u062d\u0648\u0627\u0644\u064a 400 CWEs \u062a\u0642\u0631\u064a\u0628\u064b\u0627 \u0648\u0642\u0645\u0646\u0627 \u0628\u062d\u0635\u0631\u0647\u0627 \u0648\u062a\u0642\u0644\u064a\u0644\u0647\u0627 \u0625\u0644\u0649 30 CWEs \u0648\u0630\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0646\u062e\u0637\u0637 \u0641\u064a \u0627\u0644\u0645\u0633\u062a\u0642\u0628\u0644 \u0641\u064a \u0625\u062c\u0631\u0627\u0621 \u062a\u062d\u0644\u064a\u0644\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u0648\u0627\u0644\u062a\u064a \u0628\u062f\u0648\u0631\u0647\u0627 \u0633\u062a\u0646\u0639\u0643\u0633 \u0639\u0644\u0649 \u0625\u0636\u0627\u0641\u0629 \u0628\u0639\u0636 \u0645\u0646 CWEs \u0648\u0642\u062f \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u063a\u064a\u064a\u0631 \u0643\u0630\u0644\u0643 \u0639\u0644\u0649 \u0647\u064a\u0643\u0644\u0629 \u0648\u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. \u0644\u0642\u062f \u0623\u0645\u0636\u064a\u0646\u0627 \u0639\u062f\u0629 \u0623\u0634\u0647\u0631 \u0641\u064a \u062a\u062c\u0645\u064a\u0639 \u0648\u062a\u0635\u0646\u064a\u0641 CWEs \u0648\u0643\u0627\u0646 \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0623\u0646 \u0646\u0633\u062a\u0645\u0631 \u0644\u0623\u0634\u0647\u0631 \u0625\u0636\u0627\u0641\u064a\u0629. \u0648\u0644\u0643\u0646 \u0643\u0627\u0646 \u0639\u0644\u064a\u0646\u0627 \u0627\u0644\u062a\u0648\u0642\u0641 \u0639\u0646\u062f \u0646\u0642\u0637\u0629 \u0645\u0627. \u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0623\u0646\u0648\u0627\u0639 \u0641\u064a CWEs \u0645\u0627 \u064a\u0633\u0645\u0649 \u0628\u0640 \u201c\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\". \u0648\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \"\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0643\u0641\u0634\u0644 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0623\u0648 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0648\u0627\u0644\u0630\u064a \u064a\u062a\u0645 \u0625\u0642\u0631\u0627\u0646\u0647 \u0628\u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0645\u062b\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0645\u0643\u0634\u0648\u0641\u0629 \u0623\u0648 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u0646\u0627 \u0623\u0646 \u0646\u0631\u0643\u0632 \u0639\u0644\u0649 \"\u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\" \u0642\u062f\u0631 \u0627\u0644\u0625\u0645\u0643\u0627\u0646 \u0648\u0630\u0644\u0643 \u0644\u062a\u0648\u0641\u0651\u0631 \u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0648\u0627\u0644\u0625\u0631\u0634\u0627\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u062a\u0644\u0627\u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0623\u0633\u0628\u0627\u0628. \u0643\u0645\u0627 \u0623\u0646 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0644\u064a\u0633 \u0645\u0641\u0647\u0648\u0645 \u062c\u062f\u064a\u062f\u060c \u0643\u0645\u0627 \u0623\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u062c\u0627\u0621\u062a \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0637 \u0645\u0627 \u0628\u064a\u0646 \"\u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\" \u0648\u0647\u0648 \u0627\u0644\u0623\u0633\u0644\u0648\u0628 \u0627\u0644\u0645\u062a\u0651\u0628\u0639 \u0641\u064a CWEs \u0643\u0630\u0644\u0643. \u0648\u0647\u062f\u0641\u0646\u0627 \u0623\u0646 \u0646\u0643\u0648\u0646 \u0639\u0644\u0649 \u062a\u0648\u0627\u0632\u0646 \u0628\u064a\u0646\u0647\u0645. \u0625\u0646 \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062d\u0633\u0628 CWEs \u0647\u0648 19.6 \u062d\u064a\u062b \u062d\u0635\u0644\u062a A10 \u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u0639\u0644\u0649 1 CWEs \u0648 40 CWEs \u0644\u0635\u0627\u0644\u062d A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 . \u0625\u0646 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0630\u064a \u062c\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0641\u064a\u062f \u062c\u062f\u064b\u0627 \u0644\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0645\u0646\u0627\u0641\u0639 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0639\u0644\u0649 CWEs \u0648\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0643\u0644\u063a\u0629 \u0639\u0645\u0644 \u0648\u0625\u0637\u0627\u0631.","title":"\u0643\u064a\u0641 \u064a\u062a\u0645 \u062a\u0646\u0638\u064a\u0645 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a"},{"location":"ar/#_4","text":"\u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 2017\u060c \u062c\u0639\u0644\u0646\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0644\u062a\u062d\u062f\u064a\u062f \u0627\u062d\u062a\u0645\u0627\u0644\u064a\u062a\u0647\u0627. \u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0646\u0642\u0627\u0634 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0639\u0642\u0648\u062f \u0645\u0646 \u0627\u0644\u062e\u0628\u0631\u0627\u062a \u0641\u064a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u062d\u062a\u0645\u0627\u0644\u064a\u0629 \u062d\u062f\u0648\u062b\u0647\u0627 \u0623\u064a\u0636\u064b\u0627 \u0648\u0645\u0627 \u0647\u0648 \u0627\u0644\u0623\u062b\u0631 \u0627\u0644\u062a\u0642\u0646\u064a \u0627\u0644\u0630\u064a \u0633\u064a\u062d\u062f\u062b. \u0644\u0630\u0644\u0643 \u0623\u0631\u062f\u0646\u0627 \u0641\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062c\u062f\u064a\u062f\u0629 \u0645\u0646 \u0639\u0627\u0645 2021 \u0645\u0646 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0625\u0646 \u0623\u0645\u0643\u0646 \u0630\u0644\u0643. \u0642\u0645\u0646\u0627 \u0628\u062a\u0646\u0632\u064a\u0644 \" OWASP Dependency Check\" \u0648\u0627\u0633\u062a\u062e\u0631\u062c\u0646\u0627 \u0646\u062a\u0627\u0626\u062c CVSS \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0622\u062b\u0627\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u062c\u0645\u0639\u0647\u0627 \u0633\u0627\u0628\u0642\u0627\u064b \u0645\u0646 CWEs \u0630\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0642\u0629. \u0648\u0644\u0627 \u064a\u062e\u0641\u0649 \u0639\u0644\u064a\u0643\u0645 \u0627\u0646 \u0647\u0630\u0627 \u0627\u0644\u062c\u0647\u062f \u0645\u0646 \u0627\u0644\u0628\u062d\u062b \u0627\u062e\u0630 \u0642\u062f\u0631 \u0644\u0627 \u0628\u0627\u0633 \u0628\u0647 \u0644\u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0644\u062f\u064a\u0647\u0627 \u062f\u0631\u062c\u0627\u062a \u0645\u0646 CVSSv2 \u0643\u0630\u0644\u0643. \u0648\u0644\u0643\u0646 \u0647\u0646\u0627 \u0628\u0639\u0636 \u0627\u0644\u062e\u0644\u0644 \u0645\u0627 \u0628\u064a\u0646 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u0630\u064a \u064a\u062c\u0628 \u0645\u0639\u0627\u0644\u062c\u062a\u0647. \u0648\u0633\u0646\u0631\u0649 \u0641\u064a \u0627\u0644\u0642\u0631\u064a\u0628 \u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 CVSSv3. \u0648\u0646\u0648\u062f \u0627\u0646 \u0646\u0644\u0641\u062a \u0627\u0644\u0627\u0646\u062a\u0628\u0627\u0647 \u0627\u0646 \u0645\u0639\u0627\u062f\u0644\u0629 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u062f\u0631\u062c\u0627\u062a \u0645\u062a\u063a\u064a\u0631\u0629 \u0648\u0645\u062a\u062d\u062f\u062b\u0629. \u0641\u064a CVSSv2\u060c \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u064a\u0635\u0644 \u0627\u0644\u0623\u062b\u0631 \u0648 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u0649 10.0\u060c \u0648\u0644\u0643\u0646 \u0628\u0639\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0642\u062f \u062a\u0646\u062e\u0641\u0636 \u0627\u0644\u0649 60% \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 40% \u0644\u0644\u062a\u0623\u062b\u064a\u0631. \u0648\u0641\u064a CVSSv3 \u0643\u0627\u0646 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0639\u0644\u0649 \u0647\u0648 6.0 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 4.0 \u0644\u0644\u0623\u062b\u0631. \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0645\u062f\u0649 \u062b\u0642\u0644 \u0623\u062d\u062f\u0647\u0645\u0627. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 CVSSv3 \u0646\u0631\u0649 \u0627\u0646 \u0627\u0644\u0623\u062b\u0631 \u0627\u0631\u062a\u0641\u0639 \u062d\u0648\u0627\u0644\u064a \u0646\u0642\u0637\u0629 \u0648\u0646\u0635\u0641\u060c \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0646\u062e\u0641\u0636 \u0628\u0645\u0642\u062f\u0627\u0631 \u0627\u0644\u0646\u0635\u0641 \u0646\u0642\u0637\u0629 \u062a\u0642\u0631\u064a\u0628\u0627\u064b. \u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 125 \u0623\u0644\u0641 \u0633\u062c\u0644 \u0645\u0646 CVE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0641\u064a \u0645\u0646\u0635\u0629 NVD \u0648\u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0641\u064a \" OWASP Dependency Check\". \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 241 \u062a\u0635\u0646\u064a\u0641 \u0641\u0631\u0639\u064a \u0641\u0631\u064a\u062f \u0641\u064a CWEs \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a \u0623\u0643\u062b\u0631 \u0645\u0646 CVE. \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 62 \u0623\u0644\u0641 \u0645\u0646 CWE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a CVSSv3. \u0648\u0627\u0644\u062a\u064a \u062a\u0645\u062b\u0644 \u0646\u0635\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062d\u0635\u0631\u0647\u0627. \u0641\u064a \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0642\u0645\u0646\u0627 \u0628\u062d\u0633\u0627\u0628 \u0645\u062a\u0648\u0633\u0637 \u0646\u0642\u0627\u0637 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0628\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u062a\u0627\u0644\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062a\u062c\u0645\u064a\u0639 \u062f\u0631\u062c\u0627\u062a CVEs \u0645\u0639 CVSS \u0628\u0648\u0627\u0633\u0637\u0629 CWE \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0642\u064a\u064a\u0645 \u0643\u0644 \u0645\u0646 \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a CVSSv3 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0649 \u062c\u0645\u064a\u0639 \u0645\u0627 \u064a\u0648\u062c\u062f \u0641\u064a CVSSv2 \u0644\u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u0625\u062c\u0645\u0627\u0644\u064a. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0631\u0628\u0637 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0628\u0640 CWEs \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0630\u0644\u0643 \u0644\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0644\u062a\u0642\u064a\u064a\u0645 \u062f\u0631\u062c\u0627\u062a \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0643\u0630\u0644\u0643 \u0641\u064a \u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0628\u0646\u0627\u0621 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629.","title":"\u0643\u064a\u0641 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u062a\u0627\u0631\u0629"},{"location":"ar/#_5","text":"\u062a\u0642\u062a\u0635\u0631 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0639\u0644\u0649 \u0645\u0627 \u064a\u0645\u0643\u0646 \u0627\u062e\u062a\u0628\u0627\u0631\u0647 \u0628\u0634\u0643\u0644 \u0622\u0644\u064a. \u0648\u062d\u064a\u0646\u0645\u0627 \u062a\u062a\u062d\u062f\u062b \u0625\u0644\u0649 \u0623\u062d\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0627\u0644\u0645\u062d\u062a\u0631\u0641\u064a\u0646 \u0641\u064a \u0645\u062c\u0627\u0644 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0633\u064a\u062e\u0628\u0631\u0648\u0646\u0643 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a \u0648\u0627\u0644\u0627\u062d\u0635\u0627\u0626\u064a\u0627\u062a \u0644\u0627 \u064a\u0648\u062c\u062f \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0639\u062f. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0639\u0646\u062f \u0625\u0639\u062f\u0627\u062f \u0645\u0646\u0647\u062c\u064a\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u060c \u062a\u0633\u062a\u063a\u0631\u0642 \u0641\u062a\u0631\u0629 \u0645\u0646 \u0627\u0644\u0632\u0645\u0646 \u0648\u0645\u0646 \u062b\u0645 \u0623\u0646\u062a \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0648\u0642\u062a \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0623\u062a\u0645\u062a\u0629 \u062a\u0644\u0643 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0648\u062a\u0634\u063a\u064a\u0644\u0647\u0627 \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0629 \u0643\u0628\u064a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0633\u0628\u0628 \u0639\u062f\u0645 \u0627\u0643\u062a\u0645\u0627\u0644 \u0648\u0646\u0636\u062c \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0648\u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0644\u062a\u0635\u0646\u064a\u0641\u064a\u0646 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u0642\u0645\u0646\u0627 \u0628\u0639\u0645\u0644 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0645\u0645\u0627 \u064a\u0633\u0645\u062d \u0644\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0627\u0644\u062a\u0635\u0648\u064a\u062a \u0644\u0645\u0627 \u064a\u0631\u0648\u0646\u0647 \u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062d\u0642 \u0623\u0646 \u062a\u0636\u0627\u0641 \u0625\u0644\u0649 \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u064a\u0643\u0648\u0646 \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u062a\u0646\u0627\u0633\u0642\u0629 \u0623\u0648 \u063a\u064a\u0631 \u0645\u0646\u0627\u0633\u0628\u0629.","title":"\u0644\u0645\u0627\u0630\u0627 \u0644\u0627 \u062a\u0643\u0648\u0646 \u0645\u062c\u0631\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0625\u062d\u0635\u0627\u0626\u064a\u0629 \u0628\u062d\u062a\u0629\u061f"},{"location":"ar/#_6","text":"\u0647\u0646\u0627\u0643 \u062b\u0644\u0627\u062b\u0629 \u0645\u0635\u0627\u062f\u0631 \u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0646\u062d\u062f\u062f\u0647\u0627 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \u0627\u0644\u0627\u0646\u0633\u0627\u0646 \u064a\u0633\u0627\u0639\u062f \u0627\u0644\u0623\u062f\u0648\u0627\u062a (HaT) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0633\u0627\u0639\u062f \u0627\u0644\u0625\u0646\u0633\u0627\u0646 (TaH) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0645\u0646 \u063a\u064a\u0631 \u0623\u064a \u062a\u0639\u062f\u064a\u0644\u0627\u062a. \u062a\u0642\u0648\u0645 HaT \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0628\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0639\u0627\u0644\u064a. \u062d\u064a\u062b \u0627\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0628\u062d\u062b \u0639\u0646 \u0646\u0642\u0627\u0637 \u0636\u0639\u0641 \u0645\u062d\u062f\u062f\u0629 \u0645\u0639 \u062a\u062c\u0631\u0628\u0629 \u062c\u0645\u064a\u0639 \u0627\u0644\u0627\u062d\u062a\u0645\u0627\u0644\u0627\u062a \u0627\u0644\u0645\u062a\u0648\u0642\u0639\u0629 \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0629. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0639\u0627\u062f\u0629 \u0627\u0645\u0627 \u0627\u0646 \u062a\u0643\u0648\u0646 \u0645\u0646\u062e\u0641\u0636\u0629 \u0627\u0644\u062e\u0637\u0648\u0631\u0629 \u0627\u0648 \u0628\u0633\u064a\u0637\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0633\u0628\u0628 \u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0648 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u0635\u0641\u064a\u0629. \u0648\u0639\u0646\u062f\u0645\u0627 \u062a\u0643\u0648\u0646 \u0627\u0644\u062b\u063a\u0631\u0629 \u0628\u0633\u0628\u0628 \u062e\u0637\u0627\u0621 \u0641\u064a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u062a\u0631\u062a\u0641\u0639 \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u062a\u0643\u0631\u0627\u0631 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0644\u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u062a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0645\u062e\u0631\u062c\u0627\u062a \u0627\u0644\u062a\u0642\u0631\u064a\u0631 \u0627\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0623\u062e\u0631\u0649\u060c \u0646\u062c\u062f \u0623\u0646 TaH \u0623\u062e\u0631\u062c\u062a \u0644\u0646\u0627 \u0646\u0637\u0627\u0642 \u0648\u0627\u0633\u0639 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0644\u0643\u0646 \u0645\u0639 \u062a\u0643\u0631\u0627\u0631 \u0623\u0642\u0644 \u0628\u0643\u062b\u064a\u0631 \u0628\u0633\u0628\u0628 \u0636\u064a\u0642 \u0627\u0644\u0648\u0642\u062a. \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0642\u064a\u0627\u0645 \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0641\u062d\u0635 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u064a\u0631\u0648\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0645\u062b\u0644 XSS \u0633\u064a\u0642\u0648\u0645\u0648\u0646 \u0628\u0625\u064a\u062c\u0627\u062f \u0663 \u0623\u0648 \u0664 \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u064a\u062a\u0648\u0642\u0641\u0648\u0646 \u0639\u0646 \u0627\u0644\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0625\u064a\u062c\u0627\u062f \u0633\u0628\u0628 \u0627\u0644\u062e\u0637\u0623 \u0648\u0643\u062a\u0627\u0628\u0629 \u062a\u0642\u0631\u064a\u0631 \u0639\u0646\u0647\u0627 \u0648\u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0627\u0644\u0645\u0645\u0643\u0646\u0629 \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d\u0647\u0627 \u0648\u0627\u0644\u062a\u064a \u0633\u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d \u062c\u0645\u064a\u0639 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u064a\u0633 \u0647\u0646\u0627\u0643 \u062d\u0627\u062c\u0629 \u0623\u0648 \u0648\u0642\u062a \u0644\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u062a\u0643\u0631\u0631. \u0644\u0646\u0641\u062a\u0631\u0636 \u0623\u0646\u0646\u0627 \u0623\u062e\u0630\u0646\u0627 \u0645\u062c\u0645\u0648\u0639\u062a\u064a\u0646 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0645\u064a\u0651\u0632\u0629 \u0648\u0627\u0644\u063a\u064a\u0631 \u0645\u062a\u0634\u0627\u0628\u0647\u0629 \u0648\u062d\u0627\u0648\u0644\u0646\u0627 \u062f\u0645\u062c\u0647\u0627 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0643\u0631\u0627\u0631. \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629 \u0633\u0646\u062c\u062f \u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0645\u0644\u0627\u062d\u0638\u0629 \u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a TaH. \u0648\u0647\u0630\u0627 \u064a\u0638\u0647\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0628\u0634\u0643\u0644 \u0625\u064a\u062c\u0627\u0628\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u0630\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u064a\u0642\u0648\u0645 \u0628\u0631\u0641\u0639 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0645\u0646\u062e\u0641\u0636 \u0625\u0644\u0649 \u0645\u062a\u0648\u0633\u0637 \u0628\u0633\u0628\u0628 \u0627\u0644\u0639\u062f\u062f \u0627\u0644\u0647\u0627\u0626\u0644 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c. (\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 XSS \u0645\u0646 \u0627\u0644\u0633\u0647\u0644 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0648\u0627\u0644\u062e\u0631\u0648\u062c \u0628\u0646\u062a\u0627\u0626\u062c \u0645\u0639\u0642\u0648\u0644\u0629) \u0641\u064a \u0639\u0627\u0645 2017 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0625\u0644\u0642\u0627\u0621 \u0646\u0638\u0631\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062f\u0645\u062c\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u0646\u0627\u0633\u0628 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u0648 TaH. \u062d\u064a\u062b \u064a\u0643\u0648\u0646 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u064a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0646\u0633\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u0646\u0648\u0639 \u0645\u0646 \u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a. \u0648\u062d\u0642\u064a\u0642\u0629 \u0646\u062d\u0646 \u0641\u064a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0644\u0627 \u0646\u0647\u062a\u0645 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0645\u0639\u062f\u0644 \u062d\u062f\u0648\u062b\u0647\u0627 \u0645\u062a\u0643\u0631\u0631. \u0648\u0647\u062f\u0641\u0646\u0627 \u0647\u0648 \u0645\u0639\u0631\u0641\u0629 \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u0647\u0630\u0627 \u064a\u0639\u0637\u064a\u0646\u0627 \u062a\u0635\u0648\u0651\u0631 \u0648\u0627\u0636\u062d \u0645\u0646 \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u0639\u062a\u0628\u0631 \u0644\u062f\u064a\u0646\u0627 \u0623\u0641\u0636\u0644 \u0645\u0646 \u0625\u063a\u0631\u0627\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u062a\u0643\u0631\u0627\u0631 \u0644\u064a\u0633 \u0644\u0647 \u0641\u0627\u0626\u062f\u0629.","title":"\u0644\u0645\u0627\u0630\u0627 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u0627 \u0645\u0646 \u0627\u0644\u062a\u0643\u0631\u0627\u0631\u061f"},{"location":"ar/#_7","text":"\u062a\u0645 \u0625\u0636\u0641\u0627\u0621 \u0627\u0644\u0637\u0627\u0628\u0639 \u0627\u0644\u0631\u0633\u0645\u064a \u0639\u0644\u0649 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0641\u064a \u0642\u0645\u0629 Open Security Summit \u0641\u064a \u0639\u0627\u0645 2017. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0623\u0645\u0636\u0649 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0641\u064a \u0645\u0646\u0638\u0645\u0629 \u0622\u0648\u0627\u0633\u0628 \u064a\u0648\u0645\u064a\u0646 \u0641\u064a \u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u0649 \u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0633\u064a\u0627\u0633\u0629 \u0648\u0627\u0636\u062d\u0629 \u0648\u0634\u0641\u0627\u0641\u0629. \u062a\u0639\u062f \u0646\u0633\u062e\u0629 2021 \u0647\u064a \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629 \u0627\u0644\u062a\u064a \u0646\u0633\u062a\u062e\u062f\u0645 \u0641\u064a\u0647\u0627 \u0647\u0630\u0647 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062f\u0639\u0648\u0629 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0642\u0646\u0648\u0627\u062a \u0627\u0644\u062a\u0648\u0627\u0635\u0644 \u0627\u0644\u0627\u062c\u062a\u0645\u0627\u0639\u064a \u0627\u0644\u0645\u062a\u0627\u062d\u0629 \u0644\u0646\u0627\u060c \u0644\u0643\u0644\u0651\u064b\u0627 \u0645\u0646 \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0648 OWASP. \u0648\u0641\u064a \u0635\u0641\u062d\u0629 \u0645\u0634\u0631\u0648\u0639 OWASP , \u0646\u0642\u0648\u0645 \u0628\u0625\u062f\u0631\u0627\u062c \u0639\u0646\u0627\u0635\u0631 \u0648\u0647\u064a\u0643\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0646\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0643\u064a\u0641\u064a\u0629 \u0625\u0631\u0633\u0627\u0644\u0647\u0627. \u0648\u0641\u064a \u0645\u0634\u0631\u0648\u0639 GitHub , \u0644\u062f\u064a\u0646\u0627 \u0623\u0645\u062b\u0644\u0629 \u0644\u0645\u0644\u0641\u0627\u062a \u062a\u0639\u0645\u0644 \u0643\u0642\u0648\u0627\u0644\u0628. \u0646\u0639\u0645\u0644 \u0645\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u0623\u062e\u0631\u0649 \u062d\u0633\u0628 \u0627\u0644\u062d\u0627\u062c\u0629 \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0647\u064a\u0643\u0644\u0648\u0631\u0633\u0645\u0647 \u0648\u0631\u0628\u0637\u0647 \u0628\u0640 CWEs. \u0646\u062d\u0635\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0628\u0627\u062f\u0644\u0629\u060c \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u0646\u0635\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0627\u062a\u060c \u0648\u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0647\u0645 \u0628\u0628\u064a\u0627\u0646\u0627\u062a\u0647\u0627 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629. \u0648\u0628\u0645\u062c\u0631\u062f \u062d\u0635\u0648\u0644\u0646\u0627 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0646\u0642\u0648\u0645 \u0628\u062a\u062d\u0645\u064a\u0644\u0647\u0627 \u0645\u0639\u064b\u0627 \u0648\u0646\u062c\u0631\u064a \u062a\u062d\u0644\u064a\u0644\u064b\u0627 \u0648\u0641\u0647\u0645\u0627\u064b \u0639\u0646 \u0623\u0633\u0627\u0633\u064a\u064b\u0627\u062a \u0627\u0644\u0631\u0628\u0637 \u0628\u0640 CWEs \u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0628\u0639\u0636 CWEs\u060c \u0628\u0633\u0628\u0628 \u0627\u0644\u062a\u0634\u0627\u0628\u0647 \u0628\u064a\u0646\u0647\u0645 (\u0645\u062b\u0644 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0641\u064a \u0627\u0644\u062a\u0634\u0641\u064a\u0631). \u062d\u064a\u062b \u064a\u062a\u0645 \u062a\u0648\u062b\u064a\u0642 \u0648\u0646\u0634\u0631 \u0623\u064a \u0642\u0631\u0627\u0631\u0627\u062a \u062a\u062a\u0639\u0644\u0642 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0623\u0648\u0644\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0645\u0629 \u0644\u062a\u0643\u0648\u0646 \u0645\u0641\u062a\u0648\u062d\u0629 \u0648\u0648\u0627\u0636\u062d\u0629 \u0645\u0639 \u0643\u064a\u0641\u064a\u0629 \u0645\u0648\u0627\u0621\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u064a\u062a\u0645 \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u062b\u0645\u0627\u0646\u064a\u0629 \u0630\u0627\u062a \u0623\u0639\u0644\u0649 \u0645\u0639\u062f\u0644\u0627\u062a \u062d\u062f\u0648\u062b \u0644\u0625\u062f\u0631\u0627\u062c\u0647\u0627 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0648\u0646\u0646\u0638\u0631 \u0623\u064a\u0636\u064b\u0627 \u0641\u064a \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0623\u064a \u0645\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0633\u064a\u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u0623\u0639\u0644\u0649 \u062a\u0642\u064a\u064a\u0645\u064a\u0646 \u063a\u064a\u0631 \u0645\u0648\u062c\u0648\u062f\u064a\u0646 \u0628\u0627\u0644\u0641\u0639\u0644 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u062d\u0644\u0644\u0629 \u0633\u0627\u0628\u0642\u0627\u064b \u0648\u0627\u0636\u0641\u062a\u0647\u0627 \u0627\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0628\u0645\u062c\u0631\u062f \u0627\u062e\u062a\u064a\u0627\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0639\u0634\u0631\u0629 \u060c \u064a\u062a\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0627\u062a\u0641\u0627\u0642 \u0639\u0644\u064a\u0647\u0627 \u0648\u0647\u064a (\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u062a\u0623\u062b\u064a\u0631)\u061b \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u0631\u062a\u064a\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631.","title":"\u0645\u0627 \u0647\u064a \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062a\u062d\u0644\u064a\u0644\u0647\u0627\u061f"},{"location":"ar/#_8","text":"\u0647\u0646\u0627\u0643 \u0639\u0648\u0627\u0645\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u062f\u0631\u062c\u0629 \u0644\u0643\u0644 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0648\u0625\u0644\u064a\u0643 \u0645\u0627 \u062a\u0639\u0646\u064a\u0647: \u0631\u0628\u0637 \u0628\u0640 CWEs : \u0639\u062f\u062f CWEs \u0627\u0644\u0630\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0641\u0631\u064a\u0642. \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0648\u0647\u0648 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0631\u0636\u0629 \u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0628\u0645\u0639\u064a\u0627\u0631 CWE \u062e\u0644\u0627\u0644 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a. \u0623\u062c\u0631\u062a\u0647\u0627 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0641\u064a \u0633\u0646\u0629 \u0645\u062d\u062f\u062f\u0629. (\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a) \u0648\u0627\u0644\u062a\u063a\u0637\u064a\u0629 :\u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0644\u0640 CWE \u0645\u064f\u0639\u064a\u0651\u0646. \u062e\u0637\u0648\u0631\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 : \u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0644\u0647 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0645\u062a\u0648\u0642\u0639 : \u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627. \u0625\u062c\u0645\u0627\u0644\u064a CVEs : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f CVEs \u0641\u064a NVD DB \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627.","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a"},{"location":"ar/#2021-2017","text":"\u0647\u0646\u0627\u0643 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u062d\u062f\u064a\u062b \u0639\u0646 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0639\u0634\u0631\u0629 \u0627\u0644\u0623\u0648\u0644\u0649. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0639\u0631\u064a\u0641 \u0643\u0644 (\u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0645\u062f\u0631\u062c\u0629 \u0641\u064a CWEs)\u060c \u0648\u0644\u0643\u0646 \u0627\u0644\u0630\u064a \u064a\u0638\u0647\u0631 \u0644\u0646\u0627 \u0623\u0646\u0647 \u0644\u0627 \u064a\u0648\u062c\u062f \u0623\u064a \u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0647\u0627 \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u0645\u0646 \u0627\u0644\u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u0646\u0638\u0631\u064a\u0629\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0623\u0648 \u062a\u0623\u062b\u0631 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u062a\u0633\u0645\u064a\u0629. \u0648\u0646\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062e\u0637\u0637\u0627\u062a Venn \u0644\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0643\u0645\u0627 \u0648\u0631\u062f \u0641\u064a \u0627\u0644\u0645\u062b\u0627\u0644 \u0623\u062f\u0646\u0627\u0647. \u064a\u0645\u062b\u0644 \u0645\u062e\u0637\u0637 Venn \u0623\u0639\u0644\u0627\u0647 \u0627\u0644\u062a\u0631\u0627\u0628\u0637 \u0628\u064a\u0646 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2017. \u0648\u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0630\u0644\u0643\u060c \u0623\u0635\u0628\u062d\u062a \u0628\u0636\u0639 \u0646\u0642\u0627\u0637 \u0623\u0633\u0627\u0633\u064a\u0629 \u0648\u0627\u0636\u062d\u0629: \u0643\u0627\u0646 \u064a\u064f\u0631\u0649 \u0628\u0623\u0646 \u0647\u062c\u0648\u0645 - \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0646\u062a\u0645\u064a \u0641\u064a \u062d\u0642\u064a\u0642\u0629 \u0627\u0644\u0623\u0645\u0631 \u0625\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646(Injection) \u0644\u0623\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0623\u0633\u0627\u0633 \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u062d\u0642\u0646 \u0627\u0644\u0645\u062d\u062a\u0648\u0649. \u0628\u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0627\u0645 2021 \u060c \u0623\u0635\u0628\u062d \u0645\u0646 \u0627\u0644\u0648\u0627\u0636\u062d \u0623\u0646 ( XSS )\u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0625\u0644\u0649 \u0627\u0644\u062d\u0642\u0646(Injection). \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0645\u0627 \u0628\u064a\u0646\u0647\u0645 \u063a\u0627\u0644\u0628\u064b\u0627 \u064a\u0643\u0648\u0646 \u0641\u064a \u0627\u062a\u062c\u0627\u0647 \u0648\u0627\u062d\u062f. \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u0646\u0635\u0646\u0651\u0641 \u0627\u0644\u062b\u063a\u0631\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \"\u0627\u0644\u0639\u064e\u0631\u064e\u0636\"\u060c \u0648\u0644\u064a\u0633 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a (\u0627\u0644\u0630\u064a \u064a\u062d\u062a\u0645\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0639\u0645\u064a\u0642\u064b\u0627). \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0642\u062f \u062a\u0643\u0648\u0646 \" \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629 \" \u0646\u062a\u064a\u062c\u0629 \"\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u062e\u0627\u0637\u0626\u0629 \u0627\u0644\u0623\u0645\u0627\u0646\u060c \u0648\u0641\u064a \u0627\u0644\u063a\u0627\u0644\u0628 \u0644\u0646 \u062a\u0631\u0627\u0647\u0627 \u0628\u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0645\u0639\u0627\u0643\u0633. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u064a\u062a\u0645 \u0631\u0633\u0645 \u0627\u0644\u0623\u0633\u0647\u0645 \u0641\u064a \u0645\u0646\u0627\u0637\u0642 \u0627\u0644\u062a\u0623\u062b\u0631 \u0644\u0644\u0625\u0634\u0627\u0631\u0629 \u0625\u0644\u0649 \u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0630\u064a \u064a\u062d\u062f\u062b \u0641\u064a\u0647. \u0623\u062d\u064a\u0627\u0646\u064b\u0627 \u064a\u062a\u0645 \u0631\u0633\u0645 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0637\u0637\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0643\u0645\u0627 \u0641\u064a A06: 2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b . \u0641\u064a \u062d\u064a\u0646 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0642\u062f \u064a\u0643\u0648\u0646 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a \u0647\u064a \u062b\u063a\u0631\u0627\u062a \u0645\u0646 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u0641\u0625\u0646\u0647 \u064a\u062a\u0645 \u0625\u062f\u0627\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0641 \u0648\u0645\u0633\u0624\u0648\u0644\u064a\u0627\u062a \u0645\u062e\u062a\u0644\u0641\u0629. \u0648\u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0623\u062e\u0631\u0649 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u062a\u0645\u062b\u0651\u0644 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u0623\u0648\u0644.","title":"\u0639\u0644\u0627\u0642\u0627\u062a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0644\u0639\u0627\u0645 2021 \u0645\u0639 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0639\u0627\u0645 2017"},{"location":"ar/#_9","text":"\u0633\u0627\u0647\u0645\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u062a\u0627\u0644\u064a\u0629 (\u062c\u0646\u0628\u064b\u0627 \u0625\u0644\u0649 \u062c\u0646\u0628 \u0645\u0639 \u0628\u0639\u0636 \u0627\u0644\u0645\u0633\u0627\u0647\u0645\u064a\u0646-\u0627\u0644\u0645\u062a\u0628\u0631\u0639\u064a\u0646 \u0627\u0644\u0645\u062c\u0647\u0648\u0644\u064a\u0646) \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 500,000 \u062a\u0637\u0628\u064a\u0642 \u0648\u062c\u0639\u0644\u0647\u0627 \u0647\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0643\u0628\u0631 \u0648\u0627\u0644\u0623\u0643\u062b\u0631 \u0648\u0627\u0644\u0623\u0634\u0645\u0644 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0639\u0644\u064a\u0647\u0627 \u0648\u062c\u0639\u0644\u0647\u0627 \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u062a\u0623\u0643\u062f \u0623\u0646\u0647 \u0645\u0646 \u063a\u064a\u0631 \u0627\u0633\u0647\u0627\u0645\u0627\u062a\u0643 \u0644\u0646 \u064a\u0643\u0648\u0646 \u0647\u0630\u0627 \u0645\u0645\u0643\u0646. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT)","title":"\u0634\u0643\u0631\u0627\u064b \u0644\u0643\u0644 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0645\u0639\u0646\u0627 \u0641\u064a \u062c\u0645\u0639 \u0647\u0630\u0647 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a"},{"location":"ar/#_10","text":"","title":"\u0634\u0643\u0631\u0627 \u0644\u062c\u0645\u064a\u0639 \u062f\u0627\u0639\u0645\u064a\u0646\u0627 \u0627\u0644\u0645\u0627\u0644\u064a\u064a\u0646"},{"location":"ar/0x00-notice/","text":"\u0627\u0644\u0627\u0635\u062f\u0627\u0631 \u2693\ufe0e 24th September 2021 \u0627\u0644\u0645\u0624\u0644\u0641\u0648\u0646 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0648\u0646 \u2693\ufe0e Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet ) \u0627\u0644\u0645\u0633\u0627\u0647\u0645\u064a\u0646 \u2693\ufe0e Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination \u0627\u0644\u0645\u062a\u0631\u062c\u0645\u064a\u0646 \u2693\ufe0e Malek Aldossary , Mohammed Alsuhaymi , Thamer Alshammeri , Yara Eissa Abdu Ajeebi , Wesal Majeed Alobaidi , Amal Almutairi , Noura Abdulmohsen Alsubaie , Mohammed Ibrahem Alsheky , Zainab Hussain Al Hussain , FAHAD ALOTAIFEE , Nowayer , Saja Alqurashi , Raghad Aljabr , Majed alrhyel , Almaha , Mohammed AL Busaidi , Aljohara Alsubaie , Rana Gharmallah Alzahrani , Haniya , Fahdah Alhadayan , Ibtisam AlTuraif , Abeer Alwelaie , Nasser bin Hasen , Mubark Allaghbi , Roaa Aljohani \u0643\u064a\u0641 \u062a\u0642\u0648\u0645 \u0628\u0645\u0633\u0627\u0639\u062f\u062a\u0646\u0627 \u2693\ufe0e \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0645\u0631\u0627\u062d\u0644\u060c \u0646\u0637\u0644\u0628 \u0645\u0633\u0627\u0639\u062f\u062a\u0643 \u0641\u064a\u0645\u0627 \u064a\u0644\u064a: \u0639\u0644\u0645\u0627\u0621 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a: \u064a\u0631\u062c\u0649 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u062a\u062d\u0644\u064a\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u0642\u0645\u0646\u0627 \u0628\u0647\u0627. \u0645\u0635\u0645\u0651\u0645\u0648 \u0627\u0644\u0648\u064a\u0628: \u0646\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u0625\u0646\u0634\u0627\u0621 \u0646\u0633\u062e\u0629 \u0645\u062a\u0648\u0627\u0641\u0642\u0629 \u0645\u0639 \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0645\u062d\u0645\u0648\u0644\u0629. \u0627\u0644\u0645\u062a\u0631\u062c\u0645\u0648\u0646: \u064a\u0631\u062c\u0649 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0646\u0635 \u0628\u0627\u0644\u0644\u063a\u0629 \u0627\u0644\u0625\u0646\u062c\u0644\u064a\u0632\u064a\u0629 \u0648\u0627\u0644\u062a\u0623\u0643\u062f \u0623\u0646\u0647 \u0642\u0627\u0628\u0644 \u0644\u0644\u062a\u0631\u062c\u0645\u0629. \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0631\u0641\u0639 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062a\u0630\u0627\u0643\u0631 \u2693\ufe0e \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0623\u064a \u0645\u0634\u0643\u0644\u0629 \u0623\u0648 \u062a\u0639\u062f\u064a\u0644\u060c \u064a\u0631\u062c\u0649 \u0632\u064a\u0627\u0631\u0629 \u0627\u0644\u0631\u0627\u0628\u0637 \u0627\u0644\u062a\u0627\u0644\u064a: https://github.com/OWASP/Top10/issues","title":"\u0645\u0644\u0627\u062d\u0638\u0627\u062a"},{"location":"ar/0x00-notice/#_1","text":"24th September 2021","title":"\u0627\u0644\u0627\u0635\u062f\u0627\u0631"},{"location":"ar/0x00-notice/#_2","text":"Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet )","title":"\u0627\u0644\u0645\u0624\u0644\u0641\u0648\u0646 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0648\u0646"},{"location":"ar/0x00-notice/#_3","text":"Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination","title":"\u0627\u0644\u0645\u0633\u0627\u0647\u0645\u064a\u0646"},{"location":"ar/0x00-notice/#_4","text":"Malek Aldossary , Mohammed Alsuhaymi , Thamer Alshammeri , Yara Eissa Abdu Ajeebi , Wesal Majeed Alobaidi , Amal Almutairi , Noura Abdulmohsen Alsubaie , Mohammed Ibrahem Alsheky , Zainab Hussain Al Hussain , FAHAD ALOTAIFEE , Nowayer , Saja Alqurashi , Raghad Aljabr , Majed alrhyel , Almaha , Mohammed AL Busaidi , Aljohara Alsubaie , Rana Gharmallah Alzahrani , Haniya , Fahdah Alhadayan , Ibtisam AlTuraif , Abeer Alwelaie , Nasser bin Hasen , Mubark Allaghbi , Roaa Aljohani","title":"\u0627\u0644\u0645\u062a\u0631\u062c\u0645\u064a\u0646"},{"location":"ar/0x00-notice/#_5","text":"\u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0645\u0631\u0627\u062d\u0644\u060c \u0646\u0637\u0644\u0628 \u0645\u0633\u0627\u0639\u062f\u062a\u0643 \u0641\u064a\u0645\u0627 \u064a\u0644\u064a: \u0639\u0644\u0645\u0627\u0621 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a: \u064a\u0631\u062c\u0649 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u062a\u062d\u0644\u064a\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u0642\u0645\u0646\u0627 \u0628\u0647\u0627. \u0645\u0635\u0645\u0651\u0645\u0648 \u0627\u0644\u0648\u064a\u0628: \u0646\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u0625\u0646\u0634\u0627\u0621 \u0646\u0633\u062e\u0629 \u0645\u062a\u0648\u0627\u0641\u0642\u0629 \u0645\u0639 \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0645\u062d\u0645\u0648\u0644\u0629. \u0627\u0644\u0645\u062a\u0631\u062c\u0645\u0648\u0646: \u064a\u0631\u062c\u0649 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0646\u0635 \u0628\u0627\u0644\u0644\u063a\u0629 \u0627\u0644\u0625\u0646\u062c\u0644\u064a\u0632\u064a\u0629 \u0648\u0627\u0644\u062a\u0623\u0643\u062f \u0623\u0646\u0647 \u0642\u0627\u0628\u0644 \u0644\u0644\u062a\u0631\u062c\u0645\u0629.","title":"\u0643\u064a\u0641 \u062a\u0642\u0648\u0645 \u0628\u0645\u0633\u0627\u0639\u062f\u062a\u0646\u0627"},{"location":"ar/0x00-notice/#_6","text":"\u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0623\u064a \u0645\u0634\u0643\u0644\u0629 \u0623\u0648 \u062a\u0639\u062f\u064a\u0644\u060c \u064a\u0631\u062c\u0649 \u0632\u064a\u0627\u0631\u0629 \u0627\u0644\u0631\u0627\u0628\u0637 \u0627\u0644\u062a\u0627\u0644\u064a: https://github.com/OWASP/Top10/issues","title":"\u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0631\u0641\u0639 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062a\u0630\u0627\u0643\u0631"},{"location":"ar/A00-about-owasp/","text":"\u0639\u0646 \u0623\u0648\u0627\u0633\u0628 \u2693\ufe0e \u0645\u0634\u0631\u0648\u0639 \u0623\u0645\u0627\u0646 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0648\u064a\u0628 \u0627\u0644\u0645\u0641\u062a\u0648\u062d \u0623\u0648\u0627\u0633\u0628 (OWASP) \u0647\u0648 \u0645\u062c\u062a\u0645\u0639 \u0645\u0641\u062a\u0648\u062d \u0627\u0644\u0645\u0635\u062f\u0631 \u0648\u064a\u0631\u0643\u0632 \u0639\u0644\u0649 \u062a\u0645\u0643\u064a\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0645\u0646 \u062a\u0637\u0648\u064a\u0631 \u0648\u0634\u0631\u0627\u0621 \u0648\u0635\u064a\u0627\u0646\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (APIs) \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0627\u0644\u0648\u062b\u0648\u0642 \u0628\u0647\u0627. \u0641\u064a \u0623\u0648\u0627\u0633\u0628 \u0633\u062a\u062c\u062f: \u0623\u062f\u0648\u0627\u062a \u0648\u0645\u0639\u0627\u064a\u064a\u0631 \u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0623\u0628\u062d\u0627\u062b \u0627\u0644\u0645\u062a\u0637\u0648\u0631\u0629 \u0627\u0644\u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629 \u0627\u0644\u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0627\u0641\u0636\u0644 \u0627\u0644\u0633\u064a\u0627\u0633\u0627\u062a. \u0643\u062a\u0628 \u0643\u0627\u0645\u0644\u0629 \u0639\u0646 \u0627\u062e\u062a\u0628\u0627\u0631 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\u060c \u0648\u062a\u0637\u0648\u064a\u0631 \u0648\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u0622\u0645\u0646. \u0627\u0644\u0639\u0631\u0648\u0636 \u0627\u0644\u062a\u0642\u062f\u064a\u0645\u064a\u0629 \u0648 \u0645\u0642\u0627\u0637\u0639 \u0627\u0644\u0641\u064a\u062f\u064a\u0648 Cheat sheets \u062d\u0648\u0644 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0627\u0644\u0634\u0627\u0626\u0639\u0629 \u0627\u062c\u062a\u0645\u0627\u0639\u0627\u062a \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0627\u0644\u0645\u0624\u062a\u0645\u0631\u0627\u062a . \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0642\u0648\u0642\u0644 \u0627\u0639\u0631\u0641 \u0627\u0644\u0645\u0632\u064a\u062f \u0639\u0644\u0649: https://www.owasp.org . \u062c\u0645\u064a\u0639 \u0623\u062f\u0648\u0627\u062a \u0623\u0648\u0627\u0633\u0628 \u0648\u0627\u0644\u0645\u0633\u062a\u0646\u062f\u0627\u062a \u0648\u0645\u0642\u0627\u0637\u0639 \u0627\u0644\u0641\u064a\u062f\u064a\u0648 \u0648\u0627\u0644\u0639\u0631\u0648\u0636 \u0627\u0644\u062a\u0642\u062f\u064a\u0645\u064a\u0629 \u0648\u0627\u0644\u0641\u0635\u0648\u0644 \u0645\u062c\u0627\u0646\u064a\u0629 \u0648\u0645\u0641\u062a\u0648\u062d\u0629 \u0644\u0623\u064a \u0634\u062e\u0635 \u0645\u0647\u062a\u0645 \u0628\u062a\u062d\u0633\u064a\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0646\u062d\u0646 \u0646\u062f\u0639\u0648 \u0625\u0644\u0649 \u0627\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u0627\u0639\u062a\u0628\u0627\u0631\u0647 \u0645\u0634\u0643\u0644\u0629 \u062a\u062a\u0639\u0644\u0642 \u0628\u0627\u0644\u0623\u0634\u062e\u0627\u0635 \u0648\u0627\u0644\u0633\u064a\u0627\u0633\u0627\u062a \u0627\u0644\u062a\u0642\u0646\u064a\u0629\u060c \u0644\u0623\u0646 \u0627\u0644\u0623\u0633\u0627\u0644\u064a\u0628 \u0627\u0644\u0623\u0643\u062b\u0631 \u0641\u0627\u0639\u0644\u064a\u0629 \u0644\u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u062a\u0637\u0644\u0651\u0628 \u062a\u062d\u0633\u064a\u0646\u0627\u062a \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0645\u062c\u0627\u0644\u0627\u062a. \u0623\u0648\u0627\u0633\u0628 \u0646\u0648\u0639 \u062c\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u062a\u0646\u0638\u064a\u0645. \u064a\u0633\u0645\u062d \u0644\u0646\u0627 \u0628\u0627\u0644\u062a\u062d\u0631\u0651\u0631 \u0645\u0646 \u0627\u0644\u0636\u063a\u0648\u0637 \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629 \u0628\u062a\u0642\u062f\u064a\u0645 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u063a\u064a\u0631 \u0645\u062a\u062d\u064a\u0632\u0629 \u0648\u0639\u0645\u0644\u064a\u0629 \u0648\u0641\u0639\u0627\u0644\u0629 \u0645\u0646 \u062d\u064a\u062b \u0627\u0644\u062a\u0643\u0644\u0641\u0629 \u062d\u0648\u0644 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0623\u0648\u0627\u0633\u0628 \u0644\u064a\u0633\u062a \u062a\u0627\u0628\u0639\u0629 \u0644\u0623\u064a \u0634\u0631\u0643\u0629 \u062a\u0642\u0646\u064a\u0629\u060c \u0639\u0644\u0649 \u0627\u0644\u0631\u063a\u0645 \u0645\u0646 \u0623\u0646\u0646\u0627 \u0646\u062f\u0639\u0645 \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0633\u062a\u0646\u064a\u0631 \u0644\u062a\u0642\u0646\u064a\u0627\u062a \u0627\u0644\u0623\u0645\u0646 \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629. \u062a\u0646\u062a\u062c \u0623\u0648\u0627\u0633\u0628 \u0623\u0646\u0648\u0627\u0639\u064b\u0627 \u0639\u062f\u064a\u062f\u0629 \u0645\u0646 \u0627\u0644\u0645\u0648\u0627\u062f \u0628\u0637\u0631\u064a\u0642\u0629 \u062a\u0639\u0627\u0648\u0646\u064a\u0629 \u0648\u0634\u0641\u0627\u0641\u0629 \u0648\u0645\u0646\u0641\u062a\u062d\u0629. \u0645\u0624\u0633\u0633\u0629 \u0623\u0648\u0627\u0633\u0628 \u0647\u064a \u0643\u064a\u0627\u0646 \u063a\u064a\u0631 \u0631\u0628\u062d\u064a \u0648\u0627\u0644\u0630\u064a \u064a\u0636\u0645\u0646 \u0646\u062c\u0627\u062d \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0639\u0644\u0649 \u0627\u0644\u0645\u062f\u0649 \u0627\u0644\u0637\u0648\u064a\u0644. \u0643\u0644 \u0634\u062e\u0635 \u0645\u0631\u062a\u0628\u0637 \u0628\u0640 \u0623\u0648\u0627\u0633\u0628 \u062a\u0642\u0631\u064a\u0628\u064b\u0627 \u0645\u062a\u0637\u0648\u0639\u060c \u0628\u0645\u0627 \u0641\u064a \u0630\u0644\u0643 \u0645\u062c\u0644\u0633 \u0623\u0648\u0627\u0633\u0628 \u0648\u0642\u0627\u062f\u0629 \u0627\u0644\u0641\u0631\u0648\u0639 \u0648\u0642\u0627\u062f\u0629 \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0648\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u0634\u0631\u0648\u0639. \u0646\u062d\u0646 \u0646\u062f\u0639\u0645 \u0627\u0644\u0623\u0628\u062d\u0627\u062b \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0645\u064f\u0628\u062a\u0643\u0631\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0646\u062d \u0648\u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0629. \u062d\u0642\u0648\u0642 \u0627\u0644\u0646\u0634\u0631 \u0648\u0627\u0644\u062a\u0631\u062e\u064a\u0635 \u2693\ufe0e \u062d\u0642\u0648\u0642 \u0627\u0644\u0646\u0634\u0631 \u00a9 \u0645\u0624\u0633\u0633\u0629 \u0623\u0648\u0627\u0633\u0628 2003-2021. \u062a\u0645 \u0625\u0635\u062f\u0627\u0631 \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u062a\u0646\u062f \u0628\u0645\u0648\u062c\u0628 \u062a\u0631\u062e\u064a\u0635 \u0627\u0644\u0625\u0628\u062f\u0627\u0639\u064a \u0627\u0644\u062a\u0631\u062e\u064a\u0635 \u0628\u0627\u0644\u0645\u062b\u0644 4.0. \u0644\u0623\u064a \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u0648 \u062a\u0648\u0632\u064a\u0639\u060c \u064a\u062c\u0628 \u0623\u0646 \u062a\u0648\u0636\u062d \u0644\u0644\u0622\u062e\u0631\u064a\u0646 \u0634\u0631\u0648\u0637 \u062a\u0631\u062e\u064a\u0635 \u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0644.","title":"\u0639\u0646 \u0623\u0648\u0627\u0633\u0628"},{"location":"ar/A00-about-owasp/#_1","text":"\u0645\u0634\u0631\u0648\u0639 \u0623\u0645\u0627\u0646 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0648\u064a\u0628 \u0627\u0644\u0645\u0641\u062a\u0648\u062d \u0623\u0648\u0627\u0633\u0628 (OWASP) \u0647\u0648 \u0645\u062c\u062a\u0645\u0639 \u0645\u0641\u062a\u0648\u062d \u0627\u0644\u0645\u0635\u062f\u0631 \u0648\u064a\u0631\u0643\u0632 \u0639\u0644\u0649 \u062a\u0645\u0643\u064a\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0645\u0646 \u062a\u0637\u0648\u064a\u0631 \u0648\u0634\u0631\u0627\u0621 \u0648\u0635\u064a\u0627\u0646\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (APIs) \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0627\u0644\u0648\u062b\u0648\u0642 \u0628\u0647\u0627. \u0641\u064a \u0623\u0648\u0627\u0633\u0628 \u0633\u062a\u062c\u062f: \u0623\u062f\u0648\u0627\u062a \u0648\u0645\u0639\u0627\u064a\u064a\u0631 \u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0623\u0628\u062d\u0627\u062b \u0627\u0644\u0645\u062a\u0637\u0648\u0631\u0629 \u0627\u0644\u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629 \u0627\u0644\u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0627\u0641\u0636\u0644 \u0627\u0644\u0633\u064a\u0627\u0633\u0627\u062a. \u0643\u062a\u0628 \u0643\u0627\u0645\u0644\u0629 \u0639\u0646 \u0627\u062e\u062a\u0628\u0627\u0631 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\u060c \u0648\u062a\u0637\u0648\u064a\u0631 \u0648\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u0622\u0645\u0646. \u0627\u0644\u0639\u0631\u0648\u0636 \u0627\u0644\u062a\u0642\u062f\u064a\u0645\u064a\u0629 \u0648 \u0645\u0642\u0627\u0637\u0639 \u0627\u0644\u0641\u064a\u062f\u064a\u0648 Cheat sheets \u062d\u0648\u0644 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0627\u0644\u0634\u0627\u0626\u0639\u0629 \u0627\u062c\u062a\u0645\u0627\u0639\u0627\u062a \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0627\u0644\u0645\u0624\u062a\u0645\u0631\u0627\u062a . \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0642\u0648\u0642\u0644 \u0627\u0639\u0631\u0641 \u0627\u0644\u0645\u0632\u064a\u062f \u0639\u0644\u0649: https://www.owasp.org . \u062c\u0645\u064a\u0639 \u0623\u062f\u0648\u0627\u062a \u0623\u0648\u0627\u0633\u0628 \u0648\u0627\u0644\u0645\u0633\u062a\u0646\u062f\u0627\u062a \u0648\u0645\u0642\u0627\u0637\u0639 \u0627\u0644\u0641\u064a\u062f\u064a\u0648 \u0648\u0627\u0644\u0639\u0631\u0648\u0636 \u0627\u0644\u062a\u0642\u062f\u064a\u0645\u064a\u0629 \u0648\u0627\u0644\u0641\u0635\u0648\u0644 \u0645\u062c\u0627\u0646\u064a\u0629 \u0648\u0645\u0641\u062a\u0648\u062d\u0629 \u0644\u0623\u064a \u0634\u062e\u0635 \u0645\u0647\u062a\u0645 \u0628\u062a\u062d\u0633\u064a\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0646\u062d\u0646 \u0646\u062f\u0639\u0648 \u0625\u0644\u0649 \u0627\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u0627\u0639\u062a\u0628\u0627\u0631\u0647 \u0645\u0634\u0643\u0644\u0629 \u062a\u062a\u0639\u0644\u0642 \u0628\u0627\u0644\u0623\u0634\u062e\u0627\u0635 \u0648\u0627\u0644\u0633\u064a\u0627\u0633\u0627\u062a \u0627\u0644\u062a\u0642\u0646\u064a\u0629\u060c \u0644\u0623\u0646 \u0627\u0644\u0623\u0633\u0627\u0644\u064a\u0628 \u0627\u0644\u0623\u0643\u062b\u0631 \u0641\u0627\u0639\u0644\u064a\u0629 \u0644\u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u062a\u0637\u0644\u0651\u0628 \u062a\u062d\u0633\u064a\u0646\u0627\u062a \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0645\u062c\u0627\u0644\u0627\u062a. \u0623\u0648\u0627\u0633\u0628 \u0646\u0648\u0639 \u062c\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u062a\u0646\u0638\u064a\u0645. \u064a\u0633\u0645\u062d \u0644\u0646\u0627 \u0628\u0627\u0644\u062a\u062d\u0631\u0651\u0631 \u0645\u0646 \u0627\u0644\u0636\u063a\u0648\u0637 \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629 \u0628\u062a\u0642\u062f\u064a\u0645 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u063a\u064a\u0631 \u0645\u062a\u062d\u064a\u0632\u0629 \u0648\u0639\u0645\u0644\u064a\u0629 \u0648\u0641\u0639\u0627\u0644\u0629 \u0645\u0646 \u062d\u064a\u062b \u0627\u0644\u062a\u0643\u0644\u0641\u0629 \u062d\u0648\u0644 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0623\u0648\u0627\u0633\u0628 \u0644\u064a\u0633\u062a \u062a\u0627\u0628\u0639\u0629 \u0644\u0623\u064a \u0634\u0631\u0643\u0629 \u062a\u0642\u0646\u064a\u0629\u060c \u0639\u0644\u0649 \u0627\u0644\u0631\u063a\u0645 \u0645\u0646 \u0623\u0646\u0646\u0627 \u0646\u062f\u0639\u0645 \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0633\u062a\u0646\u064a\u0631 \u0644\u062a\u0642\u0646\u064a\u0627\u062a \u0627\u0644\u0623\u0645\u0646 \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629. \u062a\u0646\u062a\u062c \u0623\u0648\u0627\u0633\u0628 \u0623\u0646\u0648\u0627\u0639\u064b\u0627 \u0639\u062f\u064a\u062f\u0629 \u0645\u0646 \u0627\u0644\u0645\u0648\u0627\u062f \u0628\u0637\u0631\u064a\u0642\u0629 \u062a\u0639\u0627\u0648\u0646\u064a\u0629 \u0648\u0634\u0641\u0627\u0641\u0629 \u0648\u0645\u0646\u0641\u062a\u062d\u0629. \u0645\u0624\u0633\u0633\u0629 \u0623\u0648\u0627\u0633\u0628 \u0647\u064a \u0643\u064a\u0627\u0646 \u063a\u064a\u0631 \u0631\u0628\u062d\u064a \u0648\u0627\u0644\u0630\u064a \u064a\u0636\u0645\u0646 \u0646\u062c\u0627\u062d \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0639\u0644\u0649 \u0627\u0644\u0645\u062f\u0649 \u0627\u0644\u0637\u0648\u064a\u0644. \u0643\u0644 \u0634\u062e\u0635 \u0645\u0631\u062a\u0628\u0637 \u0628\u0640 \u0623\u0648\u0627\u0633\u0628 \u062a\u0642\u0631\u064a\u0628\u064b\u0627 \u0645\u062a\u0637\u0648\u0639\u060c \u0628\u0645\u0627 \u0641\u064a \u0630\u0644\u0643 \u0645\u062c\u0644\u0633 \u0623\u0648\u0627\u0633\u0628 \u0648\u0642\u0627\u062f\u0629 \u0627\u0644\u0641\u0631\u0648\u0639 \u0648\u0642\u0627\u062f\u0629 \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0648\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u0634\u0631\u0648\u0639. \u0646\u062d\u0646 \u0646\u062f\u0639\u0645 \u0627\u0644\u0623\u0628\u062d\u0627\u062b \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0645\u064f\u0628\u062a\u0643\u0631\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0646\u062d \u0648\u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0629.","title":"\u0639\u0646 \u0623\u0648\u0627\u0633\u0628"},{"location":"ar/A00-about-owasp/#_2","text":"\u062d\u0642\u0648\u0642 \u0627\u0644\u0646\u0634\u0631 \u00a9 \u0645\u0624\u0633\u0633\u0629 \u0623\u0648\u0627\u0633\u0628 2003-2021. \u062a\u0645 \u0625\u0635\u062f\u0627\u0631 \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u062a\u0646\u062f \u0628\u0645\u0648\u062c\u0628 \u062a\u0631\u062e\u064a\u0635 \u0627\u0644\u0625\u0628\u062f\u0627\u0639\u064a \u0627\u0644\u062a\u0631\u062e\u064a\u0635 \u0628\u0627\u0644\u0645\u062b\u0644 4.0. \u0644\u0623\u064a \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u0648 \u062a\u0648\u0632\u064a\u0639\u060c \u064a\u062c\u0628 \u0623\u0646 \u062a\u0648\u0636\u062d \u0644\u0644\u0622\u062e\u0631\u064a\u0646 \u0634\u0631\u0648\u0637 \u062a\u0631\u062e\u064a\u0635 \u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0644.","title":"\u062d\u0642\u0648\u0642 \u0627\u0644\u0646\u0634\u0631 \u0648\u0627\u0644\u062a\u0631\u062e\u064a\u0635"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/","text":"\u0643\u064a\u0641 \u062a\u0628\u062f\u0623 \u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0639 \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u2693\ufe0e \u0641\u064a \u0627\u0644\u0633\u0627\u0628\u0642\u060c \u0644\u0645 \u064a\u062a\u0645 \u062a\u0635\u0645\u064a\u0645 \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0623\u0628\u062f\u064b\u0627 \u0644\u064a\u0643\u0648\u0646 \u0623\u0633\u0627\u0633\u064b\u0627 \u0644\u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u0645\u0646 \u0627\u0644\u0636\u0631\u0648\u0631\u064a \u0623\u0646 \u062a\u0628\u062f\u0623 \u0645\u0646 \u0645\u0643\u0627\u0646\u064d \u0645\u0627\u060c \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u0628\u062f\u0623\u062a \u0644\u0644\u062a\u0648\u0651 \u0641\u064a \u0631\u062d\u0644\u0629 \u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0627. \u062a\u064f\u0639\u062f \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 \u0628\u062f\u0627\u064a\u0629 \u062c\u064a\u0651\u062f\u0629 \u0643\u062e\u0637 \u0623\u0633\u0627\u0633 \u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0645\u0631\u0627\u062c\u0639\u0629 \u0648\u0645\u0627 \u0625\u0644\u0649 \u0630\u0644\u0643\u060c \u0648\u0644\u0643\u0646\u0647\u0627 \u0644\u064a\u0633\u062a \u0643\u0627\u0641\u064a\u0629 \u0641\u064a \u062d\u062f \u0630\u0627\u062a\u0647\u0627. \u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u0623\u0648\u0644\u0649: \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0647\u062f\u0627\u0641 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u2693\ufe0e \u062a\u062d\u0627\u0648\u0644 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (AppSec) \u0627\u0644\u062c\u0631\u064a \u0642\u0628\u0644 \u0623\u0646 \u062a\u062a\u0645\u0643\u0646 \u0645\u0646 \u0627\u0644\u0632\u062d\u0641 \u0623\u0648 \u0627\u0644\u0645\u0634\u064a. \u0647\u0630\u0647 \u0627\u0644\u062c\u0647\u0648\u062f \u0645\u062d\u0643\u0648\u0645 \u0639\u0644\u064a\u0647\u0627 \u0628\u0627\u0644\u0641\u0634\u0644. \u0646\u062d\u0646 \u0646\u0634\u062c\u0651\u0639 \u0628\u0634\u062f\u0651\u0629 \u0645\u062f\u0631\u0627\u0621 \u0623\u0645\u0646 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a CISOs \u0648\u0643\u0628\u0627\u0631 \u0645\u062e\u062a\u0635\u0651\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0645\u0648\u0630\u062c \u0623\u0648\u0627\u0633\u0628 \u0644\u0646\u0636\u062c \u0648\u0636\u0645\u0627\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c SAMM \u0644\u062a\u062d\u062f\u064a\u062f \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0645\u062c\u0627\u0644\u0627\u062a \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0639\u0644\u0649 \u0645\u062f\u0649 \u0641\u062a\u0631\u0629 \u062a\u062a\u0631\u0627\u0648\u062d \u0645\u0627 \u0628\u064a\u0646 1-3 \u0633\u0646\u0648\u0627\u062a. \u062a\u062a\u0645\u062b\u0651\u0644 \u0627\u0644\u062e\u0637\u0648\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0641\u064a \u062a\u0642\u064a\u064a\u0645 \u0648\u0636\u0639\u0643 \u0627\u0644\u062d\u0627\u0644\u064a\u060c \u0648\u062a\u062d\u062f\u064a\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0641\u064a \u0627\u0644\u062d\u0648\u0643\u0645\u0629 \u0648\u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0648\u0627\u0644\u062a\u0646\u0641\u064a\u0630 \u0648\u0627\u0644\u062a\u062d\u0642\u0642 \u0648\u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u062d\u0644\u0651\u0647\u0627 \u0639\u0644\u0649 \u0627\u0644\u0641\u0648\u0631 \u0645\u0642\u0627\u0628\u0644 \u062a\u0644\u0643 \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0623\u0646 \u062a\u0646\u062a\u0638\u0631\u060c \u0648\u062a\u062d\u062f\u064a\u062f \u0623\u0648\u0644\u0648\u064a\u0627\u062a \u062a\u0646\u0641\u064a\u0630 \u0623\u0648 \u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u062e\u0645\u0633\u0629 \u0639\u0634\u0631 \u0644\u0646\u0645\u0648\u0630\u062c \u0623\u0648\u0627\u0633\u0628 \u0644\u0646\u0636\u062c \u0648\u0636\u0645\u0627\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c (SAMM). \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0633\u0627\u0639\u062f\u0643 \u0646\u0645\u0648\u0630\u062c \u0623\u0648\u0627\u0633\u0628 (SAMM) \u0641\u064a \u0628\u0646\u0627\u0621 \u0648\u0642\u064a\u0627\u0633 \u0627\u0644\u062a\u062d\u0633\u064a\u0646\u0627\u062a \u0641\u064a \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0644\u0636\u0645\u0627\u0646 \u0627\u0644\u062c\u0647\u0648\u062f. \u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629: \u0627\u0644\u062a\u062e\u0637\u064a\u0637 \u0644\u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0641\u064a \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0628\u0637\u0631\u064a\u0642\u0629 \u0622\u0645\u0646\u0629 \u2693\ufe0e \u062a\u0642\u0644\u064a\u062f\u064a\u064b\u0627\u060c \u0627\u0644\u062d\u0641\u0627\u0638 \u0639\u0644\u0649 \u0645\u0627 \u064a\u0633\u0645\u0649 \"\u0623\u062d\u0627\u062f\u064a \u0627\u0644\u0642\u0631\u0646\"\u060c \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0647\u0648 \u0623\u0633\u0647\u0644 \u0637\u0631\u064a\u0642\u0629 \u0644\u062a\u062d\u0642\u064a\u0642 \u0623\u0643\u0628\u0631 \u0642\u062f\u0631 \u0645\u0646 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u062a\u0648\u0633\u064a\u0639 \u0646\u0637\u0627\u0642 \u0645\u0648\u0627\u0631\u062f \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0639 \u0633\u0631\u0639\u0629 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0632\u064a\u062f \u0643\u0644 \u0639\u0627\u0645 \u0641\u0642\u0637. \u064a\u0639\u062a\u0628\u0631 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0623\u0633\u0647\u0644 \u0637\u0631\u064a\u0642\u0629 \u0648\u0623\u064a\u0636\u064b\u0627 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0623\u0643\u062b\u0631 \u0623\u0645\u0627\u0646\u064b\u0627\u060c \u0648\u064a\u062c\u0628 \u0623\u0646 \u062a\u062a\u0636\u0645\u0651\u0646 \u062b\u0642\u0627\u0641\u0629 \u0627\u0644\u0634\u0631\u0627\u0643\u0629 \u0627\u0644\u0639\u0645\u064a\u0642\u0629 \u0628\u064a\u0646 \u0641\u0631\u064a\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0627\u0644\u0641\u0631\u064a\u0642 \u0627\u0644\u0623\u0645\u0646\u064a\u060c \u0648\u064a\u064f\u0641\u0636\u0651\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646\u0627 \u0646\u0641\u0633 \u0627\u0644\u0641\u0631\u064a\u0642. \u064a\u0647\u062f\u0641 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0625\u0644\u0649 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u064f\u0633\u062a\u0645\u0631 \u0644\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629 \u0648\u0642\u064a\u0627\u0633\u0647\u0627 \u0648\u0627\u0643\u062a\u0634\u0627\u0641\u0647\u0627 \u0648\u0627\u0633\u062a\u0628\u062f\u0627\u0644\u0647\u0627 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0648\u062c\u0648\u062f \u0645\u0643\u062a\u0628\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0645\u0624\u0633\u0633\u0629 \u0645\u0646 \u0627\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u0645\u0624\u0645\u0651\u0646\u0629\u060c \u0645\u0639 \u0623\u062f\u0648\u0627\u062a \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u0645\u0639\u0631\u0641\u0629 \u0623\u064a\u0646 \u064a\u0645\u0643\u0646 \u0625\u062c\u0631\u0627\u0621 \u0627\u0644\u062a\u062d\u0633\u064a\u0646\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f. \u064a\u0633\u0645\u062d \u0630\u0644\u0643 \u0644\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u0628\u0627\u0644\u0625\u0628\u0644\u0627\u063a \u0639\u0646 \u0627\u0644\u0628\u0646\u064a\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629 \u0648\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u062d\u064a\u062d \u0627\u0644\u0630\u0627\u062a\u064a \u0628\u0639\u064a\u062f\u064b\u0627 \u0639\u0646 \u0627\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629. \u0642\u062f \u064a\u0628\u062f\u0648 \u0623\u0646 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0648\u0642\u062a\u060c \u0648\u0644\u0643\u0646 \u064a\u062c\u0628 \u0623\u0646 \u064a\u062a\u0645 \u0628\u0646\u0627\u0624\u0647 \u062a\u062f\u0631\u064a\u062c\u064a\u064b\u0627 \u0645\u0639 \u0645\u0631\u0648\u0631 \u0627\u0644\u0648\u0642\u062a. \u0647\u0646\u0627\u0643 \u0623\u0634\u0643\u0627\u0644 \u0623\u062e\u0631\u0649 \u0645\u0646 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\u060c \u0644\u0627\u0633\u064a\u0645\u0627 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0622\u0645\u0646 \u0623\u062c\u0627\u064a\u0644 \u0645\u0627\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a Microsoft Agile. \u0644\u064a\u0633\u062a \u0628\u0627\u0644\u0636\u0631\u0648\u0631\u0629 \u0623\u0646 \u062a\u0646\u0627\u0633\u0628 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0643\u0644 \u0627\u0644\u0623\u0639\u0645\u0627\u0644. \u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u062b\u0627\u0644\u062b\u0629: \u062a\u0646\u0641\u064a\u0630 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u0645\u0647\u062f \u0645\u0639 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0643 \u2693\ufe0e \u064a\u062a\u0645 \u0628\u0646\u0627\u0621 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0628\u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0648\u0627\u0644\u0645\u0634\u0627\u0631\u0643\u0629 \u0627\u0644\u0645\u0628\u0627\u0634\u0631\u0629 \u0645\u0646 \u0642\u0628\u0644 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0630\u0627\u062a \u0627\u0644\u0635\u0650\u0644\u0629. \u064a\u062c\u0628 \u0645\u0648\u0627\u0621\u0645\u0629 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0628\u0634\u0643\u0644 \u0627\u0633\u062a\u0631\u0627\u062a\u064a\u062c\u064a \u0645\u0639 \u0627\u0644\u0623\u0639\u0645\u0627\u0644 \u0648\u0627\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u0642\u062f\u064a\u0645 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0623\u0643\u062b\u0631 \u0623\u0645\u0627\u0646\u064b\u0627 \u0628\u0634\u0643\u0644 \u0623\u0633\u0631\u0639. \u064a\u062c\u0628 \u0623\u0646 \u064a\u0643\u0648\u0646 \u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u062a\u0645\u0631\u064a\u0646\u064b\u0627 \u0634\u0627\u0645\u0644\u064b\u0627 \u064a\u064f\u063a\u0637\u064a \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0628\u064a\u0626\u064a \u0644\u0644\u0645\u0624\u0633\u0633\u0629 \u0623\u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0627\u0644\u0643\u0627\u0645\u0644\u060c \u0648\u0644\u064a\u0633 \u0623\u062f\u0627\u0629 \u0645\u0633\u0627\u0639\u062f\u0629 \u0644\u0643\u0644 \u062a\u0637\u0628\u064a\u0642\u060c \u0643\u0645\u0627 \u0643\u0627\u0646 \u0641\u064a \u0627\u0644\u0632\u0645\u0646 \u0627\u0644\u0633\u0627\u0628\u0642. \u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u0631\u0627\u0628\u0639\u0629: \u062a\u0631\u062d\u064a\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u0648\u0627\u0644\u0642\u0627\u062f\u0645\u0629 \u0625\u0644\u0649 \u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u0645\u0647\u062f \u2693\ufe0e \u0623\u0636\u0650\u0641 \u0623\u062f\u0648\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0623\u062b\u0646\u0627\u0621 \u062a\u0637\u0648\u064a\u0631\u0647\u0627 \u0648\u0642\u0645 \u0628\u062a\u0642\u062f\u064a\u0645 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0644\u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0644\u062a\u062d\u0633\u064a\u0646 \u0623\u0645\u0627\u0646 \u062a\u0637\u0628\u064a\u0642\u0627\u062a\u0647\u0645 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0643\u064a\u0641\u064a\u0629 \u0627\u0639\u062a\u0645\u0627\u062f\u0647\u0645 \u0627\u0644\u0645\u0628\u0627\u0634\u0631 \u0644\u0639\u0646\u0627\u0635\u0631 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f. \u0648\u0628\u0645\u062c\u0631\u062f \u0627\u0639\u062a\u0645\u0627\u062f \u062c\u0627\u0646\u0628 \u0645\u0646 \u062c\u0648\u0627\u0646\u0628 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f\u060c \u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u062a\u0646\u0641\u064a\u0630 \u0641\u062d\u0648\u0635\u0627\u062a \u062a\u0643\u0627\u0645\u0644 \u0645\u0633\u062a\u0645\u0631\u0629 \u0644\u0641\u062d\u0635 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u0648\u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645 \u0628\u062f\u0627\u0626\u0644 \u0645\u062d\u0638\u0648\u0631\u0629 \u0648\u062a\u062d\u0630\u0651\u0631 \u0623\u0648 \u062a\u0645\u0646\u0639 \u0625\u0646\u0634\u0627\u0624\u0647\u0627 \u0623\u0648 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0627. \u0647\u0630\u0627 \u064a\u0645\u0646\u0639 \u0627\u0644\u062e\u064a\u0627\u0631\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629 \u0645\u0646 \u0627\u0644\u062a\u0633\u0644\u0644 \u0625\u0644\u0649 \u0627\u0644\u0634\u0641\u0631\u0629 \u0628\u0645\u0631\u0648\u0631 \u0627\u0644\u0648\u0642\u062a\u060c \u0645\u0645\u0627 \u064a\u0645\u0646\u0639 \u0627\u0644\u0623\u0639\u0628\u0627\u0621 \u0627\u0644\u062a\u0642\u0646\u064a\u0629 \u0648\u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u063a\u064a\u0631 \u0627\u0644\u0622\u0645\u0646 \u0627\u0644\u0645\u064f\u0639\u064a\u0628. \u064a\u062c\u0628 \u0623\u0646 \u062a\u0631\u062a\u0628\u0637 \u0647\u0630\u0647 \u0627\u0644\u062a\u062d\u0630\u064a\u0631\u0627\u062a \u0628\u0627\u0644\u0628\u062f\u064a\u0644 \u0627\u0644\u0622\u0645\u0646\u060c \u062d\u062a\u0649 \u064a\u062a\u0645 \u0625\u0639\u0637\u0627\u0621 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0625\u062c\u0627\u0628\u0629 \u0627\u0644\u0635\u062d\u064a\u062d\u0629 \u0639\u0644\u0649 \u0627\u0644\u0641\u0648\u0631. \u064a\u0645\u0643\u0646\u0647\u0645 \u0625\u0639\u0627\u062f\u0629 \u0628\u0646\u0627\u0621 \u0648\u0627\u0639\u062a\u0645\u0627\u062f \u0645\u0643\u0648\u0651\u0646 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0628\u0633\u0631\u0639\u0629. \u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u062e\u0627\u0645\u0633\u0629: \u0627\u062e\u062a\u0628\u0627\u0631 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0625\u0646 \u0643\u0627\u0646 \u0642\u062f \u062e\u0641\u0651\u0641 \u0645\u0646 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u2693\ufe0e \u064a\u062c\u0628 \u0623\u0646 \u062a\u0639\u0627\u0644\u062c \u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u0643\u0628\u064a\u0631\u0629 \u0641\u064a \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0643\u064a\u0641\u064a\u0629 \u0627\u0643\u062a\u0634\u0627\u0641 \u0623\u0648 \u0625\u0635\u0644\u0627\u062d \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0636\u0639\u064a\u0641\u0629 \u062a\u0644\u0642\u0627\u0626\u064a\u064b\u0627\u060c \u0623\u0648 \u0645\u0643\u0648\u0651\u0646 \u0628\u064a\u0626\u0629 \u062a\u0637\u0648\u064a\u0631 \u0645\u062a\u0643\u0627\u0645\u0644\u0629 IDE \u0644\u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062b\u0627\u0628\u062a \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062d\u0642\u0646 \u0623\u0648 \u062d\u062a\u0649 \u0645\u0643\u062a\u0628\u0629 \u0645\u0639\u0631\u0648\u0641\u0629 \u0628\u0623\u0646\u0647\u0627 \u0622\u0645\u0646\u0629 \u0636\u062f \u0627\u0644\u062d\u0642\u0646\u060c \u0645\u062b\u0644 \u0645\u0643\u062a\u0628\u0629 React \u0623\u0648 Vue. \u0643\u0644\u0645\u0627 \u0632\u0627\u062f \u0639\u062f\u062f \u0647\u0630\u0647 \u0627\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u0622\u0645\u0646\u0629 \u0627\u0644\u062a\u064a \u064a\u062a\u0645 \u062a\u0648\u0641\u064a\u0631\u0647\u0627 \u0644\u0644\u0641\u0631\u0642\u060c \u0643\u0627\u0646 \u0630\u0644\u0643 \u0623\u0641\u0636\u0644. \u062a\u062a\u0645\u062b\u0651\u0644 \u0625\u062d\u062f\u0649 \u0627\u0644\u0645\u0647\u0627\u0645 \u0627\u0644\u062d\u064a\u0648\u064a\u0629 \u0644\u0641\u0631\u064a\u0642 \"\u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\" \u0641\u064a \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0623\u0645\u0627\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u064a\u062a\u0645 \u062a\u0642\u064a\u064a\u0645\u0647 \u0648\u062a\u062d\u0633\u064a\u0646\u0647 \u0628\u0627\u0633\u062a\u0645\u0631\u0627\u0631. \u0648\u0628\u0645\u062c\u0631\u062f \u062a\u062d\u0633\u064a\u0646\u0647\u0627\u060c \u064a\u062c\u0628 \u0623\u0646 \u064a\u064f\u0634\u064a\u0631 \u0634\u0643\u0644 \u0645\u0646 \u0623\u0634\u0643\u0627\u0644 \u0645\u0633\u0627\u0631 \u0627\u0644\u0627\u062a\u0635\u0627\u0644 \u0645\u0639 \u0645\u0633\u062a\u062e\u062f\u0645\u064a \u0627\u0644\u0645\u0643\u0648\u0651\u0646 \u0625\u0644\u0649 \u0623\u0646\u0647 \u064a\u062c\u0628 \u0625\u062c\u0631\u0627\u0621 \u062a\u0631\u0642\u064a\u0629\u060c \u0648\u064a\u064f\u0641\u0636\u0651\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0630\u0644\u0643 \u062a\u0644\u0642\u0627\u0626\u064a\u064b\u0627\u060c \u0648\u0625\u0646 \u0644\u0645 \u064a\u0643\u0646 \u0627\u0644\u0623\u0645\u0631 \u0643\u0630\u0644\u0643\u060c \u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644 \u062a\u0633\u0644\u064a\u0637 \u0627\u0644\u0636\u0648\u0621 \u0639\u0644\u0649 \u0627\u0644\u0644\u0648\u062d\u0629 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629 \u0644\u0644\u062a\u062d\u0643\u0645 \u0623\u0648 \u0645\u0627 \u0634\u0627\u0628\u0647 \u0630\u0644\u0643. \u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629: \u0642\u0645 \u0628\u0628\u0646\u0627\u0621 \u0628\u0631\u0646\u0627\u0645\u062c\u0643 \u0641\u064a \u0628\u064a\u0626\u0629 \u0628\u0631\u0645\u062c\u064a\u0629 \u0622\u0645\u0646\u0629 \u2693\ufe0e \u064a\u062c\u0628 \u0623\u0644\u0627 \u064a\u0642\u062a\u0635\u0631 \u0627\u0639\u062a\u0645\u0627\u062f\u0643 \u0639\u0644\u0649 \u0623\u0648\u0627\u0633\u0628- \u0627\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0641\u0642\u0637. \u0641\u0647\u0648 \u064a\u063a\u0637\u064a \u0641\u0642\u0637 10 \u0641\u0626\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0646\u062d\u0646 \u0646\u0634\u062c\u0639 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0628\u0634\u062f\u0629 \u0639\u0644\u0649 \u0627\u0639\u062a\u0645\u0627\u062f \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0625\u0636\u0627\u0641\u0629 \u0645\u0643\u0648\u0646\u0627\u062a \u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0645\u0647\u062f\u0629 \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u0648\u0649 1 \u06482 \u06483 \u062a\u062f\u0631\u064a\u062c\u064a\u064b\u0627\u060c \u0627\u0639\u062a\u0645\u0627\u062f\u064b\u0627 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u0637\u0648\u0631\u0629. \u0627\u0644\u0630\u0647\u0627\u0628 \u0625\u0644\u0649 \u0623\u0628\u0639\u062f \u0645\u0646 \u0630\u0644\u0643 \u2693\ufe0e \u062c\u0645\u064a\u0639 \u0628\u0631\u0627\u0645\u062c \u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0631\u0627\u0626\u0639\u0629 \u062a\u062a\u062c\u0627\u0648\u0632 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649\u060c \u0641\u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u062c\u0645\u064a\u0639 \u0627\u0644\u0627\u0633\u062a\u0645\u0631\u0627\u0631 \u0625\u0630\u0627 \u0623\u0631\u062f\u0646\u0627 \u0623\u0646 \u0646\u062a\u063a\u0644\u0651\u0628 \u0639\u0644\u0649 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u062a\u0643\u0627\u0645\u0644 \u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645 . \u064a\u062c\u0628 \u0623\u0646 \u062a\u062d\u062a\u0648\u064a \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0631\u0629 \u0639\u0644\u0649 \u0628\u0639\u0636 \u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0623\u0645\u0646\u060c \u0633\u0648\u0627\u0621 \u0643\u0627\u0646\u062a \u0628\u0646\u064a\u0629 \u0633\u062d\u0627\u0628\u064a\u0629 \u0631\u0633\u0645\u064a\u0629 \u0623\u0648 \u0628\u0646\u064a\u0629 \u0623\u0645\u0627\u0646 \u0645\u0624\u0633\u0633\u064a\u0629 \u0623\u0648 \u0646\u0645\u0630\u062c\u0629 \u0644\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0627\u0644\u0623\u062a\u0645\u062a\u0629 \u0648\u0627\u0644\u0642\u064a\u0627\u0633 . \u062a\u062d\u0627\u0648\u0644 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0651\u0631\u0629 \u0623\u062a\u0645\u062a\u0629 \u0623\u0643\u0628\u0631 \u0642\u062f\u0631 \u0645\u0645\u0643\u0646 \u0645\u0646 \u0645\u062e\u0631\u062c\u0627\u062a\u0647\u0627\u060c \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0627\u0644\u0646\u0635\u064a\u0651\u0629 \u0644\u0645\u062d\u0627\u0643\u0627\u0629 \u062e\u0637\u0648\u0627\u062a \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0645\u0639\u0642\u062f\u0629\u060c \u0648\u0623\u062f\u0648\u0627\u062a \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062b\u0627\u0628\u062a \u0627\u0644\u0645\u062a\u0627\u062d \u0644\u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631\u060c \u0648\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0641\u064a \u0628\u0646\u0627\u0621 \u0648\u062d\u062f\u0629 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u0643\u0627\u0645\u0644\u060c \u0648\u063a\u064a\u0631\u0647\u0627.. \u0627\u0644\u062b\u0642\u0627\u0641\u0629 . \u062a\u062d\u0627\u0648\u0644 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0651\u0631\u0629 \u0628\u0646\u0627\u0621 \u062a\u0635\u0645\u064a\u0645 \u063a\u064a\u0631 \u0622\u0645\u0646 \u0648\u0627\u0644\u0642\u0636\u0627\u0621 \u0639\u0644\u0649 \u0627\u0644\u062f\u064a\u0651\u0646 \u0627\u0644\u062a\u0642\u0646\u064a \u0644\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062d\u0627\u0644\u064a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0643\u0648\u0646\u0647\u0627 \u062c\u0632\u0621\u064b\u0627 \u0645\u0646 \u0641\u0631\u064a\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0644\u064a\u0633 \u0639\u0645\u0644\u064b\u0627 \u062c\u0627\u0646\u0628\u064a\u064b\u0627. \u0641\u0631\u0642 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u0631\u0649 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \"\u0646\u062d\u0646\" \u0648 \"\u0647\u0645\" \u0645\u062d\u0643\u0648\u0645 \u0639\u0644\u064a\u0647\u0645 \u0628\u0627\u0644\u0641\u0634\u0644. \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u0633\u062a\u0645\u0631 . \u062a\u062a\u0637\u0644\u0651\u0639 \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u0622\u0645\u0646\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0651\u0631\u0629 \u0625\u0644\u0649 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u0633\u062a\u0645\u0631. \u0625\u0630\u0627 \u0643\u0627\u0646 \u0647\u0646\u0627\u0643 \u0634\u064a\u0621 \u0644\u0627 \u064a\u062a\u062d\u0633\u0651\u0646 \u0623\u0648 \u064a\u062a\u0637\u0648\u0651\u0631\u060c \u0641\u062a\u0648\u0642\u0651\u0641 \u0639\u0646\u0647 \u0623\u0648 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0647\u0646\u0627\u0643 \u0634\u064a\u0621 \u063a\u064a\u0631 \u0642\u0627\u0628\u0644 \u0644\u0644\u062a\u0637\u0648\u064a\u0631\u060c \u0627\u0639\u0645\u0644 \u0639\u0644\u0649 \u062a\u062d\u0633\u064a\u0646\u0647. \u0625\u0630\u0627 \u0644\u0645 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0634\u064a\u0621 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0644\u0645 \u064a\u0643\u0646 \u0644\u0647 \u062a\u0623\u062b\u064a\u0631 \u0623\u0648 \u062a\u0623\u062b\u064a\u0631 \u0645\u062d\u062f\u0648\u062f\u060c \u0641\u0627\u0641\u0639\u0644 \u0634\u064a\u0626\u064b\u0627 \u0645\u064f\u062e\u062a\u0644\u0641\u064b\u0627. \u0644\u0645\u062c\u0631\u062f \u0623\u0646\u0646\u0627 \u0623\u062c\u0631\u064a\u0646\u0627 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0645\u062b\u0644 \u0627\u0644\u0641\u062d\u0648\u0635\u0627\u062a \u0627\u0644\u0645\u0643\u062a\u0628\u064a\u0629 \u0645\u0646\u0630 \u0627\u0644\u0633\u0628\u0639\u064a\u0646\u0627\u062a \u0644\u0627 \u064a\u0639\u0646\u064a \u0623\u0646\u0647\u0627 \u0641\u0643\u0631\u0629 \u062c\u064a\u0651\u062f\u0629. \u0642\u0645 \u0628\u0627\u0644\u0642\u064a\u0627\u0633 \u0648\u0627\u0644\u062a\u0642\u064a\u064a\u0645 \u062b\u0645 \u0627\u0644\u0628\u0646\u0627\u0621 \u0623\u0648 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u0633\u062a\u0645\u0631","title":"\u0643\u064a\u0641 \u062a\u0628\u062f\u0623 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0639 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0623\u0648\u0627\u0633\u0628"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_1","text":"\u0641\u064a \u0627\u0644\u0633\u0627\u0628\u0642\u060c \u0644\u0645 \u064a\u062a\u0645 \u062a\u0635\u0645\u064a\u0645 \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0623\u0628\u062f\u064b\u0627 \u0644\u064a\u0643\u0648\u0646 \u0623\u0633\u0627\u0633\u064b\u0627 \u0644\u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u0645\u0646 \u0627\u0644\u0636\u0631\u0648\u0631\u064a \u0623\u0646 \u062a\u0628\u062f\u0623 \u0645\u0646 \u0645\u0643\u0627\u0646\u064d \u0645\u0627\u060c \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u0628\u062f\u0623\u062a \u0644\u0644\u062a\u0648\u0651 \u0641\u064a \u0631\u062d\u0644\u0629 \u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0627. \u062a\u064f\u0639\u062f \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 \u0628\u062f\u0627\u064a\u0629 \u062c\u064a\u0651\u062f\u0629 \u0643\u062e\u0637 \u0623\u0633\u0627\u0633 \u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0645\u0631\u0627\u062c\u0639\u0629 \u0648\u0645\u0627 \u0625\u0644\u0649 \u0630\u0644\u0643\u060c \u0648\u0644\u0643\u0646\u0647\u0627 \u0644\u064a\u0633\u062a \u0643\u0627\u0641\u064a\u0629 \u0641\u064a \u062d\u062f \u0630\u0627\u062a\u0647\u0627.","title":"\u0643\u064a\u0641 \u062a\u0628\u062f\u0623 \u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0639 \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_2","text":"\u062a\u062d\u0627\u0648\u0644 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (AppSec) \u0627\u0644\u062c\u0631\u064a \u0642\u0628\u0644 \u0623\u0646 \u062a\u062a\u0645\u0643\u0646 \u0645\u0646 \u0627\u0644\u0632\u062d\u0641 \u0623\u0648 \u0627\u0644\u0645\u0634\u064a. \u0647\u0630\u0647 \u0627\u0644\u062c\u0647\u0648\u062f \u0645\u062d\u0643\u0648\u0645 \u0639\u0644\u064a\u0647\u0627 \u0628\u0627\u0644\u0641\u0634\u0644. \u0646\u062d\u0646 \u0646\u0634\u062c\u0651\u0639 \u0628\u0634\u062f\u0651\u0629 \u0645\u062f\u0631\u0627\u0621 \u0623\u0645\u0646 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a CISOs \u0648\u0643\u0628\u0627\u0631 \u0645\u062e\u062a\u0635\u0651\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0645\u0648\u0630\u062c \u0623\u0648\u0627\u0633\u0628 \u0644\u0646\u0636\u062c \u0648\u0636\u0645\u0627\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c SAMM \u0644\u062a\u062d\u062f\u064a\u062f \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0645\u062c\u0627\u0644\u0627\u062a \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0639\u0644\u0649 \u0645\u062f\u0649 \u0641\u062a\u0631\u0629 \u062a\u062a\u0631\u0627\u0648\u062d \u0645\u0627 \u0628\u064a\u0646 1-3 \u0633\u0646\u0648\u0627\u062a. \u062a\u062a\u0645\u062b\u0651\u0644 \u0627\u0644\u062e\u0637\u0648\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0641\u064a \u062a\u0642\u064a\u064a\u0645 \u0648\u0636\u0639\u0643 \u0627\u0644\u062d\u0627\u0644\u064a\u060c \u0648\u062a\u062d\u062f\u064a\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0641\u064a \u0627\u0644\u062d\u0648\u0643\u0645\u0629 \u0648\u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0648\u0627\u0644\u062a\u0646\u0641\u064a\u0630 \u0648\u0627\u0644\u062a\u062d\u0642\u0642 \u0648\u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u062d\u0644\u0651\u0647\u0627 \u0639\u0644\u0649 \u0627\u0644\u0641\u0648\u0631 \u0645\u0642\u0627\u0628\u0644 \u062a\u0644\u0643 \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0623\u0646 \u062a\u0646\u062a\u0638\u0631\u060c \u0648\u062a\u062d\u062f\u064a\u062f \u0623\u0648\u0644\u0648\u064a\u0627\u062a \u062a\u0646\u0641\u064a\u0630 \u0623\u0648 \u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u062e\u0645\u0633\u0629 \u0639\u0634\u0631 \u0644\u0646\u0645\u0648\u0630\u062c \u0623\u0648\u0627\u0633\u0628 \u0644\u0646\u0636\u062c \u0648\u0636\u0645\u0627\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c (SAMM). \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0633\u0627\u0639\u062f\u0643 \u0646\u0645\u0648\u0630\u062c \u0623\u0648\u0627\u0633\u0628 (SAMM) \u0641\u064a \u0628\u0646\u0627\u0621 \u0648\u0642\u064a\u0627\u0633 \u0627\u0644\u062a\u062d\u0633\u064a\u0646\u0627\u062a \u0641\u064a \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0644\u0636\u0645\u0627\u0646 \u0627\u0644\u062c\u0647\u0648\u062f.","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u0623\u0648\u0644\u0649: \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0647\u062f\u0627\u0641 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_3","text":"\u062a\u0642\u0644\u064a\u062f\u064a\u064b\u0627\u060c \u0627\u0644\u062d\u0641\u0627\u0638 \u0639\u0644\u0649 \u0645\u0627 \u064a\u0633\u0645\u0649 \"\u0623\u062d\u0627\u062f\u064a \u0627\u0644\u0642\u0631\u0646\"\u060c \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0647\u0648 \u0623\u0633\u0647\u0644 \u0637\u0631\u064a\u0642\u0629 \u0644\u062a\u062d\u0642\u064a\u0642 \u0623\u0643\u0628\u0631 \u0642\u062f\u0631 \u0645\u0646 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u062a\u0648\u0633\u064a\u0639 \u0646\u0637\u0627\u0642 \u0645\u0648\u0627\u0631\u062f \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0639 \u0633\u0631\u0639\u0629 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0632\u064a\u062f \u0643\u0644 \u0639\u0627\u0645 \u0641\u0642\u0637. \u064a\u0639\u062a\u0628\u0631 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0623\u0633\u0647\u0644 \u0637\u0631\u064a\u0642\u0629 \u0648\u0623\u064a\u0636\u064b\u0627 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0623\u0643\u062b\u0631 \u0623\u0645\u0627\u0646\u064b\u0627\u060c \u0648\u064a\u062c\u0628 \u0623\u0646 \u062a\u062a\u0636\u0645\u0651\u0646 \u062b\u0642\u0627\u0641\u0629 \u0627\u0644\u0634\u0631\u0627\u0643\u0629 \u0627\u0644\u0639\u0645\u064a\u0642\u0629 \u0628\u064a\u0646 \u0641\u0631\u064a\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0627\u0644\u0641\u0631\u064a\u0642 \u0627\u0644\u0623\u0645\u0646\u064a\u060c \u0648\u064a\u064f\u0641\u0636\u0651\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646\u0627 \u0646\u0641\u0633 \u0627\u0644\u0641\u0631\u064a\u0642. \u064a\u0647\u062f\u0641 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0625\u0644\u0649 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u064f\u0633\u062a\u0645\u0631 \u0644\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629 \u0648\u0642\u064a\u0627\u0633\u0647\u0627 \u0648\u0627\u0643\u062a\u0634\u0627\u0641\u0647\u0627 \u0648\u0627\u0633\u062a\u0628\u062f\u0627\u0644\u0647\u0627 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0648\u062c\u0648\u062f \u0645\u0643\u062a\u0628\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0645\u0624\u0633\u0633\u0629 \u0645\u0646 \u0627\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u0645\u0624\u0645\u0651\u0646\u0629\u060c \u0645\u0639 \u0623\u062f\u0648\u0627\u062a \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u0645\u0639\u0631\u0641\u0629 \u0623\u064a\u0646 \u064a\u0645\u0643\u0646 \u0625\u062c\u0631\u0627\u0621 \u0627\u0644\u062a\u062d\u0633\u064a\u0646\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f. \u064a\u0633\u0645\u062d \u0630\u0644\u0643 \u0644\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u0628\u0627\u0644\u0625\u0628\u0644\u0627\u063a \u0639\u0646 \u0627\u0644\u0628\u0646\u064a\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629 \u0648\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u062d\u064a\u062d \u0627\u0644\u0630\u0627\u062a\u064a \u0628\u0639\u064a\u062f\u064b\u0627 \u0639\u0646 \u0627\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629. \u0642\u062f \u064a\u0628\u062f\u0648 \u0623\u0646 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0648\u0642\u062a\u060c \u0648\u0644\u0643\u0646 \u064a\u062c\u0628 \u0623\u0646 \u064a\u062a\u0645 \u0628\u0646\u0627\u0624\u0647 \u062a\u062f\u0631\u064a\u062c\u064a\u064b\u0627 \u0645\u0639 \u0645\u0631\u0648\u0631 \u0627\u0644\u0648\u0642\u062a. \u0647\u0646\u0627\u0643 \u0623\u0634\u0643\u0627\u0644 \u0623\u062e\u0631\u0649 \u0645\u0646 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\u060c \u0644\u0627\u0633\u064a\u0645\u0627 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0622\u0645\u0646 \u0623\u062c\u0627\u064a\u0644 \u0645\u0627\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a Microsoft Agile. \u0644\u064a\u0633\u062a \u0628\u0627\u0644\u0636\u0631\u0648\u0631\u0629 \u0623\u0646 \u062a\u0646\u0627\u0633\u0628 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0643\u0644 \u0627\u0644\u0623\u0639\u0645\u0627\u0644.","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629: \u0627\u0644\u062a\u062e\u0637\u064a\u0637 \u0644\u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0641\u064a \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0628\u0637\u0631\u064a\u0642\u0629 \u0622\u0645\u0646\u0629"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_4","text":"\u064a\u062a\u0645 \u0628\u0646\u0627\u0621 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0628\u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0648\u0627\u0644\u0645\u0634\u0627\u0631\u0643\u0629 \u0627\u0644\u0645\u0628\u0627\u0634\u0631\u0629 \u0645\u0646 \u0642\u0628\u0644 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0630\u0627\u062a \u0627\u0644\u0635\u0650\u0644\u0629. \u064a\u062c\u0628 \u0645\u0648\u0627\u0621\u0645\u0629 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0628\u0634\u0643\u0644 \u0627\u0633\u062a\u0631\u0627\u062a\u064a\u062c\u064a \u0645\u0639 \u0627\u0644\u0623\u0639\u0645\u0627\u0644 \u0648\u0627\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u0642\u062f\u064a\u0645 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0623\u0643\u062b\u0631 \u0623\u0645\u0627\u0646\u064b\u0627 \u0628\u0634\u0643\u0644 \u0623\u0633\u0631\u0639. \u064a\u062c\u0628 \u0623\u0646 \u064a\u0643\u0648\u0646 \u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u062a\u0645\u0631\u064a\u0646\u064b\u0627 \u0634\u0627\u0645\u0644\u064b\u0627 \u064a\u064f\u063a\u0637\u064a \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0628\u064a\u0626\u064a \u0644\u0644\u0645\u0624\u0633\u0633\u0629 \u0623\u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0627\u0644\u0643\u0627\u0645\u0644\u060c \u0648\u0644\u064a\u0633 \u0623\u062f\u0627\u0629 \u0645\u0633\u0627\u0639\u062f\u0629 \u0644\u0643\u0644 \u062a\u0637\u0628\u064a\u0642\u060c \u0643\u0645\u0627 \u0643\u0627\u0646 \u0641\u064a \u0627\u0644\u0632\u0645\u0646 \u0627\u0644\u0633\u0627\u0628\u0642.","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u062b\u0627\u0644\u062b\u0629: \u062a\u0646\u0641\u064a\u0630 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u0645\u0647\u062f \u0645\u0639 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0643"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_5","text":"\u0623\u0636\u0650\u0641 \u0623\u062f\u0648\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0623\u062b\u0646\u0627\u0621 \u062a\u0637\u0648\u064a\u0631\u0647\u0627 \u0648\u0642\u0645 \u0628\u062a\u0642\u062f\u064a\u0645 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0644\u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0644\u062a\u062d\u0633\u064a\u0646 \u0623\u0645\u0627\u0646 \u062a\u0637\u0628\u064a\u0642\u0627\u062a\u0647\u0645 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0643\u064a\u0641\u064a\u0629 \u0627\u0639\u062a\u0645\u0627\u062f\u0647\u0645 \u0627\u0644\u0645\u0628\u0627\u0634\u0631 \u0644\u0639\u0646\u0627\u0635\u0631 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f. \u0648\u0628\u0645\u062c\u0631\u062f \u0627\u0639\u062a\u0645\u0627\u062f \u062c\u0627\u0646\u0628 \u0645\u0646 \u062c\u0648\u0627\u0646\u0628 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f\u060c \u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u062a\u0646\u0641\u064a\u0630 \u0641\u062d\u0648\u0635\u0627\u062a \u062a\u0643\u0627\u0645\u0644 \u0645\u0633\u062a\u0645\u0631\u0629 \u0644\u0641\u062d\u0635 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u0648\u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645 \u0628\u062f\u0627\u0626\u0644 \u0645\u062d\u0638\u0648\u0631\u0629 \u0648\u062a\u062d\u0630\u0651\u0631 \u0623\u0648 \u062a\u0645\u0646\u0639 \u0625\u0646\u0634\u0627\u0624\u0647\u0627 \u0623\u0648 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0627. \u0647\u0630\u0627 \u064a\u0645\u0646\u0639 \u0627\u0644\u062e\u064a\u0627\u0631\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629 \u0645\u0646 \u0627\u0644\u062a\u0633\u0644\u0644 \u0625\u0644\u0649 \u0627\u0644\u0634\u0641\u0631\u0629 \u0628\u0645\u0631\u0648\u0631 \u0627\u0644\u0648\u0642\u062a\u060c \u0645\u0645\u0627 \u064a\u0645\u0646\u0639 \u0627\u0644\u0623\u0639\u0628\u0627\u0621 \u0627\u0644\u062a\u0642\u0646\u064a\u0629 \u0648\u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u063a\u064a\u0631 \u0627\u0644\u0622\u0645\u0646 \u0627\u0644\u0645\u064f\u0639\u064a\u0628. \u064a\u062c\u0628 \u0623\u0646 \u062a\u0631\u062a\u0628\u0637 \u0647\u0630\u0647 \u0627\u0644\u062a\u062d\u0630\u064a\u0631\u0627\u062a \u0628\u0627\u0644\u0628\u062f\u064a\u0644 \u0627\u0644\u0622\u0645\u0646\u060c \u062d\u062a\u0649 \u064a\u062a\u0645 \u0625\u0639\u0637\u0627\u0621 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0625\u062c\u0627\u0628\u0629 \u0627\u0644\u0635\u062d\u064a\u062d\u0629 \u0639\u0644\u0649 \u0627\u0644\u0641\u0648\u0631. \u064a\u0645\u0643\u0646\u0647\u0645 \u0625\u0639\u0627\u062f\u0629 \u0628\u0646\u0627\u0621 \u0648\u0627\u0639\u062a\u0645\u0627\u062f \u0645\u0643\u0648\u0651\u0646 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0628\u0633\u0631\u0639\u0629.","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u0631\u0627\u0628\u0639\u0629: \u062a\u0631\u062d\u064a\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u0648\u0627\u0644\u0642\u0627\u062f\u0645\u0629 \u0625\u0644\u0649 \u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u0645\u0647\u062f"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_6","text":"\u064a\u062c\u0628 \u0623\u0646 \u062a\u0639\u0627\u0644\u062c \u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u0643\u0628\u064a\u0631\u0629 \u0641\u064a \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0643\u064a\u0641\u064a\u0629 \u0627\u0643\u062a\u0634\u0627\u0641 \u0623\u0648 \u0625\u0635\u0644\u0627\u062d \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0636\u0639\u064a\u0641\u0629 \u062a\u0644\u0642\u0627\u0626\u064a\u064b\u0627\u060c \u0623\u0648 \u0645\u0643\u0648\u0651\u0646 \u0628\u064a\u0626\u0629 \u062a\u0637\u0648\u064a\u0631 \u0645\u062a\u0643\u0627\u0645\u0644\u0629 IDE \u0644\u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062b\u0627\u0628\u062a \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062d\u0642\u0646 \u0623\u0648 \u062d\u062a\u0649 \u0645\u0643\u062a\u0628\u0629 \u0645\u0639\u0631\u0648\u0641\u0629 \u0628\u0623\u0646\u0647\u0627 \u0622\u0645\u0646\u0629 \u0636\u062f \u0627\u0644\u062d\u0642\u0646\u060c \u0645\u062b\u0644 \u0645\u0643\u062a\u0628\u0629 React \u0623\u0648 Vue. \u0643\u0644\u0645\u0627 \u0632\u0627\u062f \u0639\u062f\u062f \u0647\u0630\u0647 \u0627\u0644\u0628\u062f\u0627\u0626\u0644 \u0627\u0644\u0622\u0645\u0646\u0629 \u0627\u0644\u062a\u064a \u064a\u062a\u0645 \u062a\u0648\u0641\u064a\u0631\u0647\u0627 \u0644\u0644\u0641\u0631\u0642\u060c \u0643\u0627\u0646 \u0630\u0644\u0643 \u0623\u0641\u0636\u0644. \u062a\u062a\u0645\u062b\u0651\u0644 \u0625\u062d\u062f\u0649 \u0627\u0644\u0645\u0647\u0627\u0645 \u0627\u0644\u062d\u064a\u0648\u064a\u0629 \u0644\u0641\u0631\u064a\u0642 \"\u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\" \u0641\u064a \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0623\u0645\u0627\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u064a\u062a\u0645 \u062a\u0642\u064a\u064a\u0645\u0647 \u0648\u062a\u062d\u0633\u064a\u0646\u0647 \u0628\u0627\u0633\u062a\u0645\u0631\u0627\u0631. \u0648\u0628\u0645\u062c\u0631\u062f \u062a\u062d\u0633\u064a\u0646\u0647\u0627\u060c \u064a\u062c\u0628 \u0623\u0646 \u064a\u064f\u0634\u064a\u0631 \u0634\u0643\u0644 \u0645\u0646 \u0623\u0634\u0643\u0627\u0644 \u0645\u0633\u0627\u0631 \u0627\u0644\u0627\u062a\u0635\u0627\u0644 \u0645\u0639 \u0645\u0633\u062a\u062e\u062f\u0645\u064a \u0627\u0644\u0645\u0643\u0648\u0651\u0646 \u0625\u0644\u0649 \u0623\u0646\u0647 \u064a\u062c\u0628 \u0625\u062c\u0631\u0627\u0621 \u062a\u0631\u0642\u064a\u0629\u060c \u0648\u064a\u064f\u0641\u0636\u0651\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0630\u0644\u0643 \u062a\u0644\u0642\u0627\u0626\u064a\u064b\u0627\u060c \u0648\u0625\u0646 \u0644\u0645 \u064a\u0643\u0646 \u0627\u0644\u0623\u0645\u0631 \u0643\u0630\u0644\u0643\u060c \u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644 \u062a\u0633\u0644\u064a\u0637 \u0627\u0644\u0636\u0648\u0621 \u0639\u0644\u0649 \u0627\u0644\u0644\u0648\u062d\u0629 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629 \u0644\u0644\u062a\u062d\u0643\u0645 \u0623\u0648 \u0645\u0627 \u0634\u0627\u0628\u0647 \u0630\u0644\u0643.","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u062e\u0627\u0645\u0633\u0629: \u0627\u062e\u062a\u0628\u0627\u0631 \u0645\u0641\u0647\u0648\u0645 \u0627\u0644\u0637\u0631\u064a\u0642 \u0627\u0644\u0645\u064f\u0645\u0647\u062f \u0625\u0646 \u0643\u0627\u0646 \u0642\u062f \u062e\u0641\u0651\u0641 \u0645\u0646 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_7","text":"\u064a\u062c\u0628 \u0623\u0644\u0627 \u064a\u0642\u062a\u0635\u0631 \u0627\u0639\u062a\u0645\u0627\u062f\u0643 \u0639\u0644\u0649 \u0623\u0648\u0627\u0633\u0628- \u0627\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0641\u0642\u0637. \u0641\u0647\u0648 \u064a\u063a\u0637\u064a \u0641\u0642\u0637 10 \u0641\u0626\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0646\u062d\u0646 \u0646\u0634\u062c\u0639 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0628\u0634\u062f\u0629 \u0639\u0644\u0649 \u0627\u0639\u062a\u0645\u0627\u062f \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0625\u0636\u0627\u0641\u0629 \u0645\u0643\u0648\u0646\u0627\u062a \u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0645\u0647\u062f\u0629 \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u0648\u0649 1 \u06482 \u06483 \u062a\u062f\u0631\u064a\u062c\u064a\u064b\u0627\u060c \u0627\u0639\u062a\u0645\u0627\u062f\u064b\u0627 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u0637\u0648\u0631\u0629.","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629: \u0642\u0645 \u0628\u0628\u0646\u0627\u0621 \u0628\u0631\u0646\u0627\u0645\u062c\u0643 \u0641\u064a \u0628\u064a\u0626\u0629 \u0628\u0631\u0645\u062c\u064a\u0629 \u0622\u0645\u0646\u0629"},{"location":"ar/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_8","text":"\u062c\u0645\u064a\u0639 \u0628\u0631\u0627\u0645\u062c \u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0631\u0627\u0626\u0639\u0629 \u062a\u062a\u062c\u0627\u0648\u0632 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649\u060c \u0641\u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u062c\u0645\u064a\u0639 \u0627\u0644\u0627\u0633\u062a\u0645\u0631\u0627\u0631 \u0625\u0630\u0627 \u0623\u0631\u062f\u0646\u0627 \u0623\u0646 \u0646\u062a\u063a\u0644\u0651\u0628 \u0639\u0644\u0649 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u062a\u0643\u0627\u0645\u0644 \u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645 . \u064a\u062c\u0628 \u0623\u0646 \u062a\u062d\u062a\u0648\u064a \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0631\u0629 \u0639\u0644\u0649 \u0628\u0639\u0636 \u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0623\u0645\u0646\u060c \u0633\u0648\u0627\u0621 \u0643\u0627\u0646\u062a \u0628\u0646\u064a\u0629 \u0633\u062d\u0627\u0628\u064a\u0629 \u0631\u0633\u0645\u064a\u0629 \u0623\u0648 \u0628\u0646\u064a\u0629 \u0623\u0645\u0627\u0646 \u0645\u0624\u0633\u0633\u064a\u0629 \u0623\u0648 \u0646\u0645\u0630\u062c\u0629 \u0644\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0627\u0644\u0623\u062a\u0645\u062a\u0629 \u0648\u0627\u0644\u0642\u064a\u0627\u0633 . \u062a\u062d\u0627\u0648\u0644 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0651\u0631\u0629 \u0623\u062a\u0645\u062a\u0629 \u0623\u0643\u0628\u0631 \u0642\u062f\u0631 \u0645\u0645\u0643\u0646 \u0645\u0646 \u0645\u062e\u0631\u062c\u0627\u062a\u0647\u0627\u060c \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0627\u0644\u0646\u0635\u064a\u0651\u0629 \u0644\u0645\u062d\u0627\u0643\u0627\u0629 \u062e\u0637\u0648\u0627\u062a \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0645\u0639\u0642\u062f\u0629\u060c \u0648\u0623\u062f\u0648\u0627\u062a \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062b\u0627\u0628\u062a \u0627\u0644\u0645\u062a\u0627\u062d \u0644\u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631\u060c \u0648\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0641\u064a \u0628\u0646\u0627\u0621 \u0648\u062d\u062f\u0629 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u0643\u0627\u0645\u0644\u060c \u0648\u063a\u064a\u0631\u0647\u0627.. \u0627\u0644\u062b\u0642\u0627\u0641\u0629 . \u062a\u062d\u0627\u0648\u0644 \u0628\u0631\u0627\u0645\u062c \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0651\u0631\u0629 \u0628\u0646\u0627\u0621 \u062a\u0635\u0645\u064a\u0645 \u063a\u064a\u0631 \u0622\u0645\u0646 \u0648\u0627\u0644\u0642\u0636\u0627\u0621 \u0639\u0644\u0649 \u0627\u0644\u062f\u064a\u0651\u0646 \u0627\u0644\u062a\u0642\u0646\u064a \u0644\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062d\u0627\u0644\u064a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0643\u0648\u0646\u0647\u0627 \u062c\u0632\u0621\u064b\u0627 \u0645\u0646 \u0641\u0631\u064a\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0644\u064a\u0633 \u0639\u0645\u0644\u064b\u0627 \u062c\u0627\u0646\u0628\u064a\u064b\u0627. \u0641\u0631\u0642 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u0631\u0649 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \"\u0646\u062d\u0646\" \u0648 \"\u0647\u0645\" \u0645\u062d\u0643\u0648\u0645 \u0639\u0644\u064a\u0647\u0645 \u0628\u0627\u0644\u0641\u0634\u0644. \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u0633\u062a\u0645\u0631 . \u062a\u062a\u0637\u0644\u0651\u0639 \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u0622\u0645\u0646\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u0637\u0648\u0651\u0631\u0629 \u0625\u0644\u0649 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u0633\u062a\u0645\u0631. \u0625\u0630\u0627 \u0643\u0627\u0646 \u0647\u0646\u0627\u0643 \u0634\u064a\u0621 \u0644\u0627 \u064a\u062a\u062d\u0633\u0651\u0646 \u0623\u0648 \u064a\u062a\u0637\u0648\u0651\u0631\u060c \u0641\u062a\u0648\u0642\u0651\u0641 \u0639\u0646\u0647 \u0623\u0648 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0647\u0646\u0627\u0643 \u0634\u064a\u0621 \u063a\u064a\u0631 \u0642\u0627\u0628\u0644 \u0644\u0644\u062a\u0637\u0648\u064a\u0631\u060c \u0627\u0639\u0645\u0644 \u0639\u0644\u0649 \u062a\u062d\u0633\u064a\u0646\u0647. \u0625\u0630\u0627 \u0644\u0645 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0634\u064a\u0621 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0641\u0631\u0642 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0644\u0645 \u064a\u0643\u0646 \u0644\u0647 \u062a\u0623\u062b\u064a\u0631 \u0623\u0648 \u062a\u0623\u062b\u064a\u0631 \u0645\u062d\u062f\u0648\u062f\u060c \u0641\u0627\u0641\u0639\u0644 \u0634\u064a\u0626\u064b\u0627 \u0645\u064f\u062e\u062a\u0644\u0641\u064b\u0627. \u0644\u0645\u062c\u0631\u062f \u0623\u0646\u0646\u0627 \u0623\u062c\u0631\u064a\u0646\u0627 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0645\u062b\u0644 \u0627\u0644\u0641\u062d\u0648\u0635\u0627\u062a \u0627\u0644\u0645\u0643\u062a\u0628\u064a\u0629 \u0645\u0646\u0630 \u0627\u0644\u0633\u0628\u0639\u064a\u0646\u0627\u062a \u0644\u0627 \u064a\u0639\u0646\u064a \u0623\u0646\u0647\u0627 \u0641\u0643\u0631\u0629 \u062c\u064a\u0651\u062f\u0629. \u0642\u0645 \u0628\u0627\u0644\u0642\u064a\u0627\u0633 \u0648\u0627\u0644\u062a\u0642\u064a\u064a\u0645 \u062b\u0645 \u0627\u0644\u0628\u0646\u0627\u0621 \u0623\u0648 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0645\u0633\u062a\u0645\u0631","title":"\u0627\u0644\u0630\u0647\u0627\u0628 \u0625\u0644\u0649 \u0623\u0628\u0639\u062f \u0645\u0646 \u0630\u0644\u0643"},{"location":"ar/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/","text":"\u0643\u064a\u0641 \u062a\u0633\u062a\u062e\u062f\u0645 \u0625\u0637\u0627\u0631 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0623\u0648\u0627\u0633\u0628 \u0643\u0646\u0645\u0648\u0630\u062c \u0645\u0639\u064a\u0627\u0631\u064a. \u2693\ufe0e \u064a\u0639\u062a\u0628\u0631 \u0645\u0634\u0631\u0648\u0639 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0648\u062b\u064a\u0642\u0629 \u062a\u0648\u0651\u0639\u0648\u064a\u0629\u060c \u0625\u0644\u0627 \u0623\u0646 \u0630\u0644\u0643 \u0644\u0645 \u064a\u0645\u0646\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647 \u0645\u0639\u064a\u0627\u0631\u064b\u0627 \u0641\u0639\u0644\u064a\u064b\u0627 \u0644\u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0646\u0630 \u0628\u062f\u0627\u064a\u0629 \u0646\u0634\u0631\u0647 \u0641\u064a \u0639\u0627\u0645 2003. \u0625\u0630\u0627 \u0643\u0646\u062a \u062a\u0631\u063a\u0628 \u0641\u064a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0628\u0635\u0641\u062a\u0647 \u0645\u0639\u064a\u0627\u0631 \u062a\u0631\u0645\u064a\u0632 \u0623\u0648 \u0627\u062e\u062a\u0628\u0627\u0631\u060c \u0641\u0627\u0639\u0644\u0645 \u0623\u0646\u0647 \u064a\u0639\u062a\u0628\u0631 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0648\u0646\u0642\u0637\u0629 \u0627\u0644\u0628\u062f\u0627\u064a\u0629. \u0625\u062d\u062f\u0649 \u0635\u0639\u0648\u0628\u0627\u062a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0643\u0645\u0639\u064a\u0627\u0631 \u0647\u0648 \u0623\u0646\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u062a\u0648\u062b\u064a\u0642 \u0645\u062e\u0627\u0637\u0631 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\u060c \u0648\u0647\u064a \u0644\u064a\u0633\u062a \u0628\u0627\u0644\u0636\u0631\u0648\u0631\u0629 \u0645\u0634\u0627\u0643\u0644 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0628\u0633\u0647\u0648\u0644\u0629. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c A04: 2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u062e\u0627\u0631\u062c \u0646\u0637\u0627\u0642 \u0645\u0639\u0638\u0645 \u0646\u0645\u0627\u0630\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631. \u0645\u062b\u0627\u0644 \u0622\u062e\u0631 \u0647\u0648 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0645\u0639\u0645\u0648\u0644 \u0628\u0647 \u0641\u064a \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0648\u0627\u0644\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0641\u0639\u0627\u0644 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0644\u0627 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u062a\u0645 \u0625\u0644\u0627 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0642\u0627\u0628\u0644\u0627\u062a \u0648\u0637\u0644\u0628 \u0639\u064a\u0651\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0627\u062a \u0627\u0644\u0641\u0639\u0627\u0644\u0629 \u0644\u0644\u062d\u0648\u0627\u062f\u062b. \u064a\u0645\u0643\u0646 \u0644\u0623\u062f\u0627\u0629 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0627\u0644\u0628\u062d\u062b \u0639\u0646 \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0627\u0644\u0633\u062c\u0644\u0627\u062a\u060c \u0648\u0644\u0643\u0646 \u0642\u062f \u064a\u0643\u0648\u0646 \u0645\u0646 \u0627\u0644\u0645\u0633\u062a\u062d\u064a\u0644 \u062a\u062d\u062f\u064a\u062f \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0639\u0645\u0644 \u0623\u0648 \u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u064a\u0633\u062c\u0644 \u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0643\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0637\u064a\u0631\u0629. \u0642\u062f \u064a\u062a\u0645\u0643\u0646 \u0645\u062e\u062a\u0628\u0631\u064a\u0646 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0641\u0642\u0637 \u0645\u0646 \u062a\u062d\u062f\u064a\u062f \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u062d\u0648\u0627\u062f\u062b \u0641\u064a \u0628\u064a\u0626\u0629 \u0627\u0644\u0639\u0645\u0644 \u0627\u0644\u062a\u062c\u0631\u064a\u0628\u064a\u0629\u060c \u0648\u0627\u0644\u062a\u064a \u0646\u0627\u062f\u0631\u064b\u0627 \u0645\u0627 \u062a\u062a\u0645 \u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u0628\u0646\u0641\u0633 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0641\u064a \u0628\u064a\u0626\u0629 \u0627\u0644\u0639\u0645\u0644 \u0627\u0644\u0641\u0639\u0644\u064a\u0629. \u0641\u064a\u0645\u0627 \u064a\u0644\u064a \u062a\u0648\u0635\u064a\u0627\u062a\u0646\u0627 \u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0639\u0646\u062f\u0645\u0627 \u064a\u0643\u0648\u0646 \u0630\u0644\u0643 \u0645\u062a\u0627\u062d\u064b\u0627 \u062d\u0627\u0644\u0629 \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u0648\u0627\u0633\u0628 \u2013\u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 2021 \u0645\u0639\u064a\u0627\u0631 \u0623\u0648\u0627\u0633\u0628 \u0644\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u0648\u0639\u064a\u0629 \u0646\u0639\u0645 \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0623\u0648\u0644 \u0634\u0627\u0645\u0644 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0648\u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u0645\u0639\u0645\u0627\u0631\u064a\u0629 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u0622\u0645\u0646 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u0645\u0634\u0627\u0628\u0647\u0647 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0648\u062d\u062f\u0629 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u062f\u0639\u0645 \u0627\u0644\u0627\u062f\u0648\u0627\u062a \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0633\u0644\u0633\u0629 \u0627\u0644\u062a\u0648\u0631\u064a\u062f \u0627\u0644\u0627\u0645\u0646\u0629 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0646\u0634\u062c\u0651\u0639 \u0623\u064a \u0634\u062e\u0635 \u064a\u0631\u063a\u0628 \u0641\u064a \u0627\u0639\u062a\u0645\u0627\u062f \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u0623\u0645\u0646 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0639\u064a\u0627\u0631 \u0623\u0648\u0627\u0633\u0628 \u0644\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (ASVS)\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u0645\u064f\u0635\u0645\u0651\u0645 \u0644\u0643\u064a \u064a\u0645\u0643\u0646\u0646\u0627 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647 \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0647\u060c \u0648\u064a\u0645\u0643\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647 \u0641\u064a \u062c\u0645\u064a\u0639 \u0623\u062c\u0632\u0627\u0621 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0622\u0645\u0646. \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (ASVS) \u0647\u0648 \u0627\u0644\u062e\u064a\u0627\u0631 \u0627\u0644\u0648\u062d\u064a\u062f \u0627\u0644\u0645\u0642\u0628\u0648\u0644 \u0644\u0645\u0632\u0648\u062f\u064a \u0627\u0644\u0623\u062f\u0648\u0627\u062a. \u0644\u0627 \u064a\u0645\u0643\u0646 \u0644\u0644\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0643\u0634\u0641 \u0627\u0644\u0634\u0627\u0645\u0644 \u0623\u0648 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0623\u0648 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0636\u062f (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0646\u0638\u0631\u064b\u0627 \u0644\u0637\u0628\u064a\u0639\u0629 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0645\u062e\u0627\u0637\u0631 (\u0623\u0648\u0627\u0633\u0628 \u2013\u0627\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 )\u060c \u0645\u0639 \u0627\u0644\u0625\u0634\u0627\u0631\u0629 \u0625\u0644\u0649 A04: 2021-\u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646. \u0644\u0627 \u062a\u062a\u0641\u0642 \u0623\u0648\u0627\u0633\u0628 \u0645\u0639 \u0623\u064a \u0627\u062f\u0639\u0627\u0621\u0627\u062a \u0628\u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0643\u0627\u0645\u0644\u0629 \u0644\u0640 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 )\u060c \u0644\u0623\u0646\u0647\u0627 \u0628\u0628\u0633\u0627\u0637\u0629 \u063a\u064a\u0631 \u0635\u062d\u064a\u062d\u0629.","title":"\u0643\u064a\u0641 \u062a\u0633\u062a\u062e\u062f\u0645 \u0625\u0637\u0627\u0631 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0623\u0648\u0627\u0633\u0628 \u0643\u0646\u0645\u0648\u0630\u062c \u0645\u0639\u064a\u0627\u0631\u064a."},{"location":"ar/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#_1","text":"\u064a\u0639\u062a\u0628\u0631 \u0645\u0634\u0631\u0648\u0639 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0648\u062b\u064a\u0642\u0629 \u062a\u0648\u0651\u0639\u0648\u064a\u0629\u060c \u0625\u0644\u0627 \u0623\u0646 \u0630\u0644\u0643 \u0644\u0645 \u064a\u0645\u0646\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647 \u0645\u0639\u064a\u0627\u0631\u064b\u0627 \u0641\u0639\u0644\u064a\u064b\u0627 \u0644\u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0646\u0630 \u0628\u062f\u0627\u064a\u0629 \u0646\u0634\u0631\u0647 \u0641\u064a \u0639\u0627\u0645 2003. \u0625\u0630\u0627 \u0643\u0646\u062a \u062a\u0631\u063a\u0628 \u0641\u064a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0628\u0635\u0641\u062a\u0647 \u0645\u0639\u064a\u0627\u0631 \u062a\u0631\u0645\u064a\u0632 \u0623\u0648 \u0627\u062e\u062a\u0628\u0627\u0631\u060c \u0641\u0627\u0639\u0644\u0645 \u0623\u0646\u0647 \u064a\u0639\u062a\u0628\u0631 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0648\u0646\u0642\u0637\u0629 \u0627\u0644\u0628\u062f\u0627\u064a\u0629. \u0625\u062d\u062f\u0649 \u0635\u0639\u0648\u0628\u0627\u062a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0643\u0645\u0639\u064a\u0627\u0631 \u0647\u0648 \u0623\u0646\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u062a\u0648\u062b\u064a\u0642 \u0645\u062e\u0627\u0637\u0631 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a\u060c \u0648\u0647\u064a \u0644\u064a\u0633\u062a \u0628\u0627\u0644\u0636\u0631\u0648\u0631\u0629 \u0645\u0634\u0627\u0643\u0644 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0628\u0633\u0647\u0648\u0644\u0629. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c A04: 2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u062e\u0627\u0631\u062c \u0646\u0637\u0627\u0642 \u0645\u0639\u0638\u0645 \u0646\u0645\u0627\u0630\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631. \u0645\u062b\u0627\u0644 \u0622\u062e\u0631 \u0647\u0648 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0645\u0639\u0645\u0648\u0644 \u0628\u0647 \u0641\u064a \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0648\u0627\u0644\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0641\u0639\u0627\u0644 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0644\u0627 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u062a\u0645 \u0625\u0644\u0627 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0642\u0627\u0628\u0644\u0627\u062a \u0648\u0637\u0644\u0628 \u0639\u064a\u0651\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0627\u062a \u0627\u0644\u0641\u0639\u0627\u0644\u0629 \u0644\u0644\u062d\u0648\u0627\u062f\u062b. \u064a\u0645\u0643\u0646 \u0644\u0623\u062f\u0627\u0629 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0627\u0644\u0628\u062d\u062b \u0639\u0646 \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0627\u0644\u0633\u062c\u0644\u0627\u062a\u060c \u0648\u0644\u0643\u0646 \u0642\u062f \u064a\u0643\u0648\u0646 \u0645\u0646 \u0627\u0644\u0645\u0633\u062a\u062d\u064a\u0644 \u062a\u062d\u062f\u064a\u062f \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0639\u0645\u0644 \u0623\u0648 \u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u064a\u0633\u062c\u0644 \u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0643\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0637\u064a\u0631\u0629. \u0642\u062f \u064a\u062a\u0645\u0643\u0646 \u0645\u062e\u062a\u0628\u0631\u064a\u0646 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0641\u0642\u0637 \u0645\u0646 \u062a\u062d\u062f\u064a\u062f \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u062d\u0648\u0627\u062f\u062b \u0641\u064a \u0628\u064a\u0626\u0629 \u0627\u0644\u0639\u0645\u0644 \u0627\u0644\u062a\u062c\u0631\u064a\u0628\u064a\u0629\u060c \u0648\u0627\u0644\u062a\u064a \u0646\u0627\u062f\u0631\u064b\u0627 \u0645\u0627 \u062a\u062a\u0645 \u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u0628\u0646\u0641\u0633 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0641\u064a \u0628\u064a\u0626\u0629 \u0627\u0644\u0639\u0645\u0644 \u0627\u0644\u0641\u0639\u0644\u064a\u0629. \u0641\u064a\u0645\u0627 \u064a\u0644\u064a \u062a\u0648\u0635\u064a\u0627\u062a\u0646\u0627 \u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0639\u0646\u062f\u0645\u0627 \u064a\u0643\u0648\u0646 \u0630\u0644\u0643 \u0645\u062a\u0627\u062d\u064b\u0627 \u062d\u0627\u0644\u0629 \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u0648\u0627\u0633\u0628 \u2013\u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 2021 \u0645\u0639\u064a\u0627\u0631 \u0623\u0648\u0627\u0633\u0628 \u0644\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u0648\u0639\u064a\u0629 \u0646\u0639\u0645 \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0623\u0648\u0644 \u0634\u0627\u0645\u0644 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0648\u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u0645\u0639\u0645\u0627\u0631\u064a\u0629 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0646\u0635 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u0622\u0645\u0646 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u0645\u0634\u0627\u0628\u0647\u0647 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0648\u062d\u062f\u0629 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u062f\u0639\u0645 \u0627\u0644\u0627\u062f\u0648\u0627\u062a \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0646\u0639\u0645 \u0633\u0644\u0633\u0629 \u0627\u0644\u062a\u0648\u0631\u064a\u062f \u0627\u0644\u0627\u0645\u0646\u0629 \u0625\u0644\u0649 \u062d\u062f\u064d \u0645\u0627 \u0646\u0639\u0645 \u0646\u0634\u062c\u0651\u0639 \u0623\u064a \u0634\u062e\u0635 \u064a\u0631\u063a\u0628 \u0641\u064a \u0627\u0639\u062a\u0645\u0627\u062f \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u0623\u0645\u0646 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0639\u064a\u0627\u0631 \u0623\u0648\u0627\u0633\u0628 \u0644\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (ASVS)\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u0645\u064f\u0635\u0645\u0651\u0645 \u0644\u0643\u064a \u064a\u0645\u0643\u0646\u0646\u0627 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647 \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0647\u060c \u0648\u064a\u0645\u0643\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647 \u0641\u064a \u062c\u0645\u064a\u0639 \u0623\u062c\u0632\u0627\u0621 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0627\u0644\u0622\u0645\u0646. \u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (ASVS) \u0647\u0648 \u0627\u0644\u062e\u064a\u0627\u0631 \u0627\u0644\u0648\u062d\u064a\u062f \u0627\u0644\u0645\u0642\u0628\u0648\u0644 \u0644\u0645\u0632\u0648\u062f\u064a \u0627\u0644\u0623\u062f\u0648\u0627\u062a. \u0644\u0627 \u064a\u0645\u0643\u0646 \u0644\u0644\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0643\u0634\u0641 \u0627\u0644\u0634\u0627\u0645\u0644 \u0623\u0648 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0623\u0648 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0636\u062f (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631) \u0646\u0638\u0631\u064b\u0627 \u0644\u0637\u0628\u064a\u0639\u0629 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0645\u062e\u0627\u0637\u0631 (\u0623\u0648\u0627\u0633\u0628 \u2013\u0627\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 )\u060c \u0645\u0639 \u0627\u0644\u0625\u0634\u0627\u0631\u0629 \u0625\u0644\u0649 A04: 2021-\u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646. \u0644\u0627 \u062a\u062a\u0641\u0642 \u0623\u0648\u0627\u0633\u0628 \u0645\u0639 \u0623\u064a \u0627\u062f\u0639\u0627\u0621\u0627\u062a \u0628\u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0643\u0627\u0645\u0644\u0629 \u0644\u0640 (\u0623\u0648\u0627\u0633\u0628 \u2013 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 )\u060c \u0644\u0623\u0646\u0647\u0627 \u0628\u0628\u0633\u0627\u0637\u0629 \u063a\u064a\u0631 \u0635\u062d\u064a\u062d\u0629.","title":"\u0643\u064a\u0641 \u062a\u0633\u062a\u062e\u062f\u0645 \u0625\u0637\u0627\u0631 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0623\u0648\u0627\u0633\u0628 \u0643\u0646\u0645\u0648\u0630\u062c \u0645\u0639\u064a\u0627\u0631\u064a."},{"location":"ar/A00_2021_Introduction/","text":"\u0645\u0642\u062f\u0645\u0629 \u2693\ufe0e \u0645\u0631\u062d\u0628\u0627\u064b \u0628\u0643\u0645 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 \u2693\ufe0e \u0645\u0631\u062d\u0628\u064b\u0627 \u0628\u0643\u0645 \u0641\u064a \u0623\u062d\u062f\u062b \u0625\u0635\u062f\u0627\u0631 \u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0648\u0647\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0634\u0643\u0644 \u062c\u062f\u064a\u062f \u062a\u0645\u0627\u0645\u064b\u0627 \u0648\u0645\u062f\u0639\u0645\u0629 \u0628\u0631\u0633\u0648\u0645\u0627\u062a \u0627\u0646\u0641\u0648\u062c\u0631\u0627\u0641\u064a\u0643 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0637\u064a\u0639 \u0637\u0628\u0627\u0639\u062a\u0647\u0627 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0648\u064a\u0645\u0643\u0646 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u064a\u0647\u0627 \u0645\u0646 \u0635\u0641\u062d\u062a\u0646\u0627 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629. \u0643\u0645\u0627 \u0646\u062a\u0642\u062f\u0645 \u0628\u062c\u0632\u064a\u0644 \u0627\u0644\u0634\u0643\u0631 \u0648\u0627\u0644\u0639\u0631\u0641\u0627\u0646 \u0644\u0643\u0644\u0651 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0628\u0641\u0643\u0631\u0629\u060c \u0623\u0648 \u0648\u0642\u062a\u060c \u0623\u0648 \u062c\u0647\u062f \u0641\u064a \u0633\u0628\u064a\u0644 \u0625\u0646\u062c\u0627\u062d \u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0644\u060c \u0645\u0645\u062a\u0646\u0651\u0648\u0646 \u0644\u0645\u0627 \u0628\u0630\u0644\u062a\u0645\u0648\u0647\u060c \u0648\u0644\u0645\u0627 \u062d\u0642\u0651\u0642\u0646\u0627\u0647 \u0628\u0641\u0636\u0644 \u0627\u0644\u0644\u0647 \u062b\u0645 \u0628\u0645\u0633\u0627\u0639\u062f\u062a\u0643\u0645 \u0648\u062f\u0639\u0645\u0643\u0645.. \u0645\u0627 \u0647\u064a \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0637\u0631\u0623\u062a \u0639\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 \u2693\ufe0e \u0628\u0634\u0643\u0644 \u0639\u0627\u0645 \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 3 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062c\u062f\u064a\u062f\u0629 \u0648 4 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u060c \u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0627\u0633\u0645 \u0648\u0643\u0630\u0644\u0643 \u0627\u0644\u0646\u0637\u0627\u0642 \u0627\u0644\u062e\u0627\u0635 \u0628\u0647\u0627\u060c \u0648\u0628\u0639\u0636 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062f\u0645\u062c \u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0645\u0639 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 A01:2021-\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u062d\u062a\u0644 (\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644) \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0641\u064a \u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u062e\u0627\u0645\u0633\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0646 \u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637 \u0628\u0640 34 CWEs \u0647\u0648 \u0645\u0646 \u0623\u0643\u062b\u0631 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. A02:2021-\u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u064a\u0623\u062a\u064a \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 #2 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629\u060c \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0643\u0648\u0646 \u0623\u0633\u0628\u0627\u0628\u0647\u0627 \u0645\u062a\u0639\u062f\u062f\u0629 \u062f\u0648\u0646 \u0623\u0646 \u062a\u0639\u0648\u062f \u062c\u0645\u064a\u0639\u0647\u0627 \u0644\u0633\u0628\u0628 \u062c\u0630\u0631\u064a \u0648\u0627\u062d\u062f\u060c \u0648\u064a\u0623\u062a\u064a \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0647\u0646\u0627 \u0628\u0634\u0643\u0644 \u0645\u062a\u062c\u062f\u062f \u0639\u0644\u0649 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0641\u064a \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u062a\u064a \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u0624\u062f\u064a \u0625\u0644\u0649 \u0643\u0634\u0641 \u063a\u064a\u0631 \u0645\u0635\u0631\u0651\u062d \u0628\u0647 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0623\u0646\u0638\u0645\u0629. A03:2021-\u0627\u0644\u062d\u0642\u0646 \u062a\u062a\u0631\u0627\u062c\u0639 \u0627\u0644\u062d\u0642\u0646 \u0627\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 3. \u062d\u064a\u062b \u0627\u0646\u0647 \u062a\u0645 \u0627\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646. \u0627\u0646 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 33 CWEs \u062a\u0639\u062a\u0628\u0631 \u062b\u0627\u0646\u064a \u0627\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0625\u0635\u0627\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u0647\u0627. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0627\u0646 \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0645 \u062f\u0645\u062c\u0647\u0627 \u0647\u0646\u0627 \u0645\u0639 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629. A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0647\u0648 \u062a\u0635\u0646\u064a\u0641 \u062c\u062f\u064a\u062f \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0639\u064a\u0648\u0628 \u0648\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u062a\u0635\u0645\u064a\u0645. \u0648\u0625\u0630\u0627 \u0623\u0631\u062f\u0646\u0627 \u0627\u0644\u062a\u062d\u0631\u0643 \u0644\u0625\u062b\u0628\u0627\u062a \u0623\u0647\u0645\u064a\u0629 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0641\u0646\u062d\u0646 \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0648\u0643\u0630\u0644\u0643 \u0648\u062c\u0648\u062f \u0628\u0646\u064a\u0629 \u062a\u062d\u062a\u064a\u0629 \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0648\u0627\u0644\u0636\u0648\u0627\u0628\u0637. A05:2021- \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0647\u0648 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6 \u0627\u0644\u0622\u0646 \u0646\u0631\u0627\u0647 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 #4\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 90% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0648\u062c\u062f \u0628\u0647\u0627 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u062d\u0629. \u0648\u0647\u0630\u0627 \u064a\u062d\u062f\u062b \u0645\u0639 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0644\u0632\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631 \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u062e\u0637\u0623 \u0641\u064a \u0627\u0631\u062a\u0641\u0627\u0639\u060c \u0648\u0647\u0630\u0627 \u0627\u0644\u0630\u064a \u062c\u0639\u0644 (\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629) \u062a\u0631\u062a\u0641\u0639 \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0625\u0644\u0649 \u0627\u0644\u0631\u0627\u0628\u0639\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646\u0647 \u062a\u0645 \u0636\u0645 \" XML External Entities XXE\" \u0644\u0647\u0630\u0627 \u0627\u0644\u0646\u0648\u0639 \u0645\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629. A06:2021-\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0627\u0644\u0645\u062d\u062f\u062b\u0629 \u0633\u0627\u0628\u0642\u064b\u0627 \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0640 \u201c\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0648\u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0630\u0627\u062a \u062b\u063a\u0631\u0627\u062a \u0645\u0639\u0631\u0648\u0641\u0629\". \u0648\u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0639\u0644\u0649 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0643\u0627\u0646\u062a \u0647\u064a #2 \u0623\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u062e\u0637\u0631 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #9 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 #2017 \u0627\u0631\u062a\u0641\u0639\u062a \u0641\u064a \u0625\u0635\u062f\u0627\u0631 #2021 \u0625\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0645\u0639\u0627\u064a\u064a\u0631 CVEs \u0623\u0648 CWEs \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0628\u0627\u0644\u062e\u0637\u0648\u0631\u0629. \u0648\u0644\u0630\u0644\u0643 \u064a\u062a\u0645 \u062a\u0635\u0646\u064a\u0641 \u062e\u0637\u0648\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0647\u0648 5.0. A07:2021-\u0627\u0644\u0647\u0648\u064a\u0629 \u0648 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \"\u0636\u0639\u0641 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629\" \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0643\u0630\u0644\u0643 \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #2. \u0648\u0628\u0639\u062f \u0639\u0645\u0644\u064a\u0629 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u0648\u062a\u0633\u0645\u064a\u062a\u0647\u0627 \u0628\u0640 \u201c\u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642. \u0648\u0643\u0645\u0627 \u0646\u0642\u0648\u0644 \u0623\u0646 \u0632\u064a\u0627\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u064a\u064a\u0631 \u0623\u062f\u0651\u062a \u0625\u0644\u0649 \u062a\u0642\u0644\u064a\u0644 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0648\u0644\u0643\u0646 \u0644\u064a\u0633 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0644\u0630\u0644\u0643 \u0646\u0631\u0627\u0647\u0627 \u0647\u0646\u0627 \u0645\u0646 \u0636\u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. A08:2021- \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647\u0627 \u062d\u062f\u064a\u062b\u064b\u0627 \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 2021. \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0628\u0634\u0643\u0644 \u0643\u0628\u064a\u0631 \u0639\u0644\u0649 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0639 \u0627\u0644\u062a\u0623\u0643\u062f \u0639\u0644\u0649 \u0639\u062f\u0645 \u062a\u0623\u062b\u0631 \u0633\u0644\u0627\u0645\u0629 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 CI/CD. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062d\u062a\u0645\u0644\u0629 \u062d\u0633\u0628 \u062a\u0635\u0646\u064a\u0641 CVE/CVSS \u0648\u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0645\u0639 CWEs \u0646\u062c\u062f \u0623\u0646 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u062e\u0637\u0631 \u0647\u0648 10 \u0648\u064a\u0639\u062a\u0628\u0631 \u0645\u0631\u062a\u0641\u0639 \u062c\u062f\u064b\u0627. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \"Insecure Deserialization\" \u0623\u0635\u0628\u062d\u062a \u062c\u0632\u0621 \u0645\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641. A09:2021-\u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0633\u0627\u0628\u0642\u064b\u0627 \u0628\u0640 \u201c\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0628\u0634\u0643\u0644 \u063a\u064a\u0631 \u0635\u062d\u064a\u062d. \u0648\u0628\u0639\u062f \u0639\u0645\u0644 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062c\u0631\u0627\u0621\u0647\u0627 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u062d\u062a\u0644\u062a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 3 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639. \u0648\u0627\u0644\u0630\u064a \u062c\u0639\u0644\u0647\u0627 \u062a\u0635\u0639\u062f \u0645\u0631\u062a\u0628\u0629 \u0648\u0627\u062d\u062f\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 10. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0641\u064a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0627\u0644\u062a\u064a \u062a\u0645 \u0636\u0645\u0647\u0627 \u0647\u0646\u0627. \u0648\u062d\u064a\u0646\u0645\u0627 \u0646\u0631\u0649 CVE/CVSS \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0648\u0627\u0636\u062d \u0648\u0644\u0643\u0646 \u0645\u0639 \u0627\u0644\u0642\u0635\u0648\u0631 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u064a \u062a\u0634\u0643\u0644 \u062a\u0623\u062b\u064a\u0631\u064b\u0627 \u0628\u0627\u0644\u063a\u064b\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0623\u0646\u0638\u0645\u0629\u060c \u0648\u0627\u0644\u062a\u0646\u0628\u064a\u0647 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u062d\u0648\u0627\u062f\u062b \u0623\u0648 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062c\u0646\u0627\u0626\u064a \u0627\u0644\u0631\u0642\u0645\u064a. A10:2021-\u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0631\u0642\u0645 #1. \u0648\u062a\u0638\u0647\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0628 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0623\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0639\u062f\u0644 \u0627\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u0647 \u0641\u0648\u0642 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0645\u0639 \u0627\u0631\u062a\u0641\u0627\u0639 \u0645\u0646\u062e\u0641\u0636. \u0648\u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647 \u0628\u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644. \u0648\u064a\u0641\u064a\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0641\u064a \u0627\u0644\u0645\u062c\u0627\u0644 \u0623\u0646 \u0648\u062c\u0648\u062f \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0636\u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0647\u0648 \u0623\u0645\u0631 \u0645\u0647\u0645 \u062c\u062f\u064b\u0627 \u062d\u062a\u0649 \u0648\u0625\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u063a\u064a\u0631 \u0645\u0643\u062a\u0645\u0644\u0629 \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u062d\u0627\u0644\u064a. \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629 \u2693\ufe0e \u0644\u0623\u0648\u0644 \u0645\u0631\u0629 \u064a\u062a\u0645 \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u064a\u062c\u0628 \u0627\u0644\u062a\u0646\u0648\u064a\u0647 \u0623\u0646\u0647\u0627 \u0644\u0627 \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u064f\u0644\u064a. \u062d\u064a\u062b \u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u062b\u0646\u064a\u0646 \u0645\u0646\u0647\u0645 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u0630\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647 \u0641\u064a \u0646\u0637\u0627\u0642 \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0648\u062a\u0642\u0648\u0645 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0628\u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0623\u064a \u0645\u0635\u0627\u062f\u0631 \u0623\u062e\u0631\u0649 \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0623\u0646 \u0627\u0644\u0628\u0627\u062d\u062b\u064a\u0646 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0633\u062a\u063a\u0631\u0642\u0648\u0646 \u0648\u0642\u062a \u0648\u062c\u0647\u062f \u0643\u0628\u064a\u0631 \u0641\u064a \u0625\u064a\u062c\u0627\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0623\u0648 \u0637\u0631\u0642 \u062c\u062f\u064a\u062f\u0629 \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627. \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u064a\u0633\u062a\u063a\u0631\u0642 \u0648\u0642\u062a \u0623\u0643\u0628\u0631 \u0648\u0642\u062f \u062a\u0635\u0644 \u0625\u0644\u0649 \u0633\u0646\u0648\u0627\u062a. \u0648\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062a\u0648\u0627\u0632\u0646 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u062f\u0641 \u0635\u0646\u0627\u0639\u0629 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0648\u062c\u064a\u0647 \u0623\u0633\u0626\u0644\u0629 \u0644\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0641\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u062a\u0638\u0647\u0631\u0647\u0627 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0628\u0639\u0636 \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062c\u0648\u0647\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0639\u062a\u0645\u0627\u062f\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0644\u0645\u0648\u0627\u0635\u0644\u0629 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0645\u062a\u0651\u0628\u0639\u0629 \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. \u0643\u064a\u0641 \u064a\u062a\u0645 \u062a\u0646\u0638\u064a\u0645 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u2693\ufe0e \u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0648\u0647\u0646\u0627 \u0645\u0644\u062e\u0635 \u0644\u0645\u0627 \u062a\u0645 \u062a\u063a\u064a\u0631\u0647 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062a\u0631\u0643\u0632 \u0627\u0644\u062c\u0647\u0648\u062f \u0627\u0644\u0645\u0628\u0630\u0648\u0644\u0629 \u0641\u064a \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CWEs \u0628\u0639\u062f\u062f 30 \u0645\u062c\u0627\u0644 \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0627\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u062a\u062d\u062a\u0627\u062c \u0627\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0646\u062a\u0627\u0626\u062c \u0625\u0636\u0627\u0641\u064a\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0623\u0646\u0647\u0627 \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 30 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 CWEs \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0648\u0642\u062f \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0627\u0644\u0646\u0638\u0631 \u0641\u064a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062a\u0641\u0631\u0639\u0629 \u0645\u0646\u0647\u0627 \u0648\u0633\u064a\u0643\u0648\u0646 \u0641\u064a \u0646\u0637\u0627\u0642 \u0645\u062d\u062f\u0648\u062f \u0648\u0636\u064a\u0651\u0642. \u0648\u062a\u0628\u0639\u064b\u0627 \u0644\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u0639\u062a\u0627\u062f\u0629 \u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u062f\u0648\u0646 \u0623\u064a \u0642\u064a\u0648\u062f \u0639\u0644\u0649 CWEs. \u0648\u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0639\u062f\u062f \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0644\u0633\u0646\u0648\u0627\u062a \u0645\u062d\u062f\u062f\u0629 (\u0628\u062f\u0621\u064b\u0627 \u0645\u0646 \u0639\u0627\u0645 2017)\u060c \u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062a\u0642\u064a\u064a\u0645\u0647\u0627 \u0628\u0625\u0635\u0627\u0628\u062a\u0647\u0627 \u0628\u0623\u062d\u062f CWEs \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u062a\u0633\u0645\u062d \u0644\u0646\u0627 \u0647\u0630\u0647 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u062a\u0635\u0646\u064a\u0641\u0627\u062a CWEs. \u0645\u0639 \u0627\u0644\u0623\u062e\u0630 \u0628\u0639\u064a\u0646 \u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0623\u0646\u0646\u0627 \u062a\u062c\u0627\u0647\u0644\u0646\u0627 \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0644\u0623\u0633\u0628\u0627\u0628 \u0645\u0639\u064a\u0651\u0646\u0629\u060c \u0648\u0623\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062d\u0627\u0644\u0627\u062a \u064a\u0643\u0648\u0646 \u0636\u0631\u0648\u0631\u064a\u064b\u0627 \u0627\u0644\u0623\u062e\u0630 \u0628\u0647 \u0648\u0627\u0644\u0630\u064a \u0642\u062f \u064a\u0624\u062b\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0646\u062a\u0634\u0631 \u0648\u0645\u0634\u0647\u0648\u0631 \u0648\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0643\u062b\u0631\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0645\u0647\u0645\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0635\u0627\u0628 \u0628\u0640 4 \u0645\u0646 CWEs \u0623\u0648 4,000 \u0641\u0647\u0630\u0627 \u0644\u0627 \u064a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0622\u0644\u064a\u0629 \u0627\u062d\u062a\u0633\u0627\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u062f\u064a\u0646\u0627. \u0648\u0644\u0642\u062f \u0643\u0627\u0646 \u0644\u062f\u064a\u0646\u0627 \u062d\u0648\u0627\u0644\u064a 400 CWEs \u062a\u0642\u0631\u064a\u0628\u064b\u0627 \u0648\u0642\u0645\u0646\u0627 \u0628\u062d\u0635\u0631\u0647\u0627 \u0648\u062a\u0642\u0644\u064a\u0644\u0647\u0627 \u0625\u0644\u0649 30 CWEs \u0648\u0630\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0646\u062e\u0637\u0637 \u0641\u064a \u0627\u0644\u0645\u0633\u062a\u0642\u0628\u0644 \u0641\u064a \u0625\u062c\u0631\u0627\u0621 \u062a\u062d\u0644\u064a\u0644\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u0648\u0627\u0644\u062a\u064a \u0628\u062f\u0648\u0631\u0647\u0627 \u0633\u062a\u0646\u0639\u0643\u0633 \u0639\u0644\u0649 \u0625\u0636\u0627\u0641\u0629 \u0628\u0639\u0636 \u0645\u0646 CWEs \u0648\u0642\u062f \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u063a\u064a\u064a\u0631 \u0643\u0630\u0644\u0643 \u0639\u0644\u0649 \u0647\u064a\u0643\u0644\u0629 \u0648\u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. \u0644\u0642\u062f \u0623\u0645\u0636\u064a\u0646\u0627 \u0639\u062f\u0629 \u0623\u0634\u0647\u0631 \u0641\u064a \u062a\u062c\u0645\u064a\u0639 \u0648\u062a\u0635\u0646\u064a\u0641 CWEs \u0648\u0643\u0627\u0646 \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0623\u0646 \u0646\u0633\u062a\u0645\u0631 \u0644\u0623\u0634\u0647\u0631 \u0625\u0636\u0627\u0641\u064a\u0629. \u0648\u0644\u0643\u0646 \u0643\u0627\u0646 \u0639\u0644\u064a\u0646\u0627 \u0627\u0644\u062a\u0648\u0642\u0641 \u0639\u0646\u062f \u0646\u0642\u0637\u0629 \u0645\u0627. \u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0623\u0646\u0648\u0627\u0639 \u0641\u064a CWEs \u0645\u0627 \u064a\u0633\u0645\u0649 \u0628\u0640 \u201c\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\". \u0648\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \"\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0643\u0641\u0634\u0644 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0623\u0648 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0648\u0627\u0644\u0630\u064a \u064a\u062a\u0645 \u0625\u0642\u0631\u0627\u0646\u0647 \u0628\u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0645\u062b\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0645\u0643\u0634\u0648\u0641\u0629 \u0623\u0648 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u0646\u0627 \u0623\u0646 \u0646\u0631\u0643\u0632 \u0639\u0644\u0649 \"\u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\" \u0642\u062f\u0631 \u0627\u0644\u0625\u0645\u0643\u0627\u0646 \u0648\u0630\u0644\u0643 \u0644\u062a\u0648\u0641\u0651\u0631 \u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0648\u0627\u0644\u0625\u0631\u0634\u0627\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u062a\u0644\u0627\u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0623\u0633\u0628\u0627\u0628. \u0643\u0645\u0627 \u0623\u0646 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0644\u064a\u0633 \u0645\u0641\u0647\u0648\u0645 \u062c\u062f\u064a\u062f\u060c \u0643\u0645\u0627 \u0623\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u062c\u0627\u0621\u062a \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0637 \u0645\u0627 \u0628\u064a\u0646 \"\u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\" \u0648\u0647\u0648 \u0627\u0644\u0623\u0633\u0644\u0648\u0628 \u0627\u0644\u0645\u062a\u0651\u0628\u0639 \u0641\u064a CWEs \u0643\u0630\u0644\u0643. \u0648\u0647\u062f\u0641\u0646\u0627 \u0623\u0646 \u0646\u0643\u0648\u0646 \u0639\u0644\u0649 \u062a\u0648\u0627\u0632\u0646 \u0628\u064a\u0646\u0647\u0645. \u0625\u0646 \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062d\u0633\u0628 CWEs \u0647\u0648 19.6 \u062d\u064a\u062b \u062d\u0635\u0644\u062a A10 \u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u0639\u0644\u0649 1 CWEs \u0648 40 CWEs \u0644\u0635\u0627\u0644\u062d A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 . \u0625\u0646 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0630\u064a \u062c\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0641\u064a\u062f \u062c\u062f\u064b\u0627 \u0644\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0645\u0646\u0627\u0641\u0639 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0639\u0644\u0649 CWEs \u0648\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0643\u0644\u063a\u0629 \u0639\u0645\u0644 \u0648\u0625\u0637\u0627\u0631. \u0643\u064a\u0641 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u062a\u0627\u0631\u0629 \u2693\ufe0e \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 2017\u060c \u062c\u0639\u0644\u0646\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0644\u062a\u062d\u062f\u064a\u062f \u0627\u062d\u062a\u0645\u0627\u0644\u064a\u062a\u0647\u0627. \u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0646\u0642\u0627\u0634 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0639\u0642\u0648\u062f \u0645\u0646 \u0627\u0644\u062e\u0628\u0631\u0627\u062a \u0641\u064a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u062d\u062a\u0645\u0627\u0644\u064a\u0629 \u062d\u062f\u0648\u062b\u0647\u0627 \u0623\u064a\u0636\u064b\u0627 \u0648\u0645\u0627 \u0647\u0648 \u0627\u0644\u0623\u062b\u0631 \u0627\u0644\u062a\u0642\u0646\u064a \u0627\u0644\u0630\u064a \u0633\u064a\u062d\u062f\u062b. \u0644\u0630\u0644\u0643 \u0623\u0631\u062f\u0646\u0627 \u0641\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062c\u062f\u064a\u062f\u0629 \u0645\u0646 \u0639\u0627\u0645 2021 \u0645\u0646 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0625\u0646 \u0623\u0645\u0643\u0646 \u0630\u0644\u0643. \u0642\u0645\u0646\u0627 \u0628\u062a\u0646\u0632\u064a\u0644 \" OWASP Dependency Check\" \u0648\u0627\u0633\u062a\u062e\u0631\u062c\u0646\u0627 \u0646\u062a\u0627\u0626\u062c CVSS \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0622\u062b\u0627\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u062c\u0645\u0639\u0647\u0627 \u0633\u0627\u0628\u0642\u0627\u064b \u0645\u0646 CWEs \u0630\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0642\u0629. \u0648\u0644\u0627 \u064a\u062e\u0641\u0649 \u0639\u0644\u064a\u0643\u0645 \u0627\u0646 \u0647\u0630\u0627 \u0627\u0644\u062c\u0647\u062f \u0645\u0646 \u0627\u0644\u0628\u062d\u062b \u0627\u062e\u0630 \u0642\u062f\u0631 \u0644\u0627 \u0628\u0627\u0633 \u0628\u0647 \u0644\u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0644\u062f\u064a\u0647\u0627 \u062f\u0631\u062c\u0627\u062a \u0645\u0646 CVSSv2 \u0643\u0630\u0644\u0643. \u0648\u0644\u0643\u0646 \u0647\u0646\u0627 \u0628\u0639\u0636 \u0627\u0644\u062e\u0644\u0644 \u0645\u0627 \u0628\u064a\u0646 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u0630\u064a \u064a\u062c\u0628 \u0645\u0639\u0627\u0644\u062c\u062a\u0647. \u0648\u0633\u0646\u0631\u0649 \u0641\u064a \u0627\u0644\u0642\u0631\u064a\u0628 \u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 CVSSv3. \u0648\u0646\u0648\u062f \u0627\u0646 \u0646\u0644\u0641\u062a \u0627\u0644\u0627\u0646\u062a\u0628\u0627\u0647 \u0627\u0646 \u0645\u0639\u0627\u062f\u0644\u0629 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u062f\u0631\u062c\u0627\u062a \u0645\u062a\u063a\u064a\u0631\u0629 \u0648\u0645\u062a\u062d\u062f\u062b\u0629. \u0641\u064a CVSSv2\u060c \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u064a\u0635\u0644 \u0627\u0644\u0623\u062b\u0631 \u0648 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u0649 10.0\u060c \u0648\u0644\u0643\u0646 \u0628\u0639\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0642\u062f \u062a\u0646\u062e\u0641\u0636 \u0627\u0644\u0649 60% \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 40% \u0644\u0644\u062a\u0623\u062b\u064a\u0631. \u0648\u0641\u064a CVSSv3 \u0643\u0627\u0646 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0639\u0644\u0649 \u0647\u0648 6.0 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 4.0 \u0644\u0644\u0623\u062b\u0631. \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0645\u062f\u0649 \u062b\u0642\u0644 \u0623\u062d\u062f\u0647\u0645\u0627. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 CVSSv3 \u0646\u0631\u0649 \u0627\u0646 \u0627\u0644\u0623\u062b\u0631 \u0627\u0631\u062a\u0641\u0639 \u062d\u0648\u0627\u0644\u064a \u0646\u0642\u0637\u0629 \u0648\u0646\u0635\u0641\u060c \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0646\u062e\u0641\u0636 \u0628\u0645\u0642\u062f\u0627\u0631 \u0627\u0644\u0646\u0635\u0641 \u0646\u0642\u0637\u0629 \u062a\u0642\u0631\u064a\u0628\u0627\u064b. \u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 125 \u0623\u0644\u0641 \u0633\u062c\u0644 \u0645\u0646 CVE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0641\u064a \u0645\u0646\u0635\u0629 NVD \u0648\u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0641\u064a \" OWASP Dependency Check\". \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 241 \u062a\u0635\u0646\u064a\u0641 \u0641\u0631\u0639\u064a \u0641\u0631\u064a\u062f \u0641\u064a CWEs \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a \u0623\u0643\u062b\u0631 \u0645\u0646 CVE. \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 62 \u0623\u0644\u0641 \u0645\u0646 CWE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a CVSSv3. \u0648\u0627\u0644\u062a\u064a \u062a\u0645\u062b\u0644 \u0646\u0635\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062d\u0635\u0631\u0647\u0627. \u0641\u064a \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0642\u0645\u0646\u0627 \u0628\u062d\u0633\u0627\u0628 \u0645\u062a\u0648\u0633\u0637 \u0646\u0642\u0627\u0637 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0628\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u062a\u0627\u0644\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062a\u062c\u0645\u064a\u0639 \u062f\u0631\u062c\u0627\u062a CVEs \u0645\u0639 CVSS \u0628\u0648\u0627\u0633\u0637\u0629 CWE \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0642\u064a\u064a\u0645 \u0643\u0644 \u0645\u0646 \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a CVSSv3 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0649 \u062c\u0645\u064a\u0639 \u0645\u0627 \u064a\u0648\u062c\u062f \u0641\u064a CVSSv2 \u0644\u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u0625\u062c\u0645\u0627\u0644\u064a. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0631\u0628\u0637 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0628\u0640 CWEs \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0630\u0644\u0643 \u0644\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0644\u062a\u0642\u064a\u064a\u0645 \u062f\u0631\u062c\u0627\u062a \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0643\u0630\u0644\u0643 \u0641\u064a \u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0628\u0646\u0627\u0621 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629. \u0644\u0645\u0627\u0630\u0627 \u0644\u0627 \u062a\u0643\u0648\u0646 \u0645\u062c\u0631\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0625\u062d\u0635\u0627\u0626\u064a\u0629 \u0628\u062d\u062a\u0629\u061f \u2693\ufe0e \u062a\u0642\u062a\u0635\u0631 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0639\u0644\u0649 \u0645\u0627 \u064a\u0645\u0643\u0646 \u0627\u062e\u062a\u0628\u0627\u0631\u0647 \u0628\u0634\u0643\u0644 \u0622\u0644\u064a. \u0648\u062d\u064a\u0646\u0645\u0627 \u062a\u062a\u062d\u062f\u062b \u0625\u0644\u0649 \u0623\u062d\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0627\u0644\u0645\u062d\u062a\u0631\u0641\u064a\u0646 \u0641\u064a \u0645\u062c\u0627\u0644 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0633\u064a\u062e\u0628\u0631\u0648\u0646\u0643 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a \u0648\u0627\u0644\u0627\u062d\u0635\u0627\u0626\u064a\u0627\u062a \u0644\u0627 \u064a\u0648\u062c\u062f \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0639\u062f. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0639\u0646\u062f \u0625\u0639\u062f\u0627\u062f \u0645\u0646\u0647\u062c\u064a\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u060c \u062a\u0633\u062a\u063a\u0631\u0642 \u0641\u062a\u0631\u0629 \u0645\u0646 \u0627\u0644\u0632\u0645\u0646 \u0648\u0645\u0646 \u062b\u0645 \u0623\u0646\u062a \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0648\u0642\u062a \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0623\u062a\u0645\u062a\u0629 \u062a\u0644\u0643 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0648\u062a\u0634\u063a\u064a\u0644\u0647\u0627 \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0629 \u0643\u0628\u064a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0633\u0628\u0628 \u0639\u062f\u0645 \u0627\u0643\u062a\u0645\u0627\u0644 \u0648\u0646\u0636\u062c \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0648\u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0644\u062a\u0635\u0646\u064a\u0641\u064a\u0646 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u0642\u0645\u0646\u0627 \u0628\u0639\u0645\u0644 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0645\u0645\u0627 \u064a\u0633\u0645\u062d \u0644\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0627\u0644\u062a\u0635\u0648\u064a\u062a \u0644\u0645\u0627 \u064a\u0631\u0648\u0646\u0647 \u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062d\u0642 \u0623\u0646 \u062a\u0636\u0627\u0641 \u0625\u0644\u0649 \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u064a\u0643\u0648\u0646 \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u062a\u0646\u0627\u0633\u0642\u0629 \u0623\u0648 \u063a\u064a\u0631 \u0645\u0646\u0627\u0633\u0628\u0629. \u0644\u0645\u0627\u0630\u0627 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u0627 \u0645\u0646 \u0627\u0644\u062a\u0643\u0631\u0627\u0631\u061f \u2693\ufe0e \u0647\u0646\u0627\u0643 \u062b\u0644\u0627\u062b\u0629 \u0645\u0635\u0627\u062f\u0631 \u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0646\u062d\u062f\u062f\u0647\u0627 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \u0627\u0644\u0627\u0646\u0633\u0627\u0646 \u064a\u0633\u0627\u0639\u062f \u0627\u0644\u0623\u062f\u0648\u0627\u062a (HaT) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0633\u0627\u0639\u062f \u0627\u0644\u0625\u0646\u0633\u0627\u0646 (TaH) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0645\u0646 \u063a\u064a\u0631 \u0623\u064a \u062a\u0639\u062f\u064a\u0644\u0627\u062a. \u062a\u0642\u0648\u0645 HaT \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0628\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0639\u0627\u0644\u064a. \u062d\u064a\u062b \u0627\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0628\u062d\u062b \u0639\u0646 \u0646\u0642\u0627\u0637 \u0636\u0639\u0641 \u0645\u062d\u062f\u062f\u0629 \u0645\u0639 \u062a\u062c\u0631\u0628\u0629 \u062c\u0645\u064a\u0639 \u0627\u0644\u0627\u062d\u062a\u0645\u0627\u0644\u0627\u062a \u0627\u0644\u0645\u062a\u0648\u0642\u0639\u0629 \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0629. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0639\u0627\u062f\u0629 \u0627\u0645\u0627 \u0627\u0646 \u062a\u0643\u0648\u0646 \u0645\u0646\u062e\u0641\u0636\u0629 \u0627\u0644\u062e\u0637\u0648\u0631\u0629 \u0627\u0648 \u0628\u0633\u064a\u0637\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0633\u0628\u0628 \u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0648 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u0635\u0641\u064a\u0629. \u0648\u0639\u0646\u062f\u0645\u0627 \u062a\u0643\u0648\u0646 \u0627\u0644\u062b\u063a\u0631\u0629 \u0628\u0633\u0628\u0628 \u062e\u0637\u0627\u0621 \u0641\u064a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u062a\u0631\u062a\u0641\u0639 \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u062a\u0643\u0631\u0627\u0631 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0644\u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u062a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0645\u062e\u0631\u062c\u0627\u062a \u0627\u0644\u062a\u0642\u0631\u064a\u0631 \u0627\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0623\u062e\u0631\u0649\u060c \u0646\u062c\u062f \u0623\u0646 TaH \u0623\u062e\u0631\u062c\u062a \u0644\u0646\u0627 \u0646\u0637\u0627\u0642 \u0648\u0627\u0633\u0639 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0644\u0643\u0646 \u0645\u0639 \u062a\u0643\u0631\u0627\u0631 \u0623\u0642\u0644 \u0628\u0643\u062b\u064a\u0631 \u0628\u0633\u0628\u0628 \u0636\u064a\u0642 \u0627\u0644\u0648\u0642\u062a. \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0642\u064a\u0627\u0645 \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0641\u062d\u0635 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u064a\u0631\u0648\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0645\u062b\u0644 XSS \u0633\u064a\u0642\u0648\u0645\u0648\u0646 \u0628\u0625\u064a\u062c\u0627\u062f \u0663 \u0623\u0648 \u0664 \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u064a\u062a\u0648\u0642\u0641\u0648\u0646 \u0639\u0646 \u0627\u0644\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0625\u064a\u062c\u0627\u062f \u0633\u0628\u0628 \u0627\u0644\u062e\u0637\u0623 \u0648\u0643\u062a\u0627\u0628\u0629 \u062a\u0642\u0631\u064a\u0631 \u0639\u0646\u0647\u0627 \u0648\u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0627\u0644\u0645\u0645\u0643\u0646\u0629 \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d\u0647\u0627 \u0648\u0627\u0644\u062a\u064a \u0633\u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d \u062c\u0645\u064a\u0639 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u064a\u0633 \u0647\u0646\u0627\u0643 \u062d\u0627\u062c\u0629 \u0623\u0648 \u0648\u0642\u062a \u0644\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u062a\u0643\u0631\u0631. \u0644\u0646\u0641\u062a\u0631\u0636 \u0623\u0646\u0646\u0627 \u0623\u062e\u0630\u0646\u0627 \u0645\u062c\u0645\u0648\u0639\u062a\u064a\u0646 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0645\u064a\u0651\u0632\u0629 \u0648\u0627\u0644\u063a\u064a\u0631 \u0645\u062a\u0634\u0627\u0628\u0647\u0629 \u0648\u062d\u0627\u0648\u0644\u0646\u0627 \u062f\u0645\u062c\u0647\u0627 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0643\u0631\u0627\u0631. \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629 \u0633\u0646\u062c\u062f \u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0645\u0644\u0627\u062d\u0638\u0629 \u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a TaH. \u0648\u0647\u0630\u0627 \u064a\u0638\u0647\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0628\u0634\u0643\u0644 \u0625\u064a\u062c\u0627\u0628\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u0630\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u064a\u0642\u0648\u0645 \u0628\u0631\u0641\u0639 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0645\u0646\u062e\u0641\u0636 \u0625\u0644\u0649 \u0645\u062a\u0648\u0633\u0637 \u0628\u0633\u0628\u0628 \u0627\u0644\u0639\u062f\u062f \u0627\u0644\u0647\u0627\u0626\u0644 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c. (\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 XSS \u0645\u0646 \u0627\u0644\u0633\u0647\u0644 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0648\u0627\u0644\u062e\u0631\u0648\u062c \u0628\u0646\u062a\u0627\u0626\u062c \u0645\u0639\u0642\u0648\u0644\u0629) \u0641\u064a \u0639\u0627\u0645 2017 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0625\u0644\u0642\u0627\u0621 \u0646\u0638\u0631\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062f\u0645\u062c\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u0646\u0627\u0633\u0628 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u0648 TaH. \u062d\u064a\u062b \u064a\u0643\u0648\u0646 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u064a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0646\u0633\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u0646\u0648\u0639 \u0645\u0646 \u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a. \u0648\u062d\u0642\u064a\u0642\u0629 \u0646\u062d\u0646 \u0641\u064a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0644\u0627 \u0646\u0647\u062a\u0645 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0645\u0639\u062f\u0644 \u062d\u062f\u0648\u062b\u0647\u0627 \u0645\u062a\u0643\u0631\u0631. \u0648\u0647\u062f\u0641\u0646\u0627 \u0647\u0648 \u0645\u0639\u0631\u0641\u0629 \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u0647\u0630\u0627 \u064a\u0639\u0637\u064a\u0646\u0627 \u062a\u0635\u0648\u0651\u0631 \u0648\u0627\u0636\u062d \u0645\u0646 \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u0639\u062a\u0628\u0631 \u0644\u062f\u064a\u0646\u0627 \u0623\u0641\u0636\u0644 \u0645\u0646 \u0625\u063a\u0631\u0627\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u062a\u0643\u0631\u0627\u0631 \u0644\u064a\u0633 \u0644\u0647 \u0641\u0627\u0626\u062f\u0629. \u0645\u0627 \u0647\u064a \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062a\u062d\u0644\u064a\u0644\u0647\u0627\u061f \u2693\ufe0e \u062a\u0645 \u0625\u0636\u0641\u0627\u0621 \u0627\u0644\u0637\u0627\u0628\u0639 \u0627\u0644\u0631\u0633\u0645\u064a \u0639\u0644\u0649 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0641\u064a \u0642\u0645\u0629 Open Security Summit \u0641\u064a \u0639\u0627\u0645 2017. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0623\u0645\u0636\u0649 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0641\u064a \u0645\u0646\u0638\u0645\u0629 \u0622\u0648\u0627\u0633\u0628 \u064a\u0648\u0645\u064a\u0646 \u0641\u064a \u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u0649 \u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0633\u064a\u0627\u0633\u0629 \u0648\u0627\u0636\u062d\u0629 \u0648\u0634\u0641\u0627\u0641\u0629. \u062a\u0639\u062f \u0646\u0633\u062e\u0629 2021 \u0647\u064a \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629 \u0627\u0644\u062a\u064a \u0646\u0633\u062a\u062e\u062f\u0645 \u0641\u064a\u0647\u0627 \u0647\u0630\u0647 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062f\u0639\u0648\u0629 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0642\u0646\u0648\u0627\u062a \u0627\u0644\u062a\u0648\u0627\u0635\u0644 \u0627\u0644\u0627\u062c\u062a\u0645\u0627\u0639\u064a \u0627\u0644\u0645\u062a\u0627\u062d\u0629 \u0644\u0646\u0627\u060c \u0644\u0643\u0644\u0651\u064b\u0627 \u0645\u0646 \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0648 OWASP. \u0648\u0641\u064a \u0635\u0641\u062d\u0629 \u0645\u0634\u0631\u0648\u0639 OWASP , \u0646\u0642\u0648\u0645 \u0628\u0625\u062f\u0631\u0627\u062c \u0639\u0646\u0627\u0635\u0631 \u0648\u0647\u064a\u0643\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0646\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0643\u064a\u0641\u064a\u0629 \u0625\u0631\u0633\u0627\u0644\u0647\u0627. \u0648\u0641\u064a \u0645\u0634\u0631\u0648\u0639 GitHub , \u0644\u062f\u064a\u0646\u0627 \u0623\u0645\u062b\u0644\u0629 \u0644\u0645\u0644\u0641\u0627\u062a \u062a\u0639\u0645\u0644 \u0643\u0642\u0648\u0627\u0644\u0628. \u0646\u0639\u0645\u0644 \u0645\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u0623\u062e\u0631\u0649 \u062d\u0633\u0628 \u0627\u0644\u062d\u0627\u062c\u0629 \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0647\u064a\u0643\u0644\u0648\u0631\u0633\u0645\u0647 \u0648\u0631\u0628\u0637\u0647 \u0628\u0640 CWEs. \u0646\u062d\u0635\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0628\u0627\u062f\u0644\u0629\u060c \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u0646\u0635\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0627\u062a\u060c \u0648\u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0647\u0645 \u0628\u0628\u064a\u0627\u0646\u0627\u062a\u0647\u0627 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629. \u0648\u0628\u0645\u062c\u0631\u062f \u062d\u0635\u0648\u0644\u0646\u0627 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0646\u0642\u0648\u0645 \u0628\u062a\u062d\u0645\u064a\u0644\u0647\u0627 \u0645\u0639\u064b\u0627 \u0648\u0646\u062c\u0631\u064a \u062a\u062d\u0644\u064a\u0644\u064b\u0627 \u0648\u0641\u0647\u0645\u0627\u064b \u0639\u0646 \u0623\u0633\u0627\u0633\u064a\u064b\u0627\u062a \u0627\u0644\u0631\u0628\u0637 \u0628\u0640 CWEs \u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0628\u0639\u0636 CWEs\u060c \u0628\u0633\u0628\u0628 \u0627\u0644\u062a\u0634\u0627\u0628\u0647 \u0628\u064a\u0646\u0647\u0645 (\u0645\u062b\u0644 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0641\u064a \u0627\u0644\u062a\u0634\u0641\u064a\u0631). \u062d\u064a\u062b \u064a\u062a\u0645 \u062a\u0648\u062b\u064a\u0642 \u0648\u0646\u0634\u0631 \u0623\u064a \u0642\u0631\u0627\u0631\u0627\u062a \u062a\u062a\u0639\u0644\u0642 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0623\u0648\u0644\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0645\u0629 \u0644\u062a\u0643\u0648\u0646 \u0645\u0641\u062a\u0648\u062d\u0629 \u0648\u0648\u0627\u0636\u062d\u0629 \u0645\u0639 \u0643\u064a\u0641\u064a\u0629 \u0645\u0648\u0627\u0621\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u064a\u062a\u0645 \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u062b\u0645\u0627\u0646\u064a\u0629 \u0630\u0627\u062a \u0623\u0639\u0644\u0649 \u0645\u0639\u062f\u0644\u0627\u062a \u062d\u062f\u0648\u062b \u0644\u0625\u062f\u0631\u0627\u062c\u0647\u0627 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0648\u0646\u0646\u0638\u0631 \u0623\u064a\u0636\u064b\u0627 \u0641\u064a \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0623\u064a \u0645\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0633\u064a\u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u0623\u0639\u0644\u0649 \u062a\u0642\u064a\u064a\u0645\u064a\u0646 \u063a\u064a\u0631 \u0645\u0648\u062c\u0648\u062f\u064a\u0646 \u0628\u0627\u0644\u0641\u0639\u0644 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u062d\u0644\u0644\u0629 \u0633\u0627\u0628\u0642\u0627\u064b \u0648\u0627\u0636\u0641\u062a\u0647\u0627 \u0627\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0628\u0645\u062c\u0631\u062f \u0627\u062e\u062a\u064a\u0627\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0639\u0634\u0631\u0629 \u060c \u064a\u062a\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0627\u062a\u0641\u0627\u0642 \u0639\u0644\u064a\u0647\u0627 \u0648\u0647\u064a (\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u062a\u0623\u062b\u064a\u0631)\u061b \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u0631\u062a\u064a\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u2693\ufe0e \u0647\u0646\u0627\u0643 \u0639\u0648\u0627\u0645\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u062f\u0631\u062c\u0629 \u0644\u0643\u0644 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0648\u0625\u0644\u064a\u0643 \u0645\u0627 \u062a\u0639\u0646\u064a\u0647: \u0631\u0628\u0637 \u0628\u0640 CWEs : \u0639\u062f\u062f CWEs \u0627\u0644\u0630\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0641\u0631\u064a\u0642. \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0648\u0647\u0648 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0631\u0636\u0629 \u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0628\u0645\u0639\u064a\u0627\u0631 CWE \u062e\u0644\u0627\u0644 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a. \u0623\u062c\u0631\u062a\u0647\u0627 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0641\u064a \u0633\u0646\u0629 \u0645\u062d\u062f\u062f\u0629. (\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a) \u0648\u0627\u0644\u062a\u063a\u0637\u064a\u0629 :\u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0644\u0640 CWE \u0645\u064f\u0639\u064a\u0651\u0646. \u062e\u0637\u0648\u0631\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 : \u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0644\u0647 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0645\u062a\u0648\u0642\u0639 : \u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627. \u0625\u062c\u0645\u0627\u0644\u064a CVEs : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f CVEs \u0641\u064a NVD DB \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627. \u0639\u0644\u0627\u0642\u0627\u062a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0644\u0639\u0627\u0645 2021 \u0645\u0639 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0639\u0627\u0645 2017 \u2693\ufe0e \u0647\u0646\u0627\u0643 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u062d\u062f\u064a\u062b \u0639\u0646 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0639\u0634\u0631\u0629 \u0627\u0644\u0623\u0648\u0644\u0649. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0639\u0631\u064a\u0641 \u0643\u0644 (\u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0645\u062f\u0631\u062c\u0629 \u0641\u064a CWEs)\u060c \u0648\u0644\u0643\u0646 \u0627\u0644\u0630\u064a \u064a\u0638\u0647\u0631 \u0644\u0646\u0627 \u0623\u0646\u0647 \u0644\u0627 \u064a\u0648\u062c\u062f \u0623\u064a \u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0647\u0627 \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u0645\u0646 \u0627\u0644\u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u0646\u0638\u0631\u064a\u0629\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0623\u0648 \u062a\u0623\u062b\u0631 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u062a\u0633\u0645\u064a\u0629. \u0648\u0646\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062e\u0637\u0637\u0627\u062a Venn \u0644\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0643\u0645\u0627 \u0648\u0631\u062f \u0641\u064a \u0627\u0644\u0645\u062b\u0627\u0644 \u0623\u062f\u0646\u0627\u0647. \u064a\u0645\u062b\u0644 \u0645\u062e\u0637\u0637 Venn \u0623\u0639\u0644\u0627\u0647 \u0627\u0644\u062a\u0631\u0627\u0628\u0637 \u0628\u064a\u0646 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2017. \u0648\u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0630\u0644\u0643\u060c \u0623\u0635\u0628\u062d\u062a \u0628\u0636\u0639 \u0646\u0642\u0627\u0637 \u0623\u0633\u0627\u0633\u064a\u0629 \u0648\u0627\u0636\u062d\u0629: \u0643\u0627\u0646 \u064a\u064f\u0631\u0649 \u0628\u0623\u0646 \u0647\u062c\u0648\u0645 - \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0646\u062a\u0645\u064a \u0641\u064a \u062d\u0642\u064a\u0642\u0629 \u0627\u0644\u0623\u0645\u0631 \u0625\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646(Injection) \u0644\u0623\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0623\u0633\u0627\u0633 \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u062d\u0642\u0646 \u0627\u0644\u0645\u062d\u062a\u0648\u0649. \u0628\u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0627\u0645 2021 \u060c \u0623\u0635\u0628\u062d \u0645\u0646 \u0627\u0644\u0648\u0627\u0636\u062d \u0623\u0646 ( XSS )\u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0625\u0644\u0649 \u0627\u0644\u062d\u0642\u0646(Injection). \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0645\u0627 \u0628\u064a\u0646\u0647\u0645 \u063a\u0627\u0644\u0628\u064b\u0627 \u064a\u0643\u0648\u0646 \u0641\u064a \u0627\u062a\u062c\u0627\u0647 \u0648\u0627\u062d\u062f. \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u0646\u0635\u0646\u0651\u0641 \u0627\u0644\u062b\u063a\u0631\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \"\u0627\u0644\u0639\u064e\u0631\u064e\u0636\"\u060c \u0648\u0644\u064a\u0633 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a (\u0627\u0644\u0630\u064a \u064a\u062d\u062a\u0645\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0639\u0645\u064a\u0642\u064b\u0627). \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0642\u062f \u062a\u0643\u0648\u0646 \" \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629 \" \u0646\u062a\u064a\u062c\u0629 \"\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u062e\u0627\u0637\u0626\u0629 \u0627\u0644\u0623\u0645\u0627\u0646\u060c \u0648\u0641\u064a \u0627\u0644\u063a\u0627\u0644\u0628 \u0644\u0646 \u062a\u0631\u0627\u0647\u0627 \u0628\u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0645\u0639\u0627\u0643\u0633. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u064a\u062a\u0645 \u0631\u0633\u0645 \u0627\u0644\u0623\u0633\u0647\u0645 \u0641\u064a \u0645\u0646\u0627\u0637\u0642 \u0627\u0644\u062a\u0623\u062b\u0631 \u0644\u0644\u0625\u0634\u0627\u0631\u0629 \u0625\u0644\u0649 \u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0630\u064a \u064a\u062d\u062f\u062b \u0641\u064a\u0647. \u0623\u062d\u064a\u0627\u0646\u064b\u0627 \u064a\u062a\u0645 \u0631\u0633\u0645 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0637\u0637\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0643\u0645\u0627 \u0641\u064a A06: 2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b . \u0641\u064a \u062d\u064a\u0646 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0642\u062f \u064a\u0643\u0648\u0646 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a \u0647\u064a \u062b\u063a\u0631\u0627\u062a \u0645\u0646 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u0641\u0625\u0646\u0647 \u064a\u062a\u0645 \u0625\u062f\u0627\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0641 \u0648\u0645\u0633\u0624\u0648\u0644\u064a\u0627\u062a \u0645\u062e\u062a\u0644\u0641\u0629. \u0648\u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0623\u062e\u0631\u0649 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u062a\u0645\u062b\u0651\u0644 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u0623\u0648\u0644. \u0634\u0643\u0631\u0627\u064b \u0644\u0643\u0644 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0645\u0639\u0646\u0627 \u0641\u064a \u062c\u0645\u0639 \u0647\u0630\u0647 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u2693\ufe0e \u0633\u0627\u0647\u0645\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u062a\u0627\u0644\u064a\u0629 (\u062c\u0646\u0628\u064b\u0627 \u0625\u0644\u0649 \u062c\u0646\u0628 \u0645\u0639 \u0628\u0639\u0636 \u0627\u0644\u0645\u0633\u0627\u0647\u0645\u064a\u0646-\u0627\u0644\u0645\u062a\u0628\u0631\u0639\u064a\u0646 \u0627\u0644\u0645\u062c\u0647\u0648\u0644\u064a\u0646) \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 500,000 \u062a\u0637\u0628\u064a\u0642 \u0648\u062c\u0639\u0644\u0647\u0627 \u0647\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0643\u0628\u0631 \u0648\u0627\u0644\u0623\u0643\u062b\u0631 \u0648\u0627\u0644\u0623\u0634\u0645\u0644 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0639\u0644\u064a\u0647\u0627 \u0648\u062c\u0639\u0644\u0647\u0627 \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u062a\u0623\u0643\u062f \u0623\u0646\u0647 \u0645\u0646 \u063a\u064a\u0631 \u0627\u0633\u0647\u0627\u0645\u0627\u062a\u0643 \u0644\u0646 \u064a\u0643\u0648\u0646 \u0647\u0630\u0627 \u0645\u0645\u0643\u0646. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT)","title":"\u0627\u0644\u0645\u0642\u062f\u0645\u0629"},{"location":"ar/A00_2021_Introduction/#_1","text":"","title":"\u0645\u0642\u062f\u0645\u0629"},{"location":"ar/A00_2021_Introduction/#2021","text":"\u0645\u0631\u062d\u0628\u064b\u0627 \u0628\u0643\u0645 \u0641\u064a \u0623\u062d\u062f\u062b \u0625\u0635\u062f\u0627\u0631 \u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0648\u0647\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0634\u0643\u0644 \u062c\u062f\u064a\u062f \u062a\u0645\u0627\u0645\u064b\u0627 \u0648\u0645\u062f\u0639\u0645\u0629 \u0628\u0631\u0633\u0648\u0645\u0627\u062a \u0627\u0646\u0641\u0648\u062c\u0631\u0627\u0641\u064a\u0643 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0637\u064a\u0639 \u0637\u0628\u0627\u0639\u062a\u0647\u0627 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0648\u064a\u0645\u0643\u0646 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u064a\u0647\u0627 \u0645\u0646 \u0635\u0641\u062d\u062a\u0646\u0627 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629. \u0643\u0645\u0627 \u0646\u062a\u0642\u062f\u0645 \u0628\u062c\u0632\u064a\u0644 \u0627\u0644\u0634\u0643\u0631 \u0648\u0627\u0644\u0639\u0631\u0641\u0627\u0646 \u0644\u0643\u0644\u0651 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0628\u0641\u0643\u0631\u0629\u060c \u0623\u0648 \u0648\u0642\u062a\u060c \u0623\u0648 \u062c\u0647\u062f \u0641\u064a \u0633\u0628\u064a\u0644 \u0625\u0646\u062c\u0627\u062d \u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0644\u060c \u0645\u0645\u062a\u0646\u0651\u0648\u0646 \u0644\u0645\u0627 \u0628\u0630\u0644\u062a\u0645\u0648\u0647\u060c \u0648\u0644\u0645\u0627 \u062d\u0642\u0651\u0642\u0646\u0627\u0647 \u0628\u0641\u0636\u0644 \u0627\u0644\u0644\u0647 \u062b\u0645 \u0628\u0645\u0633\u0627\u0639\u062f\u062a\u0643\u0645 \u0648\u062f\u0639\u0645\u0643\u0645..","title":"\u0645\u0631\u062d\u0628\u0627\u064b \u0628\u0643\u0645 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021"},{"location":"ar/A00_2021_Introduction/#2021_1","text":"\u0628\u0634\u0643\u0644 \u0639\u0627\u0645 \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 3 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062c\u062f\u064a\u062f\u0629 \u0648 4 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u060c \u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0627\u0633\u0645 \u0648\u0643\u0630\u0644\u0643 \u0627\u0644\u0646\u0637\u0627\u0642 \u0627\u0644\u062e\u0627\u0635 \u0628\u0647\u0627\u060c \u0648\u0628\u0639\u0636 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062f\u0645\u062c \u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0645\u0639 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021 A01:2021-\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u062d\u062a\u0644 (\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644) \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0641\u064a \u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u062e\u0627\u0645\u0633\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0646 \u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637 \u0628\u0640 34 CWEs \u0647\u0648 \u0645\u0646 \u0623\u0643\u062b\u0631 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. A02:2021-\u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u064a\u0623\u062a\u064a \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 #2 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629\u060c \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0643\u0648\u0646 \u0623\u0633\u0628\u0627\u0628\u0647\u0627 \u0645\u062a\u0639\u062f\u062f\u0629 \u062f\u0648\u0646 \u0623\u0646 \u062a\u0639\u0648\u062f \u062c\u0645\u064a\u0639\u0647\u0627 \u0644\u0633\u0628\u0628 \u062c\u0630\u0631\u064a \u0648\u0627\u062d\u062f\u060c \u0648\u064a\u0623\u062a\u064a \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0647\u0646\u0627 \u0628\u0634\u0643\u0644 \u0645\u062a\u062c\u062f\u062f \u0639\u0644\u0649 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0641\u064a \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u062a\u064a \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u0624\u062f\u064a \u0625\u0644\u0649 \u0643\u0634\u0641 \u063a\u064a\u0631 \u0645\u0635\u0631\u0651\u062d \u0628\u0647 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0623\u0646\u0638\u0645\u0629. A03:2021-\u0627\u0644\u062d\u0642\u0646 \u062a\u062a\u0631\u0627\u062c\u0639 \u0627\u0644\u062d\u0642\u0646 \u0627\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 3. \u062d\u064a\u062b \u0627\u0646\u0647 \u062a\u0645 \u0627\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u0635\u0627\u0628\u0647 \u0628\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646. \u0627\u0646 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 33 CWEs \u062a\u0639\u062a\u0628\u0631 \u062b\u0627\u0646\u064a \u0627\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0625\u0635\u0627\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u0647\u0627. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0627\u0646 \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0645 \u062f\u0645\u062c\u0647\u0627 \u0647\u0646\u0627 \u0645\u0639 \u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629. A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0647\u0648 \u062a\u0635\u0646\u064a\u0641 \u062c\u062f\u064a\u062f \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629 \u0644\u0639\u0627\u0645 2021\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0639\u064a\u0648\u0628 \u0648\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u062a\u0635\u0645\u064a\u0645. \u0648\u0625\u0630\u0627 \u0623\u0631\u062f\u0646\u0627 \u0627\u0644\u062a\u062d\u0631\u0643 \u0644\u0625\u062b\u0628\u0627\u062a \u0623\u0647\u0645\u064a\u0629 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0641\u0646\u062d\u0646 \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0648\u0643\u0630\u0644\u0643 \u0648\u062c\u0648\u062f \u0628\u0646\u064a\u0629 \u062a\u062d\u062a\u064a\u0629 \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0648\u0627\u0644\u0636\u0648\u0627\u0628\u0637. A05:2021- \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0647\u0648 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6 \u0627\u0644\u0622\u0646 \u0646\u0631\u0627\u0647 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 #4\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0648\u0643\u0627\u0646\u062a \u0627\u0644\u0646\u0633\u0628\u0629 \u0647\u064a 90% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0648\u062c\u062f \u0628\u0647\u0627 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u062d\u0629. \u0648\u0647\u0630\u0627 \u064a\u062d\u062f\u062b \u0645\u0639 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0644\u0632\u0645 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631 \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u062e\u0637\u0623 \u0641\u064a \u0627\u0631\u062a\u0641\u0627\u0639\u060c \u0648\u0647\u0630\u0627 \u0627\u0644\u0630\u064a \u062c\u0639\u0644 (\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629) \u062a\u0631\u062a\u0641\u0639 \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0625\u0644\u0649 \u0627\u0644\u0631\u0627\u0628\u0639\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646\u0647 \u062a\u0645 \u0636\u0645 \" XML External Entities XXE\" \u0644\u0647\u0630\u0627 \u0627\u0644\u0646\u0648\u0639 \u0645\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629. A06:2021-\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0627\u0644\u0645\u062d\u062f\u062b\u0629 \u0633\u0627\u0628\u0642\u064b\u0627 \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0628\u0640 \u201c\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0648\u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0630\u0627\u062a \u062b\u063a\u0631\u0627\u062a \u0645\u0639\u0631\u0648\u0641\u0629\". \u0648\u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0639\u0644\u0649 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0643\u0627\u0646\u062a \u0647\u064a #2 \u0623\u0639\u0644\u0649 \u062b\u063a\u0631\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u062e\u0637\u0631 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #9 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 #2017 \u0627\u0631\u062a\u0641\u0639\u062a \u0641\u064a \u0625\u0635\u062f\u0627\u0631 #2021 \u0625\u0644\u0649 \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #6. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0645\u0639\u0627\u064a\u064a\u0631 CVEs \u0623\u0648 CWEs \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0628\u0627\u0644\u062e\u0637\u0648\u0631\u0629. \u0648\u0644\u0630\u0644\u0643 \u064a\u062a\u0645 \u062a\u0635\u0646\u064a\u0641 \u062e\u0637\u0648\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0647\u0648 5.0. A07:2021-\u0627\u0644\u0647\u0648\u064a\u0629 \u0648 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \"\u0636\u0639\u0641 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629\" \u0648\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0643\u0630\u0644\u0643 \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #2. \u0648\u0628\u0639\u062f \u0639\u0645\u0644\u064a\u0629 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u0648\u062a\u0633\u0645\u064a\u062a\u0647\u0627 \u0628\u0640 \u201c\u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642. \u0648\u0643\u0645\u0627 \u0646\u0642\u0648\u0644 \u0623\u0646 \u0632\u064a\u0627\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u064a\u064a\u0631 \u0623\u062f\u0651\u062a \u0625\u0644\u0649 \u062a\u0642\u0644\u064a\u0644 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0648\u0644\u0643\u0646 \u0644\u064a\u0633 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0644\u0630\u0644\u0643 \u0646\u0631\u0627\u0647\u0627 \u0647\u0646\u0627 \u0645\u0646 \u0636\u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. A08:2021- \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647\u0627 \u062d\u062f\u064a\u062b\u064b\u0627 \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 2021. \u0648\u0627\u0644\u062a\u064a \u062a\u0631\u0643\u0651\u0632 \u0628\u0634\u0643\u0644 \u0643\u0628\u064a\u0631 \u0639\u0644\u0649 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0639 \u0627\u0644\u062a\u0623\u0643\u062f \u0639\u0644\u0649 \u0639\u062f\u0645 \u062a\u0623\u062b\u0631 \u0633\u0644\u0627\u0645\u0629 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 CI/CD. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062d\u062a\u0645\u0644\u0629 \u062d\u0633\u0628 \u062a\u0635\u0646\u064a\u0641 CVE/CVSS \u0648\u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0645\u0639 CWEs \u0646\u062c\u062f \u0623\u0646 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u062e\u0637\u0631 \u0647\u0648 10 \u0648\u064a\u0639\u062a\u0628\u0631 \u0645\u0631\u062a\u0641\u0639 \u062c\u062f\u064b\u0627. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \"Insecure Deserialization\" \u0623\u0635\u0628\u062d\u062a \u062c\u0632\u0621 \u0645\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641. A09:2021-\u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u0633\u0627\u0628\u0642\u064b\u0627 \u0628\u0640 \u201c\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0628\u0634\u0643\u0644 \u063a\u064a\u0631 \u0635\u062d\u064a\u062d. \u0648\u0628\u0639\u062f \u0639\u0645\u0644 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062c\u0631\u0627\u0621\u0647\u0627 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u062d\u062a\u0644\u062a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 3 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639. \u0648\u0627\u0644\u0630\u064a \u062c\u0639\u0644\u0647\u0627 \u062a\u0635\u0639\u062f \u0645\u0631\u062a\u0628\u0629 \u0648\u0627\u062d\u062f\u0629 \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646\u062a \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 10. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0641\u064a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0627\u0644\u062a\u064a \u062a\u0645 \u0636\u0645\u0647\u0627 \u0647\u0646\u0627. \u0648\u062d\u064a\u0646\u0645\u0627 \u0646\u0631\u0649 CVE/CVSS \u0644\u0627 \u0646\u0631\u0649 \u0644\u0647\u0627 \u0623\u064a \u062a\u0635\u0646\u064a\u0641 \u0648\u0627\u0636\u062d \u0648\u0644\u0643\u0646 \u0645\u0639 \u0627\u0644\u0642\u0635\u0648\u0631 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u064a \u062a\u0634\u0643\u0644 \u062a\u0623\u062b\u064a\u0631\u064b\u0627 \u0628\u0627\u0644\u063a\u064b\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0623\u0646\u0638\u0645\u0629\u060c \u0648\u0627\u0644\u062a\u0646\u0628\u064a\u0647 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u062d\u0648\u0627\u062f\u062b \u0623\u0648 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062c\u0646\u0627\u0626\u064a \u0627\u0644\u0631\u0642\u0645\u064a. A10:2021-\u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0631\u0642\u0645 #1. \u0648\u062a\u0638\u0647\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0628 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0623\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0639\u062f\u0644 \u0627\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u0647 \u0641\u0648\u0642 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0645\u0639 \u0627\u0631\u062a\u0641\u0627\u0639 \u0645\u0646\u062e\u0641\u0636. \u0648\u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647 \u0628\u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0648\u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644. \u0648\u064a\u0641\u064a\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0641\u064a \u0627\u0644\u0645\u062c\u0627\u0644 \u0623\u0646 \u0648\u062c\u0648\u062f \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0636\u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0647\u0648 \u0623\u0645\u0631 \u0645\u0647\u0645 \u062c\u062f\u064b\u0627 \u062d\u062a\u0649 \u0648\u0625\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u063a\u064a\u0631 \u0645\u0643\u062a\u0645\u0644\u0629 \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u062d\u0627\u0644\u064a.","title":"\u0645\u0627 \u0647\u064a \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0637\u0631\u0623\u062a \u0639\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021"},{"location":"ar/A00_2021_Introduction/#_2","text":"\u0644\u0623\u0648\u0644 \u0645\u0631\u0629 \u064a\u062a\u0645 \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u064a\u062c\u0628 \u0627\u0644\u062a\u0646\u0648\u064a\u0647 \u0623\u0646\u0647\u0627 \u0644\u0627 \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u064f\u0644\u064a. \u062d\u064a\u062b \u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u062b\u0646\u064a\u0646 \u0645\u0646\u0647\u0645 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u0630\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647 \u0641\u064a \u0646\u0637\u0627\u0642 \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0648\u062a\u0642\u0648\u0645 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0628\u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0623\u064a \u0645\u0635\u0627\u062f\u0631 \u0623\u062e\u0631\u0649 \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0623\u0646 \u0627\u0644\u0628\u0627\u062d\u062b\u064a\u0646 \u0641\u064a \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u064a\u0633\u062a\u063a\u0631\u0642\u0648\u0646 \u0648\u0642\u062a \u0648\u062c\u0647\u062f \u0643\u0628\u064a\u0631 \u0641\u064a \u0625\u064a\u062c\u0627\u062f \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0623\u0648 \u0637\u0631\u0642 \u062c\u062f\u064a\u062f\u0629 \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627. \u0645\u0645\u0627 \u064a\u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u064a\u0633\u062a\u063a\u0631\u0642 \u0648\u0642\u062a \u0623\u0643\u0628\u0631 \u0648\u0642\u062f \u062a\u0635\u0644 \u0625\u0644\u0649 \u0633\u0646\u0648\u0627\u062a. \u0648\u0644\u062a\u062d\u0642\u064a\u0642 \u0627\u0644\u062a\u0648\u0627\u0632\u0646 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u062f\u0641 \u0635\u0646\u0627\u0639\u0629 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0648\u062c\u064a\u0647 \u0623\u0633\u0626\u0644\u0629 \u0644\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0641\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u062a\u0638\u0647\u0631\u0647\u0627 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0628\u0639\u0636 \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u062c\u0648\u0647\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0639\u062a\u0645\u0627\u062f\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0646\u0638\u0645\u0629 \u0623\u0648\u0627\u0633\u0628 \u0644\u0645\u0648\u0627\u0635\u0644\u0629 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629 \u0627\u0644\u0645\u062a\u0651\u0628\u0639\u0629 \u0641\u064a \u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631.","title":"\u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629"},{"location":"ar/A00_2021_Introduction/#_3","text":"\u062a\u0645 \u062a\u063a\u064a\u064a\u0631 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0648\u0647\u0646\u0627 \u0645\u0644\u062e\u0635 \u0644\u0645\u0627 \u062a\u0645 \u062a\u063a\u064a\u0631\u0647 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062a\u0631\u0643\u0632 \u0627\u0644\u062c\u0647\u0648\u062f \u0627\u0644\u0645\u0628\u0630\u0648\u0644\u0629 \u0641\u064a \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CWEs \u0628\u0639\u062f\u062f 30 \u0645\u062c\u0627\u0644 \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0627\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u062a\u062d\u062a\u0627\u062c \u0627\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0646\u062a\u0627\u0626\u062c \u0625\u0636\u0627\u0641\u064a\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0623\u0646\u0647\u0627 \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 30 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 CWEs \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0648\u0642\u062f \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0627\u0644\u0646\u0638\u0631 \u0641\u064a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062a\u0641\u0631\u0639\u0629 \u0645\u0646\u0647\u0627 \u0648\u0633\u064a\u0643\u0648\u0646 \u0641\u064a \u0646\u0637\u0627\u0642 \u0645\u062d\u062f\u0648\u062f \u0648\u0636\u064a\u0651\u0642. \u0648\u062a\u0628\u0639\u064b\u0627 \u0644\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u0639\u062a\u0627\u062f\u0629 \u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0628\u062f\u0648\u0646 \u0623\u064a \u0642\u064a\u0648\u062f \u0639\u0644\u0649 CWEs. \u0648\u0642\u0645\u0646\u0627 \u0628\u0637\u0644\u0628 \u0639\u062f\u062f \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0644\u0633\u0646\u0648\u0627\u062a \u0645\u062d\u062f\u062f\u0629 (\u0628\u062f\u0621\u064b\u0627 \u0645\u0646 \u0639\u0627\u0645 2017)\u060c \u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062a\u0642\u064a\u064a\u0645\u0647\u0627 \u0628\u0625\u0635\u0627\u0628\u062a\u0647\u0627 \u0628\u0623\u062d\u062f CWEs \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u062a\u0633\u0645\u062d \u0644\u0646\u0627 \u0647\u0630\u0647 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u062a\u0635\u0646\u064a\u0641\u0627\u062a CWEs. \u0645\u0639 \u0627\u0644\u0623\u062e\u0630 \u0628\u0639\u064a\u0646 \u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0623\u0646\u0646\u0627 \u062a\u062c\u0627\u0647\u0644\u0646\u0627 \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0644\u0623\u0633\u0628\u0627\u0628 \u0645\u0639\u064a\u0651\u0646\u0629\u060c \u0648\u0623\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062d\u0627\u0644\u0627\u062a \u064a\u0643\u0648\u0646 \u0636\u0631\u0648\u0631\u064a\u064b\u0627 \u0627\u0644\u0623\u062e\u0630 \u0628\u0647 \u0648\u0627\u0644\u0630\u064a \u0642\u062f \u064a\u0624\u062b\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0646\u062a\u0634\u0631 \u0648\u0645\u0634\u0647\u0648\u0631 \u0648\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0643\u062b\u0631\u0629. \u0648\u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0645\u0647\u0645\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0635\u0627\u0628 \u0628\u0640 4 \u0645\u0646 CWEs \u0623\u0648 4,000 \u0641\u0647\u0630\u0627 \u0644\u0627 \u064a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0622\u0644\u064a\u0629 \u0627\u062d\u062a\u0633\u0627\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u062f\u064a\u0646\u0627. \u0648\u0644\u0642\u062f \u0643\u0627\u0646 \u0644\u062f\u064a\u0646\u0627 \u062d\u0648\u0627\u0644\u064a 400 CWEs \u062a\u0642\u0631\u064a\u0628\u064b\u0627 \u0648\u0642\u0645\u0646\u0627 \u0628\u062d\u0635\u0631\u0647\u0627 \u0648\u062a\u0642\u0644\u064a\u0644\u0647\u0627 \u0625\u0644\u0649 30 CWEs \u0648\u0630\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0643\u0645\u0627 \u0646\u062e\u0637\u0637 \u0641\u064a \u0627\u0644\u0645\u0633\u062a\u0642\u0628\u0644 \u0641\u064a \u0625\u062c\u0631\u0627\u0621 \u062a\u062d\u0644\u064a\u0644\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u0648\u0627\u0644\u062a\u064a \u0628\u062f\u0648\u0631\u0647\u0627 \u0633\u062a\u0646\u0639\u0643\u0633 \u0639\u0644\u0649 \u0625\u0636\u0627\u0641\u0629 \u0628\u0639\u0636 \u0645\u0646 CWEs \u0648\u0642\u062f \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u063a\u064a\u064a\u0631 \u0643\u0630\u0644\u0643 \u0639\u0644\u0649 \u0647\u064a\u0643\u0644\u0629 \u0648\u062a\u0635\u0646\u064a\u0641 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631. \u0644\u0642\u062f \u0623\u0645\u0636\u064a\u0646\u0627 \u0639\u062f\u0629 \u0623\u0634\u0647\u0631 \u0641\u064a \u062a\u062c\u0645\u064a\u0639 \u0648\u062a\u0635\u0646\u064a\u0641 CWEs \u0648\u0643\u0627\u0646 \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0623\u0646 \u0646\u0633\u062a\u0645\u0631 \u0644\u0623\u0634\u0647\u0631 \u0625\u0636\u0627\u0641\u064a\u0629. \u0648\u0644\u0643\u0646 \u0643\u0627\u0646 \u0639\u0644\u064a\u0646\u0627 \u0627\u0644\u062a\u0648\u0642\u0641 \u0639\u0646\u062f \u0646\u0642\u0637\u0629 \u0645\u0627. \u0643\u0645\u0627 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0623\u0646\u0648\u0627\u0639 \u0641\u064a CWEs \u0645\u0627 \u064a\u0633\u0645\u0649 \u0628\u0640 \u201c\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\". \u0648\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \"\u0633\u0628\u0628 \u062c\u0630\u0631\u064a\" \u0643\u0641\u0634\u0644 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0623\u0648 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u0648\u0627\u0644\u0630\u064a \u064a\u062a\u0645 \u0625\u0642\u0631\u0627\u0646\u0647 \u0628\u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0645\u062b\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0645\u0643\u0634\u0648\u0641\u0629 \u0623\u0648 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629. \u0644\u0630\u0644\u0643 \u0642\u0631\u0651\u0631\u0646\u0627 \u0623\u0646 \u0646\u0631\u0643\u0632 \u0639\u0644\u0649 \"\u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\" \u0642\u062f\u0631 \u0627\u0644\u0625\u0645\u0643\u0627\u0646 \u0648\u0630\u0644\u0643 \u0644\u062a\u0648\u0641\u0651\u0631 \u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0648\u0627\u0644\u0625\u0631\u0634\u0627\u062f\u0627\u062a \u0648\u0637\u0631\u0642 \u062a\u0644\u0627\u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0623\u0633\u0628\u0627\u0628. \u0643\u0645\u0627 \u0623\u0646 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0627\u0644\u0623\u0639\u0631\u0627\u0636 \u0644\u064a\u0633 \u0645\u0641\u0647\u0648\u0645 \u062c\u062f\u064a\u062f\u060c \u0643\u0645\u0627 \u0623\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u062c\u0627\u0621\u062a \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0637 \u0645\u0627 \u0628\u064a\u0646 \"\u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u062c\u0630\u0631\u064a\u0629\" \u0648 \"\u0627\u0644\u0623\u0639\u0631\u0627\u0636\" \u0648\u0647\u0648 \u0627\u0644\u0623\u0633\u0644\u0648\u0628 \u0627\u0644\u0645\u062a\u0651\u0628\u0639 \u0641\u064a CWEs \u0643\u0630\u0644\u0643. \u0648\u0647\u062f\u0641\u0646\u0627 \u0623\u0646 \u0646\u0643\u0648\u0646 \u0639\u0644\u0649 \u062a\u0648\u0627\u0632\u0646 \u0628\u064a\u0646\u0647\u0645. \u0625\u0646 \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u062d\u0633\u0628 CWEs \u0647\u0648 19.6 \u062d\u064a\u062b \u062d\u0635\u0644\u062a A10 \u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u0639\u0644\u0649 1 CWEs \u0648 40 CWEs \u0644\u0635\u0627\u0644\u062d A04:2021- \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 . \u0625\u0646 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0630\u064a \u062c\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0641\u064a\u062f \u062c\u062f\u064b\u0627 \u0644\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u0645\u0646\u0627\u0641\u0639 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0639\u0644\u0649 CWEs \u0648\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0643\u0644\u063a\u0629 \u0639\u0645\u0644 \u0648\u0625\u0637\u0627\u0631.","title":"\u0643\u064a\u0641 \u064a\u062a\u0645 \u062a\u0646\u0638\u064a\u0645 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a"},{"location":"ar/A00_2021_Introduction/#_4","text":"\u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 2017\u060c \u062c\u0639\u0644\u0646\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0644\u062a\u062d\u062f\u064a\u062f \u0627\u062d\u062a\u0645\u0627\u0644\u064a\u062a\u0647\u0627. \u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0646\u0642\u0627\u0634 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0639\u0642\u0648\u062f \u0645\u0646 \u0627\u0644\u062e\u0628\u0631\u0627\u062a \u0641\u064a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u062d\u062a\u0645\u0627\u0644\u064a\u0629 \u062d\u062f\u0648\u062b\u0647\u0627 \u0623\u064a\u0636\u064b\u0627 \u0648\u0645\u0627 \u0647\u0648 \u0627\u0644\u0623\u062b\u0631 \u0627\u0644\u062a\u0642\u0646\u064a \u0627\u0644\u0630\u064a \u0633\u064a\u062d\u062f\u062b. \u0644\u0630\u0644\u0643 \u0623\u0631\u062f\u0646\u0627 \u0641\u064a \u0627\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u062c\u062f\u064a\u062f\u0629 \u0645\u0646 \u0639\u0627\u0645 2021 \u0645\u0646 \u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0625\u0646 \u0623\u0645\u0643\u0646 \u0630\u0644\u0643. \u0642\u0645\u0646\u0627 \u0628\u062a\u0646\u0632\u064a\u0644 \" OWASP Dependency Check\" \u0648\u0627\u0633\u062a\u062e\u0631\u062c\u0646\u0627 \u0646\u062a\u0627\u0626\u062c CVSS \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0648\u0627\u0644\u0622\u062b\u0627\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u062c\u0645\u0639\u0647\u0627 \u0633\u0627\u0628\u0642\u0627\u064b \u0645\u0646 CWEs \u0630\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0642\u0629. \u0648\u0644\u0627 \u064a\u062e\u0641\u0649 \u0639\u0644\u064a\u0643\u0645 \u0627\u0646 \u0647\u0630\u0627 \u0627\u0644\u062c\u0647\u062f \u0645\u0646 \u0627\u0644\u0628\u062d\u062b \u0627\u062e\u0630 \u0642\u062f\u0631 \u0644\u0627 \u0628\u0627\u0633 \u0628\u0647 \u0644\u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0644\u062f\u064a\u0647\u0627 \u062f\u0631\u062c\u0627\u062a \u0645\u0646 CVSSv2 \u0643\u0630\u0644\u0643. \u0648\u0644\u0643\u0646 \u0647\u0646\u0627 \u0628\u0639\u0636 \u0627\u0644\u062e\u0644\u0644 \u0645\u0627 \u0628\u064a\u0646 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u0630\u064a \u064a\u062c\u0628 \u0645\u0639\u0627\u0644\u062c\u062a\u0647. \u0648\u0633\u0646\u0631\u0649 \u0641\u064a \u0627\u0644\u0642\u0631\u064a\u0628 \u0627\u0646 \u062c\u0645\u064a\u0639 CVEs \u0633\u062a\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 CVSSv3. \u0648\u0646\u0648\u062f \u0627\u0646 \u0646\u0644\u0641\u062a \u0627\u0644\u0627\u0646\u062a\u0628\u0627\u0647 \u0627\u0646 \u0645\u0639\u0627\u062f\u0644\u0629 CVSSv2 \u0648CVSSv3 \u0648\u0627\u0644\u062f\u0631\u062c\u0627\u062a \u0645\u062a\u063a\u064a\u0631\u0629 \u0648\u0645\u062a\u062d\u062f\u062b\u0629. \u0641\u064a CVSSv2\u060c \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u064a\u0635\u0644 \u0627\u0644\u0623\u062b\u0631 \u0648 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u0649 10.0\u060c \u0648\u0644\u0643\u0646 \u0628\u0639\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0642\u062f \u062a\u0646\u062e\u0641\u0636 \u0627\u0644\u0649 60% \u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 40% \u0644\u0644\u062a\u0623\u062b\u064a\u0631. \u0648\u0641\u064a CVSSv3 \u0643\u0627\u0646 \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0639\u0644\u0649 \u0647\u0648 6.0 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 4.0 \u0644\u0644\u0623\u062b\u0631. \u0645\u0639 \u0627\u0644\u0627\u062e\u0630 \u0628\u0627\u0644\u0627\u0639\u062a\u0628\u0627\u0631 \u0645\u062f\u0649 \u062b\u0642\u0644 \u0623\u062d\u062f\u0647\u0645\u0627. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 CVSSv3 \u0646\u0631\u0649 \u0627\u0646 \u0627\u0644\u0623\u062b\u0631 \u0627\u0631\u062a\u0641\u0639 \u062d\u0648\u0627\u0644\u064a \u0646\u0642\u0637\u0629 \u0648\u0646\u0635\u0641\u060c \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0646\u062e\u0641\u0636 \u0628\u0645\u0642\u062f\u0627\u0631 \u0627\u0644\u0646\u0635\u0641 \u0646\u0642\u0637\u0629 \u062a\u0642\u0631\u064a\u0628\u0627\u064b. \u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 125 \u0623\u0644\u0641 \u0633\u062c\u0644 \u0645\u0646 CVE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0641\u064a \u0645\u0646\u0635\u0629 NVD \u0648\u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0641\u064a \" OWASP Dependency Check\". \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 241 \u062a\u0635\u0646\u064a\u0641 \u0641\u0631\u0639\u064a \u0641\u0631\u064a\u062f \u0641\u064a CWEs \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a \u0623\u0643\u062b\u0631 \u0645\u0646 CVE. \u0648\u0647\u0646\u0627\u0643 \u0623\u0643\u062b\u0631 \u0645\u0646 62 \u0623\u0644\u0641 \u0645\u0646 CWE \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0641\u064a CVSSv3. \u0648\u0627\u0644\u062a\u064a \u062a\u0645\u062b\u0644 \u0646\u0635\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u062d\u0635\u0631\u0647\u0627. \u0641\u064a \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0642\u0645\u0646\u0627 \u0628\u062d\u0633\u0627\u0628 \u0645\u062a\u0648\u0633\u0637 \u0646\u0642\u0627\u0637 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0623\u062b\u0631 \u0628\u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u062a\u0627\u0644\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062a\u062c\u0645\u064a\u0639 \u062f\u0631\u062c\u0627\u062a CVEs \u0645\u0639 CVSS \u0628\u0648\u0627\u0633\u0637\u0629 CWE \u0648\u0642\u0645\u0646\u0627 \u0628\u062a\u0642\u064a\u064a\u0645 \u0643\u0644 \u0645\u0646 \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a CVSSv3 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0649 \u062c\u0645\u064a\u0639 \u0645\u0627 \u064a\u0648\u062c\u062f \u0641\u064a CVSSv2 \u0644\u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u0625\u062c\u0645\u0627\u0644\u064a. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0631\u0628\u0637 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0628\u0640 CWEs \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0630\u0644\u0643 \u0644\u0627\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0644\u062a\u0642\u064a\u064a\u0645 \u062f\u0631\u062c\u0627\u062a \u0627\u0644\u0623\u062b\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u0627\u0633\u062a\u0641\u0627\u062f\u0629 \u0645\u0646\u0647\u0627 \u0643\u0630\u0644\u0643 \u0641\u064a \u0627\u062d\u062a\u0633\u0627\u0628 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0628\u0646\u0627\u0621 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629.","title":"\u0643\u064a\u0641 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u062a\u0627\u0631\u0629"},{"location":"ar/A00_2021_Introduction/#_5","text":"\u062a\u0642\u062a\u0635\u0631 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0628\u0634\u0643\u0644 \u0623\u0633\u0627\u0633\u064a \u0639\u0644\u0649 \u0645\u0627 \u064a\u0645\u0643\u0646 \u0627\u062e\u062a\u0628\u0627\u0631\u0647 \u0628\u0634\u0643\u0644 \u0622\u0644\u064a. \u0648\u062d\u064a\u0646\u0645\u0627 \u062a\u062a\u062d\u062f\u062b \u0625\u0644\u0649 \u0623\u062d\u062f \u0627\u0644\u0645\u062e\u062a\u0635\u0651\u064a\u0646 \u0627\u0644\u0645\u062d\u062a\u0631\u0641\u064a\u0646 \u0641\u064a \u0645\u062c\u0627\u0644 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0633\u064a\u062e\u0628\u0631\u0648\u0646\u0643 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a \u0648\u0627\u0644\u0627\u062d\u0635\u0627\u0626\u064a\u0627\u062a \u0644\u0627 \u064a\u0648\u062c\u062f \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0639\u062f. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0639\u0646\u062f \u0625\u0639\u062f\u0627\u062f \u0645\u0646\u0647\u062c\u064a\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u060c \u062a\u0633\u062a\u063a\u0631\u0642 \u0641\u062a\u0631\u0629 \u0645\u0646 \u0627\u0644\u0632\u0645\u0646 \u0648\u0645\u0646 \u062b\u0645 \u0623\u0646\u062a \u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0648\u0642\u062a \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0623\u062a\u0645\u062a\u0629 \u062a\u0644\u0643 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0648\u062a\u0634\u063a\u064a\u0644\u0647\u0627 \u0639\u0644\u0649 \u0645\u062c\u0645\u0648\u0639\u0629 \u0643\u0628\u064a\u0631\u0629 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u0630\u0644\u0643 \u0642\u0645\u0646\u0627 \u0628\u0627\u062e\u062a\u064a\u0627\u0631 \u062b\u0645\u0627\u0646\u064a\u0629 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0623\u0635\u0644 \u0639\u0634\u0631\u0629 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0633\u0628\u0628 \u0639\u062f\u0645 \u0627\u0643\u062a\u0645\u0627\u0644 \u0648\u0646\u0636\u062c \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0648\u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0644\u062a\u0635\u0646\u064a\u0641\u064a\u0646 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u0642\u0645\u0646\u0627 \u0628\u0639\u0645\u0644 \u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0645\u0645\u0627 \u064a\u0633\u0645\u062d \u0644\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0627\u0644\u062a\u0635\u0648\u064a\u062a \u0644\u0645\u0627 \u064a\u0631\u0648\u0646\u0647 \u0645\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062d\u0642 \u0623\u0646 \u062a\u0636\u0627\u0641 \u0625\u0644\u0649 \u0642\u0627\u0626\u0645\u0629 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u0644\u0627 \u064a\u0643\u0648\u0646 \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u062a\u0646\u0627\u0633\u0642\u0629 \u0623\u0648 \u063a\u064a\u0631 \u0645\u0646\u0627\u0633\u0628\u0629.","title":"\u0644\u0645\u0627\u0630\u0627 \u0644\u0627 \u062a\u0643\u0648\u0646 \u0645\u062c\u0631\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0625\u062d\u0635\u0627\u0626\u064a\u0629 \u0628\u062d\u062a\u0629\u061f"},{"location":"ar/A00_2021_Introduction/#_6","text":"\u0647\u0646\u0627\u0643 \u062b\u0644\u0627\u062b\u0629 \u0645\u0635\u0627\u062f\u0631 \u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0646\u062d\u062f\u062f\u0647\u0627 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \u0627\u0644\u0627\u0646\u0633\u0627\u0646 \u064a\u0633\u0627\u0639\u062f \u0627\u0644\u0623\u062f\u0648\u0627\u062a (HaT) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0633\u0627\u0639\u062f \u0627\u0644\u0625\u0646\u0633\u0627\u0646 (TaH) \u060c \u0627\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0645\u0646 \u063a\u064a\u0631 \u0623\u064a \u062a\u0639\u062f\u064a\u0644\u0627\u062a. \u062a\u0642\u0648\u0645 HaT \u0648\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0628\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0639\u0627\u0644\u064a. \u062d\u064a\u062b \u0627\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u062a\u0628\u062d\u062b \u0639\u0646 \u0646\u0642\u0627\u0637 \u0636\u0639\u0641 \u0645\u062d\u062f\u062f\u0629 \u0645\u0639 \u062a\u062c\u0631\u0628\u0629 \u062c\u0645\u064a\u0639 \u0627\u0644\u0627\u062d\u062a\u0645\u0627\u0644\u0627\u062a \u0627\u0644\u0645\u062a\u0648\u0642\u0639\u0629 \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0629. \u0648\u0639\u0646\u062f \u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u0649 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0639\u0627\u062f\u0629 \u0627\u0645\u0627 \u0627\u0646 \u062a\u0643\u0648\u0646 \u0645\u0646\u062e\u0641\u0636\u0629 \u0627\u0644\u062e\u0637\u0648\u0631\u0629 \u0627\u0648 \u0628\u0633\u064a\u0637\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0623\u062a\u064a \u0628\u0633\u0628\u0628 \u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0648 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u0635\u0641\u064a\u0629. \u0648\u0639\u0646\u062f\u0645\u0627 \u062a\u0643\u0648\u0646 \u0627\u0644\u062b\u063a\u0631\u0629 \u0628\u0633\u0628\u0628 \u062e\u0637\u0627\u0621 \u0641\u064a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u062a\u0631\u062a\u0641\u0639 \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u062a\u0643\u0631\u0627\u0631 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0644\u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u0644\u062a\u064a \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0646 \u062a\u0624\u062b\u0631 \u0639\u0644\u0649 \u0645\u062e\u0631\u062c\u0627\u062a \u0627\u0644\u062a\u0642\u0631\u064a\u0631 \u0627\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u0645\u0646 \u0646\u0627\u062d\u064a\u0629 \u0623\u062e\u0631\u0649\u060c \u0646\u062c\u062f \u0623\u0646 TaH \u0623\u062e\u0631\u062c\u062a \u0644\u0646\u0627 \u0646\u0637\u0627\u0642 \u0648\u0627\u0633\u0639 \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0644\u0643\u0646 \u0645\u0639 \u062a\u0643\u0631\u0627\u0631 \u0623\u0642\u0644 \u0628\u0643\u062b\u064a\u0631 \u0628\u0633\u0628\u0628 \u0636\u064a\u0642 \u0627\u0644\u0648\u0642\u062a. \u0648\u0630\u0644\u0643 \u0628\u0633\u0628\u0628 \u0642\u064a\u0627\u0645 \u0627\u0644\u0645\u062e\u062a\u0635\u064a\u0646 \u0628\u0641\u062d\u0635 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u064a\u0631\u0648\u0646 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0645\u062b\u0644 XSS \u0633\u064a\u0642\u0648\u0645\u0648\u0646 \u0628\u0625\u064a\u062c\u0627\u062f \u0663 \u0623\u0648 \u0664 \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u064a\u062a\u0648\u0642\u0641\u0648\u0646 \u0639\u0646 \u0627\u0644\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0625\u064a\u062c\u0627\u062f \u0633\u0628\u0628 \u0627\u0644\u062e\u0637\u0623 \u0648\u0643\u062a\u0627\u0628\u0629 \u062a\u0642\u0631\u064a\u0631 \u0639\u0646\u0647\u0627 \u0648\u0627\u0644\u062a\u0648\u0635\u064a\u0627\u062a \u0627\u0644\u0645\u0645\u0643\u0646\u0629 \u0644\u0643\u064a \u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d\u0647\u0627 \u0648\u0627\u0644\u062a\u064a \u0633\u062a\u0642\u0648\u0645 \u0628\u0625\u0635\u0644\u0627\u062d \u062c\u0645\u064a\u0639 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0648\u0644\u064a\u0633 \u0647\u0646\u0627\u0643 \u062d\u0627\u062c\u0629 \u0623\u0648 \u0648\u0642\u062a \u0644\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u062a\u0643\u0631\u0631. \u0644\u0646\u0641\u062a\u0631\u0636 \u0623\u0646\u0646\u0627 \u0623\u062e\u0630\u0646\u0627 \u0645\u062c\u0645\u0648\u0639\u062a\u064a\u0646 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0645\u064a\u0651\u0632\u0629 \u0648\u0627\u0644\u063a\u064a\u0631 \u0645\u062a\u0634\u0627\u0628\u0647\u0629 \u0648\u062d\u0627\u0648\u0644\u0646\u0627 \u062f\u0645\u062c\u0647\u0627 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0643\u0631\u0627\u0631. \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629 \u0633\u0646\u062c\u062f \u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0645\u0644\u0627\u062d\u0638\u0629 \u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a TaH. \u0648\u0647\u0630\u0627 \u064a\u0638\u0647\u0631 \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0628\u0634\u0643\u0644 \u0625\u064a\u062c\u0627\u0628\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 \u062b\u063a\u0631\u0629 XSS \u0648\u0627\u0644\u0630\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u064a\u0642\u0648\u0645 \u0628\u0631\u0641\u0639 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u0645\u0646\u062e\u0641\u0636 \u0625\u0644\u0649 \u0645\u062a\u0648\u0633\u0637 \u0628\u0633\u0628\u0628 \u0627\u0644\u0639\u062f\u062f \u0627\u0644\u0647\u0627\u0626\u0644 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c. (\u062b\u063a\u0631\u0627\u062a \u0645\u062b\u0644 XSS \u0645\u0646 \u0627\u0644\u0633\u0647\u0644 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0648\u0627\u0644\u062e\u0631\u0648\u062c \u0628\u0646\u062a\u0627\u0626\u062c \u0645\u0639\u0642\u0648\u0644\u0629) \u0641\u064a \u0639\u0627\u0645 2017 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0625\u0644\u0642\u0627\u0621 \u0646\u0638\u0631\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062f\u0645\u062c\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u0646\u0627\u0633\u0628 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u0631\u062c\u0629 \u0645\u0646 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648HaT \u0648 TaH. \u062d\u064a\u062b \u064a\u0643\u0648\u0646 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u064a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0646\u0633\u0628\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u0646\u0648\u0639 \u0645\u0646 \u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u062b\u063a\u0631\u0627\u062a. \u0648\u062d\u0642\u064a\u0642\u0629 \u0646\u062d\u0646 \u0641\u064a \u0627\u0644\u0645\u0646\u0638\u0645\u0629 \u0644\u0627 \u0646\u0647\u062a\u0645 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0645\u0639\u062f\u0644 \u062d\u062f\u0648\u062b\u0647\u0627 \u0645\u062a\u0643\u0631\u0631. \u0648\u0647\u062f\u0641\u0646\u0627 \u0647\u0648 \u0645\u0639\u0631\u0641\u0629 \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u062b\u063a\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644. \u0648\u0647\u0630\u0627 \u064a\u0639\u0637\u064a\u0646\u0627 \u062a\u0635\u0648\u0651\u0631 \u0648\u0627\u0636\u062d \u0645\u0646 \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u0639\u062a\u0628\u0631 \u0644\u062f\u064a\u0646\u0627 \u0623\u0641\u0636\u0644 \u0645\u0646 \u0625\u063a\u0631\u0627\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u062a\u0643\u0631\u0627\u0631 \u0644\u064a\u0633 \u0644\u0647 \u0641\u0627\u0626\u062f\u0629.","title":"\u0644\u0645\u0627\u0630\u0627 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0628\u062f\u0644\u0627 \u0645\u0646 \u0627\u0644\u062a\u0643\u0631\u0627\u0631\u061f"},{"location":"ar/A00_2021_Introduction/#_7","text":"\u062a\u0645 \u0625\u0636\u0641\u0627\u0621 \u0627\u0644\u0637\u0627\u0628\u0639 \u0627\u0644\u0631\u0633\u0645\u064a \u0639\u0644\u0649 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0641\u064a \u0642\u0645\u0629 Open Security Summit \u0641\u064a \u0639\u0627\u0645 2017. \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0623\u0645\u0636\u0649 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0641\u064a \u0645\u0646\u0638\u0645\u0629 \u0622\u0648\u0627\u0633\u0628 \u064a\u0648\u0645\u064a\u0646 \u0641\u064a \u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u0649 \u062c\u0639\u0644 \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 \u0633\u064a\u0627\u0633\u0629 \u0648\u0627\u0636\u062d\u0629 \u0648\u0634\u0641\u0627\u0641\u0629. \u062a\u0639\u062f \u0646\u0633\u062e\u0629 2021 \u0647\u064a \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629 \u0627\u0644\u062a\u064a \u0646\u0633\u062a\u062e\u062f\u0645 \u0641\u064a\u0647\u0627 \u0647\u0630\u0647 \u0627\u0644\u0645\u0646\u0647\u062c\u064a\u0629. \u0642\u0645\u0646\u0627 \u0628\u062f\u0639\u0648\u0629 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0642\u0646\u0648\u0627\u062a \u0627\u0644\u062a\u0648\u0627\u0635\u0644 \u0627\u0644\u0627\u062c\u062a\u0645\u0627\u0639\u064a \u0627\u0644\u0645\u062a\u0627\u062d\u0629 \u0644\u0646\u0627\u060c \u0644\u0643\u0644\u0651\u064b\u0627 \u0645\u0646 \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0648 OWASP. \u0648\u0641\u064a \u0635\u0641\u062d\u0629 \u0645\u0634\u0631\u0648\u0639 OWASP , \u0646\u0642\u0648\u0645 \u0628\u0625\u062f\u0631\u0627\u062c \u0639\u0646\u0627\u0635\u0631 \u0648\u0647\u064a\u0643\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0646\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0648\u0643\u064a\u0641\u064a\u0629 \u0625\u0631\u0633\u0627\u0644\u0647\u0627. \u0648\u0641\u064a \u0645\u0634\u0631\u0648\u0639 GitHub , \u0644\u062f\u064a\u0646\u0627 \u0623\u0645\u062b\u0644\u0629 \u0644\u0645\u0644\u0641\u0627\u062a \u062a\u0639\u0645\u0644 \u0643\u0642\u0648\u0627\u0644\u0628. \u0646\u0639\u0645\u0644 \u0645\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u0623\u062e\u0631\u0649 \u062d\u0633\u0628 \u0627\u0644\u062d\u0627\u062c\u0629 \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0647\u064a\u0643\u0644\u0648\u0631\u0633\u0645\u0647 \u0648\u0631\u0628\u0637\u0647 \u0628\u0640 CWEs. \u0646\u062d\u0635\u0644 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0645\u0628\u0627\u062f\u0644\u0629\u060c \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u0646\u0635\u0627\u062a \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062b\u063a\u0631\u0627\u062a\u060c \u0648\u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0647\u0645 \u0628\u0628\u064a\u0627\u0646\u0627\u062a\u0647\u0627 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629. \u0648\u0628\u0645\u062c\u0631\u062f \u062d\u0635\u0648\u0644\u0646\u0627 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\u060c \u0646\u0642\u0648\u0645 \u0628\u062a\u062d\u0645\u064a\u0644\u0647\u0627 \u0645\u0639\u064b\u0627 \u0648\u0646\u062c\u0631\u064a \u062a\u062d\u0644\u064a\u0644\u064b\u0627 \u0648\u0641\u0647\u0645\u0627\u064b \u0639\u0646 \u0623\u0633\u0627\u0633\u064a\u064b\u0627\u062a \u0627\u0644\u0631\u0628\u0637 \u0628\u0640 CWEs \u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u0627\u0637\u0631. \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0628\u0639\u0636 CWEs\u060c \u0628\u0633\u0628\u0628 \u0627\u0644\u062a\u0634\u0627\u0628\u0647 \u0628\u064a\u0646\u0647\u0645 (\u0645\u062b\u0644 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0641\u064a \u0627\u0644\u062a\u0634\u0641\u064a\u0631). \u062d\u064a\u062b \u064a\u062a\u0645 \u062a\u0648\u062b\u064a\u0642 \u0648\u0646\u0634\u0631 \u0623\u064a \u0642\u0631\u0627\u0631\u0627\u062a \u062a\u062a\u0639\u0644\u0642 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0623\u0648\u0644\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0645\u0629 \u0644\u062a\u0643\u0648\u0646 \u0645\u0641\u062a\u0648\u062d\u0629 \u0648\u0648\u0627\u0636\u062d\u0629 \u0645\u0639 \u0643\u064a\u0641\u064a\u0629 \u0645\u0648\u0627\u0621\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u064a\u062a\u0645 \u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u062b\u0645\u0627\u0646\u064a\u0629 \u0630\u0627\u062a \u0623\u0639\u0644\u0649 \u0645\u0639\u062f\u0644\u0627\u062a \u062d\u062f\u0648\u062b \u0644\u0625\u062f\u0631\u0627\u062c\u0647\u0627 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0648\u0646\u0646\u0638\u0631 \u0623\u064a\u0636\u064b\u0627 \u0641\u064a \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0641\u064a \u0645\u062c\u0627\u0644 \u0627\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0623\u064a \u0645\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0633\u064a\u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u0623\u0639\u0644\u0649 \u062a\u0642\u064a\u064a\u0645\u064a\u0646 \u063a\u064a\u0631 \u0645\u0648\u062c\u0648\u062f\u064a\u0646 \u0628\u0627\u0644\u0641\u0639\u0644 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u062d\u0644\u0644\u0629 \u0633\u0627\u0628\u0642\u0627\u064b \u0648\u0627\u0636\u0641\u062a\u0647\u0627 \u0627\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631. \u0628\u0645\u062c\u0631\u062f \u0627\u062e\u062a\u064a\u0627\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0639\u0634\u0631\u0629 \u060c \u064a\u062a\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0627\u062a\u0641\u0627\u0642 \u0639\u0644\u064a\u0647\u0627 \u0648\u0647\u064a (\u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648\u0627\u0644\u062a\u0623\u062b\u064a\u0631)\u061b \u0644\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0641\u064a \u062a\u0631\u062a\u064a\u0628 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631.","title":"\u0645\u0627 \u0647\u064a \u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062a\u062d\u0644\u064a\u0644\u0647\u0627\u061f"},{"location":"ar/A00_2021_Introduction/#_8","text":"\u0647\u0646\u0627\u0643 \u0639\u0648\u0627\u0645\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u062f\u0631\u062c\u0629 \u0644\u0643\u0644 \u062a\u0635\u0646\u064a\u0641 \u0645\u0646 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631\u060c \u0648\u0625\u0644\u064a\u0643 \u0645\u0627 \u062a\u0639\u0646\u064a\u0647: \u0631\u0628\u0637 \u0628\u0640 CWEs : \u0639\u062f\u062f CWEs \u0627\u0644\u0630\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0641\u0631\u064a\u0642. \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0648\u0647\u0648 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0631\u0636\u0629 \u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0645\u0639\u0631\u0641\u0629 \u0645\u062f\u0649 \u0627\u0631\u062a\u0628\u0627\u0637\u0647\u0627 \u0628\u0645\u0639\u064a\u0627\u0631 CWE \u062e\u0644\u0627\u0644 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a. \u0623\u062c\u0631\u062a\u0647\u0627 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0641\u064a \u0633\u0646\u0629 \u0645\u062d\u062f\u062f\u0629. (\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a) \u0648\u0627\u0644\u062a\u063a\u0637\u064a\u0629 :\u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0644\u0640 CWE \u0645\u064f\u0639\u064a\u0651\u0646. \u062e\u0637\u0648\u0631\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 : \u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0648 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0644\u0647 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0645\u062a\u0648\u0642\u0639 : \u062a\u0623\u062b\u064a\u0631 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u0641\u0631\u0639\u064a\u0629 \u0645\u0646 CVSSv2 \u0648 CVSSv3 \u0648\u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 CVEs \u0648\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0640 CWEs\u060c \u060c\u0645\u0648\u0627\u0626\u0645\u062a\u0647\u0627 \u060c \u0648\u0648\u0636\u0639\u0647\u0627 \u0639\u0644\u0649 \u0645\u0642\u064a\u0627\u0633 10pt. \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631/\u0627\u0644\u062d\u0648\u0627\u062f\u062b : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627. \u0625\u062c\u0645\u0627\u0644\u064a CVEs : \u0625\u062c\u0645\u0627\u0644\u064a \u0639\u062f\u062f CVEs \u0641\u064a NVD DB \u0627\u0644\u062a\u064a \u062a\u0645 \u0631\u0628\u0637\u0647\u0627 \u0628\u0640 CWEs \u0648\u062a\u0645 \u0648\u0636\u0639 \u062a\u0635\u0646\u064a\u0641 \u0645\u062d\u062f\u062f \u0644\u0647\u0627.","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0645\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a"},{"location":"ar/A00_2021_Introduction/#2021-2017","text":"\u0647\u0646\u0627\u0643 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u062d\u062f\u064a\u062b \u0639\u0646 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0628\u064a\u0646 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0639\u0634\u0631\u0629 \u0627\u0644\u0623\u0648\u0644\u0649. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0639\u0631\u064a\u0641 \u0643\u0644 (\u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0645\u062f\u0631\u062c\u0629 \u0641\u064a CWEs)\u060c \u0648\u0644\u0643\u0646 \u0627\u0644\u0630\u064a \u064a\u0638\u0647\u0631 \u0644\u0646\u0627 \u0623\u0646\u0647 \u0644\u0627 \u064a\u0648\u062c\u062f \u0623\u064a \u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0647\u0627 \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u0645\u0646 \u0627\u0644\u0646\u0627\u062d\u064a\u0629 \u0627\u0644\u0646\u0638\u0631\u064a\u0629\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u062a\u062f\u0627\u062e\u0644 \u0623\u0648 \u062a\u0623\u062b\u0631 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u062a\u0633\u0645\u064a\u0629. \u0648\u0646\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062e\u0637\u0637\u0627\u062a Venn \u0644\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0643\u0645\u0627 \u0648\u0631\u062f \u0641\u064a \u0627\u0644\u0645\u062b\u0627\u0644 \u0623\u062f\u0646\u0627\u0647. \u064a\u0645\u062b\u0644 \u0645\u062e\u0637\u0637 Venn \u0623\u0639\u0644\u0627\u0647 \u0627\u0644\u062a\u0631\u0627\u0628\u0637 \u0628\u064a\u0646 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2017. \u0648\u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0630\u0644\u0643\u060c \u0623\u0635\u0628\u062d\u062a \u0628\u0636\u0639 \u0646\u0642\u0627\u0637 \u0623\u0633\u0627\u0633\u064a\u0629 \u0648\u0627\u0636\u062d\u0629: \u0643\u0627\u0646 \u064a\u064f\u0631\u0649 \u0628\u0623\u0646 \u0647\u062c\u0648\u0645 - \u062b\u063a\u0631\u0627\u062a XSS \u062a\u0646\u062a\u0645\u064a \u0641\u064a \u062d\u0642\u064a\u0642\u0629 \u0627\u0644\u0623\u0645\u0631 \u0625\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646(Injection) \u0644\u0623\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0623\u0633\u0627\u0633 \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u062d\u0642\u0646 \u0627\u0644\u0645\u062d\u062a\u0648\u0649. \u0628\u0627\u0644\u0646\u0638\u0631 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0627\u0645 2021 \u060c \u0623\u0635\u0628\u062d \u0645\u0646 \u0627\u0644\u0648\u0627\u0636\u062d \u0623\u0646 ( XSS )\u0628\u062d\u0627\u062c\u0629 \u0625\u0644\u0649 \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0625\u0644\u0649 \u0627\u0644\u062d\u0642\u0646(Injection). \u0627\u0644\u062a\u062f\u0627\u062e\u0644 \u0641\u064a\u0645\u0627 \u0628\u064a\u0646\u0647\u0645 \u063a\u0627\u0644\u0628\u064b\u0627 \u064a\u0643\u0648\u0646 \u0641\u064a \u0627\u062a\u062c\u0627\u0647 \u0648\u0627\u062d\u062f. \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u0646\u0635\u0646\u0651\u0641 \u0627\u0644\u062b\u063a\u0631\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \"\u0627\u0644\u0639\u064e\u0631\u064e\u0636\"\u060c \u0648\u0644\u064a\u0633 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a (\u0627\u0644\u0630\u064a \u064a\u062d\u062a\u0645\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0639\u0645\u064a\u0642\u064b\u0627). \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0642\u062f \u062a\u0643\u0648\u0646 \" \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629 \" \u0646\u062a\u064a\u062c\u0629 \"\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u062e\u0627\u0637\u0626\u0629 \u0627\u0644\u0623\u0645\u0627\u0646\u060c \u0648\u0641\u064a \u0627\u0644\u063a\u0627\u0644\u0628 \u0644\u0646 \u062a\u0631\u0627\u0647\u0627 \u0628\u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0645\u0639\u0627\u0643\u0633. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u064a\u062a\u0645 \u0631\u0633\u0645 \u0627\u0644\u0623\u0633\u0647\u0645 \u0641\u064a \u0645\u0646\u0627\u0637\u0642 \u0627\u0644\u062a\u0623\u062b\u0631 \u0644\u0644\u0625\u0634\u0627\u0631\u0629 \u0625\u0644\u0649 \u0627\u0644\u0625\u062a\u062c\u0627\u0647 \u0627\u0644\u0630\u064a \u064a\u062d\u062f\u062b \u0641\u064a\u0647. \u0623\u062d\u064a\u0627\u0646\u064b\u0627 \u064a\u062a\u0645 \u0631\u0633\u0645 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0637\u0637\u0627\u062a \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0643\u0645\u0627 \u0641\u064a A06: 2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b . \u0641\u064a \u062d\u064a\u0646 \u0623\u0646 \u0628\u0639\u0636 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0642\u062f \u064a\u0643\u0648\u0646 \u0627\u0644\u0633\u0628\u0628 \u0627\u0644\u062c\u0630\u0631\u064a \u0647\u064a \u062b\u063a\u0631\u0627\u062a \u0645\u0646 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u0641\u0625\u0646\u0647 \u064a\u062a\u0645 \u0625\u062f\u0627\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u062e\u062a\u0644\u0641 \u0648\u0645\u0633\u0624\u0648\u0644\u064a\u0627\u062a \u0645\u062e\u062a\u0644\u0641\u0629. \u0648\u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0623\u062e\u0631\u0649 \u0627\u0644\u0645\u062a\u0628\u0642\u064a\u0629 \u062a\u0645\u062b\u0651\u0644 \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u0623\u0648\u0644.","title":"\u0639\u0644\u0627\u0642\u0627\u062a \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0644\u0639\u0627\u0645 2021 \u0645\u0639 \u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0639\u0627\u0645 2017"},{"location":"ar/A00_2021_Introduction/#_9","text":"\u0633\u0627\u0647\u0645\u062a \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u062a\u0627\u0644\u064a\u0629 (\u062c\u0646\u0628\u064b\u0627 \u0625\u0644\u0649 \u062c\u0646\u0628 \u0645\u0639 \u0628\u0639\u0636 \u0627\u0644\u0645\u0633\u0627\u0647\u0645\u064a\u0646-\u0627\u0644\u0645\u062a\u0628\u0631\u0639\u064a\u0646 \u0627\u0644\u0645\u062c\u0647\u0648\u0644\u064a\u0646) \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 500,000 \u062a\u0637\u0628\u064a\u0642 \u0648\u062c\u0639\u0644\u0647\u0627 \u0647\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0643\u0628\u0631 \u0648\u0627\u0644\u0623\u0643\u062b\u0631 \u0648\u0627\u0644\u0623\u0634\u0645\u0644 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0639\u0644\u064a\u0647\u0627 \u0648\u062c\u0639\u0644\u0647\u0627 \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a. \u0648\u062a\u0623\u0643\u062f \u0623\u0646\u0647 \u0645\u0646 \u063a\u064a\u0631 \u0627\u0633\u0647\u0627\u0645\u0627\u062a\u0643 \u0644\u0646 \u064a\u0643\u0648\u0646 \u0647\u0630\u0627 \u0645\u0645\u0643\u0646. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT)","title":"\u0634\u0643\u0631\u0627\u064b \u0644\u0643\u0644 \u0645\u0646 \u0633\u0627\u0647\u0645 \u0645\u0639\u0646\u0627 \u0641\u064a \u062c\u0645\u0639 \u0647\u0630\u0647 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a"},{"location":"ar/A01_2021-Broken_Access_Control/","text":"A01:2021 \u2013 \u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u0635\u0639\u062f \u0647\u0630\u0627 \u0627\u0644\u0645\u0639\u064a\u0627\u0631 \u0645\u0646 \u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u062e\u0627\u0645\u0633 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0625\u0644\u0649 \u0627\u0644\u0623\u0648\u0644 \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0628\u0639\u062f \u0627\u062e\u062a\u0628\u0627\u0631 \u062b\u063a\u0631\u0627\u062a \"\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644\" \u0639\u0644\u0649 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0642\u062f \u0644\u0648\u062d\u0638 \u0623\u0646\u0647\u0627 \u062a\u0639\u0627\u0646\u064a \u0645\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0634\u0627\u0626\u0639\u0629 \"CWEs\u201d \u062a\u0634\u0645\u0644 : CWE-200 \u0648 CWE-201 \u0648 CWE-352 \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u062a\u0641\u0631\u0636 \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0633\u064a\u0627\u0633\u0627\u062a \u0648\u0642\u0648\u0627\u0646\u064a\u0646 \u0645\u062b\u0644 \u0627\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0644\u0627 \u064a\u0645\u0643\u0646\u0647 \u0627\u0644\u062a\u0635\u0631\u0641 \u062e\u0627\u0631\u062c \u0646\u0637\u0627\u0642 \u0627\u0644\u0623\u0630\u0648\u0646\u0627\u062a \u0627\u0644\u0645\u0645\u0646\u0648\u062d\u0629 \u0644\u0647. \u0639\u0627\u062f\u0629 \u0645\u0627 \u062a\u0624\u062f\u064a \u0647\u0630\u0647 \u0627\u0644\u0627\u062e\u0637\u0627\u0621 \u0627\u0644\u0649 \u0643\u0634\u0641 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u063a\u064a\u0631 \u0645\u0635\u0631\u062d \u0628\u0647\u0627 \u0627\u0648 \u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u064a\u0647\u0627\u060c \u0627\u0648 \u062a\u062e\u0631\u064a\u0628 \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u062d\u062a\u0649 \u062a\u0646\u0641\u064a\u0630 \u0625\u062c\u0631\u0627\u0621\u0627\u062a \u062e\u0627\u0631\u062c \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u0645\u0633\u0645\u0648\u062d\u0629. \u062a\u062a\u0636\u0645\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0634\u0627\u0626\u0639\u0629 \u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644: \u062a\u062c\u0627\u0648\u0632 \u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0639\u062f\u064a\u0644 \u0645\u062d\u062f\u062f \u0641\u064aURL\u060c \u0627\u0648 \u062a\u0639\u062f\u064a\u0644 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a \u201cobjects\u201d \u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u062f\u0627\u062e\u0644 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0623\u0648 \u062a\u0639\u062f\u064a\u0644 \u0635\u0641\u062d\u0629 \u0627\u0644\u0640 HTML\u060c \u0623\u0648 \u0628\u0628\u0633\u0627\u0637\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0627\u0629 \u0647\u062c\u0648\u0645 \u0645\u062e\u0635\u0635\u0629 \u0644\u0645\u0647\u0627\u062c\u0645\u0629 API \u0627\u0644\u0633\u0645\u0627\u062d \u0628\u0627\u0644\u062a\u0628\u062f\u064a\u0644 \u0628\u064a\u0646 \u0645\u0641\u062a\u0627\u062d \u0631\u0626\u064a\u0633\u064a \u201cprimary key\u201d \u0648\u0633\u062c\u0644\u0627\u062a \u0645\u0633\u062a\u062e\u062f\u0645 \u0622\u062e\u0631 \u201cusers record\u201d\u060c \u0645\u0645\u0627 \u0642\u062f \u064a\u0633\u0645\u062d \u0628\u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0623\u0648 \u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u0649 \u062d\u0633\u0627\u0628\u0627\u062a \u0623\u062e\u0631\u0649 \u062a\u0635\u0639\u064a\u062f \u0627\u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a: \u0627\u0644\u062a\u0635\u0631\u0641 \u0643\u0645\u0633\u062a\u062e\u062f\u0645 \u0645\u0646 \u062f\u0648\u0646 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0648 \u0627\u0644\u062a\u0635\u0631\u0641 \u0643\u0645\u062f\u064a\u0631 \u0639\u0646\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0628\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0643\u0645\u0633\u062a\u062e\u062f\u0645. \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0629 \"meta data\u201d \u0643\u0625\u0639\u0627\u062f\u0629 \u0625\u062f\u062e\u0627\u0644 \u0623\u0648 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0628\u0631\u0645\u0632 \u0627\u0644\u062a\u0648\u062b\u064a\u0642 \"JSON Web Token (JWT)\u060c\" \u0623\u0648 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0641\u064a \u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0627\u0631\u062a\u0628\u0627\u0637 \u0623\u0648 \u0627\u0644\u062d\u0642\u0648\u0644 \u0627\u0644\u0645\u062e\u0641\u064a\u0629 \u0644\u063a\u0631\u0636 \u062a\u0635\u0639\u064a\u062f \u0627\u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0623\u0648 \u0625\u0633\u0627\u0621\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0640 JWT \u0627\u0644\u062a\u0647\u064a\u0626\u0629 \u0627\u0644\u063a\u064a\u0631 \u0635\u062d\u064a\u062d\u0629 \u0644\u0640 CORS \u062a\u0633\u0645\u062d \u0628\u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u063a\u064a\u0631 \u0645\u0635\u0631\u062d \u0628\u0647 \u0644\u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a API. \u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0635\u0641\u062d\u0627\u062a \"\u062a\u0633\u062a\u0644\u0632\u0645 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629\" \u0639\u0628\u0631 \u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \"\u063a\u064a\u0631 \u0645\u0635\u0627\u062f\u0642 \u0639\u0644\u064a\u0647\u0645\" \u0623\u0648 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u0649 \u0635\u0641\u062d\u0627\u062a \u0630\u0627\u062a \u0627\u0645\u062a\u064a\u0627\u0632\u0627\u062a \u0639\u0644\u064a\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u201c\u062d\u0633\u0627\u0628 \u0645\u0633\u062a\u062e\u062f\u0645 \u201c\u060c \u0623\u0648 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u0649 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \"API\u201d \u0628\u0648\u062c\u0648\u062f \u0642\u0635\u0648\u0631 \u0641\u064a \"\u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644\" \u0645\u0645\u0627 \u064a\u0624\u062f\u064a \u0627\u0644\u0649 \u062a\u0646\u0641\u064a\u0630 \u0637\u0644\u0628\u0627\u062aPOST\u060c PUT\u060c DELETE. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u064a\u0643\u0648\u0646 \"\u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644\" \u0641\u0639\u0627\u0644\u0627 \u0641\u0642\u0637 \u0639\u0646\u062f\u0645\u0627 \u0639\u0646\u062f \u062a\u0637\u0628\u064a\u0642\u0647 \u0639\u0644\u0649 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0645\u0646 \u062c\u0647\u0629 \u0627\u0644\u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u0645\u0648\u062b\u0648\u0642\u0629- trusted server-side code\u060c \u0623\u0648 \u0627\u0644\u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0645\u0644\u0643 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0627\u0644\u062a\u064a \u064a\u0637\u0644\u0642 \u0639\u0644\u064a\u0647\u0627 (server-less API)\u060c \u062d\u064a\u062b \u0644\u0627 \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u062a\u0639\u062f\u064a\u0644 \"\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644\" \u0623\u0648 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0629. \u0628\u0627\u0633\u062a\u062b\u0646\u0627\u0621 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \"\u0644\u0644\u0645\u0648\u0627\u0631\u062f \u0627\u0644\u0645\u062a\u0627\u062d\u0629 \u0644\u0644\u0639\u0627\u0645\u0629\" \u064a\u062a\u0645 \u062d\u0638\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a. \u0648\u0636\u0639 \u0627\u0644\u0623\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0645\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0641\u064a \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c/\u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0639 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 -\u0647\u064a \u0646\u0641\u0633\u0647\u0627- \u0639\u0646\u062f \u0627\u0644\u062d\u0627\u062c\u0629\u060c \u0648\u0623\u064a\u0636\u0627 \u062a\u0642\u0644\u064a\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 CORS. \u0646\u0645\u0648\u0630\u062c \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u064a\u062c\u0628 \u0623\u0646 \u064a\u0641\u0631\u0636 \u0645\u064f\u0644\u0643\u064a\u0629 \u0627\u0644\u0633\u062c\u0644 \" record ownership\" \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0623\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u064a\u0633\u062a\u0637\u064a\u0639 \u0625\u0646\u0634\u0627\u0621\u060c \u0642\u0631\u0627\u0621\u0629\u060c \u062a\u062d\u062f\u064a\u062b\u060c \u0623\u0648 \u062d\u0630\u0641 \u0623\u064a \u0633\u062c\u0644. \u0645\u062a\u0637\u0644\u0651\u0628\u0627\u062a \u062d\u062f\u0648\u062f \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0623\u0639\u0645\u0627\u0644 \u0627\u0644\u0641\u0631\u064a\u062f\u0629 \u0645\u0646 \u0646\u0648\u0639\u0647\u0627 \"Unique application business limit\" \u064a\u062c\u0628 \u0623\u0646 \u064a\u062a\u0645 \u0641\u0631\u0636\u0647\u0627 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0645\u0627\u0630\u062c \u0627\u0644\u0645\u062c\u0627\u0644 (domain models). \u062a\u0639\u0637\u064a\u0644 \u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0645\u062c\u0644\u062f\u0627\u062a \u062e\u0627\u062f\u0645 \u0627\u0644\u0648\u064a\u0628 \u0648\u0627\u0644\u062a\u0623\u0643\u062f \u0628\u0623\u0646 \u0645\u0644\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0629 \"Meta Data\u201d \u0648\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0646\u0633\u062e \u0627\u0644\u0627\u062d\u062a\u064a\u0627\u0637\u064a \u0644\u0627 \u064a\u062a\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u064a\u0647\u0627 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u062c\u0644\u062f \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0631\u0626\u064a\u0633\u064a \"Root\". \u062a\u0648\u062b\u064a\u0642 \u0633\u062c\u0644\u0627\u062a \u0641\u0634\u0644 \u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u062a\u0646\u0628\u064a\u0647 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0639\u0646\u062f \u0648\u0642\u0648\u0639 \u0647\u0630\u0647 \u0627\u0644\u0623\u062e\u0637\u0627\u0621. \u062a\u0642\u064a\u064a\u0645 \u062d\u062f \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a API \u0648\u0648\u0636\u0639 \u062d\u062f \u0644\u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0644\u062a\u0642\u0644\u064a\u0644 \u0627\u0644\u0636\u0631\u0631 \u0627\u0644\u0646\u0627\u062c\u0645 \u0639\u0646 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u0627\u0644\u0622\u0644\u064a. \u064a\u062c\u0628 \u0627\u0644\u062a\u062e\u0644\u0635 \u0645\u0646 \u0631\u0645\u0648\u0632 JWT \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c. \u064a\u062c\u0628 \u0639\u0644\u0649 \u0641\u0631\u0642 \u0627\u0644\u0645\u0637\u0648\u0651\u0631\u064a\u0646 \u0648\u0645\u0648\u0638\u0641\u064a\u0646 \u0642\u0633\u0645 \u0636\u0645\u0627\u0646 \u0627\u0644\u062c\u0648\u062f\u0629 \"QA\" \u0623\u0646 \u062a\u062a\u0636\u0645\u0651\u0646 \u0648\u062d\u062f\u0629 \u0641\u0639\u0627\u0644\u0629 \u0644\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u0643\u0627\u0645\u0644 . \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u064a\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0645 \u064a\u062a\u0645 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647\u0627 \u0641\u064a \u0627\u0633\u062a\u062f\u0639\u0627\u0621 SQL \u0627\u0644\u062a\u064a \u0628\u062f\u0648\u0631\u0647\u0627 \u062a\u0635\u0644 \u0627\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0628: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); \u0628\u0628\u0633\u0627\u0637\u0629 \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u062a\u0639\u062f\u064a\u0644 browser's 'acct' parameter \u0644\u0623\u0631\u0633\u0627\u0644 \u0623\u064a \u0631\u0642\u0645 \u062d\u0633\u0627\u0628 \u064a\u0631\u064a\u062f\u0647. \u0648\u0625\u0630\u0627 \u0644\u0645 \u064a\u062a\u0645 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d\u060c \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0623\u064a \u062d\u0633\u0627\u0628 \u0645\u0633\u062a\u062e\u062f\u0645. https://example.com/app/accountInfo?acct=notmyacct \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: : \u0628\u0628\u0633\u0627\u0637\u0629 \u064a\u062c\u0628\u0631 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0645\u062a\u0635\u0641\u062d\u0627\u062a \u0639\u0644\u0649 \u0632\u064a\u0627\u0631\u0629 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0640 URLs\u0627\u0644\u0645\u0633\u062a\u0647\u062f\u0641\u0629. \u0648\u0627\u0644\u062a\u064a \u0644\u0627 \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u064a\u0647\u0627 \u0627\u0644\u0627 \u0628\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0645\u0633\u0624\u0648\u0644. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo \u064a\u0639\u062a\u0628\u0631 \u062e\u0644\u0644\u0627 \u0627\u0630\u0627 \u0643\u0627\u0646 \u064a\u0645\u0643\u0646 \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u063a\u064a\u0631 \u0627\u0644\u0645\u0635\u0631\u062d \u0644\u0647 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u0649 \u0627\u064a \u0645\u0646 \u0627\u0644\u0635\u0641\u062d\u062a\u064a\u0646. \u064a\u0639\u062a\u0628\u0631 \u062e\u0644\u0644\u0627 \u0627\u0630\u0627 \u0643\u0627\u0646 \u064a\u0645\u0643\u0646 \u0644\u063a\u064a\u0631 \u0627\u0644\u0645\u0633\u0624\u0648\u0644 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0635\u0641\u062d\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644. \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"A01 \u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644"},{"location":"ar/A01_2021-Broken_Access_Control/#a012021","text":"","title":"A01:2021 \u2013  \u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644"},{"location":"ar/A01_2021-Broken_Access_Control/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A01_2021-Broken_Access_Control/#_2","text":"\u0635\u0639\u062f \u0647\u0630\u0627 \u0627\u0644\u0645\u0639\u064a\u0627\u0631 \u0645\u0646 \u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u062e\u0627\u0645\u0633 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0625\u0644\u0649 \u0627\u0644\u0623\u0648\u0644 \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0628\u0639\u062f \u0627\u062e\u062a\u0628\u0627\u0631 \u062b\u063a\u0631\u0627\u062a \"\u062a\u062e\u0637\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644\" \u0639\u0644\u0649 94% \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0642\u062f \u0644\u0648\u062d\u0638 \u0623\u0646\u0647\u0627 \u062a\u0639\u0627\u0646\u064a \u0645\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0634\u0627\u0626\u0639\u0629 \"CWEs\u201d \u062a\u0634\u0645\u0644 : CWE-200 \u0648 CWE-201 \u0648 CWE-352","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A01_2021-Broken_Access_Control/#_3","text":"\u062a\u0641\u0631\u0636 \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0633\u064a\u0627\u0633\u0627\u062a \u0648\u0642\u0648\u0627\u0646\u064a\u0646 \u0645\u062b\u0644 \u0627\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0644\u0627 \u064a\u0645\u0643\u0646\u0647 \u0627\u0644\u062a\u0635\u0631\u0641 \u062e\u0627\u0631\u062c \u0646\u0637\u0627\u0642 \u0627\u0644\u0623\u0630\u0648\u0646\u0627\u062a \u0627\u0644\u0645\u0645\u0646\u0648\u062d\u0629 \u0644\u0647. \u0639\u0627\u062f\u0629 \u0645\u0627 \u062a\u0624\u062f\u064a \u0647\u0630\u0647 \u0627\u0644\u0627\u062e\u0637\u0627\u0621 \u0627\u0644\u0649 \u0643\u0634\u0641 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u063a\u064a\u0631 \u0645\u0635\u0631\u062d \u0628\u0647\u0627 \u0627\u0648 \u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u064a\u0647\u0627\u060c \u0627\u0648 \u062a\u062e\u0631\u064a\u0628 \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u062d\u062a\u0649 \u062a\u0646\u0641\u064a\u0630 \u0625\u062c\u0631\u0627\u0621\u0627\u062a \u062e\u0627\u0631\u062c \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u0645\u0633\u0645\u0648\u062d\u0629. \u062a\u062a\u0636\u0645\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0634\u0627\u0626\u0639\u0629 \u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644: \u062a\u062c\u0627\u0648\u0632 \u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0639\u062f\u064a\u0644 \u0645\u062d\u062f\u062f \u0641\u064aURL\u060c \u0627\u0648 \u062a\u0639\u062f\u064a\u0644 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a \u201cobjects\u201d \u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u062f\u0627\u062e\u0644 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0623\u0648 \u062a\u0639\u062f\u064a\u0644 \u0635\u0641\u062d\u0629 \u0627\u0644\u0640 HTML\u060c \u0623\u0648 \u0628\u0628\u0633\u0627\u0637\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0627\u0629 \u0647\u062c\u0648\u0645 \u0645\u062e\u0635\u0635\u0629 \u0644\u0645\u0647\u0627\u062c\u0645\u0629 API \u0627\u0644\u0633\u0645\u0627\u062d \u0628\u0627\u0644\u062a\u0628\u062f\u064a\u0644 \u0628\u064a\u0646 \u0645\u0641\u062a\u0627\u062d \u0631\u0626\u064a\u0633\u064a \u201cprimary key\u201d \u0648\u0633\u062c\u0644\u0627\u062a \u0645\u0633\u062a\u062e\u062f\u0645 \u0622\u062e\u0631 \u201cusers record\u201d\u060c \u0645\u0645\u0627 \u0642\u062f \u064a\u0633\u0645\u062d \u0628\u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0623\u0648 \u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u0649 \u062d\u0633\u0627\u0628\u0627\u062a \u0623\u062e\u0631\u0649 \u062a\u0635\u0639\u064a\u062f \u0627\u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a: \u0627\u0644\u062a\u0635\u0631\u0641 \u0643\u0645\u0633\u062a\u062e\u062f\u0645 \u0645\u0646 \u062f\u0648\u0646 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0648 \u0627\u0644\u062a\u0635\u0631\u0641 \u0643\u0645\u062f\u064a\u0631 \u0639\u0646\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0628\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0643\u0645\u0633\u062a\u062e\u062f\u0645. \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0629 \"meta data\u201d \u0643\u0625\u0639\u0627\u062f\u0629 \u0625\u062f\u062e\u0627\u0644 \u0623\u0648 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0628\u0631\u0645\u0632 \u0627\u0644\u062a\u0648\u062b\u064a\u0642 \"JSON Web Token (JWT)\u060c\" \u0623\u0648 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0641\u064a \u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0627\u0631\u062a\u0628\u0627\u0637 \u0623\u0648 \u0627\u0644\u062d\u0642\u0648\u0644 \u0627\u0644\u0645\u062e\u0641\u064a\u0629 \u0644\u063a\u0631\u0636 \u062a\u0635\u0639\u064a\u062f \u0627\u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0623\u0648 \u0625\u0633\u0627\u0621\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0640 JWT \u0627\u0644\u062a\u0647\u064a\u0626\u0629 \u0627\u0644\u063a\u064a\u0631 \u0635\u062d\u064a\u062d\u0629 \u0644\u0640 CORS \u062a\u0633\u0645\u062d \u0628\u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u063a\u064a\u0631 \u0645\u0635\u0631\u062d \u0628\u0647 \u0644\u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a API. \u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0635\u0641\u062d\u0627\u062a \"\u062a\u0633\u062a\u0644\u0632\u0645 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629\" \u0639\u0628\u0631 \u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \"\u063a\u064a\u0631 \u0645\u0635\u0627\u062f\u0642 \u0639\u0644\u064a\u0647\u0645\" \u0623\u0648 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u0649 \u0635\u0641\u062d\u0627\u062a \u0630\u0627\u062a \u0627\u0645\u062a\u064a\u0627\u0632\u0627\u062a \u0639\u0644\u064a\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u201c\u062d\u0633\u0627\u0628 \u0645\u0633\u062a\u062e\u062f\u0645 \u201c\u060c \u0623\u0648 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u0649 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \"API\u201d \u0628\u0648\u062c\u0648\u062f \u0642\u0635\u0648\u0631 \u0641\u064a \"\u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644\" \u0645\u0645\u0627 \u064a\u0624\u062f\u064a \u0627\u0644\u0649 \u062a\u0646\u0641\u064a\u0630 \u0637\u0644\u0628\u0627\u062aPOST\u060c PUT\u060c DELETE.","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A01_2021-Broken_Access_Control/#_4","text":"\u064a\u0643\u0648\u0646 \"\u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644\" \u0641\u0639\u0627\u0644\u0627 \u0641\u0642\u0637 \u0639\u0646\u062f\u0645\u0627 \u0639\u0646\u062f \u062a\u0637\u0628\u064a\u0642\u0647 \u0639\u0644\u0649 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0645\u0646 \u062c\u0647\u0629 \u0627\u0644\u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u0645\u0648\u062b\u0648\u0642\u0629- trusted server-side code\u060c \u0623\u0648 \u0627\u0644\u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0645\u0644\u0643 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0627\u0644\u062a\u064a \u064a\u0637\u0644\u0642 \u0639\u0644\u064a\u0647\u0627 (server-less API)\u060c \u062d\u064a\u062b \u0644\u0627 \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u062a\u0639\u062f\u064a\u0644 \"\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644\" \u0623\u0648 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0629. \u0628\u0627\u0633\u062a\u062b\u0646\u0627\u0621 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \"\u0644\u0644\u0645\u0648\u0627\u0631\u062f \u0627\u0644\u0645\u062a\u0627\u062d\u0629 \u0644\u0644\u0639\u0627\u0645\u0629\" \u064a\u062a\u0645 \u062d\u0638\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a. \u0648\u0636\u0639 \u0627\u0644\u0623\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0645\u0631\u0629 \u0648\u0627\u062d\u062f\u0629 \u0641\u064a \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c/\u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0645\u0639 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 -\u0647\u064a \u0646\u0641\u0633\u0647\u0627- \u0639\u0646\u062f \u0627\u0644\u062d\u0627\u062c\u0629\u060c \u0648\u0623\u064a\u0636\u0627 \u062a\u0642\u0644\u064a\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 CORS. \u0646\u0645\u0648\u0630\u062c \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u064a\u062c\u0628 \u0623\u0646 \u064a\u0641\u0631\u0636 \u0645\u064f\u0644\u0643\u064a\u0629 \u0627\u0644\u0633\u062c\u0644 \" record ownership\" \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0623\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u064a\u0633\u062a\u0637\u064a\u0639 \u0625\u0646\u0634\u0627\u0621\u060c \u0642\u0631\u0627\u0621\u0629\u060c \u062a\u062d\u062f\u064a\u062b\u060c \u0623\u0648 \u062d\u0630\u0641 \u0623\u064a \u0633\u062c\u0644. \u0645\u062a\u0637\u0644\u0651\u0628\u0627\u062a \u062d\u062f\u0648\u062f \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0623\u0639\u0645\u0627\u0644 \u0627\u0644\u0641\u0631\u064a\u062f\u0629 \u0645\u0646 \u0646\u0648\u0639\u0647\u0627 \"Unique application business limit\" \u064a\u062c\u0628 \u0623\u0646 \u064a\u062a\u0645 \u0641\u0631\u0636\u0647\u0627 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0645\u0627\u0630\u062c \u0627\u0644\u0645\u062c\u0627\u0644 (domain models). \u062a\u0639\u0637\u064a\u0644 \u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0645\u062c\u0644\u062f\u0627\u062a \u062e\u0627\u062f\u0645 \u0627\u0644\u0648\u064a\u0628 \u0648\u0627\u0644\u062a\u0623\u0643\u062f \u0628\u0623\u0646 \u0645\u0644\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0629 \"Meta Data\u201d \u0648\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0646\u0633\u062e \u0627\u0644\u0627\u062d\u062a\u064a\u0627\u0637\u064a \u0644\u0627 \u064a\u062a\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u064a\u0647\u0627 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u062c\u0644\u062f \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0631\u0626\u064a\u0633\u064a \"Root\". \u062a\u0648\u062b\u064a\u0642 \u0633\u062c\u0644\u0627\u062a \u0641\u0634\u0644 \u0627\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u062a\u0646\u0628\u064a\u0647 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0639\u0646\u062f \u0648\u0642\u0648\u0639 \u0647\u0630\u0647 \u0627\u0644\u0623\u062e\u0637\u0627\u0621. \u062a\u0642\u064a\u064a\u0645 \u062d\u062f \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a API \u0648\u0648\u0636\u0639 \u062d\u062f \u0644\u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0644\u062a\u0642\u0644\u064a\u0644 \u0627\u0644\u0636\u0631\u0631 \u0627\u0644\u0646\u0627\u062c\u0645 \u0639\u0646 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u0627\u0644\u0622\u0644\u064a. \u064a\u062c\u0628 \u0627\u0644\u062a\u062e\u0644\u0635 \u0645\u0646 \u0631\u0645\u0648\u0632 JWT \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c. \u064a\u062c\u0628 \u0639\u0644\u0649 \u0641\u0631\u0642 \u0627\u0644\u0645\u0637\u0648\u0651\u0631\u064a\u0646 \u0648\u0645\u0648\u0638\u0641\u064a\u0646 \u0642\u0633\u0645 \u0636\u0645\u0627\u0646 \u0627\u0644\u062c\u0648\u062f\u0629 \"QA\" \u0623\u0646 \u062a\u062a\u0636\u0645\u0651\u0646 \u0648\u062d\u062f\u0629 \u0641\u0639\u0627\u0644\u0629 \u0644\u0644\u062a\u062d\u0643\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u0643\u0627\u0645\u0644 .","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A01_2021-Broken_Access_Control/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u064a\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0645 \u064a\u062a\u0645 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647\u0627 \u0641\u064a \u0627\u0633\u062a\u062f\u0639\u0627\u0621 SQL \u0627\u0644\u062a\u064a \u0628\u062f\u0648\u0631\u0647\u0627 \u062a\u0635\u0644 \u0627\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0628: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); \u0628\u0628\u0633\u0627\u0637\u0629 \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u062a\u0639\u062f\u064a\u0644 browser's 'acct' parameter \u0644\u0623\u0631\u0633\u0627\u0644 \u0623\u064a \u0631\u0642\u0645 \u062d\u0633\u0627\u0628 \u064a\u0631\u064a\u062f\u0647. \u0648\u0625\u0630\u0627 \u0644\u0645 \u064a\u062a\u0645 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d\u060c \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0623\u064a \u062d\u0633\u0627\u0628 \u0645\u0633\u062a\u062e\u062f\u0645. https://example.com/app/accountInfo?acct=notmyacct \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: : \u0628\u0628\u0633\u0627\u0637\u0629 \u064a\u062c\u0628\u0631 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0645\u062a\u0635\u0641\u062d\u0627\u062a \u0639\u0644\u0649 \u0632\u064a\u0627\u0631\u0629 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0640 URLs\u0627\u0644\u0645\u0633\u062a\u0647\u062f\u0641\u0629. \u0648\u0627\u0644\u062a\u064a \u0644\u0627 \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u064a\u0647\u0627 \u0627\u0644\u0627 \u0628\u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0645\u0633\u0624\u0648\u0644. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo \u064a\u0639\u062a\u0628\u0631 \u062e\u0644\u0644\u0627 \u0627\u0630\u0627 \u0643\u0627\u0646 \u064a\u0645\u0643\u0646 \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u063a\u064a\u0631 \u0627\u0644\u0645\u0635\u0631\u062d \u0644\u0647 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u0649 \u0627\u064a \u0645\u0646 \u0627\u0644\u0635\u0641\u062d\u062a\u064a\u0646. \u064a\u0639\u062a\u0628\u0631 \u062e\u0644\u0644\u0627 \u0627\u0630\u0627 \u0643\u0627\u0646 \u064a\u0645\u0643\u0646 \u0644\u063a\u064a\u0631 \u0627\u0644\u0645\u0633\u0624\u0648\u0644 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0635\u0641\u062d\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644.","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A01_2021-Broken_Access_Control/#_6","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A01_2021-Broken_Access_Control/#cwes","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A02_2021-Cryptographic_Failures/","text":"A02:2021 \u2013 \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u064a\u0623\u062a\u064a \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 #2 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u201c\u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629\" \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0643\u0648\u0646 \u0623\u0633\u0628\u0627\u0628\u0647\u0627 \u0645\u062a\u0639\u062f\u0651\u062f\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0643\u0648\u0646\u0647\u0627 \u0646\u0627\u062a\u062c\u0629 \u0639\u0646 \u0633\u0628\u0628 \u062c\u0630\u0631\u064a \u0648\u0627\u062d\u062f\u060c \u0648\u064a\u0623\u062a\u064a \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0647\u0646\u0627 \u0639\u0644\u0649 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0641\u064a \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u062a\u064a \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u0624\u062f\u064a \u0625\u0644\u0649 \u0643\u0634\u0641 \u063a\u064a\u0631 \u0645\u0635\u0631\u0651\u062d \u0628\u0647 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629. \u062a\u0645 \u0645\u0644\u0627\u062d\u0638\u0629 \u0623\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0634\u0627\u0626\u0639\u0629 CWEs \u062a\u0634\u0645\u0644: CWE-259: \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0645\u0636\u0645\u0646\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \"\" \u060c CWE-327: \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0629 \u062a\u0634\u0641\u064a\u0631 \u0645\u064f\u0639\u0637\u0651\u0644\u0629 \u0623\u0648 \u0645\u062d\u0641\u0648\u0641\u0629 \u0628\u0627\u0644\u0645\u062e\u0627\u0637\u0631\u060c \u0648 CWE-331 \u0627\u0644\u062a\u0634\u062a\u062a \u0627\u0644\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644 \u0623\u0648 \u0628\u0639\u0628\u0627\u0631\u0629 \u0623\u062e\u0631\u0649 -\u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0628\u0634\u0643\u0644 \u063a\u064a\u0631 \u0643\u0627\u0641\u064a-\u201d Insufficient Entropy\u201d. \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u0623\u0648\u0644\u064b\u0627\u060c \u062a\u062d\u062f\u064a\u062f \u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a \u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0646\u0642\u0644 (Data in transit) \u0648\u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 (Data at rest). \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u062a\u062a\u0637\u0644\u0651\u0628 \u0643\u0644 \u0645\u0646 (\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u0623\u0631\u0642\u0627\u0645 \u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646 \u0648\u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u0651\u0629 \u0648\u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u0634\u062e\u0635\u064a\u0629 \u0648\u0623\u0633\u0631\u0627\u0631 \u0627\u0644\u0639\u0645\u0644) \u062a\u062a\u0637\u0644\u0651\u0628 \u062d\u0645\u0627\u064a\u0629 \u0625\u0636\u0627\u0641\u064a\u0629 \u0648\u0644\u0627 \u0633\u064a\u0651\u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u062a\u0644\u0643 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062a\u0646\u062f\u0631\u062c \u062a\u062d\u062a \u0642\u0648\u0627\u0646\u064a\u0646 \u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629 \u0645\u062b\u0644 \u0627\u0644\u0644\u0627\u0626\u062d\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 \u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0627\u0644\u0627\u062a\u062d\u0627\u062f \u0627\u0644\u0623\u0648\u0631\u0648\u0628\u064a (GDPR)\u060c \u0623\u0648 \u0627\u0644\u062a\u0646\u0638\u064a\u0645\u0627\u062a\u060c \u0648 \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u062a\u0646\u0638\u064a\u0645\u0627\u062a \u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0627\u0644\u064a\u0629 \u0645\u062b\u0644 \u0645\u0639\u064a\u0627\u0631 PCI \u0644\u0623\u0645\u0627\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u0645\u0639\u064a\u0627\u0631 (PCI DSS) \u0644\u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0627\u0644\u064a\u0629. \u0647\u0644 \u064a\u062a\u0645 \u0646\u0642\u0644 \u0623\u064a \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u063a\u064a\u0631 \u062a\u0634\u0641\u064a\u0631\u061f \u064a\u0639\u062a\u0645\u062f \u0647\u0630\u0627 \u0639\u0644\u0649 \u0627\u0644\u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644\u0627\u062a \u0645\u062b\u0644 HTTP \u0648SMTP \u0648FTP. \u0643\u0630\u0644\u0643 \u0644\u0627\u0628\u062f \u0645\u0646 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0645\u0633\u0627\u0631 \u062a\u062f\u0641\u0651\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648 \u062d\u0631\u0643\u062a\u0647\u0627 \u062f\u0627\u062e\u0644 \u0627\u0644\u0634\u0628\u0643\u0629 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u062d\u0631\u0643\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u064a\u0646 \u0645\u0648\u0627\u0632\u0646\u0627\u062a \u0627\u0644\u062a\u062d\u0645\u064a\u0644 \"load balancers\" \u0623\u0648 \u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u0648\u064a\u0628 \u0623\u0648 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062e\u0644\u0641\u064a\u0629 \"Back-end systems\" . \u0647\u0644 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u064a \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a \u062a\u0634\u0641\u064a\u0631 \u0642\u062f\u064a\u0645\u0629 \u0623\u0648 \u0636\u0639\u064a\u0641\u0629 \u0625\u0645\u0627 \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0623\u0648 \u0641\u064a \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u0642\u062f\u064a\u0645\u0629\u061f \u0647\u0644 \u0645\u0641\u0627\u062a\u064a\u062d \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0642\u064a\u062f \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u061f \u0647\u0644 \u064a\u062a\u0645 \u062a\u0648\u0644\u064a\u062f \u0645\u0641\u0627\u062a\u064a\u062d \u062a\u0634\u0641\u064a\u0631 \u0636\u0639\u064a\u0641\u0629 \u0623\u0648 \u064a\u062a\u0645 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0641\u0627\u062a\u064a\u062d \u0645\u0646 \u0634\u0641\u0631\u0629 \u0645\u0635\u062f\u0631\u064a\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0623\u0648 \u0645\u0646 \u0634\u0641\u0631\u0629 \u0645\u0635\u062f\u0631\u064a\u0629 \u0642\u062f\u064a\u0645\u0629\u061f \u0647\u0644 \u062a\u062a\u0645 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0641\u0627\u062a\u064a\u062d \u0648 \u0625\u0639\u0627\u062f\u0629 \u062a\u062f\u0648\u064a\u0631\u0647\u0627 \u0628\u0634\u0643\u0644 \u062c\u064a\u062f\u061f (rotation missing)\u061f \u0647\u0644 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u063a\u064a\u0631 \u0645\u0641\u0631\u0648\u0636\u061f \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0647\u0644 \u064a\u062a\u0645 \u0625\u0631\u0633\u0627\u0644 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0646\u0627\u0648\u064a\u0646 \"Headers\" \u0627\u0644\u0635\u062d\u064a\u062d\u0629 \u0648\u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u0641\u0642\u0637 \u0639\u0646\u062f \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u0639\u0646\u062f \u0627\u0633\u062a\u0642\u0628\u0627\u0644\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u062a\u0635\u0641\u0651\u062d\u061f \u0647\u0644 \u0648\u0643\u064a\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 (\u0645\u062b\u0644 \u0627\u0644\u0645\u062a\u0635\u0641\u0651\u062d \u0623\u0648 \u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u0631\u064a\u062f \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a) \u0644\u0627 \u064a\u062a\u062d\u0642\u0651\u0642 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0634\u0647\u0627\u062f\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0627\u0644\u0645\u0633\u062a\u0644\u0645\u0629 \u0635\u0627\u0644\u062d\u0629 \u0648\u0641\u0639\u0651\u0627\u0644\u0629\u061f \u0647\u0646\u0627\u0643 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u062a\u064a \u064a\u062c\u0628 \u062a\u062c\u0646\u0651\u0628\u0647\u0627\u060c \u0627\u0646\u0638\u0631 ASVS Crypto (V7) , Data Protection (V9), and SSL/TLS (V10) \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u064a\u062c\u0628 \u0639\u0645\u0644 \u0645\u0627 \u064a\u0644\u064a \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644 \u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629: \u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627 \u0623\u0648 \u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0623\u0648 \u0625\u0631\u0633\u0627\u0644\u0647\u0627 \u0628\u0648\u0627\u0633\u0637\u0629 \u062a\u0637\u0628\u064a\u0642 \u0645\u0627. \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0648\u0641\u0642\u064b\u0627 \u0644\u0642\u0648\u0627\u0646\u064a\u0646 \u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u062a\u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062a\u0646\u0638\u064a\u0645\u064a\u0629 \u0623\u0648 \u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a \u0627\u0644\u0639\u0645\u0644. \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0636\u0648\u0627\u0628\u0637 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641. \u0644\u0627 \u062a\u0642\u0645 \u0628\u062a\u062e\u0632\u064a\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u063a\u064a\u0631 \u0645\u0637\u0644\u0648\u0628\u0629\u060c \u0642\u0645 \u0628\u062a\u062c\u0627\u0647\u0644\u0647\u0627 \u0648\u0627\u0644\u062a\u062e\u0644\u0651\u0635 \u0645\u0646\u0647\u0627 \u0641\u064a \u0623\u0642\u0631\u0628 \u0648\u0642\u062a \u0645\u0645\u0643\u0646 \u0644\u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0645\u0644\u0643\u0647\u0627 \u0644\u0627 \u064a\u0645\u0643\u0646 \u0633\u0631\u0642\u062a\u0647\u0627. \u062a\u0623\u0643\u0651\u062f \u0645\u0646 \u062a\u0634\u0641\u064a\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u062e\u0632\u0646\u0629. \u0636\u0645\u0627\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a \u0648\u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644\u0627\u062a \u0648\u0645\u0641\u0627\u062a\u064a\u062d \u062a\u0634\u0641\u064a\u0631 \u0645\u062d\u062f\u0651\u062b\u0629 \u0648\u0630\u0627\u062a \u0645\u0639\u0627\u064a\u064a\u0631 \u0635\u0627\u0631\u0645\u0629 \u0643\u0630\u0644\u0643 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0641\u0627\u062a\u064a\u062d \u0628\u0634\u0643\u0644 \u062c\u064a\u062f \u0648\u0645\u0646\u0627\u0633\u0628. \u0642\u0645 \u0628\u062a\u0634\u0641\u064a\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0646\u0642\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644\u0627\u062a \u0622\u0645\u0646\u0629 \u0645\u062b\u0644 TLS \u0645\u0639 \u0634\u0641\u0631\u0629 \u0627\u0644\u0640 Perfect Forward Secrecy (PFS)\u060c \u0648\u062a\u062d\u062f\u064a\u062f \u0623\u0648\u0644\u0648\u064a\u0627\u062a \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u0645\u0639\u0637\u064a\u0627\u062a \u0627\u0644\u0622\u0645\u0646\u0629 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0648 \u0643\u0630\u0644\u0643 \u0641\u0631\u0636 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062a\u0648\u062c\u064a\u0647\u0627\u062a \u0645\u062b\u0644 HTTP Strict Transport Security (HSTS). \u062a\u0639\u0637\u064a\u0644 \u062e\u0627\u0635\u064a\u0629 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0645\u0624\u0642\u062a \u0641\u064a \u0627\u0644\u0635\u0641\u062d\u0627\u062a \"caching\" \u0644\u0644\u0631\u062f\u0648\u062f \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629. \u0642\u0645 \u0628\u062a\u062e\u0632\u064a\u0646 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062f\u0648\u0627\u0644 \u0627\u062e\u062a\u0632\u0627\u0644 \u0645\u062a\u0643\u064a\u0651\u0641\u0629 \u0648\u0642\u0648\u064a\u0629 \u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0625\u0636\u0627\u0641\u064a\u0629 \" salted \" \u060c \u0645\u062b\u0644 Argon2 \u0623\u0648 scrypt \u0623\u0648 bcrypt \u0623\u0648 PBKDF2. \u062a\u062d\u0642\u0642 \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0642\u0644 \u0645\u0646 \u0641\u0639\u0627\u0644\u064a\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0648\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a. \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1 : \u062a\u0637\u0628\u064a\u0642 \u064a\u0642\u0648\u0645 \u0628\u062a\u0634\u0641\u064a\u0631 \u0623\u0631\u0642\u0627\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646\u064a\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0622\u0644\u064a \u0627\u0644\u0645\u062a\u0648\u0641\u0631 \u0645\u0639 \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0644\u0643\u0646 \u0647\u0630\u0627 \u064a\u0639\u0646\u064a \u0623\u0646\u0647 \u0628\u0625\u0645\u0643\u0627\u0646 \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u0643\u0651 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0622\u0644\u064a\u064b\u0627 \u0639\u0646\u062f \u0637\u0644\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646\u0647\u0627\u060c \u0645\u0645\u0627 \u0642\u062f \u064a\u064f\u0639\u0631\u0651\u0636 \u0623\u0631\u0642\u0627\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646\u064a\u0629 \u0644\u0644\u0633\u0651\u0631\u0642\u0629 \u0639\u0646\u062f \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u062b\u063a\u0631\u0629 \u062d\u0642\u0646 \"SQL\u201d\u060c \u0644\u0630\u0644\u0643\u060c \u064a\u062c\u0628 \u062a\u0634\u0641\u064a\u0631 \u0623\u0631\u0642\u0627\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646\u064a\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0641\u062a\u0627\u062d \u0639\u0627\u0645 \"Public Key\" \u0648\u0627\u0644\u0633\u0645\u0627\u062d \u0641\u0642\u0637 \u0644\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0641\u0643\u0651 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0641\u062a\u0627\u062d \u0627\u0644\u062e\u0627\u0635 \"Private Key\". \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2 :\u0627\u0644\u0645\u0648\u0642\u0639 \u0627\u0644\u0630\u064a \u0644\u0627 \u064a\u0633\u062a\u062e\u062f\u0645 \u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644 TLS \u0644\u0643\u0627\u0641\u0629 \u0627\u0644\u0635\u0641\u062d\u0627\u062a \u0623\u0648 \u0623\u0646 \u0627\u0644\u0645\u0648\u0642\u0639 \u064a\u062f\u0639\u0645 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0636\u0639\u064a\u0641\u060c \u062d\u064a\u062b \u064a\u0631\u0627\u0642\u0628 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u062d\u0631\u0643\u0629 \u0645\u0631\u0648\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0627\u0644\u0634\u0628\u0643\u0629 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0641\u064a \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u0644\u0627\u0633\u0644\u0643\u064a\u0629 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629) \u064a\u0646\u062e\u0641\u0636 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0627\u062a\u0635\u0627\u0644 \u0645\u0646 HTTPS \u0625\u0644\u0649 HTTP\u060c \u0648\u064a\u0639\u062a\u0631\u0636 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0648 \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0633\u0637\u0648 \u0639\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062c\u0644\u0633\u0627\u062a \u0627\u0644\u0627\u062a\u0635\u0627\u0644\u0627\u062a \"Session Cookie\" \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u060c \u062b\u0645 \u064a\u0639\u064a\u062f \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0625\u0631\u0633\u0627\u0644 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u062c\u0644\u0633\u0629 \u0627\u062a\u0635\u0627\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 ( \u0627\u0644\u062a\u064a \u0633\u0628\u0642 \u0648 \u062a\u0645 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0639\u0644\u064a\u0647\u0627) \u0641\u064a\u062a\u0645\u0643\u0646 \u0645\u0646 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062e\u0627\u0635\u0629 \u0623\u0648 \u062a\u0639\u062f\u064a\u0644\u0647\u0627 \u0648 \u064a\u0645\u0643\u0646 \u0627\u0633\u062a\u0628\u062f\u0627\u0644\u0647\u0627 \u0645\u0645\u0627 \u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u062a\u063a\u064a\u064a\u0631 \u0623\u064a \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0646\u0642\u0648\u0644\u0629\u060c \u0645\u062b\u0644 \u0627\u0644\u062c\u0647\u0629 \u0627\u0644\u0645\u062a\u0644\u0642\u064a\u0629 \u0644\u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0623\u0645\u0648\u0627\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3 : \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0644\u0627 \u062a\u0633\u062a\u062e\u062f\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0625\u0636\u0627\u0641\u064a\u0629 \"salted \u201c\u0623\u0648 \u0625\u0636\u0627\u0641\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0630\u0627\u062a \u0646\u0645\u0637 \u0628\u0633\u064a\u0637 \u063a\u064a\u0631 \u0639\u0634\u0648\u0627\u0626\u064a \u0628\u0627\u0644\u0642\u062f\u0631 \u0627\u0644\u0643\u0627\u0641\u064a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062f\u0648\u0627\u0644 \u0627\u062e\u062a\u0632\u0627\u0644 \u063a\u064a\u0631 \u0645\u064f\u0636\u0627\u0641 \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \"unsalted hashes \" \u0644\u062a\u062e\u0632\u064a\u0646 \u0643\u0644\u0645\u0627\u062a \u0645\u0631\u0648\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646. \u0639\u0646\u062f\u0645\u0627 \u062a\u0648\u062c\u062f \u062b\u063a\u0631\u0629 \u0641\u064a \u062e\u0627\u0635\u064a\u0629 \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u0645\u062d \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0633\u062a\u0639\u0627\u062f\u0629 \u0648\u062a\u062d\u0645\u064a\u0644 \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631. \u0648 \u0628\u0627\u0644\u062a\u0627\u0644\u064a \u062a\u062a\u0639\u0631\u0651\u0636 \u062c\u0645\u064a\u0639 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0643\u0634\u0641 \u0639\u0646\u0647\u0627 \u0644\u0643\u0633\u0631 \u062d\u0645\u0627\u064a\u0629 \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a\u0647\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062c\u062f\u0627\u0648\u0644 \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0643\u0644\u0645\u0627\u062a \u0633\u0631\u064a\u0629 \u0645\u064f\u0639\u062f\u0651\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \"rainbow table of pre-calculated hashes\". \u0642\u062f \u064a\u062a\u0645 \u0643\u0633\u0631 \u0627\u0644\u0640\"hashes\" \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u0646\u0634\u0627\u0624\u0647\u0627 \u0628\u0634\u0643\u0644 \u0628\u0633\u064a\u0637 \u0648\u0633\u0631\u064a\u0639\u060c \u0641\u064a \u062d\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0645\u062a \u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0631\u0633\u0648\u0645\u064a\u0629\"GPUs\" \u062d\u062a\u0649 \u0648\u0625\u0646 \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \"salt\". \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"A02 \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631"},{"location":"ar/A02_2021-Cryptographic_Failures/#a022021","text":"","title":"A02:2021 \u2013  \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631"},{"location":"ar/A02_2021-Cryptographic_Failures/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A02_2021-Cryptographic_Failures/#_2","text":"\u064a\u0623\u062a\u064a \u0641\u0634\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0631\u0642\u0645 #2 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u062a\u0639\u0631\u0641 \u201c\u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629\" \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0643\u0648\u0646 \u0623\u0633\u0628\u0627\u0628\u0647\u0627 \u0645\u062a\u0639\u062f\u0651\u062f\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0643\u0648\u0646\u0647\u0627 \u0646\u0627\u062a\u062c\u0629 \u0639\u0646 \u0633\u0628\u0628 \u062c\u0630\u0631\u064a \u0648\u0627\u062d\u062f\u060c \u0648\u064a\u0623\u062a\u064a \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0647\u0646\u0627 \u0639\u0644\u0649 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u0641\u0634\u0644 \u0641\u064a \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u062a\u064a \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u0624\u062f\u064a \u0625\u0644\u0649 \u0643\u0634\u0641 \u063a\u064a\u0631 \u0645\u0635\u0631\u0651\u062d \u0628\u0647 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629. \u062a\u0645 \u0645\u0644\u0627\u062d\u0638\u0629 \u0623\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0634\u0627\u0626\u0639\u0629 CWEs \u062a\u0634\u0645\u0644: CWE-259: \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0645\u0636\u0645\u0646\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \"\" \u060c CWE-327: \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0629 \u062a\u0634\u0641\u064a\u0631 \u0645\u064f\u0639\u0637\u0651\u0644\u0629 \u0623\u0648 \u0645\u062d\u0641\u0648\u0641\u0629 \u0628\u0627\u0644\u0645\u062e\u0627\u0637\u0631\u060c \u0648 CWE-331 \u0627\u0644\u062a\u0634\u062a\u062a \u0627\u0644\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644 \u0623\u0648 \u0628\u0639\u0628\u0627\u0631\u0629 \u0623\u062e\u0631\u0649 -\u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0628\u0634\u0643\u0644 \u063a\u064a\u0631 \u0643\u0627\u0641\u064a-\u201d Insufficient Entropy\u201d.","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A02_2021-Cryptographic_Failures/#_3","text":"\u0623\u0648\u0644\u064b\u0627\u060c \u062a\u062d\u062f\u064a\u062f \u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a \u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0646\u0642\u0644 (Data in transit) \u0648\u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 (Data at rest). \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u062a\u062a\u0637\u0644\u0651\u0628 \u0643\u0644 \u0645\u0646 (\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u0623\u0631\u0642\u0627\u0645 \u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646 \u0648\u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u0651\u0629 \u0648\u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u0634\u062e\u0635\u064a\u0629 \u0648\u0623\u0633\u0631\u0627\u0631 \u0627\u0644\u0639\u0645\u0644) \u062a\u062a\u0637\u0644\u0651\u0628 \u062d\u0645\u0627\u064a\u0629 \u0625\u0636\u0627\u0641\u064a\u0629 \u0648\u0644\u0627 \u0633\u064a\u0651\u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u062a\u0644\u0643 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062a\u0646\u062f\u0631\u062c \u062a\u062d\u062a \u0642\u0648\u0627\u0646\u064a\u0646 \u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629 \u0645\u062b\u0644 \u0627\u0644\u0644\u0627\u0626\u062d\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 \u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0627\u0644\u0627\u062a\u062d\u0627\u062f \u0627\u0644\u0623\u0648\u0631\u0648\u0628\u064a (GDPR)\u060c \u0623\u0648 \u0627\u0644\u062a\u0646\u0638\u064a\u0645\u0627\u062a\u060c \u0648 \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u062a\u0646\u0638\u064a\u0645\u0627\u062a \u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0627\u0644\u064a\u0629 \u0645\u062b\u0644 \u0645\u0639\u064a\u0627\u0631 PCI \u0644\u0623\u0645\u0627\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0648 \u0645\u0639\u064a\u0627\u0631 (PCI DSS) \u0644\u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0627\u0644\u064a\u0629. \u0647\u0644 \u064a\u062a\u0645 \u0646\u0642\u0644 \u0623\u064a \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u063a\u064a\u0631 \u062a\u0634\u0641\u064a\u0631\u061f \u064a\u0639\u062a\u0645\u062f \u0647\u0630\u0627 \u0639\u0644\u0649 \u0627\u0644\u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644\u0627\u062a \u0645\u062b\u0644 HTTP \u0648SMTP \u0648FTP. \u0643\u0630\u0644\u0643 \u0644\u0627\u0628\u062f \u0645\u0646 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0645\u0633\u0627\u0631 \u062a\u062f\u0641\u0651\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648 \u062d\u0631\u0643\u062a\u0647\u0627 \u062f\u0627\u062e\u0644 \u0627\u0644\u0634\u0628\u0643\u0629 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u062d\u0631\u0643\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u064a\u0646 \u0645\u0648\u0627\u0632\u0646\u0627\u062a \u0627\u0644\u062a\u062d\u0645\u064a\u0644 \"load balancers\" \u0623\u0648 \u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u0648\u064a\u0628 \u0623\u0648 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062e\u0644\u0641\u064a\u0629 \"Back-end systems\" . \u0647\u0644 \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u064a \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a \u062a\u0634\u0641\u064a\u0631 \u0642\u062f\u064a\u0645\u0629 \u0623\u0648 \u0636\u0639\u064a\u0641\u0629 \u0625\u0645\u0627 \u0628\u0634\u0643\u0644 \u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0623\u0648 \u0641\u064a \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u0642\u062f\u064a\u0645\u0629\u061f \u0647\u0644 \u0645\u0641\u0627\u062a\u064a\u062d \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0642\u064a\u062f \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u061f \u0647\u0644 \u064a\u062a\u0645 \u062a\u0648\u0644\u064a\u062f \u0645\u0641\u0627\u062a\u064a\u062d \u062a\u0634\u0641\u064a\u0631 \u0636\u0639\u064a\u0641\u0629 \u0623\u0648 \u064a\u062a\u0645 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0641\u0627\u062a\u064a\u062d \u0645\u0646 \u0634\u0641\u0631\u0629 \u0645\u0635\u062f\u0631\u064a\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0623\u0648 \u0645\u0646 \u0634\u0641\u0631\u0629 \u0645\u0635\u062f\u0631\u064a\u0629 \u0642\u062f\u064a\u0645\u0629\u061f \u0647\u0644 \u062a\u062a\u0645 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0641\u0627\u062a\u064a\u062d \u0648 \u0625\u0639\u0627\u062f\u0629 \u062a\u062f\u0648\u064a\u0631\u0647\u0627 \u0628\u0634\u0643\u0644 \u062c\u064a\u062f\u061f (rotation missing)\u061f \u0647\u0644 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u063a\u064a\u0631 \u0645\u0641\u0631\u0648\u0636\u061f \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0647\u0644 \u064a\u062a\u0645 \u0625\u0631\u0633\u0627\u0644 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0646\u0627\u0648\u064a\u0646 \"Headers\" \u0627\u0644\u0635\u062d\u064a\u062d\u0629 \u0648\u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u0641\u0642\u0637 \u0639\u0646\u062f \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u0639\u0646\u062f \u0627\u0633\u062a\u0642\u0628\u0627\u0644\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u062a\u0635\u0641\u0651\u062d\u061f \u0647\u0644 \u0648\u0643\u064a\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 (\u0645\u062b\u0644 \u0627\u0644\u0645\u062a\u0635\u0641\u0651\u062d \u0623\u0648 \u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0628\u0631\u064a\u062f \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a) \u0644\u0627 \u064a\u062a\u062d\u0642\u0651\u0642 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0634\u0647\u0627\u062f\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0627\u0644\u0645\u0633\u062a\u0644\u0645\u0629 \u0635\u0627\u0644\u062d\u0629 \u0648\u0641\u0639\u0651\u0627\u0644\u0629\u061f \u0647\u0646\u0627\u0643 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u062a\u064a \u064a\u062c\u0628 \u062a\u062c\u0646\u0651\u0628\u0647\u0627\u060c \u0627\u0646\u0638\u0631 ASVS Crypto (V7) , Data Protection (V9), and SSL/TLS (V10)","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A02_2021-Cryptographic_Failures/#_4","text":"\u064a\u062c\u0628 \u0639\u0645\u0644 \u0645\u0627 \u064a\u0644\u064a \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644 \u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629: \u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627 \u0623\u0648 \u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0623\u0648 \u0625\u0631\u0633\u0627\u0644\u0647\u0627 \u0628\u0648\u0627\u0633\u0637\u0629 \u062a\u0637\u0628\u064a\u0642 \u0645\u0627. \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0648\u0641\u0642\u064b\u0627 \u0644\u0642\u0648\u0627\u0646\u064a\u0646 \u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629 \u0623\u0648 \u0627\u0644\u0645\u062a\u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062a\u0646\u0638\u064a\u0645\u064a\u0629 \u0623\u0648 \u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a \u0627\u0644\u0639\u0645\u0644. \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0636\u0648\u0627\u0628\u0637 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u0646\u064a\u0641. \u0644\u0627 \u062a\u0642\u0645 \u0628\u062a\u062e\u0632\u064a\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u063a\u064a\u0631 \u0645\u0637\u0644\u0648\u0628\u0629\u060c \u0642\u0645 \u0628\u062a\u062c\u0627\u0647\u0644\u0647\u0627 \u0648\u0627\u0644\u062a\u062e\u0644\u0651\u0635 \u0645\u0646\u0647\u0627 \u0641\u064a \u0623\u0642\u0631\u0628 \u0648\u0642\u062a \u0645\u0645\u0643\u0646 \u0644\u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0645\u0644\u0643\u0647\u0627 \u0644\u0627 \u064a\u0645\u0643\u0646 \u0633\u0631\u0642\u062a\u0647\u0627. \u062a\u0623\u0643\u0651\u062f \u0645\u0646 \u062a\u0634\u0641\u064a\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u062e\u0632\u0646\u0629. \u0636\u0645\u0627\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a \u0648\u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644\u0627\u062a \u0648\u0645\u0641\u0627\u062a\u064a\u062d \u062a\u0634\u0641\u064a\u0631 \u0645\u062d\u062f\u0651\u062b\u0629 \u0648\u0630\u0627\u062a \u0645\u0639\u0627\u064a\u064a\u0631 \u0635\u0627\u0631\u0645\u0629 \u0643\u0630\u0644\u0643 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0641\u0627\u062a\u064a\u062d \u0628\u0634\u0643\u0644 \u062c\u064a\u062f \u0648\u0645\u0646\u0627\u0633\u0628. \u0642\u0645 \u0628\u062a\u0634\u0641\u064a\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u0646\u0642\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644\u0627\u062a \u0622\u0645\u0646\u0629 \u0645\u062b\u0644 TLS \u0645\u0639 \u0634\u0641\u0631\u0629 \u0627\u0644\u0640 Perfect Forward Secrecy (PFS)\u060c \u0648\u062a\u062d\u062f\u064a\u062f \u0623\u0648\u0644\u0648\u064a\u0627\u062a \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0648\u0627\u0644\u0645\u0639\u0637\u064a\u0627\u062a \u0627\u0644\u0622\u0645\u0646\u0629 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0648 \u0643\u0630\u0644\u0643 \u0641\u0631\u0636 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062a\u0648\u062c\u064a\u0647\u0627\u062a \u0645\u062b\u0644 HTTP Strict Transport Security (HSTS). \u062a\u0639\u0637\u064a\u0644 \u062e\u0627\u0635\u064a\u0629 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0645\u0624\u0642\u062a \u0641\u064a \u0627\u0644\u0635\u0641\u062d\u0627\u062a \"caching\" \u0644\u0644\u0631\u062f\u0648\u062f \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629. \u0642\u0645 \u0628\u062a\u062e\u0632\u064a\u0646 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062f\u0648\u0627\u0644 \u0627\u062e\u062a\u0632\u0627\u0644 \u0645\u062a\u0643\u064a\u0651\u0641\u0629 \u0648\u0642\u0648\u064a\u0629 \u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0625\u0636\u0627\u0641\u064a\u0629 \" salted \" \u060c \u0645\u062b\u0644 Argon2 \u0623\u0648 scrypt \u0623\u0648 bcrypt \u0623\u0648 PBKDF2. \u062a\u062d\u0642\u0642 \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0642\u0644 \u0645\u0646 \u0641\u0639\u0627\u0644\u064a\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0648\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a.","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A02_2021-Cryptographic_Failures/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1 : \u062a\u0637\u0628\u064a\u0642 \u064a\u0642\u0648\u0645 \u0628\u062a\u0634\u0641\u064a\u0631 \u0623\u0631\u0642\u0627\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646\u064a\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0622\u0644\u064a \u0627\u0644\u0645\u062a\u0648\u0641\u0631 \u0645\u0639 \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0644\u0643\u0646 \u0647\u0630\u0627 \u064a\u0639\u0646\u064a \u0623\u0646\u0647 \u0628\u0625\u0645\u0643\u0627\u0646 \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u0643\u0651 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0622\u0644\u064a\u064b\u0627 \u0639\u0646\u062f \u0637\u0644\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646\u0647\u0627\u060c \u0645\u0645\u0627 \u0642\u062f \u064a\u064f\u0639\u0631\u0651\u0636 \u0623\u0631\u0642\u0627\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646\u064a\u0629 \u0644\u0644\u0633\u0651\u0631\u0642\u0629 \u0639\u0646\u062f \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u062b\u063a\u0631\u0629 \u062d\u0642\u0646 \"SQL\u201d\u060c \u0644\u0630\u0644\u0643\u060c \u064a\u062c\u0628 \u062a\u0634\u0641\u064a\u0631 \u0623\u0631\u0642\u0627\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0627\u0626\u062a\u0645\u0627\u0646\u064a\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0641\u062a\u0627\u062d \u0639\u0627\u0645 \"Public Key\" \u0648\u0627\u0644\u0633\u0645\u0627\u062d \u0641\u0642\u0637 \u0644\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0641\u0643\u0651 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0641\u062a\u0627\u062d \u0627\u0644\u062e\u0627\u0635 \"Private Key\". \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2 :\u0627\u0644\u0645\u0648\u0642\u0639 \u0627\u0644\u0630\u064a \u0644\u0627 \u064a\u0633\u062a\u062e\u062f\u0645 \u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644 TLS \u0644\u0643\u0627\u0641\u0629 \u0627\u0644\u0635\u0641\u062d\u0627\u062a \u0623\u0648 \u0623\u0646 \u0627\u0644\u0645\u0648\u0642\u0639 \u064a\u062f\u0639\u0645 \u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0636\u0639\u064a\u0641\u060c \u062d\u064a\u062b \u064a\u0631\u0627\u0642\u0628 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u062d\u0631\u0643\u0629 \u0645\u0631\u0648\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0627\u0644\u0634\u0628\u0643\u0629 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0641\u064a \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u0644\u0627\u0633\u0644\u0643\u064a\u0629 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646\u0629) \u064a\u0646\u062e\u0641\u0636 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0627\u062a\u0635\u0627\u0644 \u0645\u0646 HTTPS \u0625\u0644\u0649 HTTP\u060c \u0648\u064a\u0639\u062a\u0631\u0636 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0648 \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0633\u0637\u0648 \u0639\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u062c\u0644\u0633\u0627\u062a \u0627\u0644\u0627\u062a\u0635\u0627\u0644\u0627\u062a \"Session Cookie\" \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u060c \u062b\u0645 \u064a\u0639\u064a\u062f \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0625\u0631\u0633\u0627\u0644 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u062c\u0644\u0633\u0629 \u0627\u062a\u0635\u0627\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 ( \u0627\u0644\u062a\u064a \u0633\u0628\u0642 \u0648 \u062a\u0645 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0639\u0644\u064a\u0647\u0627) \u0641\u064a\u062a\u0645\u0643\u0646 \u0645\u0646 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062e\u0627\u0635\u0629 \u0623\u0648 \u062a\u0639\u062f\u064a\u0644\u0647\u0627 \u0648 \u064a\u0645\u0643\u0646 \u0627\u0633\u062a\u0628\u062f\u0627\u0644\u0647\u0627 \u0645\u0645\u0627 \u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u062a\u063a\u064a\u064a\u0631 \u0623\u064a \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0646\u0642\u0648\u0644\u0629\u060c \u0645\u062b\u0644 \u0627\u0644\u062c\u0647\u0629 \u0627\u0644\u0645\u062a\u0644\u0642\u064a\u0629 \u0644\u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0623\u0645\u0648\u0627\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3 : \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0644\u0627 \u062a\u0633\u062a\u062e\u062f\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0625\u0636\u0627\u0641\u064a\u0629 \"salted \u201c\u0623\u0648 \u0625\u0636\u0627\u0641\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0630\u0627\u062a \u0646\u0645\u0637 \u0628\u0633\u064a\u0637 \u063a\u064a\u0631 \u0639\u0634\u0648\u0627\u0626\u064a \u0628\u0627\u0644\u0642\u062f\u0631 \u0627\u0644\u0643\u0627\u0641\u064a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062f\u0648\u0627\u0644 \u0627\u062e\u062a\u0632\u0627\u0644 \u063a\u064a\u0631 \u0645\u064f\u0636\u0627\u0641 \u0644\u0647\u0627 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \"unsalted hashes \" \u0644\u062a\u062e\u0632\u064a\u0646 \u0643\u0644\u0645\u0627\u062a \u0645\u0631\u0648\u0631 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646. \u0639\u0646\u062f\u0645\u0627 \u062a\u0648\u062c\u062f \u062b\u063a\u0631\u0629 \u0641\u064a \u062e\u0627\u0635\u064a\u0629 \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u0645\u062d \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0633\u062a\u0639\u0627\u062f\u0629 \u0648\u062a\u062d\u0645\u064a\u0644 \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631. \u0648 \u0628\u0627\u0644\u062a\u0627\u0644\u064a \u062a\u062a\u0639\u0631\u0651\u0636 \u062c\u0645\u064a\u0639 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0643\u0634\u0641 \u0639\u0646\u0647\u0627 \u0644\u0643\u0633\u0631 \u062d\u0645\u0627\u064a\u0629 \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a\u0647\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062c\u062f\u0627\u0648\u0644 \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0643\u0644\u0645\u0627\u062a \u0633\u0631\u064a\u0629 \u0645\u064f\u0639\u062f\u0651\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \"rainbow table of pre-calculated hashes\". \u0642\u062f \u064a\u062a\u0645 \u0643\u0633\u0631 \u0627\u0644\u0640\"hashes\" \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u0646\u0634\u0627\u0624\u0647\u0627 \u0628\u0634\u0643\u0644 \u0628\u0633\u064a\u0637 \u0648\u0633\u0631\u064a\u0639\u060c \u0641\u064a \u062d\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0645\u062a \u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0631\u0633\u0648\u0645\u064a\u0629\"GPUs\" \u062d\u062a\u0649 \u0648\u0625\u0646 \u062a\u0645 \u0625\u0636\u0627\u0641\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \"salt\".","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A02_2021-Cryptographic_Failures/#_6","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A02_2021-Cryptographic_Failures/#cwes","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A03_2021-Injection/","text":"A03:2021 \u2013 \u0627\u0644\u062d\u0642\u0646 \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u062a\u062d\u062a\u0644 \u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u062d\u064a\u062b \u0623\u0646 94\u066a \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0641\u062d\u0635\u0647\u0627 \u0645\u0647\u062f\u0651\u062f\u0629 \u0628\u0635\u0646\u0641 \u0648\u0627\u062d\u062f \u0623\u0648 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0645\u0639 CWE-79\u060c CWE-89\u060c CWE-73 \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u064a\u0643\u0648\u0646 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0645\u0639\u0631\u0636 \u0644\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u0647\u0630\u0647 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0639\u0646\u062f\u0645\u0627: \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0645\u0632\u0648\u0651\u062f\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u063a\u064a\u0631 \u0645\u064f\u062a\u062d\u0642\u0651\u0642 \u0645\u0646\u0647\u0627 \u0623\u0648 \u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642\u0629\u060c \u0623\u0648 \u0644\u0645 \u064a\u062a\u0645 \u062a\u0635\u0641\u064a\u062a\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c. \u062a\u0645\u0631\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \u0623\u0648 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u062d\u062f\u0651\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a (Non-Parameterized) \u0628\u0634\u0643\u0644 \u0645\u0628\u0627\u0634\u0631 \u0625\u0644\u0649 \u0645\u062a\u0631\u062c\u0645 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0628\u062f\u0648\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0622\u0644\u064a\u0629 \u0648\u0627\u0639\u064a\u0629 \u062a\u0636\u0645\u0646 \u062a\u0647\u0631\u0628 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0645\u0646 \u0627\u0644\u062a\u0641\u0627\u0639\u0644 \u0645\u0639 \u0645\u062a\u0631\u062c\u0645 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \"Context-aware escaping\". \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0636\u0651\u064e\u0627\u0631\u0629 \u0627\u0644\u062a\u064a \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0648\u0627\u0644\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0641\u064a (Object-relational mapping ORM) \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0642\u0648\u0645 \u0628\u062a\u0633\u0631\u064a\u0628 \u0628\u064a\u0627\u0646\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u063a\u064a\u0631 \u0645\u0637\u0644\u0648\u0628\u0629 \u0623\u0648 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629. \u062a\u0645\u0631\u064a\u0631 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0636\u0651\u064e\u0627\u0631\u0629 \u0628\u0634\u0643\u0644 \u0645\u0628\u0627\u0634\u0631 \u0623\u0648 \u0628\u0634\u0643\u0644 \u0645\u062a\u0633\u0644\u0633\u0644 \u063a\u064a\u0631 \u0645\u0628\u0627\u0634\u0631\u060c \u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0626\u0642\u064a\u0629 \"SQL\" \u0623\u0648 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0647\u064a\u0627\u0643\u0644 \u0648\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0634\u0628\u0648\u0647\u0629 \u0641\u064a \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0627\u0644\u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \"dynamic queries\u201d \u0623\u0648 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0623\u0648 \u0627\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629 \u0645\u0646 \u0623\u0634\u0647\u0631 \u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u062d\u0642\u0646 : \u0627\u0644\u0640 SQL\u060c NoSQL\u060c \u0633\u0637\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0641\u064a \u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u0634\u063a\u064a\u0644\u060c \u062e\u0631\u0627\u0626\u0637 \u0631\u0628\u0637 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a \u0628\u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0626\u0642\u064a\u0629 \"Object-relational mapping\u201d\u060c LDAP\u060c \u0648\u0644\u063a\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0639\u0628\u064a\u0631\u064a\u0629 \"EL\"\u060c \u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u062a\u0646\u0642\u0651\u0644 \u062e\u0644\u0627\u0644 \u0645\u062e\u0637\u0637\u0627\u062a \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a\"OGNL\". \u0645\u0628\u062f\u0623 \"\u0627\u0644\u062d\u0642\u0646\" \u0645\u064f\u062a\u0637\u0627\u0628\u0642 \u0641\u064a \u062c\u0645\u064a\u0639 \u0644\u063a\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0648\u0641\u064a \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0641\u0633\u0651\u0631\u0627\u062a\u060c \u0645\u0631\u0627\u062c\u0639\u0629 \u0645\u0635\u062f\u0631 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0647\u064a \u0623\u0641\u0636\u0644 \u0637\u0631\u064a\u0642\u0629 \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0639\u064f\u0631\u0636\u0629 \u0644\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646. \u064a\u0648\u0635\u0651\u064e\u0649 \u0628\u0634\u062f\u0651\u0629 \u0628\u0627\u0644\u0641\u062d\u0635 \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a \u0644\u0643\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u062a\u0631\u0648\u0633\u064a\u0627\u062a \u0635\u0641\u062d\u0627\u062a \u0627\u0644\u0648\u064a\u0628\u060c \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u062a\u0634\u0639\u0628\u064a\u0651\u0629 \"URL\"\u060c \u0648\u0645\u0644\u0641\u0627\u062a \u062a\u0639\u0631\u064a\u0641 \u0627\u0644\u0627\u0631\u062a\u0628\u0627\u0637 \"Cookies\"\u060c \u0648 JSON\u0648 \u0627\u0644\u0640 SOAP \u0648\u0645\u062f\u062e\u0644\u0627\u062a \u0645\u0639\u0637\u064a\u0627\u062a \u0627\u0644\u0640 XML. \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0628\u0625\u0645\u0643\u0627\u0646\u0647\u0627 \u0625\u0636\u0627\u0641\u0629 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0641\u062d\u0635 \u062b\u0627\u0628\u062a\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\"SAST\" \u0648\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0641\u062d\u0635 \u0627\u0644\u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \"DAST\"\u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0641\u064a \u0645\u0633\u0627\u0631\u0627\u062a CI/CD\u060c \u0644\u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0639\u064a\u0648\u0628 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0645\u0646 \u0642\u0628\u0644 \u0639\u0645\u0644\u064a\u0629 \u0637\u0631\u062d \u0627\u0644\u0645\u0646\u062a\u062c \u0644\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u0644\u062a\u0641\u0627\u062f\u064a \u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u064a\u062c\u0628 \u0627\u0644\u0641\u0635\u0644 \u0648\u0627\u0644\u062a\u0641\u0651\u0631\u064a\u0642 \u0628\u064a\u0646 \u0643\u0644 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a. \u064f\u0641\u0636\u0651\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a (API) \u0622\u0645\u0646\u0629\u060c \u0648\u0630\u0644\u0643 \u0644\u062a\u0641\u0627\u062f\u064a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0641\u0633\u0651\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0643\u064f\u0644\u0651\u064a\u064b\u0627\u060c \u0648 \u062a\u0648\u0641\u064a\u0631 \u0648\u0627\u062c\u0647\u0629 \u0625\u062f\u062e\u0627\u0644 \u0630\u0627\u062a \u0645\u0639\u0627\u0645\u0644\u0627\u062a \" Parametrized Interface \" \u0623\u0648 \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0625\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0627\u0626\u0646\u0627\u062a \u0627\u0644\u0640 \"Relational Mapping Tools (ORMs)\". \u0645\u0644\u0627\u062d\u0638\u0629: \u062d\u062a\u0649 \u0641\u064a \u062d\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a\" Parameterized\u201d \u0627\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629 \u0642\u062f \u0644\u0627 \u062a\u0632\u0627\u0644 \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u064f\u0639\u0631\u0651\u0636\u0629 \u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u0640 PL/SQL \u0623\u0648 T-SQL \u0642\u0627\u0628\u0644\u0629 \u0644\u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0633\u0644\u0633\u0644\u0629 \"\u0627\u0644\u063a\u064a\u0631 \u0645\u0628\u0627\u0634\u0631\u0629 \" \u0623\u0648 \u062a\u0646\u0641\u064a\u0630 \u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629 \u0636\u0627\u0631\u0651\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 EXECUTE IMMEDIATE \u0623\u0648 exec (). \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0625\u064a\u062c\u0627\u0628\u064a\u0629 \u0648 \u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628 \"\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0633\u0645\u0627\u062d/\u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0628\u064a\u0636\u0627\u0621\" \u0645\u0646 \u0637\u0631\u0641 \u0627\u0644\u062e\u0627\u062f\u0645. \u0644\u0643\u0646 \u0647\u0630\u0647 \u0644\u0627 \u062a\u0639\u062a\u0628\u0631 \u062d\u0645\u0627\u064a\u0629 \u0645\u062a\u0643\u0627\u0645\u0644\u0629 \u062d\u064a\u062b \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u062a\u062a\u0637\u0651\u0644\u0628 \u0631\u0645\u0648\u0632 \u062e\u0627\u0635\u0629 \"Special Characters\" \u0645\u062b\u0644 \u062d\u0642\u0644 \u0627\u0644\u0646\u0635 (TextArea) \u0623\u0648 \u0648\u0627\u062c\u0647\u0627\u062a \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0628\u0631\u0627\u0645\u062c (APIs) \u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0647\u0648\u0627\u062a\u0641. \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \u0645\u062a\u0628\u0642\u064a\u0629\u060c \u0642\u0645 \u0628\u062a\u0635\u0641\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0645\u0646 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u062e\u0627\u0635\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0635\u064a\u063a\u0629 \u0628\u0631\u0645\u062c\u064a\u0629 \"Syntax \" \u0644\u062a\u0635\u0641\u064a\u0629 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0645\u062d\u062f\u062f\u0629 \u0625\u0644\u0649 \u0645\u0641\u0633\u0651\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631. \u0645\u0644\u0627\u062d\u0638\u0629: \u0647\u064a\u0643\u0644\u0629 SQL \u0645\u062b\u0644 \u0623\u0633\u0645\u0627\u0621 \u0627\u0644\u062c\u062f\u0627\u0648\u0644 \u0623\u0648 \u0627\u0644\u0623\u0639\u0645\u062f\u0629 \u0648\u063a\u064a\u0631\u0647\u0627\u060c \u0644\u0627 \u064a\u0645\u0643\u0646 \u0625\u062c\u0631\u0627\u0621 \u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u062a\u0635\u0641\u064a\u0629 \u0639\u0644\u064a\u0647\u0627\u060c \u0644\u0630\u0644\u0643 \u064a\u062c\u0628 \u0627\u0644\u062d\u0630\u0631 \u0645\u0646 \u0647\u064a\u0627\u0643\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0642\u0627\u062f\u0645\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u062d\u064a\u062b \u0623\u0646\u0647\u0627 \u062a\u0639\u062a\u0628\u0631 \u062e\u0637\u0631\u0629. \u0648\u0647\u0630\u0627 \u062e\u0637\u0623 \u0634\u0627\u0626\u0639 \u0639\u0646\u062f \u0643\u062a\u0627\u0628\u0629-\u062a\u0642\u0627\u0631\u064a\u0631 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a. \u0636\u0639 \u062d\u062f\u0648\u062f\u0627 \u0648 \u0623\u0648 \u0636\u0648\u0627\u0628\u0637 \u062a\u062d\u0643\u0651\u0645 \u0623\u062e\u0631\u0649 \u0639\u0646\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u062f\u0627\u062e\u0644 SQL\u060c \u0644\u062a\u062c\u0646\u0651\u0628 \u0643\u0634\u0641 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0647\u062c\u0645\u0627\u062a \u062d\u0642\u0646 \u0627\u0644\u0640 SQL \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0628\u0631\u0646\u0627\u0645\u062c \u064a\u0633\u062a\u062e\u062f\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u0648\u062b\u0642\u0629 \u0641\u064a \u0628\u0646\u0627\u0621 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644SQL \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u064a\u0639\u0631\u0636\u0647\u0627 \u0644\u0644\u062d\u0642\u0646: String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u0627\u0644\u062b\u0642\u0629 \u0627\u0644\u0639\u0645\u064a\u0627\u0621 \u0644\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0641\u064a \u0625\u0637\u0627\u0631 \u0627\u0644\u0639\u0645\u0644 (Framework) \u0648\u0642\u062f \u062a\u0624\u062f\u064a \u062a\u0644\u0643 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0625\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0645\u062b\u0644 Hibernate Query Language (HQL): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); \u0641\u064a \u0643\u0644\u062a\u0627 \u0627\u0644\u062d\u0627\u0644\u062a\u064a\u0646 \u0627\u0644\u0633\u0627\u0628\u0642\u062a\u064a\u0646\u060c \u0627\u0644\u0645\u064f\u062e\u062a\u0631\u0642 \u0642\u0627\u0645 \u0628\u062a\u0639\u062f\u064a\u0644 \u0642\u064a\u0645\u0629 \u0645\u062a\u063a\u064a\u0651\u0631 \u0627\u0644\u0640 id \u0641\u064a \u0627\u0644\u0645\u062a\u0635\u0641\u062d \u0644\u0625\u0631\u0633\u0627\u0644 \u2018 or \u20181\u2019=\u20191. \u0645\u062b\u0644\u0627\u064b: http://example.com/app/accountView?id=' or '1'='1 \u0648\u0647\u0630\u0627 \u064a\u0646\u062a\u062c \u062a\u063a\u064a\u064a\u0631 \u0641\u064a \u0645\u0639\u0646\u0649 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0645\u0646 \u062c\u062f\u0648\u0644 \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a. \u0648\u0642\u062f \u064a\u0633\u062a\u063a\u0644\u0651\u0647\u0627 \u0627\u0644\u0645\u064f\u062e\u062a\u0631\u0642 \u0628\u0634\u0643\u0644 \u0622\u062e\u0631 \u0644\u062a\u0639\u062f\u064a\u0644 \u0623\u0648 \u062d\u0630\u0641 \u0623\u0648 \u062d\u062a\u0649 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629. \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"A03 \u0627\u0644\u062d\u0642\u0646"},{"location":"ar/A03_2021-Injection/#a032021","text":"","title":"A03:2021 \u2013 \u0627\u0644\u062d\u0642\u0646"},{"location":"ar/A03_2021-Injection/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A03_2021-Injection/#_2","text":"\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u062a\u062d\u062a\u0644 \u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u062d\u064a\u062b \u0623\u0646 94\u066a \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0641\u062d\u0635\u0647\u0627 \u0645\u0647\u062f\u0651\u062f\u0629 \u0628\u0635\u0646\u0641 \u0648\u0627\u062d\u062f \u0623\u0648 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0645\u0639 CWE-79\u060c CWE-89\u060c CWE-73","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A03_2021-Injection/#_3","text":"\u064a\u0643\u0648\u0646 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0645\u0639\u0631\u0636 \u0644\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u0647\u0630\u0647 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0639\u0646\u062f\u0645\u0627: \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0645\u0632\u0648\u0651\u062f\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u063a\u064a\u0631 \u0645\u064f\u062a\u062d\u0642\u0651\u0642 \u0645\u0646\u0647\u0627 \u0623\u0648 \u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642\u0629\u060c \u0623\u0648 \u0644\u0645 \u064a\u062a\u0645 \u062a\u0635\u0641\u064a\u062a\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c. \u062a\u0645\u0631\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \u0623\u0648 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u062d\u062f\u0651\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a (Non-Parameterized) \u0628\u0634\u0643\u0644 \u0645\u0628\u0627\u0634\u0631 \u0625\u0644\u0649 \u0645\u062a\u0631\u062c\u0645 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0628\u062f\u0648\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0622\u0644\u064a\u0629 \u0648\u0627\u0639\u064a\u0629 \u062a\u0636\u0645\u0646 \u062a\u0647\u0631\u0628 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0645\u0646 \u0627\u0644\u062a\u0641\u0627\u0639\u0644 \u0645\u0639 \u0645\u062a\u0631\u062c\u0645 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \"Context-aware escaping\". \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0636\u0651\u064e\u0627\u0631\u0629 \u0627\u0644\u062a\u064a \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0648\u0627\u0644\u0628\u062d\u062b \u0639\u0646\u0647\u0627 \u0641\u064a (Object-relational mapping ORM) \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0642\u0648\u0645 \u0628\u062a\u0633\u0631\u064a\u0628 \u0628\u064a\u0627\u0646\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u063a\u064a\u0631 \u0645\u0637\u0644\u0648\u0628\u0629 \u0623\u0648 \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629. \u062a\u0645\u0631\u064a\u0631 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0636\u0651\u064e\u0627\u0631\u0629 \u0628\u0634\u0643\u0644 \u0645\u0628\u0627\u0634\u0631 \u0623\u0648 \u0628\u0634\u0643\u0644 \u0645\u062a\u0633\u0644\u0633\u0644 \u063a\u064a\u0631 \u0645\u0628\u0627\u0634\u0631\u060c \u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0626\u0642\u064a\u0629 \"SQL\" \u0623\u0648 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0647\u064a\u0627\u0643\u0644 \u0648\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0634\u0628\u0648\u0647\u0629 \u0641\u064a \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0627\u0644\u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \"dynamic queries\u201d \u0623\u0648 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0623\u0648 \u0627\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629 \u0645\u0646 \u0623\u0634\u0647\u0631 \u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u062d\u0642\u0646 : \u0627\u0644\u0640 SQL\u060c NoSQL\u060c \u0633\u0637\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0641\u064a \u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u0634\u063a\u064a\u0644\u060c \u062e\u0631\u0627\u0626\u0637 \u0631\u0628\u0637 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a \u0628\u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0639\u0644\u0627\u0626\u0642\u064a\u0629 \"Object-relational mapping\u201d\u060c LDAP\u060c \u0648\u0644\u063a\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0639\u0628\u064a\u0631\u064a\u0629 \"EL\"\u060c \u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u062a\u0646\u0642\u0651\u0644 \u062e\u0644\u0627\u0644 \u0645\u062e\u0637\u0637\u0627\u062a \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a\"OGNL\". \u0645\u0628\u062f\u0623 \"\u0627\u0644\u062d\u0642\u0646\" \u0645\u064f\u062a\u0637\u0627\u0628\u0642 \u0641\u064a \u062c\u0645\u064a\u0639 \u0644\u063a\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0648\u0641\u064a \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0641\u0633\u0651\u0631\u0627\u062a\u060c \u0645\u0631\u0627\u062c\u0639\u0629 \u0645\u0635\u062f\u0631 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0647\u064a \u0623\u0641\u0636\u0644 \u0637\u0631\u064a\u0642\u0629 \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0639\u064f\u0631\u0636\u0629 \u0644\u0644\u0625\u0635\u0627\u0628\u0629 \u0628\u062b\u063a\u0631\u0629 \u0627\u0644\u062d\u0642\u0646. \u064a\u0648\u0635\u0651\u064e\u0649 \u0628\u0634\u062f\u0651\u0629 \u0628\u0627\u0644\u0641\u062d\u0635 \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a \u0644\u0643\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u062a\u0631\u0648\u0633\u064a\u0627\u062a \u0635\u0641\u062d\u0627\u062a \u0627\u0644\u0648\u064a\u0628\u060c \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u062a\u0634\u0639\u0628\u064a\u0651\u0629 \"URL\"\u060c \u0648\u0645\u0644\u0641\u0627\u062a \u062a\u0639\u0631\u064a\u0641 \u0627\u0644\u0627\u0631\u062a\u0628\u0627\u0637 \"Cookies\"\u060c \u0648 JSON\u0648 \u0627\u0644\u0640 SOAP \u0648\u0645\u062f\u062e\u0644\u0627\u062a \u0645\u0639\u0637\u064a\u0627\u062a \u0627\u0644\u0640 XML. \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0628\u0625\u0645\u0643\u0627\u0646\u0647\u0627 \u0625\u0636\u0627\u0641\u0629 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0641\u062d\u0635 \u062b\u0627\u0628\u062a\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\"SAST\" \u0648\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0641\u062d\u0635 \u0627\u0644\u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \"DAST\"\u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0641\u064a \u0645\u0633\u0627\u0631\u0627\u062a CI/CD\u060c \u0644\u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0639\u064a\u0648\u0628 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0645\u0646 \u0642\u0628\u0644 \u0639\u0645\u0644\u064a\u0629 \u0637\u0631\u062d \u0627\u0644\u0645\u0646\u062a\u062c \u0644\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645.","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A03_2021-Injection/#_4","text":"\u0644\u062a\u0641\u0627\u062f\u064a \u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u064a\u062c\u0628 \u0627\u0644\u0641\u0635\u0644 \u0648\u0627\u0644\u062a\u0641\u0651\u0631\u064a\u0642 \u0628\u064a\u0646 \u0643\u0644 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0648\u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a. \u064f\u0641\u0636\u0651\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a (API) \u0622\u0645\u0646\u0629\u060c \u0648\u0630\u0644\u0643 \u0644\u062a\u0641\u0627\u062f\u064a \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0641\u0633\u0651\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0643\u064f\u0644\u0651\u064a\u064b\u0627\u060c \u0648 \u062a\u0648\u0641\u064a\u0631 \u0648\u0627\u062c\u0647\u0629 \u0625\u062f\u062e\u0627\u0644 \u0630\u0627\u062a \u0645\u0639\u0627\u0645\u0644\u0627\u062a \" Parametrized Interface \" \u0623\u0648 \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0625\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0627\u0626\u0646\u0627\u062a \u0627\u0644\u0640 \"Relational Mapping Tools (ORMs)\". \u0645\u0644\u0627\u062d\u0638\u0629: \u062d\u062a\u0649 \u0641\u064a \u062d\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a\" Parameterized\u201d \u0627\u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629 \u0642\u062f \u0644\u0627 \u062a\u0632\u0627\u0644 \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u064f\u0639\u0631\u0651\u0636\u0629 \u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u0640 PL/SQL \u0623\u0648 T-SQL \u0642\u0627\u0628\u0644\u0629 \u0644\u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0633\u0644\u0633\u0644\u0629 \"\u0627\u0644\u063a\u064a\u0631 \u0645\u0628\u0627\u0634\u0631\u0629 \" \u0623\u0648 \u062a\u0646\u0641\u064a\u0630 \u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629 \u0636\u0627\u0631\u0651\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 EXECUTE IMMEDIATE \u0623\u0648 exec (). \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0625\u064a\u062c\u0627\u0628\u064a\u0629 \u0648 \u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628 \"\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0633\u0645\u0627\u062d/\u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0628\u064a\u0636\u0627\u0621\" \u0645\u0646 \u0637\u0631\u0641 \u0627\u0644\u062e\u0627\u062f\u0645. \u0644\u0643\u0646 \u0647\u0630\u0647 \u0644\u0627 \u062a\u0639\u062a\u0628\u0631 \u062d\u0645\u0627\u064a\u0629 \u0645\u062a\u0643\u0627\u0645\u0644\u0629 \u062d\u064a\u062b \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u062a\u062a\u0637\u0651\u0644\u0628 \u0631\u0645\u0648\u0632 \u062e\u0627\u0635\u0629 \"Special Characters\" \u0645\u062b\u0644 \u062d\u0642\u0644 \u0627\u0644\u0646\u0635 (TextArea) \u0623\u0648 \u0648\u0627\u062c\u0647\u0627\u062a \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0628\u0631\u0627\u0645\u062c (APIs) \u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0647\u0648\u0627\u062a\u0641. \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \u0645\u062a\u0628\u0642\u064a\u0629\u060c \u0642\u0645 \u0628\u062a\u0635\u0641\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0645\u0646 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u062e\u0627\u0635\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0635\u064a\u063a\u0629 \u0628\u0631\u0645\u062c\u064a\u0629 \"Syntax \" \u0644\u062a\u0635\u0641\u064a\u0629 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u0645\u062d\u062f\u062f\u0629 \u0625\u0644\u0649 \u0645\u0641\u0633\u0651\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631. \u0645\u0644\u0627\u062d\u0638\u0629: \u0647\u064a\u0643\u0644\u0629 SQL \u0645\u062b\u0644 \u0623\u0633\u0645\u0627\u0621 \u0627\u0644\u062c\u062f\u0627\u0648\u0644 \u0623\u0648 \u0627\u0644\u0623\u0639\u0645\u062f\u0629 \u0648\u063a\u064a\u0631\u0647\u0627\u060c \u0644\u0627 \u064a\u0645\u0643\u0646 \u0625\u062c\u0631\u0627\u0621 \u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u062a\u0635\u0641\u064a\u0629 \u0639\u0644\u064a\u0647\u0627\u060c \u0644\u0630\u0644\u0643 \u064a\u062c\u0628 \u0627\u0644\u062d\u0630\u0631 \u0645\u0646 \u0647\u064a\u0627\u0643\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0642\u0627\u062f\u0645\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u062d\u064a\u062b \u0623\u0646\u0647\u0627 \u062a\u0639\u062a\u0628\u0631 \u062e\u0637\u0631\u0629. \u0648\u0647\u0630\u0627 \u062e\u0637\u0623 \u0634\u0627\u0626\u0639 \u0639\u0646\u062f \u0643\u062a\u0627\u0628\u0629-\u062a\u0642\u0627\u0631\u064a\u0631 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a. \u0636\u0639 \u062d\u062f\u0648\u062f\u0627 \u0648 \u0623\u0648 \u0636\u0648\u0627\u0628\u0637 \u062a\u062d\u0643\u0651\u0645 \u0623\u062e\u0631\u0649 \u0639\u0646\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u062f\u0627\u062e\u0644 SQL\u060c \u0644\u062a\u062c\u0646\u0651\u0628 \u0643\u0634\u0641 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0641\u064a \u062d\u0627\u0644 \u0648\u062c\u0648\u062f \u0647\u062c\u0645\u0627\u062a \u062d\u0642\u0646 \u0627\u0644\u0640 SQL","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A03_2021-Injection/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0628\u0631\u0646\u0627\u0645\u062c \u064a\u0633\u062a\u062e\u062f\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u063a\u064a\u0631 \u0645\u0648\u062b\u0642\u0629 \u0641\u064a \u0628\u0646\u0627\u0621 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644SQL \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u064a\u0639\u0631\u0636\u0647\u0627 \u0644\u0644\u062d\u0642\u0646: String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u0627\u0644\u062b\u0642\u0629 \u0627\u0644\u0639\u0645\u064a\u0627\u0621 \u0644\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0641\u064a \u0625\u0637\u0627\u0631 \u0627\u0644\u0639\u0645\u0644 (Framework) \u0648\u0642\u062f \u062a\u0624\u062f\u064a \u062a\u0644\u0643 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0625\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0645\u062b\u0644 Hibernate Query Language (HQL): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); \u0641\u064a \u0643\u0644\u062a\u0627 \u0627\u0644\u062d\u0627\u0644\u062a\u064a\u0646 \u0627\u0644\u0633\u0627\u0628\u0642\u062a\u064a\u0646\u060c \u0627\u0644\u0645\u064f\u062e\u062a\u0631\u0642 \u0642\u0627\u0645 \u0628\u062a\u0639\u062f\u064a\u0644 \u0642\u064a\u0645\u0629 \u0645\u062a\u063a\u064a\u0651\u0631 \u0627\u0644\u0640 id \u0641\u064a \u0627\u0644\u0645\u062a\u0635\u0641\u062d \u0644\u0625\u0631\u0633\u0627\u0644 \u2018 or \u20181\u2019=\u20191. \u0645\u062b\u0644\u0627\u064b: http://example.com/app/accountView?id=' or '1'='1 \u0648\u0647\u0630\u0627 \u064a\u0646\u062a\u062c \u062a\u063a\u064a\u064a\u0631 \u0641\u064a \u0645\u0639\u0646\u0649 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0645\u0646 \u062c\u062f\u0648\u0644 \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a. \u0648\u0642\u062f \u064a\u0633\u062a\u063a\u0644\u0651\u0647\u0627 \u0627\u0644\u0645\u064f\u062e\u062a\u0631\u0642 \u0628\u0634\u0643\u0644 \u0622\u062e\u0631 \u0644\u062a\u0639\u062f\u064a\u0644 \u0623\u0648 \u062d\u0630\u0641 \u0623\u0648 \u062d\u062a\u0649 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629.","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A03_2021-Injection/#_6","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A03_2021-Injection/#cwes","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A04_2021-Insecure_Design/","text":"A04:2021 \u2013 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 40 24.19% 3.00% 77.25% 42.51% 6.46 6.78 262,407 2,691 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u0647\u0648 \u062a\u0635\u0646\u064a\u0641 \u062c\u062f\u064a\u062f \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629 \u0644\u0639\u0627\u0645 2021 \u0648\u0627\u0644\u0630\u064a \u064a\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0639\u064a\u0648\u0628 \u0648\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u062a\u0635\u0645\u064a\u0645\u060c \u0645\u0645\u0627 \u064a\u062f\u0639\u0648 \u0625\u0644\u0649 \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a\u060c \u0648\u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0648\u0628\u0646\u064a\u0629 \u062a\u062d\u062a\u064a\u0629 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0623\u0641\u0636\u0644 \u0627\u0644\u0627\u0645\u062a\u062b\u0627\u0644\u0627\u062a. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0625\u0637\u0627\u0631 CWE \u062a\u0636\u0645\u0646 \u0627\u0644\u0640 CWEs \u0627\u0644\u062a\u0627\u0644\u064a\u0629: CWE-209\u060c CWE-256\u060c CWE-501\u060c CWE-522. \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u062a\u0635\u0646\u064a\u0641 \u0648\u0627\u0633\u0639 \u064a\u0634\u0645\u0644 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0645\u062e\u062a\u0644\u0641\u0629\u060c \u0648\u064a\u064f\u0639\u0631\u0641 \u0639\u0644\u0649 \u0623\u0646\u0647 \" \u062a\u0635\u0645\u064a\u0645 \u0630\u0648 \u0639\u0646\u0635\u0631 \u062a\u062d\u0643\u0645 \" Control \u201c\u0645\u0641\u0642\u0648\u062f \u0623\u0648 \u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644\u060c \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0647\u0648 \u0627\u0644\u0645\u0643\u0627\u0646 \u0627\u0644\u0630\u064a \u064a\u0643\u0648\u0646 \u0641\u064a\u0647 \u0639\u0646\u0635\u0631 \u0627\u0644\u062a\u062d\u0643\u0645 \u063a\u0627\u0626\u0628\u064b\u0627\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0644\u0646\u0641\u0631\u0636 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0634\u0641\u0651\u0631\u0629 \u0645\u0635\u062f\u0631\u064a\u0629 \u064a\u062c\u0628 \u0623\u0646 \u062a\u064f\u0631\u0627\u0639\u064a \u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0648\u0644\u0643\u0646 \u0644\u0627 \u062a\u0648\u062c\u062f \u0637\u0631\u064a\u0642\u0629 \u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u0634\u0651\u0641\u064a\u0631. \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0648\u0627\u0644\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644 \u0647\u0648: \u0627\u0644\u0645\u0643\u0627\u0646 \u062d\u064a\u0646\u0645\u0627 \u064a\u0645\u0643\u0646 \u0625\u062f\u0631\u0627\u0643 \u0648\u062c\u0648\u062f \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u060c \u0644\u0643\u0646 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u0645\u0646\u0637\u0642\u064a \u0627\u0644\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644 \u0645\u0646 \u0641\u0636\u0627\u0621 \u0627\u0644\u0639\u0645\u0644 (\u0627\u0644\u0623\u0639\u0645\u0627\u0644) \u064a\u0645\u0646\u0639 \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0625\u062c\u0631\u0627\u0621. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u0644\u0646\u0641\u0631\u0636 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0641\u0636\u0627\u0621 \u0639\u0645\u0644 \u064a\u062c\u0628 \u0623\u0646 \u064a\u0642\u0648\u0645 \u0628\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0625\u0639\u0641\u0627\u0621 \u0627\u0644\u0636\u0631\u064a\u0628\u064a \u0644\u0644\u062c\u0627\u0626\u062d\u0629 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0641\u0626\u0627\u062a \u0627\u0644\u062f\u062e\u0644 \u0644\u0643\u0646\u0647 \u0644\u0627 \u064a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0641\u064a\u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u062f\u062e\u0644\u0629 \u0645\u0648\u0642\u0639\u0629 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d \u0623\u0648 \u0644\u0627\u060c \u0645\u0645\u0627 \u0642\u062f \u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u0641\u0627\u0626\u062f\u0629 \u0623\u0643\u062b\u0631 \u0645\u0645\u0627 \u064a\u0646\u0628\u063a\u064a . \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u062b\u0642\u0627\u0641\u0629 \u0648\u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u062a\u0642\u0648\u0645 \u0628\u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0628\u0627\u0633\u062a\u0645\u0631\u0627\u0631 \u0648\u062a\u0636\u0645\u0646 \u0623\u0646 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0645\u0635\u0645\u0651\u0645\u0629 \u0628\u0634\u0643\u0644 \u0642\u0648\u064a \u0648\u0645\u062e\u062a\u0628\u0631\u0629 \u0636\u062f \u0637\u0631\u0642 \u0627\u0644\u0647\u062c\u0648\u0645 \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629. \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u062a\u0637\u0648\u064a\u0631 \u0622\u0645\u0646\u0629\u060c \u0648\u0627\u0644\u0628\u0639\u0636 \u0645\u0646 \u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0623\u0648 \u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0645\u062c\u0647\u0632\u0629 \u0645\u064f\u0633\u0628\u0642\u064b\u0627 \u0623\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648\u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u062a\u0637\u0648\u064a\u0631 \u0622\u0645\u0646\u0629 \u0645\u0639 \u0627\u0644\u0627\u0633\u062a\u0639\u0627\u0646\u0629 \u0628\u0623\u062e\u0635\u0627\u0626\u064a \u0623\u0645\u0646 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u062a\u0642\u064a\u064a\u0645 \u0648\u062a\u0635\u0645\u064a\u0645 \u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0623\u0645\u0627\u0646 \u0648\u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629. \u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0643\u062a\u0628\u0629 \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0648\u0645\u0643\u0648\u0646\u0627\u062a \u0645\u064f\u0633\u0628\u0642\u0629 \u0648\u062c\u0627\u0647\u0632\u0629 \u0644\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645. \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \"\u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629\" \u0627\u0644\u062d\u0633\u0627\u0633\u0629\u060c \u0648\u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644\u060c \u0648\u0627\u0644\u062a\u0633\u0644\u0633\u0644 \u0627\u0644\u0645\u0646\u0637\u0642\u064a \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u060c \u0648\u0627\u0644\u0645\u0633\u0627\u0631\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642. \u0648\u062d\u062f\u0629 \u0644\u0644\u0643\u062a\u0627\u0628\u0629 \u0648\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0644\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0623\u0646 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0633\u0627\u0631\u0627\u062a \u0627\u0644\u062d\u0631\u062c\u0629 \u0645\u0642\u0627\u0648\u0645\u0629 \u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u062a\u0647\u062f\u064a\u062f \u0627\u0644\u0645\u062a\u0648\u0642\u0651\u0639. \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0642\u062f \u064a\u062a\u0636\u0645\u0651\u0646 \u0645\u0633\u0627\u0631 \u0639\u0645\u0644\u064a\u0629 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0639\u0646\u0627\u0635\u0631 \u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0644\u0645\u0635\u062f\u0627\u0642\u064a\u0629\" \u0623\u0633\u0626\u0644\u0629 \u0648\u0625\u062c\u0627\u0628\u0627\u062a\"\u060c \u0627\u0644\u0630\u064a \u064a\u062d\u0638\u0631\u0647 \u0625\u0637\u0627\u0631 NIST 800-63b \u0648OWASP ASVS \u0648OWASP Top 10\u060c \u0641\u0644\u0627 \u064a\u0645\u0643\u0646 \u0627\u0644\u0648\u062b\u0648\u0642 \u0641\u064a \u0627\u0644\u0623\u0633\u0626\u0644\u0629 \u0648\u0627\u0644\u0625\u062c\u0627\u0628\u0627\u062a \u0643\u0623\u062f\u0644\u0651\u0629 \u0639\u0644\u0649 \u0635\u062d\u0629 \u0647\u0648\u064a\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u062d\u064a\u062b \u064a\u0645\u0643\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 \u0634\u062e\u0635 \u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0625\u062c\u0627\u0628\u0627\u062a\u060c \u0648\u0647\u0630\u0627 \u0647\u0648 \u0633\u0628\u0628 \u062d\u0638\u0631\u0647. \u064a\u062c\u0628 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u062a\u0644\u0643 \u0648\u0627\u0633\u062a\u0628\u062f\u0627\u0644\u0647\u0627 \u0628\u062a\u0635\u0645\u064a\u0645 \u0623\u0643\u062b\u0631 \u0623\u0645\u0627\u0646\u064b\u0627. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u062a\u0642\u0648\u0645 \u062f\u0648\u0631 \u0633\u064a\u0646\u0645\u0627 \u0628\u0639\u0645\u0644 \u062e\u0635\u0648\u0645\u0627\u062a \u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062d\u062c\u0632 \u0627\u0644\u062c\u0645\u0627\u0639\u064a \u0644\u0640\u0661\u0665 \u0634\u062e\u0635 \u0643\u062d\u062f \u0623\u0642\u0635\u0649 \u0642\u0628\u0644 \u0627\u0644\u062f\u0641\u0639. \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u0627\u0631 \u0642\u062f \u064a\u064f\u0634\u0643\u0651\u0644 \u062e\u0637\u0631\u064b\u0627 \u0648\u064a\u0633\u0645\u062d \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u062e\u062a\u0628\u0627\u0631 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0628\u0625\u0645\u0643\u0627\u0646\u0647 \u062d\u062c\u0632 \u0666\u0660\u0660 \u0645\u0642\u0639\u062f \u062f\u0641\u0639\u0629 \u0648\u0627\u062d\u062f\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0637\u0644\u0628\u0627\u062a \u0642\u0644\u064a\u0644\u0629\u060c \u0645\u0645\u0627 \u064a\u062a\u0633\u0628\u0651\u0628 \u0641\u064a \u062e\u0633\u0627\u0631\u0629 \u0647\u0627\u0626\u0644\u0629 \u0644\u0644\u062f\u062e\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0644\u0627 \u062a\u062a\u0645\u062a\u0651\u0639 \u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u062a\u062c\u0627\u0631\u0629 \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a\u0629 \u0645\u0646 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0636\u062f \u0627\u0644\u0631\u0648\u0628\u0648\u062a\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u064f\u062f\u064a\u0631\u0647\u0627 \u0645\u0633\u062a\u062b\u0645\u0631\u0648\u0646 \u064a\u0642\u0648\u0645\u0648\u0646 \u0628\u0634\u0631\u0627\u0621 \u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0631\u0633\u0648\u0645\u064a\u0629 \u0627\u0644\u0645\u0637\u0648\u0651\u0631\u0629 \u0644\u0625\u0639\u0627\u062f\u0629 \u0628\u064a\u0639\u0647\u0627 \u0644\u0627\u062d\u0642\u064b\u0627 \u0641\u064a \u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0645\u0632\u0627\u062f\u0627\u062a \u0628\u0623\u0633\u0639\u0627\u0631 \u0623\u0639\u0644\u0649. \u0647\u0630\u0627 \u064a\u0636\u0639 \u0635\u0627\u0646\u0639\u064a\u0651 \u0643\u0631\u0648\u062a \u0627\u0644\u0641\u064a\u062f\u064a\u0648 \u0648\u0643\u0630\u0644\u0643 \u0645\u062a\u0627\u062c\u0631 \u0627\u0644\u0628\u064a\u0639 \u0628\u0627\u0644\u062a\u062c\u0632\u0626\u0629 \u0641\u064a \u0645\u0648\u0642\u0641 \u062d\u0631\u062c\u060c \u0627\u0644\u062a\u0635\u0627\u0645\u064a\u0645 \u0627\u0644\u064a\u0642\u0638\u0629 \u0636\u062f \u0627\u0644\u0631\u0648\u0628\u0648\u062a\u0627\u062a \u0648\u0625\u0636\u0627\u0641\u0629 \u0642\u0648\u0627\u0639\u062f \u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0646\u0637\u0627\u0642 \u0627\u0644\u0645\u0639\u062a\u0645\u062f\u0629 \u0639\u0644\u0649 \u0627\u0644\u0645\u0646\u0637\u0642 \" \u0645\u062b\u0644 \u0631\u0635\u062f \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0634\u0631\u0627\u0621 \u0627\u0644\u062a\u064a \u062a\u062a\u0645 \u0641\u064a \u063a\u0636\u0648\u0646 \u062b\u0648\u0627\u0646\u064d \u0645\u0639\u062f\u0648\u062f\u0629 \"\u0642\u062f \u062a\u0631\u0635\u062f \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0634\u0631\u0627\u0621 \u0627\u0644\u063a\u064a\u0631 \u0637\u0628\u064a\u0639\u064a\u0629 \u0648\u062a\u0642\u0648\u0645 \u0628\u0631\u0641\u0636\u0647\u0627. \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"A04 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646"},{"location":"ar/A04_2021-Insecure_Design/#a042021","text":"","title":"A04:2021 \u2013 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646"},{"location":"ar/A04_2021-Insecure_Design/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 40 24.19% 3.00% 77.25% 42.51% 6.46 6.78 262,407 2,691","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A04_2021-Insecure_Design/#_2","text":"\u0647\u0648 \u062a\u0635\u0646\u064a\u0641 \u062c\u062f\u064a\u062f \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u062a\u0647 \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u0646\u0633\u062e\u0629 \u0644\u0639\u0627\u0645 2021 \u0648\u0627\u0644\u0630\u064a \u064a\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0639\u064a\u0648\u0628 \u0648\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u062a\u0635\u0645\u064a\u0645\u060c \u0645\u0645\u0627 \u064a\u062f\u0639\u0648 \u0625\u0644\u0649 \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a\u060c \u0648\u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0648\u0628\u0646\u064a\u0629 \u062a\u062d\u062a\u064a\u0629 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0623\u0641\u0636\u0644 \u0627\u0644\u0627\u0645\u062a\u062b\u0627\u0644\u0627\u062a. \u0627\u0644\u062c\u062f\u064a\u0631 \u0628\u0627\u0644\u0630\u0643\u0631 \u0623\u0646 \u0625\u0637\u0627\u0631 CWE \u062a\u0636\u0645\u0646 \u0627\u0644\u0640 CWEs \u0627\u0644\u062a\u0627\u0644\u064a\u0629: CWE-209\u060c CWE-256\u060c CWE-501\u060c CWE-522.","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A04_2021-Insecure_Design/#_3","text":"\u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u062a\u0635\u0646\u064a\u0641 \u0648\u0627\u0633\u0639 \u064a\u0634\u0645\u0644 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 \u0627\u0644\u0645\u062e\u062a\u0644\u0641\u0629\u060c \u0648\u064a\u064f\u0639\u0631\u0641 \u0639\u0644\u0649 \u0623\u0646\u0647 \" \u062a\u0635\u0645\u064a\u0645 \u0630\u0648 \u0639\u0646\u0635\u0631 \u062a\u062d\u0643\u0645 \" Control \u201c\u0645\u0641\u0642\u0648\u062f \u0623\u0648 \u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644\u060c \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0647\u0648 \u0627\u0644\u0645\u0643\u0627\u0646 \u0627\u0644\u0630\u064a \u064a\u0643\u0648\u0646 \u0641\u064a\u0647 \u0639\u0646\u0635\u0631 \u0627\u0644\u062a\u062d\u0643\u0645 \u063a\u0627\u0626\u0628\u064b\u0627\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0644\u0646\u0641\u0631\u0636 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0634\u0641\u0651\u0631\u0629 \u0645\u0635\u062f\u0631\u064a\u0629 \u064a\u062c\u0628 \u0623\u0646 \u062a\u064f\u0631\u0627\u0639\u064a \u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0648\u0644\u0643\u0646 \u0644\u0627 \u062a\u0648\u062c\u062f \u0637\u0631\u064a\u0642\u0629 \u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u0634\u0651\u0641\u064a\u0631. \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0648\u0627\u0644\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644 \u0647\u0648: \u0627\u0644\u0645\u0643\u0627\u0646 \u062d\u064a\u0646\u0645\u0627 \u064a\u0645\u0643\u0646 \u0625\u062f\u0631\u0627\u0643 \u0648\u062c\u0648\u062f \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u060c \u0644\u0643\u0646 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u0645\u0646\u0637\u0642\u064a \u0627\u0644\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644 \u0645\u0646 \u0641\u0636\u0627\u0621 \u0627\u0644\u0639\u0645\u0644 (\u0627\u0644\u0623\u0639\u0645\u0627\u0644) \u064a\u0645\u0646\u0639 \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0625\u062c\u0631\u0627\u0621. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u0644\u0646\u0641\u0631\u0636 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0641\u0636\u0627\u0621 \u0639\u0645\u0644 \u064a\u062c\u0628 \u0623\u0646 \u064a\u0642\u0648\u0645 \u0628\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0625\u0639\u0641\u0627\u0621 \u0627\u0644\u0636\u0631\u064a\u0628\u064a \u0644\u0644\u062c\u0627\u0626\u062d\u0629 \u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0641\u0626\u0627\u062a \u0627\u0644\u062f\u062e\u0644 \u0644\u0643\u0646\u0647 \u0644\u0627 \u064a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0641\u064a\u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u062f\u062e\u0644\u0629 \u0645\u0648\u0642\u0639\u0629 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d \u0623\u0648 \u0644\u0627\u060c \u0645\u0645\u0627 \u0642\u062f \u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u0641\u0627\u0626\u062f\u0629 \u0623\u0643\u062b\u0631 \u0645\u0645\u0627 \u064a\u0646\u0628\u063a\u064a . \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u062b\u0642\u0627\u0641\u0629 \u0648\u0645\u0646\u0647\u062c\u064a\u0651\u0629 \u062a\u0642\u0648\u0645 \u0628\u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0628\u0627\u0633\u062a\u0645\u0631\u0627\u0631 \u0648\u062a\u0636\u0645\u0646 \u0623\u0646 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0645\u0635\u0645\u0651\u0645\u0629 \u0628\u0634\u0643\u0644 \u0642\u0648\u064a \u0648\u0645\u062e\u062a\u0628\u0631\u0629 \u0636\u062f \u0637\u0631\u0642 \u0627\u0644\u0647\u062c\u0648\u0645 \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629. \u064a\u062a\u0637\u0644\u0651\u0628 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u062a\u0637\u0648\u064a\u0631 \u0622\u0645\u0646\u0629\u060c \u0648\u0627\u0644\u0628\u0639\u0636 \u0645\u0646 \u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646\u0629 \u0623\u0648 \u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0645\u062c\u0647\u0632\u0629 \u0645\u064f\u0633\u0628\u0642\u064b\u0627 \u0623\u0648 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0648\u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a.","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A04_2021-Insecure_Design/#_4","text":"\u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062f\u0648\u0631\u0629 \u062d\u064a\u0627\u0629 \u062a\u0637\u0648\u064a\u0631 \u0622\u0645\u0646\u0629 \u0645\u0639 \u0627\u0644\u0627\u0633\u062a\u0639\u0627\u0646\u0629 \u0628\u0623\u062e\u0635\u0627\u0626\u064a \u0623\u0645\u0646 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u062a\u0642\u064a\u064a\u0645 \u0648\u062a\u0635\u0645\u064a\u0645 \u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0623\u0645\u0627\u0646 \u0648\u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629. \u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0643\u062a\u0628\u0629 \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0622\u0645\u0646 \u0648\u0645\u0643\u0648\u0646\u0627\u062a \u0645\u064f\u0633\u0628\u0642\u0629 \u0648\u062c\u0627\u0647\u0632\u0629 \u0644\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645. \u0646\u0645\u0630\u062c\u0629 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \"\u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629\" \u0627\u0644\u062d\u0633\u0627\u0633\u0629\u060c \u0648\u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644\u060c \u0648\u0627\u0644\u062a\u0633\u0644\u0633\u0644 \u0627\u0644\u0645\u0646\u0637\u0642\u064a \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u060c \u0648\u0627\u0644\u0645\u0633\u0627\u0631\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642. \u0648\u062d\u062f\u0629 \u0644\u0644\u0643\u062a\u0627\u0628\u0629 \u0648\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0644\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0623\u0646 \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0633\u0627\u0631\u0627\u062a \u0627\u0644\u062d\u0631\u062c\u0629 \u0645\u0642\u0627\u0648\u0645\u0629 \u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u062a\u0647\u062f\u064a\u062f \u0627\u0644\u0645\u062a\u0648\u0642\u0651\u0639.","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A04_2021-Insecure_Design/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0642\u062f \u064a\u062a\u0636\u0645\u0651\u0646 \u0645\u0633\u0627\u0631 \u0639\u0645\u0644\u064a\u0629 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0639\u0646\u0627\u0635\u0631 \u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0644\u0645\u0635\u062f\u0627\u0642\u064a\u0629\" \u0623\u0633\u0626\u0644\u0629 \u0648\u0625\u062c\u0627\u0628\u0627\u062a\"\u060c \u0627\u0644\u0630\u064a \u064a\u062d\u0638\u0631\u0647 \u0625\u0637\u0627\u0631 NIST 800-63b \u0648OWASP ASVS \u0648OWASP Top 10\u060c \u0641\u0644\u0627 \u064a\u0645\u0643\u0646 \u0627\u0644\u0648\u062b\u0648\u0642 \u0641\u064a \u0627\u0644\u0623\u0633\u0626\u0644\u0629 \u0648\u0627\u0644\u0625\u062c\u0627\u0628\u0627\u062a \u0643\u0623\u062f\u0644\u0651\u0629 \u0639\u0644\u0649 \u0635\u062d\u0629 \u0647\u0648\u064a\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u062d\u064a\u062b \u064a\u0645\u0643\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 \u0634\u062e\u0635 \u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0625\u062c\u0627\u0628\u0627\u062a\u060c \u0648\u0647\u0630\u0627 \u0647\u0648 \u0633\u0628\u0628 \u062d\u0638\u0631\u0647. \u064a\u062c\u0628 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u062a\u0644\u0643 \u0648\u0627\u0633\u062a\u0628\u062f\u0627\u0644\u0647\u0627 \u0628\u062a\u0635\u0645\u064a\u0645 \u0623\u0643\u062b\u0631 \u0623\u0645\u0627\u0646\u064b\u0627. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u062a\u0642\u0648\u0645 \u062f\u0648\u0631 \u0633\u064a\u0646\u0645\u0627 \u0628\u0639\u0645\u0644 \u062e\u0635\u0648\u0645\u0627\u062a \u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062d\u062c\u0632 \u0627\u0644\u062c\u0645\u0627\u0639\u064a \u0644\u0640\u0661\u0665 \u0634\u062e\u0635 \u0643\u062d\u062f \u0623\u0642\u0635\u0649 \u0642\u0628\u0644 \u0627\u0644\u062f\u0641\u0639. \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u0627\u0631 \u0642\u062f \u064a\u064f\u0634\u0643\u0651\u0644 \u062e\u0637\u0631\u064b\u0627 \u0648\u064a\u0633\u0645\u062d \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u062e\u062a\u0628\u0627\u0631 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0628\u0625\u0645\u0643\u0627\u0646\u0647 \u062d\u062c\u0632 \u0666\u0660\u0660 \u0645\u0642\u0639\u062f \u062f\u0641\u0639\u0629 \u0648\u0627\u062d\u062f\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0637\u0644\u0628\u0627\u062a \u0642\u0644\u064a\u0644\u0629\u060c \u0645\u0645\u0627 \u064a\u062a\u0633\u0628\u0651\u0628 \u0641\u064a \u062e\u0633\u0627\u0631\u0629 \u0647\u0627\u0626\u0644\u0629 \u0644\u0644\u062f\u062e\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0644\u0627 \u062a\u062a\u0645\u062a\u0651\u0639 \u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u062a\u062c\u0627\u0631\u0629 \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a\u0629 \u0645\u0646 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0636\u062f \u0627\u0644\u0631\u0648\u0628\u0648\u062a\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u064f\u062f\u064a\u0631\u0647\u0627 \u0645\u0633\u062a\u062b\u0645\u0631\u0648\u0646 \u064a\u0642\u0648\u0645\u0648\u0646 \u0628\u0634\u0631\u0627\u0621 \u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0631\u0633\u0648\u0645\u064a\u0629 \u0627\u0644\u0645\u0637\u0648\u0651\u0631\u0629 \u0644\u0625\u0639\u0627\u062f\u0629 \u0628\u064a\u0639\u0647\u0627 \u0644\u0627\u062d\u0642\u064b\u0627 \u0641\u064a \u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0645\u0632\u0627\u062f\u0627\u062a \u0628\u0623\u0633\u0639\u0627\u0631 \u0623\u0639\u0644\u0649. \u0647\u0630\u0627 \u064a\u0636\u0639 \u0635\u0627\u0646\u0639\u064a\u0651 \u0643\u0631\u0648\u062a \u0627\u0644\u0641\u064a\u062f\u064a\u0648 \u0648\u0643\u0630\u0644\u0643 \u0645\u062a\u0627\u062c\u0631 \u0627\u0644\u0628\u064a\u0639 \u0628\u0627\u0644\u062a\u062c\u0632\u0626\u0629 \u0641\u064a \u0645\u0648\u0642\u0641 \u062d\u0631\u062c\u060c \u0627\u0644\u062a\u0635\u0627\u0645\u064a\u0645 \u0627\u0644\u064a\u0642\u0638\u0629 \u0636\u062f \u0627\u0644\u0631\u0648\u0628\u0648\u062a\u0627\u062a \u0648\u0625\u0636\u0627\u0641\u0629 \u0642\u0648\u0627\u0639\u062f \u062a\u0635\u0645\u064a\u0645 \u0627\u0644\u0646\u0637\u0627\u0642 \u0627\u0644\u0645\u0639\u062a\u0645\u062f\u0629 \u0639\u0644\u0649 \u0627\u0644\u0645\u0646\u0637\u0642 \" \u0645\u062b\u0644 \u0631\u0635\u062f \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0634\u0631\u0627\u0621 \u0627\u0644\u062a\u064a \u062a\u062a\u0645 \u0641\u064a \u063a\u0636\u0648\u0646 \u062b\u0648\u0627\u0646\u064d \u0645\u0639\u062f\u0648\u062f\u0629 \"\u0642\u062f \u062a\u0631\u0635\u062f \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0634\u0631\u0627\u0621 \u0627\u0644\u063a\u064a\u0631 \u0637\u0628\u064a\u0639\u064a\u0629 \u0648\u062a\u0642\u0648\u0645 \u0628\u0631\u0641\u0636\u0647\u0627.","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A04_2021-Insecure_Design/#_6","text":"OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A04_2021-Insecure_Design/#cwes","text":"CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A05_2021-Security_Misconfiguration/","text":"A05:2021 \u2013 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629 \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 20 19.84% 4.51% 89.58% 44.84% 8.12 6.56 208,387 789 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0647\u062f\u064a\u062f \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 2017 \u0627\u0644\u0622\u0646 \u0646\u062c\u062f\u0647 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u062e\u0627\u0645\u0633\u0629\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0639\u0644\u0649 %90 \u0645\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0644\u062a\u0623\u0643\u062f \u0625\u0646 \u0643\u0627\u0646\u062a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0623\u064a\u0651\u0629 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0648\u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0635\u062d\u064a\u062d\u0629\u060c \u0641\u0644\u064a\u0633 \u0645\u0646 \u0627\u0644\u0645\u064f\u0633\u062a\u063a\u0631\u0628 \u0627\u0646\u062a\u0642\u0627\u0644 \u0647\u0630\u0627 \u0627\u0644\u062a\u0647\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0625\u0644\u0649 \u0627\u0644\u062e\u0627\u0645\u0633\u0629. \u0643\u0630\u0644\u0643 \u062a\u0645 \u0636\u0645 \"XML External Entities XXE\" \u0644\u0647\u0630\u0627 \u0627\u0644\u0646\u0648\u0639 \u0645\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0648\u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u062e\u0627\u0637\u0626\u0629. \u062a\u0636\u0645\u0646 \u0627\u0644\u0640 CWEs \u0627\u0644\u062a\u0627\u0644\u064a\u0629 CWE-16 (Configuration), CWE-611 (Improper Restriction of XML External Entity). \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u0645\u0646 \u0627\u0644\u0645\u062d\u062a\u0645\u0644 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0636\u0639\u064a\u0641 \u0627\u0645\u0646\u064a\u0627\u064b \u0625\u0630\u0627 \u0627\u062d\u062a\u0648\u0649 \u0639\u0644\u0649 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u062a\u0627\u0644\u064a\u0629: \u0639\u062f\u0645 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0648\u0627\u0644\u0636\u0628\u0637 \u0627\u0644\u0622\u0645\u0646 \u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0623\u0648 \u0641\u064a \u0623\u064a \u062c\u0632\u0621 \u0645\u0646 \u0623\u062c\u0632\u0627\u0621 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0623\u0648 \u062a\u0643\u0648\u064a\u0646 \u0623\u0630\u0648\u0646\u0627\u062a \u062e\u0627\u0637\u0626\u0629 \u0641\u064a \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629. \u062a\u062b\u0628\u064a\u062a \u0648\u0625\u062a\u0627\u062d\u0629 \u062e\u062f\u0645\u0627\u062a \u0648\u0645\u0650\u064a\u0632\u0627\u062a \u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629 (\u0645\u0646\u0627\u0641\u0630 \u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629\u060c \u0627\u0644\u062e\u062f\u0645\u0627\u062a\u060c \u0627\u0644\u0635\u0641\u062d\u0627\u062a\u060c \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a\u060c \u0648\u0627\u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a). \u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0623\u0648 \u0639\u062f\u0645 \u062a\u063a\u064a\u064a\u0631\u0647\u0627 \u0623\u0648 \u0639\u062f\u0645 \u062a\u063a\u064a\u064a\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0627. \u0643\u0634\u0641 \u0631\u0633\u0627\u0626\u0644 \u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0623\u062e\u0637\u0627\u0621 (Error Handling) \u0639\u0646 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062a\u0628\u0651\u0639 (Stack Traces) \u0623\u0648 \u0639\u0631\u0636 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062e\u0637\u0623 \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062a\u0641\u0635\u064a\u0644\u064a\u0629 \u064a\u0645\u0643\u0646 \u0623\u0646 \u062a\u064f\u0633\u062a\u063a\u0644 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645. \u062a\u0643\u0648\u0646 \u0627\u0644\u0645\u064a\u0632\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0623\u062d\u062f\u062b \u0645\u064f\u0639\u0637\u0651\u0644\u0629 \u0623\u0648 \u0644\u0645 \u064a\u062a\u0645 \u062a\u0643\u0648\u064a\u0646\u0647\u0627 \u0628\u0634\u0643\u0644 \u0622\u0645\u0646 \u0641\u064a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u064a \u062a\u0645\u062a \u062a\u0631\u0642\u064a\u062a\u0647\u0627. \u0639\u062f\u0645 \u062a\u0639\u064a\u064a\u0646 \u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0641\u064a \u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0625\u0637\u0627\u0631 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 (Struts, Spring, ASP.NET) \u0648\u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0648\u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0645\u0627 \u0625\u0644\u0649 \u0630\u0644\u0643 \u0625\u0644\u0649 \u0642\u064a\u0645 \u0622\u0645\u0646\u0629. \u0644\u0627 \u064a\u0631\u0633\u0644 \u0623\u0648 \u064a\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062e\u0627\u062f\u0645 \u0639\u0646\u0627\u0648\u064a\u0646 \"Headers\" \u0639\u0646\u062f \u0646\u0642\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0644\u0644\u0645\u062a\u0635\u0641\u062d \u0623\u0648 \u0639\u0646\u062f \u062a\u0642\u062f\u064a\u0645\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u062a\u0635\u0641\u062d. \u0644\u0645 \u064a\u0639\u062f \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0645\u062f\u0639\u0648\u0645\u064b\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0632\u0648\u0651\u062f\u064a \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0623\u0648 \u0636\u0639\u064a\u0641 \u0623\u0645\u0646\u064a\u064b\u0627 \u0644\u0627\u062d\u062a\u0648\u0627\u0626\u0647 \u0639\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 (\u0627\u0646\u0638\u0631 \u0625\u0644\u0649 - A06:2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b). \u0645\u0646 \u062f\u0648\u0646 \u0627\u0645\u062a\u0644\u0627\u0643 \u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0645\u0641\u0647\u0648\u0645\u0629 \u0648\u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u0643\u0651\u0631\u0627\u0631 \u0644\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0628\u0645\u0627 \u064a\u062a\u0648\u0627\u0641\u0642 \u0645\u0639 \u0627\u0644\u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u0623\u0645\u0646\u064a\u0629\u060c \u062a\u064f\u0635\u0628\u062d \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0641\u064a \u062e\u0637\u0631 \u0639\u0627\u0644\u064a. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u064a\u062c\u0628 \u062a\u0637\u0628\u064a\u0642 \u0622\u0644\u064a\u0629 \u0622\u0645\u0646\u0629 \u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0623\u0648 \u0627\u0644\u0623\u062c\u0647\u0632\u0629\u060c \u062a\u0634\u0645\u0644 \u0639\u0644\u0649: \u062a\u0643\u0631\u0627\u0631 \u0639\u0645\u0644\u064a\u0629 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0622\u0645\u0646\u060c \u0648\u0627\u0644\u0630\u064a \u0633\u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u062a\u0633\u0631\u064a\u0639 \u0648\u062a\u0633\u0647\u064a\u0644 \u0645\u0647\u0645\u0629 \u0625\u0646\u0634\u0627\u0621 \u0628\u064a\u0626\u0629 \u062c\u062f\u064a\u062f\u0629 \u0645\u0643\u0648\u0651\u0646\u0629 \u0628\u0634\u0643\u0644 \u0622\u0645\u0646. \u0643\u0645\u0627 \u064a\u062c\u0628 \u0623\u0646 \u064a\u062a\u0645 \u062a\u0643\u0648\u064a\u0646 \u0628\u064a\u0626\u0627\u062a \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0636\u0645\u0627\u0646 \u062c\u0648\u062f\u0629 \u0648\u0628\u064a\u0626\u0629 \u0627\u0644\u0625\u0646\u062a\u0627\u062c \u0628\u0634\u0643\u0644 \u064a\u062a\u0637\u0627\u0628\u0642 \u0645\u0639 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0644\u0645\u0627\u062a \u0645\u0631\u0648\u0631 \u0645\u062e\u062a\u0644\u0641\u0629 \u0641\u064a \u0643\u0644 \u0628\u064a\u0626\u0629. \u0623\u064a\u0636\u064b\u0627 \u064a\u062c\u0628 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0622\u0644\u064a\u0629 \u0644\u0644\u062a\u0642\u0644\u064a\u0644 \u0645\u0646 \u0627\u0644\u062c\u0647\u062f \u0627\u0644\u0645\u062a\u0637\u0644\u0651\u0628 \u0639\u0646\u062f \u0625\u0639\u062f\u0627\u062f \u0628\u064a\u0626\u0629 \u062c\u062f\u064a\u062f\u0629 \u0648\u0622\u0645\u0646\u0629. \u0627\u0644\u0627\u0643\u062a\u0641\u0627\u0621 \u0628\u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0627\u0644\u0623\u0633\u0627\u0633\u064a \u0645\u0646 \u0627\u0644\u0646\u0638\u0627\u0645 \u0623\u0648 \u0627\u0644\u0645\u0646\u0635\u0651\u0629 \u0628\u062f\u0648\u0646 \u062a\u0641\u0639\u064a\u0644 \u0645\u0650\u064a\u0632\u0627\u062a\u060c \u0623\u0648 \u0645\u0643\u0648\u0646\u0627\u062a\u060c \u0623\u0648 \u0648\u062b\u0627\u0626\u0642\u060c \u0623\u0648 \u0639\u064a\u0651\u0646\u0627\u062a \u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629\u060c \u0645\u0639 \u062d\u0630\u0641 \u0648\u0625\u0628\u0637\u0627\u0644 \u0627\u0644\u0645\u064a\u0632\u0627\u062a \u0648\u0625\u0637\u0627\u0631 \u0627\u0644\u063a\u064a\u0631 \u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0623\u0648 \u0639\u062f\u0645 \u062a\u062b\u0628\u064a\u062a\u0647\u0627. \u0645\u0631\u0627\u062c\u0639\u0629 \u0648\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0645\u0627 \u064a\u062a\u0646\u0627\u0633\u0628 \u0645\u0639 \u0643\u0627\u0641\u0629 \u0645\u0644\u0627\u062d\u0638\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0648\u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0648\u0627\u0644\u0625\u0635\u0644\u0627\u062d\u0627\u062a \u0643\u062c\u0632\u0621 \u0645\u0646 \u0639\u0645\u0644\u064a\u0629 \u0625\u062f\u0627\u0631\u0629 \u062d\u0650\u0632\u0645 \u0627\u0644\u0625\u0635\u0644\u0627\u062d\u0627\u062a \u0648\u0627\u0644\u062a\u0631\u0642\u064a\u0627\u062a. (\u0627\u0646\u0638\u0631 \u0625\u0644\u0649- A06:2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a). \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0645\u0631\u0627\u062c\u0639\u0629 \u0623\u0630\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 (S3 Bucket Permissions). \u062a\u062a\u064a\u062d \u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0642\u0633\u0651\u0645\u0629 \u0641\u0635\u0644\u064b\u0627 \u0641\u0639\u0651\u0627\u0644\u064b\u0627 \u0648\u0622\u0645\u0646\u064b\u0627 \u0628\u064a\u0646 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a\u060c \u0645\u0639 \u0627\u0644\u062a\u062c\u0632\u0626\u0629 \u0641\u064a \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0623\u0645\u0627\u0646 \u0627\u0644\u0633\u062d\u0627\u0628\u0629 (ACLs). \u0625\u0631\u0633\u0627\u0644 \u062a\u0648\u062c\u064a\u0647\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0625\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 Security Headers. \u0623\u062a\u0645\u062a\u0629 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u0622\u0645\u0646\u0629 \u0644\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0641\u0639\u0627\u0644\u064a\u0651\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646\u0627\u062a \u0648\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0641\u064a \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0626\u0627\u062a. \u062a\u0634\u063a\u064a\u0644 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0641\u062d\u0635 \u0644\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0641\u0639\u0627\u0644\u064a\u0651\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646\u0627\u062a \u0648\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0641\u064a \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0626\u0627\u062a \u0644\u0644\u0643\u0634\u0641 \u0639\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629. \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0639\u0646\u062f\u0645\u0627 \u064a\u062d\u062a\u0648\u064a \u0627\u062d\u062f \u0627\u0644\u062e\u0648\u0627\u062f\u0645 \u0639\u0644\u0649 \u062a\u0637\u0628\u064a\u0642 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u063a\u064a\u0631 \u0645\u062d\u062f\u062b \u0648\u0645\u0627 \u064a\u0632\u0627\u0644 \u064a\u064f\u0633\u062a\u062e\u062f\u0645 \u0641\u064a \u0628\u064a\u0626\u0629 \u0627\u0644\u0625\u0646\u062a\u0627\u062c \"Production Server\" \u0647\u0630\u0647 \u0627\u0644\u0639\u064a\u0651\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0642\u062f \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0641\u064a \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062e\u0627\u062f\u0645 \u060c \u0648\u0628\u0627\u0641\u062a\u0631\u0627\u0636 \u0623\u0646 \u0623\u062d\u062f \u0647\u0630\u0647 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0647\u064a \u0648\u062d\u062f\u0629 \u062a\u062d\u0643\u0651\u0645 \u0644\u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0648\u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0627\u0644\u0627\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0648\u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0633\u0631\u064a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u060c \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629 \u0641\u0625\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0633\u0648\u0641 \u064a\u064f\u0633\u062c\u0651\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0633\u0631\u064a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0648\u064a\u062a\u062d\u0643\u0651\u0645 \u0628\u0627\u0644\u062e\u0627\u062f\u0645. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u0639\u0646\u062f\u0645\u0627 \u062a\u0643\u0648\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062f\u0644\u064a\u0644 \"Directory Listing\" \u063a\u064a\u0631 \u0645\u0639\u0637\u0651\u0644\u0629 \u0641\u064a \u0627\u0644\u062e\u0627\u062f\u0645 \u0627\u0644\u062e\u0627\u0635 \u0628\u0643\u060c \u0642\u062f \u064a\u0643\u062a\u0634\u0641 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0623\u0646 \u0628\u0625\u0645\u0643\u0627\u0646\u0647 \u0633\u0631\u062f \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0646\u0629 \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645 \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0628\u0625\u0645\u0643\u0627\u0646\u0647 \u0627\u0644\u0639\u062b\u0648\u0631 \u0648\u062a\u062b\u0628\u064a\u062a \u062c\u0645\u064a\u0639 \u0641\u0626\u0627\u062a \u062c\u0627\u0641\u0627 (Compiled Java Classes) \u0648\u0645\u0646 \u062b\u0645 \u064a\u0642\u0648\u0645 \u0628\u0641\u0643\u0651\u0647\u0627 \u0648\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0639\u0643\u0633\u064a\u0629 \u0644\u0639\u0631\u0636 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629\u060c \u0633\u0648\u0641 \u064a\u062d\u0627\u0648\u0644 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0639\u062f \u0630\u0644\u0643 \u0625\u064a\u062c\u0627\u062f \u062e\u0637\u0623 \u0623\u0645\u0646\u064a \u0644\u0644\u062a\u062d\u0643\u0651\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0639\u0646\u062f\u0645\u0627 \u062a\u0642\u0648\u0645 \u0625\u0639\u062f\u0627\u062f\u0627\u062a \u062e\u0627\u062f\u0645 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0625\u0631\u062c\u0627\u0639 \u0631\u0633\u0627\u0626\u0644 \u062e\u0627\u0637\u0626\u0629 \u062a\u0641\u0635\u064a\u0644\u064a\u0651\u0629\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 Stack Traces \u0625\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u060c \u0648\u0645\u0646 \u0627\u0644\u0645\u064f\u062d\u062a\u0645\u0644 \u0623\u0646 \u064a\u0624\u062f\u064a \u0647\u0630\u0627 \u0625\u0644\u0649 \u0627\u0644\u0643\u0634\u0641 \u0639\u0646 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u0623\u062e\u0631\u0649 \u0623\u0648 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u062b\u0644 \u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629 \u0628\u0623\u0646\u0647\u0627 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #4: \u0623\u0646 \u064a\u0643\u0648\u0646 \u0645\u0642\u062f\u0651\u0645 \u0627\u0644\u062e\u062f\u0645\u0629 \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 \u0644\u062f\u064a\u0647 \u0623\u0630\u0648\u0646\u0627\u062a \u0645\u0634\u0627\u0631\u0643\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0645\u0641\u062a\u0648\u062d\u0629 \u0639\u0644\u0649 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0645\u0646 \u0642\u0650\u0628\u0644 \u0645\u0633\u062a\u062e\u062f\u0645\u064a CSP \u0627\u0644\u0622\u062e\u0631\u064a\u0646\u060c \u064a\u0633\u0645\u062d \u0647\u0630\u0627 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629 \u0641\u064a \u0633\u062d\u0627\u0628\u0629 \u0627\u0644\u062a\u062e\u0632\u064a\u0646. \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"A05 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629"},{"location":"ar/A05_2021-Security_Misconfiguration/#a052021","text":"","title":"A05:2021 \u2013  \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629"},{"location":"ar/A05_2021-Security_Misconfiguration/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 20 19.84% 4.51% 89.58% 44.84% 8.12 6.56 208,387 789","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A05_2021-Security_Misconfiguration/#_2","text":"\u0628\u0639\u062f \u0623\u0646 \u0643\u0627\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0647\u062f\u064a\u062f \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642 \u0644\u0639\u0627\u0645 2017 \u0627\u0644\u0622\u0646 \u0646\u062c\u062f\u0647 \u0641\u064a \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u062e\u0627\u0645\u0633\u0629\u060c \u062d\u064a\u062b \u0623\u0646\u0647 \u062a\u0645 \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631 \u0639\u0644\u0649 %90 \u0645\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0644\u062a\u0623\u0643\u062f \u0625\u0646 \u0643\u0627\u0646\u062a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0623\u064a\u0651\u0629 \u0623\u062e\u0637\u0627\u0621 \u0641\u064a \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0648\u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0635\u062d\u064a\u062d\u0629\u060c \u0641\u0644\u064a\u0633 \u0645\u0646 \u0627\u0644\u0645\u064f\u0633\u062a\u063a\u0631\u0628 \u0627\u0646\u062a\u0642\u0627\u0644 \u0647\u0630\u0627 \u0627\u0644\u062a\u0647\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0633\u0627\u062f\u0633\u0629 \u0625\u0644\u0649 \u0627\u0644\u062e\u0627\u0645\u0633\u0629. \u0643\u0630\u0644\u0643 \u062a\u0645 \u0636\u0645 \"XML External Entities XXE\" \u0644\u0647\u0630\u0627 \u0627\u0644\u0646\u0648\u0639 \u0645\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0648\u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u062e\u0627\u0637\u0626\u0629. \u062a\u0636\u0645\u0646 \u0627\u0644\u0640 CWEs \u0627\u0644\u062a\u0627\u0644\u064a\u0629 CWE-16 (Configuration), CWE-611 (Improper Restriction of XML External Entity).","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A05_2021-Security_Misconfiguration/#_3","text":"\u0645\u0646 \u0627\u0644\u0645\u062d\u062a\u0645\u0644 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0636\u0639\u064a\u0641 \u0627\u0645\u0646\u064a\u0627\u064b \u0625\u0630\u0627 \u0627\u062d\u062a\u0648\u0649 \u0639\u0644\u0649 \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u062a\u0627\u0644\u064a\u0629: \u0639\u062f\u0645 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0648\u0627\u0644\u0636\u0628\u0637 \u0627\u0644\u0622\u0645\u0646 \u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0623\u0648 \u0641\u064a \u0623\u064a \u062c\u0632\u0621 \u0645\u0646 \u0623\u062c\u0632\u0627\u0621 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0623\u0648 \u062a\u0643\u0648\u064a\u0646 \u0623\u0630\u0648\u0646\u0627\u062a \u062e\u0627\u0637\u0626\u0629 \u0641\u064a \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629. \u062a\u062b\u0628\u064a\u062a \u0648\u0625\u062a\u0627\u062d\u0629 \u062e\u062f\u0645\u0627\u062a \u0648\u0645\u0650\u064a\u0632\u0627\u062a \u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629 (\u0645\u0646\u0627\u0641\u0630 \u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629\u060c \u0627\u0644\u062e\u062f\u0645\u0627\u062a\u060c \u0627\u0644\u0635\u0641\u062d\u0627\u062a\u060c \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a\u060c \u0648\u0627\u0644\u0635\u0644\u0627\u062d\u064a\u0627\u062a). \u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0623\u0648 \u0639\u062f\u0645 \u062a\u063a\u064a\u064a\u0631\u0647\u0627 \u0623\u0648 \u0639\u062f\u0645 \u062a\u063a\u064a\u064a\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0627. \u0643\u0634\u0641 \u0631\u0633\u0627\u0626\u0644 \u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0623\u062e\u0637\u0627\u0621 (Error Handling) \u0639\u0646 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062a\u0628\u0651\u0639 (Stack Traces) \u0623\u0648 \u0639\u0631\u0636 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062e\u0637\u0623 \u0627\u0644\u062a\u064a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062a\u0641\u0635\u064a\u0644\u064a\u0629 \u064a\u0645\u0643\u0646 \u0623\u0646 \u062a\u064f\u0633\u062a\u063a\u0644 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645. \u062a\u0643\u0648\u0646 \u0627\u0644\u0645\u064a\u0632\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0623\u062d\u062f\u062b \u0645\u064f\u0639\u0637\u0651\u0644\u0629 \u0623\u0648 \u0644\u0645 \u064a\u062a\u0645 \u062a\u0643\u0648\u064a\u0646\u0647\u0627 \u0628\u0634\u0643\u0644 \u0622\u0645\u0646 \u0641\u064a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u064a \u062a\u0645\u062a \u062a\u0631\u0642\u064a\u062a\u0647\u0627. \u0639\u062f\u0645 \u062a\u0639\u064a\u064a\u0646 \u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0641\u064a \u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0625\u0637\u0627\u0631 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 (Struts, Spring, ASP.NET) \u0648\u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0648\u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0645\u0627 \u0625\u0644\u0649 \u0630\u0644\u0643 \u0625\u0644\u0649 \u0642\u064a\u0645 \u0622\u0645\u0646\u0629. \u0644\u0627 \u064a\u0631\u0633\u0644 \u0623\u0648 \u064a\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062e\u0627\u062f\u0645 \u0639\u0646\u0627\u0648\u064a\u0646 \"Headers\" \u0639\u0646\u062f \u0646\u0642\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0644\u0644\u0645\u062a\u0635\u0641\u062d \u0623\u0648 \u0639\u0646\u062f \u062a\u0642\u062f\u064a\u0645\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u062a\u0635\u0641\u062d. \u0644\u0645 \u064a\u0639\u062f \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0645\u062f\u0639\u0648\u0645\u064b\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0632\u0648\u0651\u062f\u064a \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0623\u0648 \u0636\u0639\u064a\u0641 \u0623\u0645\u0646\u064a\u064b\u0627 \u0644\u0627\u062d\u062a\u0648\u0627\u0626\u0647 \u0639\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 (\u0627\u0646\u0638\u0631 \u0625\u0644\u0649 - A06:2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b). \u0645\u0646 \u062f\u0648\u0646 \u0627\u0645\u062a\u0644\u0627\u0643 \u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0645\u0641\u0647\u0648\u0645\u0629 \u0648\u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u0643\u0651\u0631\u0627\u0631 \u0644\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0628\u0645\u0627 \u064a\u062a\u0648\u0627\u0641\u0642 \u0645\u0639 \u0627\u0644\u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u0623\u0645\u0646\u064a\u0629\u060c \u062a\u064f\u0635\u0628\u062d \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0641\u064a \u062e\u0637\u0631 \u0639\u0627\u0644\u064a.","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A05_2021-Security_Misconfiguration/#_4","text":"\u064a\u062c\u0628 \u062a\u0637\u0628\u064a\u0642 \u0622\u0644\u064a\u0629 \u0622\u0645\u0646\u0629 \u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0623\u0648 \u0627\u0644\u0623\u062c\u0647\u0632\u0629\u060c \u062a\u0634\u0645\u0644 \u0639\u0644\u0649: \u062a\u0643\u0631\u0627\u0631 \u0639\u0645\u0644\u064a\u0629 \u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646 \u0627\u0644\u0622\u0645\u0646\u060c \u0648\u0627\u0644\u0630\u064a \u0633\u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u062a\u0633\u0631\u064a\u0639 \u0648\u062a\u0633\u0647\u064a\u0644 \u0645\u0647\u0645\u0629 \u0625\u0646\u0634\u0627\u0621 \u0628\u064a\u0626\u0629 \u062c\u062f\u064a\u062f\u0629 \u0645\u0643\u0648\u0651\u0646\u0629 \u0628\u0634\u0643\u0644 \u0622\u0645\u0646. \u0643\u0645\u0627 \u064a\u062c\u0628 \u0623\u0646 \u064a\u062a\u0645 \u062a\u0643\u0648\u064a\u0646 \u0628\u064a\u0626\u0627\u062a \u0627\u0644\u062a\u0637\u0648\u064a\u0631 \u0648\u0636\u0645\u0627\u0646 \u062c\u0648\u062f\u0629 \u0648\u0628\u064a\u0626\u0629 \u0627\u0644\u0625\u0646\u062a\u0627\u062c \u0628\u0634\u0643\u0644 \u064a\u062a\u0637\u0627\u0628\u0642 \u0645\u0639 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0644\u0645\u0627\u062a \u0645\u0631\u0648\u0631 \u0645\u062e\u062a\u0644\u0641\u0629 \u0641\u064a \u0643\u0644 \u0628\u064a\u0626\u0629. \u0623\u064a\u0636\u064b\u0627 \u064a\u062c\u0628 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0622\u0644\u064a\u0629 \u0644\u0644\u062a\u0642\u0644\u064a\u0644 \u0645\u0646 \u0627\u0644\u062c\u0647\u062f \u0627\u0644\u0645\u062a\u0637\u0644\u0651\u0628 \u0639\u0646\u062f \u0625\u0639\u062f\u0627\u062f \u0628\u064a\u0626\u0629 \u062c\u062f\u064a\u062f\u0629 \u0648\u0622\u0645\u0646\u0629. \u0627\u0644\u0627\u0643\u062a\u0641\u0627\u0621 \u0628\u0627\u0644\u062d\u062f \u0627\u0644\u0623\u062f\u0646\u0649 \u0627\u0644\u0623\u0633\u0627\u0633\u064a \u0645\u0646 \u0627\u0644\u0646\u0638\u0627\u0645 \u0623\u0648 \u0627\u0644\u0645\u0646\u0635\u0651\u0629 \u0628\u062f\u0648\u0646 \u062a\u0641\u0639\u064a\u0644 \u0645\u0650\u064a\u0632\u0627\u062a\u060c \u0623\u0648 \u0645\u0643\u0648\u0646\u0627\u062a\u060c \u0623\u0648 \u0648\u062b\u0627\u0626\u0642\u060c \u0623\u0648 \u0639\u064a\u0651\u0646\u0627\u062a \u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629\u060c \u0645\u0639 \u062d\u0630\u0641 \u0648\u0625\u0628\u0637\u0627\u0644 \u0627\u0644\u0645\u064a\u0632\u0627\u062a \u0648\u0625\u0637\u0627\u0631 \u0627\u0644\u063a\u064a\u0631 \u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0623\u0648 \u0639\u062f\u0645 \u062a\u062b\u0628\u064a\u062a\u0647\u0627. \u0645\u0631\u0627\u062c\u0639\u0629 \u0648\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0645\u0627 \u064a\u062a\u0646\u0627\u0633\u0628 \u0645\u0639 \u0643\u0627\u0641\u0629 \u0645\u0644\u0627\u062d\u0638\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0648\u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0648\u0627\u0644\u0625\u0635\u0644\u0627\u062d\u0627\u062a \u0643\u062c\u0632\u0621 \u0645\u0646 \u0639\u0645\u0644\u064a\u0629 \u0625\u062f\u0627\u0631\u0629 \u062d\u0650\u0632\u0645 \u0627\u0644\u0625\u0635\u0644\u0627\u062d\u0627\u062a \u0648\u0627\u0644\u062a\u0631\u0642\u064a\u0627\u062a. (\u0627\u0646\u0638\u0631 \u0625\u0644\u0649- A06:2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a). \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0645\u0631\u0627\u062c\u0639\u0629 \u0623\u0630\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 (S3 Bucket Permissions). \u062a\u062a\u064a\u062d \u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0642\u0633\u0651\u0645\u0629 \u0641\u0635\u0644\u064b\u0627 \u0641\u0639\u0651\u0627\u0644\u064b\u0627 \u0648\u0622\u0645\u0646\u064b\u0627 \u0628\u064a\u0646 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a\u060c \u0645\u0639 \u0627\u0644\u062a\u062c\u0632\u0626\u0629 \u0641\u064a \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0623\u0645\u0627\u0646 \u0627\u0644\u0633\u062d\u0627\u0628\u0629 (ACLs). \u0625\u0631\u0633\u0627\u0644 \u062a\u0648\u062c\u064a\u0647\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0625\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 Security Headers. \u0623\u062a\u0645\u062a\u0629 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u0622\u0645\u0646\u0629 \u0644\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0641\u0639\u0627\u0644\u064a\u0651\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646\u0627\u062a \u0648\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0641\u064a \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0626\u0627\u062a. \u062a\u0634\u063a\u064a\u0644 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0641\u062d\u0635 \u0644\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0641\u0639\u0627\u0644\u064a\u0651\u0629 \u0627\u0644\u062a\u0643\u0648\u064a\u0646\u0627\u062a \u0648\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0641\u064a \u062c\u0645\u064a\u0639 \u0627\u0644\u0628\u064a\u0626\u0627\u062a \u0644\u0644\u0643\u0634\u0641 \u0639\u0646 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0629.","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A05_2021-Security_Misconfiguration/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0639\u0646\u062f\u0645\u0627 \u064a\u062d\u062a\u0648\u064a \u0627\u062d\u062f \u0627\u0644\u062e\u0648\u0627\u062f\u0645 \u0639\u0644\u0649 \u062a\u0637\u0628\u064a\u0642 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u063a\u064a\u0631 \u0645\u062d\u062f\u062b \u0648\u0645\u0627 \u064a\u0632\u0627\u0644 \u064a\u064f\u0633\u062a\u062e\u062f\u0645 \u0641\u064a \u0628\u064a\u0626\u0629 \u0627\u0644\u0625\u0646\u062a\u0627\u062c \"Production Server\" \u0647\u0630\u0647 \u0627\u0644\u0639\u064a\u0651\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0642\u062f \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0641\u064a \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062e\u0627\u062f\u0645 \u060c \u0648\u0628\u0627\u0641\u062a\u0631\u0627\u0636 \u0623\u0646 \u0623\u062d\u062f \u0647\u0630\u0647 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0647\u064a \u0648\u062d\u062f\u0629 \u062a\u062d\u0643\u0651\u0645 \u0644\u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0648\u062a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0627\u0644\u0627\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0648\u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0633\u0631\u064a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u060c \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629 \u0641\u0625\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0633\u0648\u0641 \u064a\u064f\u0633\u062c\u0651\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0633\u0631\u064a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0648\u064a\u062a\u062d\u0643\u0651\u0645 \u0628\u0627\u0644\u062e\u0627\u062f\u0645. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u0639\u0646\u062f\u0645\u0627 \u062a\u0643\u0648\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062f\u0644\u064a\u0644 \"Directory Listing\" \u063a\u064a\u0631 \u0645\u0639\u0637\u0651\u0644\u0629 \u0641\u064a \u0627\u0644\u062e\u0627\u062f\u0645 \u0627\u0644\u062e\u0627\u0635 \u0628\u0643\u060c \u0642\u062f \u064a\u0643\u062a\u0634\u0641 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0623\u0646 \u0628\u0625\u0645\u0643\u0627\u0646\u0647 \u0633\u0631\u062f \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0646\u0629 \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645 \u0648\u0628\u0639\u062f \u0630\u0644\u0643 \u0628\u0625\u0645\u0643\u0627\u0646\u0647 \u0627\u0644\u0639\u062b\u0648\u0631 \u0648\u062a\u062b\u0628\u064a\u062a \u062c\u0645\u064a\u0639 \u0641\u0626\u0627\u062a \u062c\u0627\u0641\u0627 (Compiled Java Classes) \u0648\u0645\u0646 \u062b\u0645 \u064a\u0642\u0648\u0645 \u0628\u0641\u0643\u0651\u0647\u0627 \u0648\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0639\u0643\u0633\u064a\u0629 \u0644\u0639\u0631\u0636 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629\u060c \u0633\u0648\u0641 \u064a\u062d\u0627\u0648\u0644 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0639\u062f \u0630\u0644\u0643 \u0625\u064a\u062c\u0627\u062f \u062e\u0637\u0623 \u0623\u0645\u0646\u064a \u0644\u0644\u062a\u062d\u0643\u0651\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0639\u0646\u062f\u0645\u0627 \u062a\u0642\u0648\u0645 \u0625\u0639\u062f\u0627\u062f\u0627\u062a \u062e\u0627\u062f\u0645 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0625\u0631\u062c\u0627\u0639 \u0631\u0633\u0627\u0626\u0644 \u062e\u0627\u0637\u0626\u0629 \u062a\u0641\u0635\u064a\u0644\u064a\u0651\u0629\u060c \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 Stack Traces \u0625\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u060c \u0648\u0645\u0646 \u0627\u0644\u0645\u064f\u062d\u062a\u0645\u0644 \u0623\u0646 \u064a\u0624\u062f\u064a \u0647\u0630\u0627 \u0625\u0644\u0649 \u0627\u0644\u0643\u0634\u0641 \u0639\u0646 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u0623\u062e\u0631\u0649 \u0623\u0648 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u062b\u0644 \u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629 \u0628\u0623\u0646\u0647\u0627 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #4: \u0623\u0646 \u064a\u0643\u0648\u0646 \u0645\u0642\u062f\u0651\u0645 \u0627\u0644\u062e\u062f\u0645\u0629 \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 \u0644\u062f\u064a\u0647 \u0623\u0630\u0648\u0646\u0627\u062a \u0645\u0634\u0627\u0631\u0643\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0645\u0641\u062a\u0648\u062d\u0629 \u0639\u0644\u0649 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0645\u0646 \u0642\u0650\u0628\u0644 \u0645\u0633\u062a\u062e\u062f\u0645\u064a CSP \u0627\u0644\u0622\u062e\u0631\u064a\u0646\u060c \u064a\u0633\u0645\u062d \u0647\u0630\u0627 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u0645\u062e\u0632\u0651\u0646\u0629 \u0641\u064a \u0633\u062d\u0627\u0628\u0629 \u0627\u0644\u062a\u062e\u0632\u064a\u0646.","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A05_2021-Security_Misconfiguration/#_6","text":"OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A05_2021-Security_Misconfiguration/#cwes","text":"CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/","text":"A06:2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648 \u0627\u0644\u0627\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u0643\u0627\u0646\u062a \u062a\u062d\u062a\u0644 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0641\u064a \u0642\u0637\u0627\u0639 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0644\u0643\u0646\u0647\u0627 \u0623\u064a\u0636\u064b\u0627 \u062a\u0645\u062a\u0644\u0643 \u0628\u064a\u0627\u0646\u0627\u062a \u0643\u0627\u0641\u064a\u0629 \u0644\u062a\u064f\u0635\u0628\u062d \u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u064a\u064f\u0639\u062a\u0628\u0631 \u062a\u0635\u0646\u064a\u0641 \" \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0645\u0643\u0648\u0651\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u064f\u062d\u062f\u0651\u062b\u0629\" \u0645\u0646 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629 \u0627\u0644\u062a\u064a \u062a\u0648\u0627\u062c\u0647 \u0635\u0639\u0648\u0628\u0627\u062a \u0645\u0646 \u0623\u062c\u0644 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0648\u062a\u0642\u064a\u064a\u0645 \u0645\u062e\u0627\u0637\u0631\u0647\u0627 \u0648\u064a\u064f\u0639\u062a\u0628\u0631 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0648\u062d\u064a\u062f \u0627\u0644\u0630\u064a \u0644\u0627 \u064a\u062a\u0636\u0645\u0651\u0646 CVEs \u0648\u0645\u0631\u062a\u0628\u0637 \u0628\u0640 CWEs. \u0644\u0630\u0644\u0643 \u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0623\u0648 \u0627\u0644\u0623\u062b\u0631 \u0648\u0647\u0648 5.0\u060c \u0648\u0646\u062c\u062f \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0631\u062a\u0628\u0627\u0637 \u0648\u062d\u064a\u062f \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0648\u0647\u0648 CWE-1104. \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u0645\u0646 \u0627\u0644\u0645\u062d\u062a\u0645\u0644 \u0627\u0646 \u062a\u0643\u0648\u0646 \u0639\u0631\u0636\u0629 \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642: \u0625\u0630\u0627 \u0643\u0646\u062a \u0644\u0627 \u062a\u0639\u0631\u0641 \u0625\u0635\u062f\u0627\u0631\u0627\u062a \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627 (\u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0623\u0648 \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645). \u0648\u0647\u0630\u0627 \u064a\u062a\u0636\u0645\u0651\u0646 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u064f\u0628\u0627\u0634\u0631 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0628\u0627\u0634\u0631\u0629. \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0648 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0645\u0639\u0631\u0636\u0647 \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0628\u0633\u0628\u0628 \u0627\u0646\u0647\u0627 \u063a\u064a\u0631 \u0645\u062f\u0639\u0648\u0645\u0629 \u0623\u0648 \u0642\u062f\u064a\u0645\u0629. \u0648\u064a\u062a\u0636\u0645\u0646 \u0630\u0644\u0643 \u0646\u0638\u0627\u0645 \u0627\u0644\u062a\u0634\u063a\u064a\u0644 \u0648\u062e\u0627\u062f\u0645 \u0627\u0644\u0648\u064a\u0628 \u0623\u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0646\u0638\u0627\u0645 \u0625\u062f\u0627\u0631\u0629 \u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a (DBMS) \u0648\u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062aAPI \u0648\u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0648\u0628\u064a\u0626\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0639\u0645\u0644 \u0645\u0639 \u0628\u062f\u0621 \u0627\u0644\u062a\u0634\u063a\u064a\u0644 .(runtime) \u0625\u0630\u0627 \u0644\u0645 \u062a\u0642\u0645 \u0628\u0627\u0644\u0645\u0633\u062d \u0627\u0644\u0623\u0645\u0646\u064a \u0628\u062d\u062b\u0627\u064b \u0639\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0627\u0646\u062a\u0638\u0627\u0645\u060c \u0648\u0627\u0644\u0627\u0634\u062a\u0631\u0627\u0643 \u0641\u064a \u0646\u0634\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0646 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627. \u0625\u0630\u0627 \u0644\u0645 \u062a\u0642\u0645 \u0628\u0625\u0635\u0644\u0627\u062d \u0623\u0648 \u062a\u0631\u0642\u064a\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0623\u0633\u0627\u0633\u064a \u0648\u0627\u0644\u0625\u0637\u0627\u0631 \u0648\u0627\u0644\u062a\u0628\u0639\u064a\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0651\u0629 \u0628\u0637\u0631\u064a\u0642\u0629 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0648\u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628. \u064a\u062d\u062f\u062b \u0647\u0630\u0627 \u0639\u0627\u062f\u0629\u064b \u0641\u064a \u0627\u0644\u0628\u064a\u0626\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u0643\u0648\u0646 \u0641\u064a\u0647\u0627 \u0625\u063a\u0644\u0627\u0642 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u062a\u0646\u0635\u064a\u0628 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0645\u064e\u0647\u0645\u0629 \u0634\u0647\u0631\u064a\u0629 \u0623\u0648 \u0631\u0628\u0639 \u0633\u0646\u0648\u064a\u0629 \u062a\u062d\u062a \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a\u060c \u0645\u0645\u0627 \u064a\u062a\u0631\u0643 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0639\u064f\u0631\u0636\u0629 \u0644\u0645\u062f\u0629 \u0623\u064a\u0627\u0645 \u0623\u0648 \u0634\u0647\u0648\u0631 \u0645\u0646 \u0639\u062f\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0644\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0636\u0631\u0648\u0631\u064a\u0629. \u0625\u0630\u0627 \u0644\u0645 \u064a\u0642\u0645 \u0645\u0637\u0648\u0631\u0648 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0628\u0627\u062e\u062a\u0628\u0627\u0631 \u062a\u0648\u0627\u0641\u0642 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0645\u062d\u062f\u062b\u0629 \u0623\u0648 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062c\u0631\u0627\u0621 \u0625\u0635\u0644\u0627\u062d\u0627\u062a \u0639\u0644\u064a\u0647\u0627. \u0625\u0630\u0627 \u0644\u0645 \u062a\u0642\u0645 \u0628\u062a\u0623\u0645\u064a\u0646 \u0627\u0644\u0627\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d. (\u0627\u0646\u0638\u0631 A05: 2021 \u2013 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629 ). \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u064a\u062c\u0628 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u0622\u0644\u064a\u0629 \u0644\u0625\u062f\u0627\u0631\u0629 \u0627\u063a\u0644\u0627\u0642 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0630\u0644\u0643 \u0644\u062a\u0644\u0628\u064a\u0629 \u0645\u0627 \u064a\u0644\u064a: \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0648\u0627\u0644\u0645\u0645\u064a\u0632\u0627\u062a \u0648\u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0648\u0627\u0644\u0648\u062b\u0627\u0626\u0642 \u0627\u0644\u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629. \u0639\u0645\u0644 \u062c\u0631\u062f \u0628\u0634\u0643\u0644 \u062f\u0648\u0631\u064a \u0644\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0648\u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0625\u0637\u0627\u0631 \u0627\u0644\u0639\u0645\u0644 \u0648\u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a) \u0648\u0645\u0643\u0648\u0646\u0627\u062a\u0647\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0648\u0627\u062a \u0645\u062b\u0644 Versions, OWASP Dependency Check, Retire.JS \u0648\u0645\u0627 \u0625\u0644\u0649 \u0630\u0644\u0643\u060c \u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0627\u0633\u062a\u0645\u0631\u0627\u0631 \u0645\u062b\u0644 CVE \u0648 NVD \u0628\u062d\u062b\u064b\u0627 \u0639\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0641\u064a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a. \u0648\u0642\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0648\u0630\u0644\u0643 \u0645\u0646 \u0623\u062c\u0644 \u0623\u062a\u0645\u062a\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0629. \u0648\u0623\u062e\u064a\u0631\u064b\u0627\u060c \u0642\u0645 \u0628\u0627\u0644\u0627\u0634\u062a\u0631\u0627\u0643 \u0641\u064a \u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0627\u0644\u0628\u0631\u064a\u062f \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627. \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u0631\u0633\u0645\u064a\u0629 \u0641\u0642\u0637 \u0639\u0628\u0631 \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u0622\u0645\u0646\u0629. \u064a\u0641\u0636\u0644 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0627\u0646 \u0627\u0644\u062d\u0632\u0645 \u0645\u0648\u0642\u0639\u0647 \u0631\u0642\u0645\u064a\u0627\u064b \u0644\u062a\u0642\u0644\u064a\u0644 \u0641\u0631\u0635\u0629 \u062a\u062b\u0628\u064a\u062a \u0645\u0643\u0648\u0646\u0627\u062a \u0645\u0639\u062f\u0644\u0629 \u0648\u0636\u0627\u0631\u0629 (\u0627\u0646\u0638\u0631 A08: 2021- \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a). \u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0648\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0627 \u064a\u062a\u0645 \u0635\u064a\u0627\u0646\u062a\u0647\u0627 \u0623\u0648 \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644 \u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0644\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0642\u062f\u064a\u0645\u0629. \u0625\u0630\u0627 \u0644\u0645 \u062a\u0643\u0646 \u0639\u0645\u0644\u064a\u0629 \u0633\u062f\u0651 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u064f\u0645\u0643\u0646\u0629\u060c \u0641\u0643\u0651\u0631 \u0641\u064a \u0625\u0646\u0634\u0627\u0621 \u0622\u0644\u064a\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u062a\u0644\u0643 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0648\u0631\u0635\u062f \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0627\u062a \u0627\u0644\u0636\u0651\u064e\u0627\u0631\u0629 \u0648\u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u064a\u062c\u0628 \u0623\u0646 \u062a\u0636\u0645\u0646 \u0643\u0644 \u0645\u0624\u0633\u0633\u0629 \u062e\u0637\u0629 \u0645\u0633\u062a\u0645\u0631\u0629 \u0644\u0644\u0645\u0631\u0627\u0642\u0628\u0629\u060c \u0648\u062a\u0635\u0646\u064a\u0641\u060c \u0648\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0623\u0648 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0627\u0639\u062f\u0627\u062f\u0627\u062a \u0637\u0648\u0627\u0644 \u0627\u0644\u062d\u064a\u0627\u0629 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u062a\u0639\u0645\u0644 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0639\u0627\u062f\u0629\u064b \u0628\u0646\u0641\u0633 \u0627\u0644\u0627\u0645\u062a\u064a\u0627\u0632\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062a\u0645\u062a\u0651\u0639 \u0628\u0647\u0627 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0646\u0641\u0633\u0647\u060c \u0644\u0630\u0627 \u0641\u0625\u0646 \u0627\u0644\u0639\u064a\u0648\u0628 \u0641\u064a \u0623\u064a \u0645\u0643\u0648\u0651\u0646 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u062a\u0623\u062b\u064a\u0631 \u062e\u0637\u064a\u0631. \u064a\u0645\u0643\u0646 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0630\u0647 \u0627\u0644\u0639\u064a\u0648\u0628 \u0639\u0631\u0636\u064a\u0629 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0627\u0644\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629) \u0623\u0648 \u0639\u064a\u0648\u0628 \u0645\u0642\u0635\u0648\u062f\u0629 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0628\u0627\u0628 \u062e\u0644\u0641\u064a \u0641\u064a \u0623\u062d\u062f \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a). \u0628\u0639\u0636 \u0627\u0644\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0643\u062a\u0634\u0627\u0641\u0647\u0627 \u0647\u064a: \u0646\u0638\u0631\u0629 \u0639\u0644\u0649 \u062b\u063a\u0631\u0629 CVE-2017-5638\u060c \u0648\u0647\u064a \u062b\u063a\u0631\u0629 \u0623\u0645\u0646\u064a\u0629 \u062a\u0642\u0648\u0645 \u0628\u062a\u0646\u0641\u064a\u0630 \u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629 \u0639\u0646 \u0628\u064f\u0639\u062f \u0644\u0640 Struts 2 \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u062a\u064a\u062d \u062a\u0646\u0641\u064a\u0630 \u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629 \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u0633\u0628\u0651\u0628 \u0627\u062e\u062a\u0631\u0627\u0642\u0627\u062a \u062e\u0637\u064a\u0631\u0629. \u0639\u0644\u0649 \u0627\u0644\u0631\u063a\u0645 \u0645\u0646 \u0635\u0639\u0648\u0628\u0629 \u0623\u0648 \u0627\u0633\u062a\u062d\u0627\u0644\u0629 \u062a\u062d\u062f\u064a\u062b \u0625\u0646\u062a\u0631\u0646\u062a \u0627\u0644\u0623\u0634\u064a\u0627\u0621 \u0641\u064a \u0628\u0639\u0636 \u0645\u0646\u062a\u062c\u0627\u062a (IoT)\u060c \u0625\u0644\u0627 \u0623\u0646 \u0623\u0647\u0645\u064a\u0629 \u062a\u062d\u062f\u064a\u062b\u0647\u0627 \u064a\u0645\u0643\u0646 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0644\u0647 \u0623\u0647\u0645\u064a\u0629 \u0643\u0628\u064a\u0631\u0629 (\u0645\u062b\u0644 \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0637\u0628\u064a\u0629). \u0647\u0646\u0627\u0643 \u0623\u062f\u0648\u0627\u062a \u0622\u0644\u064a\u0629 \u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0641\u064a \u0627\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u0623\u0646\u0638\u0645\u0629 \u063a\u064a\u0631 \u0645\u062d\u062f\u062b\u0629 \u0623\u0648 \u0645\u0639\u062f\u0629 \u0628\u0634\u0643\u0644 \u062e\u0627\u0637\u0626. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0633\u0627\u0639\u062f\u0643 \u0645\u062d\u0631\u0643 \u0628\u062d\u062b Shodan IoT \u0641\u064a \u0627\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0632\u0627\u0644 \u062a\u0639\u0627\u0646\u064a \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0629 \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0645\u062b\u0644 \u062b\u063a\u0631\u0629 Heartbleed \u0648\u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u0635\u0644\u0627\u062d\u0647\u0627 \u0648\u062a\u062d\u062f\u064a\u062b\u0647\u0627 \u0641\u064a \u0623\u0628\u0631\u064a\u0644 \u0645\u0646 \u0639\u0627\u0645 2014. \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"A06 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0627\u0644\u0645\u062d\u062f\u062b\u0629"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#a062021","text":"","title":"A06:2021 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648 \u0627\u0644\u0627\u0646\u0638\u0645\u0629 \u0627\u0644\u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#_2","text":"\u0643\u0627\u0646\u062a \u062a\u062d\u062a\u0644 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u062b\u0627\u0646\u064a\u0629 \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0641\u064a \u0642\u0637\u0627\u0639 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0644\u0643\u0646\u0647\u0627 \u0623\u064a\u0636\u064b\u0627 \u062a\u0645\u062a\u0644\u0643 \u0628\u064a\u0627\u0646\u0627\u062a \u0643\u0627\u0641\u064a\u0629 \u0644\u062a\u064f\u0635\u0628\u062d \u0645\u0646 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u064a\u064f\u0639\u062a\u0628\u0631 \u062a\u0635\u0646\u064a\u0641 \" \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0627\u0644\u0645\u0643\u0648\u0651\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u064f\u062d\u062f\u0651\u062b\u0629\" \u0645\u0646 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629 \u0627\u0644\u062a\u064a \u062a\u0648\u0627\u062c\u0647 \u0635\u0639\u0648\u0628\u0627\u062a \u0645\u0646 \u0623\u062c\u0644 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0648\u062a\u0642\u064a\u064a\u0645 \u0645\u062e\u0627\u0637\u0631\u0647\u0627 \u0648\u064a\u064f\u0639\u062a\u0628\u0631 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0648\u062d\u064a\u062f \u0627\u0644\u0630\u064a \u0644\u0627 \u064a\u062a\u0636\u0645\u0651\u0646 CVEs \u0648\u0645\u0631\u062a\u0628\u0637 \u0628\u0640 CWEs. \u0644\u0630\u0644\u0643 \u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0639\u064a\u0627\u0631 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0623\u0648 \u0627\u0644\u0623\u062b\u0631 \u0648\u0647\u0648 5.0\u060c \u0648\u0646\u062c\u062f \u0623\u0646 \u0647\u0646\u0627\u0643 \u0627\u0631\u062a\u0628\u0627\u0637 \u0648\u062d\u064a\u062f \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0648\u0647\u0648 CWE-1104.","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#_3","text":"\u0645\u0646 \u0627\u0644\u0645\u062d\u062a\u0645\u0644 \u0627\u0646 \u062a\u0643\u0648\u0646 \u0639\u0631\u0636\u0629 \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642: \u0625\u0630\u0627 \u0643\u0646\u062a \u0644\u0627 \u062a\u0639\u0631\u0641 \u0625\u0635\u062f\u0627\u0631\u0627\u062a \u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627 (\u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0623\u0648 \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645). \u0648\u0647\u0630\u0627 \u064a\u062a\u0636\u0645\u0651\u0646 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u064f\u0628\u0627\u0634\u0631 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0628\u0627\u0634\u0631\u0629. \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0648 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0645\u0639\u0631\u0636\u0647 \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0628\u0633\u0628\u0628 \u0627\u0646\u0647\u0627 \u063a\u064a\u0631 \u0645\u062f\u0639\u0648\u0645\u0629 \u0623\u0648 \u0642\u062f\u064a\u0645\u0629. \u0648\u064a\u062a\u0636\u0645\u0646 \u0630\u0644\u0643 \u0646\u0638\u0627\u0645 \u0627\u0644\u062a\u0634\u063a\u064a\u0644 \u0648\u062e\u0627\u062f\u0645 \u0627\u0644\u0648\u064a\u0628 \u0623\u0648 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0646\u0638\u0627\u0645 \u0625\u062f\u0627\u0631\u0629 \u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a (DBMS) \u0648\u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062aAPI \u0648\u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0648\u0628\u064a\u0626\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0639\u0645\u0644 \u0645\u0639 \u0628\u062f\u0621 \u0627\u0644\u062a\u0634\u063a\u064a\u0644 .(runtime) \u0625\u0630\u0627 \u0644\u0645 \u062a\u0642\u0645 \u0628\u0627\u0644\u0645\u0633\u062d \u0627\u0644\u0623\u0645\u0646\u064a \u0628\u062d\u062b\u0627\u064b \u0639\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0627\u0646\u062a\u0638\u0627\u0645\u060c \u0648\u0627\u0644\u0627\u0634\u062a\u0631\u0627\u0643 \u0641\u064a \u0646\u0634\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0646 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627. \u0625\u0630\u0627 \u0644\u0645 \u062a\u0642\u0645 \u0628\u0625\u0635\u0644\u0627\u062d \u0623\u0648 \u062a\u0631\u0642\u064a\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0623\u0633\u0627\u0633\u064a \u0648\u0627\u0644\u0625\u0637\u0627\u0631 \u0648\u0627\u0644\u062a\u0628\u0639\u064a\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0651\u0629 \u0628\u0637\u0631\u064a\u0642\u0629 \u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u062a\u0642\u064a\u064a\u0645 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0648\u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628. \u064a\u062d\u062f\u062b \u0647\u0630\u0627 \u0639\u0627\u062f\u0629\u064b \u0641\u064a \u0627\u0644\u0628\u064a\u0626\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u0643\u0648\u0646 \u0641\u064a\u0647\u0627 \u0625\u063a\u0644\u0627\u0642 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u062a\u0646\u0635\u064a\u0628 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0645\u064e\u0647\u0645\u0629 \u0634\u0647\u0631\u064a\u0629 \u0623\u0648 \u0631\u0628\u0639 \u0633\u0646\u0648\u064a\u0629 \u062a\u062d\u062a \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a\u060c \u0645\u0645\u0627 \u064a\u062a\u0631\u0643 \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0639\u064f\u0631\u0636\u0629 \u0644\u0645\u062f\u0629 \u0623\u064a\u0627\u0645 \u0623\u0648 \u0634\u0647\u0648\u0631 \u0645\u0646 \u0639\u062f\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0644\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0636\u0631\u0648\u0631\u064a\u0629. \u0625\u0630\u0627 \u0644\u0645 \u064a\u0642\u0645 \u0645\u0637\u0648\u0631\u0648 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0628\u0627\u062e\u062a\u0628\u0627\u0631 \u062a\u0648\u0627\u0641\u0642 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0645\u062d\u062f\u062b\u0629 \u0623\u0648 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062c\u0631\u0627\u0621 \u0625\u0635\u0644\u0627\u062d\u0627\u062a \u0639\u0644\u064a\u0647\u0627. \u0625\u0630\u0627 \u0644\u0645 \u062a\u0642\u0645 \u0628\u062a\u0623\u0645\u064a\u0646 \u0627\u0644\u0627\u0639\u062f\u0627\u062f\u0627\u062a \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d. (\u0627\u0646\u0638\u0631 A05: 2021 \u2013 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u062e\u0627\u0637\u0626\u0629 ).","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#_4","text":"\u064a\u062c\u0628 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u0622\u0644\u064a\u0629 \u0644\u0625\u062f\u0627\u0631\u0629 \u0627\u063a\u0644\u0627\u0642 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0648\u0630\u0644\u0643 \u0644\u062a\u0644\u0628\u064a\u0629 \u0645\u0627 \u064a\u0644\u064a: \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0648\u0627\u0644\u0645\u0645\u064a\u0632\u0627\u062a \u0648\u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0648\u0627\u0644\u0648\u062b\u0627\u0626\u0642 \u0627\u0644\u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0629. \u0639\u0645\u0644 \u062c\u0631\u062f \u0628\u0634\u0643\u0644 \u062f\u0648\u0631\u064a \u0644\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0648\u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0625\u0637\u0627\u0631 \u0627\u0644\u0639\u0645\u0644 \u0648\u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a) \u0648\u0645\u0643\u0648\u0646\u0627\u062a\u0647\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0648\u0627\u062a \u0645\u062b\u0644 Versions, OWASP Dependency Check, Retire.JS \u0648\u0645\u0627 \u0625\u0644\u0649 \u0630\u0644\u0643\u060c \u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0628\u0627\u0633\u062a\u0645\u0631\u0627\u0631 \u0645\u062b\u0644 CVE \u0648 NVD \u0628\u062d\u062b\u064b\u0627 \u0639\u0646 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0641\u064a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a. \u0648\u0642\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0648\u0630\u0644\u0643 \u0645\u0646 \u0623\u062c\u0644 \u0623\u062a\u0645\u062a\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0629. \u0648\u0623\u062e\u064a\u0631\u064b\u0627\u060c \u0642\u0645 \u0628\u0627\u0644\u0627\u0634\u062a\u0631\u0627\u0643 \u0641\u064a \u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0627\u0644\u0628\u0631\u064a\u062f \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645\u0647\u0627. \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u0631\u0633\u0645\u064a\u0629 \u0641\u0642\u0637 \u0639\u0628\u0631 \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u0622\u0645\u0646\u0629. \u064a\u0641\u0636\u0644 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0627\u0646 \u0627\u0644\u062d\u0632\u0645 \u0645\u0648\u0642\u0639\u0647 \u0631\u0642\u0645\u064a\u0627\u064b \u0644\u062a\u0642\u0644\u064a\u0644 \u0641\u0631\u0635\u0629 \u062a\u062b\u0628\u064a\u062a \u0645\u0643\u0648\u0646\u0627\u062a \u0645\u0639\u062f\u0644\u0629 \u0648\u0636\u0627\u0631\u0629 (\u0627\u0646\u0638\u0631 A08: 2021- \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a). \u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0648\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0627 \u064a\u062a\u0645 \u0635\u064a\u0627\u0646\u062a\u0647\u0627 \u0623\u0648 \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644 \u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646 \u0644\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0642\u062f\u064a\u0645\u0629. \u0625\u0630\u0627 \u0644\u0645 \u062a\u0643\u0646 \u0639\u0645\u0644\u064a\u0629 \u0633\u062f\u0651 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u064f\u0645\u0643\u0646\u0629\u060c \u0641\u0643\u0651\u0631 \u0641\u064a \u0625\u0646\u0634\u0627\u0621 \u0622\u0644\u064a\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u062a\u0644\u0643 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0648\u0631\u0635\u062f \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0627\u062a \u0627\u0644\u0636\u0651\u064e\u0627\u0631\u0629 \u0648\u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u064a\u062c\u0628 \u0623\u0646 \u062a\u0636\u0645\u0646 \u0643\u0644 \u0645\u0624\u0633\u0633\u0629 \u062e\u0637\u0629 \u0645\u0633\u062a\u0645\u0631\u0629 \u0644\u0644\u0645\u0631\u0627\u0642\u0628\u0629\u060c \u0648\u062a\u0635\u0646\u064a\u0641\u060c \u0648\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0623\u0648 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0627\u0639\u062f\u0627\u062f\u0627\u062a \u0637\u0648\u0627\u0644 \u0627\u0644\u062d\u064a\u0627\u0629 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a.","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u062a\u0639\u0645\u0644 \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0639\u0627\u062f\u0629\u064b \u0628\u0646\u0641\u0633 \u0627\u0644\u0627\u0645\u062a\u064a\u0627\u0632\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062a\u0645\u062a\u0651\u0639 \u0628\u0647\u0627 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0646\u0641\u0633\u0647\u060c \u0644\u0630\u0627 \u0641\u0625\u0646 \u0627\u0644\u0639\u064a\u0648\u0628 \u0641\u064a \u0623\u064a \u0645\u0643\u0648\u0651\u0646 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0624\u062f\u064a \u0625\u0644\u0649 \u062a\u0623\u062b\u064a\u0631 \u062e\u0637\u064a\u0631. \u064a\u0645\u0643\u0646 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0630\u0647 \u0627\u0644\u0639\u064a\u0648\u0628 \u0639\u0631\u0636\u064a\u0629 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0627\u0644\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629) \u0623\u0648 \u0639\u064a\u0648\u0628 \u0645\u0642\u0635\u0648\u062f\u0629 (\u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u0628\u0627\u0628 \u062e\u0644\u0641\u064a \u0641\u064a \u0623\u062d\u062f \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a). \u0628\u0639\u0636 \u0627\u0644\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a \u0627\u0644\u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0643\u062a\u0634\u0627\u0641\u0647\u0627 \u0647\u064a: \u0646\u0638\u0631\u0629 \u0639\u0644\u0649 \u062b\u063a\u0631\u0629 CVE-2017-5638\u060c \u0648\u0647\u064a \u062b\u063a\u0631\u0629 \u0623\u0645\u0646\u064a\u0629 \u062a\u0642\u0648\u0645 \u0628\u062a\u0646\u0641\u064a\u0630 \u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629 \u0639\u0646 \u0628\u064f\u0639\u062f \u0644\u0640 Struts 2 \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u062a\u064a\u062d \u062a\u0646\u0641\u064a\u0630 \u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629 \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u0633\u0628\u0651\u0628 \u0627\u062e\u062a\u0631\u0627\u0642\u0627\u062a \u062e\u0637\u064a\u0631\u0629. \u0639\u0644\u0649 \u0627\u0644\u0631\u063a\u0645 \u0645\u0646 \u0635\u0639\u0648\u0628\u0629 \u0623\u0648 \u0627\u0633\u062a\u062d\u0627\u0644\u0629 \u062a\u062d\u062f\u064a\u062b \u0625\u0646\u062a\u0631\u0646\u062a \u0627\u0644\u0623\u0634\u064a\u0627\u0621 \u0641\u064a \u0628\u0639\u0636 \u0645\u0646\u062a\u062c\u0627\u062a (IoT)\u060c \u0625\u0644\u0627 \u0623\u0646 \u0623\u0647\u0645\u064a\u0629 \u062a\u062d\u062f\u064a\u062b\u0647\u0627 \u064a\u0645\u0643\u0646 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0644\u0647 \u0623\u0647\u0645\u064a\u0629 \u0643\u0628\u064a\u0631\u0629 (\u0645\u062b\u0644 \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0637\u0628\u064a\u0629). \u0647\u0646\u0627\u0643 \u0623\u062f\u0648\u0627\u062a \u0622\u0644\u064a\u0629 \u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0641\u064a \u0627\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u0623\u0646\u0638\u0645\u0629 \u063a\u064a\u0631 \u0645\u062d\u062f\u062b\u0629 \u0623\u0648 \u0645\u0639\u062f\u0629 \u0628\u0634\u0643\u0644 \u062e\u0627\u0637\u0626. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0633\u0627\u0639\u062f\u0643 \u0645\u062d\u0631\u0643 \u0628\u062d\u062b Shodan IoT \u0641\u064a \u0627\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0632\u0627\u0644 \u062a\u0639\u0627\u0646\u064a \u0645\u0646 \u0627\u0644\u062b\u063a\u0631\u0629 \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0645\u062b\u0644 \u062b\u063a\u0631\u0629 Heartbleed \u0648\u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u0635\u0644\u0627\u062d\u0647\u0627 \u0648\u062a\u062d\u062f\u064a\u062b\u0647\u0627 \u0641\u064a \u0623\u0628\u0631\u064a\u0644 \u0645\u0646 \u0639\u0627\u0645 2014.","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#_6","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A06_2021-Vulnerable_and_Outdated_Components/#cwes","text":"CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/","text":"A07:2021 \u2013 \u0627\u0644\u0647\u0648\u064a\u0629 \u0648 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642 \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u0647\u0630 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u064a\u064f\u0639\u0631\u0641 \u0633\u0627\u0628\u0642\u064b\u0627 \u0628\u0627\u0633\u0645 \u0636\u0639\u0641 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629 (Broken Authentication) \u0648\u0643\u0627\u0646\u062a \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #2 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642. \u0648\u062d\u0627\u0644\u064a\u064b\u0627 \u062a\u0634\u0645\u0644 \u0639\u0644\u0649 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 CWEs \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0651\u0642. \u064a\u062a\u0636\u0645\u0651\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0643\u0644 \u0645\u0646 (CWE-384,CWE-297,CWE-287). \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u064a\u064f\u0639\u062f \u062a\u0623\u0643\u064a\u062f \u0647\u0648\u064a\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0648\u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0648\u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u062c\u0644\u0633\u0629 \u0623\u0645\u0631\u064b\u0627 \u0628\u0627\u0644\u063a \u0627\u0644\u0623\u0647\u0645\u064a\u0629 \u0648\u0630\u0644\u0643 \u0644\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629. \u0642\u062f \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u0636\u0639\u0641 \u0641\u064a \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642: \u064a\u0633\u0645\u062d \u0628\u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0622\u0644\u064a\u0629 \u0645\u062b\u0644 \u0647\u062c\u0645\u0627\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f (Credential Stuffing)\u060c \u062d\u064a\u062b \u064a\u0643\u0648\u0646 \u0644\u062f\u0649 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0642\u0627\u0626\u0645\u0629 \u0628\u0623\u0633\u0645\u0627\u0621 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0648\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631. \u064a\u0633\u0645\u062d \u0628\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0647\u062c\u0648\u0645 \u0643\u0633\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 (Brute Force) \u0623\u0648 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0622\u0644\u064a\u0629 \u0627\u0644\u0623\u062e\u0631\u0649. \u064a\u0633\u0645\u062d \u0628\u0647\u062c\u0645\u0627\u062a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0623\u0648 \u0627\u0644\u0636\u0639\u064a\u0641\u0629 \u0623\u0648 \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629 \u060c \u0645\u062b\u0644 \"Password1\" \u0623\u0648 \" Admin / Admin\". \u064a\u0633\u062a\u062e\u062f\u0645 \u0639\u0648\u0627\u0645\u0644 \u0636\u0639\u064a\u0641\u0629 \u0648\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644\u0629 \u0644\u0627\u0633\u062a\u0639\u0627\u062f\u0629 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u0627\u0633\u062a\u0631\u062c\u0627\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0648\u0627\u0644\u062a\u064a \u064a\u062c\u0639\u0644\u0647\u0627 \u0622\u0645\u0646\u0629\u060c \u0645\u062b\u0644 \"\u0627\u0644\u0623\u062c\u0648\u0628\u0629 \u0627\u0644\u0645\u0633\u062a\u0646\u062f\u0650\u0629 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0631\u0641\u0629\". \u064a\u0633\u062a\u062e\u062f\u0645 \u0643\u0644\u0645\u0627\u062a \u0645\u0631\u0648\u0631 \u063a\u064a\u0631 \u0645\u0634\u0641\u0651\u0631\u0629\u060c \u0623\u0648 \u0645\u0634\u0641\u0651\u0631\u0629 \u0628\u0634\u0643\u0644 \u0645\u064f\u062c\u0632\u0651\u0623 \u0623\u0648 \u0628\u0634\u0643\u0644 \u0636\u0639\u064a\u0641 (\u0631\u0627\u062c\u0639 A3:2017- \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0651\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629). \u0639\u062f\u0645 \u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u062b\u0646\u0627\u0626\u064a \u0623\u0648 \u062a\u0643\u0648\u0646 \u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644\u0629. \u064a\u0639\u0631\u0636 \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0629 (Session IDs) \u0641\u064a \u0639\u0646\u0648\u0627\u0646 URL \u0644\u0627 \u064a\u0642\u0648\u0645 \u0628\u0625\u0639\u0627\u062f\u0629 \u0625\u0646\u0634\u0627\u0621 \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0629 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0628\u0646\u062c\u0627\u062d. \u0644\u0627 \u064a\u0646\u0647\u064a \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0629 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d. \u0644\u0627 \u064a\u062a\u0645 \u0625\u0646\u0647\u0627\u0621 \u062c\u0644\u0633\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0623\u0648 \u0631\u0645\u0648\u0632 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 (Authentication Tokens) \u0648\u062e\u0627\u0635\u0629 \u0631\u0645\u0648\u0632 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u0645\u0648\u062d\u0651\u062f (SSO) \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d \u062e\u0644\u0627\u0644 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c \u0623\u0648 \u0641\u064a \u0641\u062a\u0631\u0629 \u0627\u0644\u062e\u0645\u0648\u0644. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u062d\u064a\u062b\u0645\u0627 \u0623\u0645\u0643\u0646 \u0630\u0644\u0643\u060c \u0642\u0645 \u0628\u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u062b\u0646\u0627\u0626\u064a \u0644\u0645\u0646\u0639 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0622\u0644\u064a\u0629 \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f(Credential Stuffing)\u060c \u0648\u0647\u062c\u0648\u0645 \u0643\u0633\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 (Brute Force) \u0648\u0647\u062c\u0645\u0627\u062a \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0644\u0645\u0633\u0631\u0648\u0642\u0629. \u0644\u0627 \u062a\u0631\u0633\u0644 \u0623\u0648 \u062a\u0636\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629\u060c \u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0645\u062f\u0631\u0627\u0621 \u0627\u0644\u0646\u0638\u0627\u0645 (\u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646) \u0646\u0641\u0650\u0651\u0630 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0636\u0639\u064a\u0641\u0629\u060c \u0645\u062b\u0644 \u0627\u062e\u062a\u0628\u0627\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062c\u062f\u064a\u062f\u0629 \u0623\u0648 \u0627\u0644\u062a\u064a \u062a\u0645 \u062a\u063a\u064a\u064a\u0631\u0647\u0627 \u0648\u0645\u0642\u0627\u0631\u0646\u062a\u0647\u0627 \u0628\u0642\u0627\u0626\u0645\u0629 \u0623\u0633\u0648\u0623 10,000 \u0643\u0644\u0645\u0629 \u0645\u0631\u0648\u0631. \u0627\u0636\u0628\u0637 \u0637\u0648\u0644 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u0635\u0639\u0648\u0628\u062a\u0647\u0627 \u0648\u0642\u0645 \u0628\u0627\u062a\u0628\u0627\u0639 \u0627\u0644\u0633\u064a\u0627\u0633\u0627\u062a \u0648\u0627\u0644\u0625\u0631\u0634\u0627\u062f\u0627\u062a \u0627\u0644\u0648\u0627\u0631\u062f\u0629 \u0641\u064a NIST 800-63b \u0641\u064a \u0627\u0644\u0642\u0633\u0645 5.1.1 \"\u062a\u0630\u0643\u0651\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0633\u0631 \u0627\u0644\u0645\u062d\u0641\u0648\u0638\u0629 \u0623\u0648 \u0633\u064a\u0627\u0633\u0627\u062a \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631\". \u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0645\u0633\u0627\u0631\u0627\u062a \u0643\u064f\u0644\u064b\u0627 \u0645\u0646 \u0627\u0644\u062a\u0633\u062c\u064a\u0644 \u0648\u0627\u0633\u062a\u0639\u0627\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0648\u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (API) \u0645\u062d\u0645\u064a\u0651\u0629 \u0636\u062f \u0647\u062c\u0645\u0627\u062a \u0641\u062d\u0635 \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a (Account Enumeration) \u060c \u0642\u0645 \u0628\u0625\u0638\u0647\u0627\u0631 \u0646\u0641\u0633 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062e\u0637\u0623 \u0644\u062c\u0645\u064a\u0639 \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644. \u0627\u0644\u062d\u062f \u0645\u0646 \u0645\u062d\u0627\u0648\u0644\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u0641\u0627\u0634\u0644\u0629. \u0648\u0642\u0645 \u0628\u062a\u0633\u062c\u064a\u0644 \u062c\u0645\u064a\u0639 \u062d\u0627\u0644\u0627\u062a \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0648\u0642\u0645 \u0628\u062a\u0646\u0628\u064a\u0647 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0639\u0646\u062f \u0627\u0643\u062a\u0634\u0627\u0641 \u0645\u062d\u0627\u0648\u0644\u0629 \u0647\u062c\u0645\u0627\u062a \u0643\u0633\u0631 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f (Credential Stuffing) \u0623\u0648 \u0647\u062c\u0648\u0645 \u0643\u0633\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 (Brute Force) \u0623\u0648 \u0623\u064a \u0647\u062c\u0645\u0627\u062a \u0623\u062e\u0631\u0649. \u0627\u0633\u062a\u062e\u062f\u0645 \u0645\u062f\u064a\u0631 \u062c\u0644\u0633\u0629 \u0645\u064f\u062f\u0645\u062c \u0648\u0622\u0645\u0646 \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645\u060c \u064a\u0642\u0648\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0645\u0639\u0631\u0651\u0641 \u062c\u0644\u0633\u0629 \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u062c\u062f\u064a\u062f\u0629 \u0645\u0639 (Entropy) \u0639\u0627\u0644\u064a\u0629 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644\u060c \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0627\u062a \u064a\u062c\u0628 \u0623\u0644\u0627 \u062a\u0643\u0648\u0646 \u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0639\u0646\u0648\u0627\u0646 URL\u060c \u0648\u064a\u062c\u0628 \u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0628\u0634\u0643\u0644 \u0622\u0645\u0646 \u0648 \u0625\u0646\u0647\u0627\u0621 \u0635\u0644\u0627\u062d\u064a\u062a\u0647\u0627 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c\u060c \u0623\u0648 \u0627\u0644\u062e\u0645\u0648\u0644\u060c \u0648\u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0621 \u0627\u0644\u0645\u064f\u0637\u0644\u0642 (\u0627\u0646\u062a\u0647\u0627\u0621 \u0623\u0648 \u0646\u0641\u0627\u0630 \u0627\u0644\u0648\u0642\u062a). \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0647\u062c\u0645\u0627\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0648\u0647\u064a \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0642\u0648\u0627\u0626\u0645 \u0645\u0639\u0631\u0648\u0641\u0629 \u0633\u0627\u0628\u0642\u064b\u0627 \u0644\u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u062a\u064f\u0639\u062a\u0628\u0631 \u0645\u0646 \u0623\u0643\u062b\u0631 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0634\u064a\u0648\u0639\u064b\u0627\u060c \u0648 \u0644\u0646\u0641\u0631\u0636 \u0623\u0646 \u0623\u062d\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0645 \u064a\u064f\u0637\u0628\u0651\u0642 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a\u0629 \u0648\u0627\u0644\u0643\u0627\u0641\u064a\u0629 \u0644\u0644\u062d\u062f \u0645\u0646 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0623\u0648 \u0647\u062c\u0645\u0627\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f\u060c \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629\u060c \u064a\u0645\u0643\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062e\u0637\u0623 \u0627\u0644\u0635\u0627\u062f\u0631\u0629 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0643\u0645\u0639\u064a\u0627\u0631 \u0644\u062a\u062d\u062f\u064a\u062f \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0635\u0627\u0644\u062d\u0629. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u062a\u062d\u062f\u062b \u0645\u0639\u0638\u0645 \u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0628\u0633\u0628\u0628 \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0633\u062a\u0645\u0631 \u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0643\u0639\u0627\u0645\u0644 \u0648\u062d\u064a\u062f \u0644\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u062d\u062a\u0649 \u0648\u0625\u0646 \u062a\u0645 \u0627\u0639\u062a\u0645\u0627\u062f \u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0645\u0627\u0631\u0633\u0627\u062a \u0648\u0627\u0644\u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0645\u0633\u062a\u0645\u0631 \u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u062d\u064a\u062b \u062c\u0639\u0644 \u0633\u064a\u0627\u0633\u0629 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0645\u0639\u0642\u0651\u062f\u0629\u060c \u064a\u064f\u0634\u062c\u0651\u0639 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0639\u0644\u0649 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631. \u0644\u0630\u0644\u0643 \u0646\u0646\u0635\u062d \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0628\u0625\u064a\u0642\u0627\u0641 \u0647\u0630\u0647 \u0627\u0644\u0645\u064f\u0645\u0627\u0631\u0633\u0627\u062a \u0648\u0641\u0642\u064b\u0627 \u0644\u0640 NIST 800-63 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u062b\u0646\u0627\u0626\u064a. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0644\u0627 \u064a\u062a\u0645 \u062a\u0639\u064a\u064a\u0646 \u0645\u062f\u0629 \u0627\u0646\u062a\u0647\u0627\u0621 \u0627\u0644\u062c\u0644\u0633\u0629 (Timeouts) \u0644\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d\u060c \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062d\u062f \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0627\u0644\u0623\u0645\u0627\u0643\u0646 \u0627\u0644\u0639\u0627\u0645\u0629 \u0644\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0623\u062d\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0627\u062e\u062a\u064a\u0627\u0631 \"\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c\"\u060c \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0628\u0633\u0627\u0637\u0629 \u0628\u0625\u063a\u0644\u0627\u0642 \u0639\u0644\u0627\u0645\u0629 \u062a\u0628\u0648\u064a\u0628 \u0627\u0644\u0645\u062a\u0635\u0641\u062d\u060c \u0641\u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0641\u0633 \u0627\u0644\u0645\u062a\u0635\u0641\u062d \u0628\u0639\u062f \u0633\u0627\u0639\u0627\u062a \u0642\u0644\u064a\u0644\u0629 \u0644\u064a\u062c\u062f \u0623\u0646\u0647 \u0644\u0627 \u064a\u0632\u0627\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0642\u064a\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 (Authenticated). \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"A07 \u0627\u0644\u0647\u0648\u064a\u0629 \u0648 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#a072021","text":"","title":"A07:2021 \u2013  \u0627\u0644\u0647\u0648\u064a\u0629 \u0648 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0642"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#_2","text":"\u0647\u0630 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u064a\u064f\u0639\u0631\u0641 \u0633\u0627\u0628\u0642\u064b\u0627 \u0628\u0627\u0633\u0645 \u0636\u0639\u0641 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0647\u0648\u064a\u0629 (Broken Authentication) \u0648\u0643\u0627\u0646\u062a \u0647\u064a \u0627\u0644\u062e\u0637\u0631 \u0631\u0642\u0645 #2 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0628\u0642. \u0648\u062d\u0627\u0644\u064a\u064b\u0627 \u062a\u0634\u0645\u0644 \u0639\u0644\u0649 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 CWEs \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0651\u0642. \u064a\u062a\u0636\u0645\u0651\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0643\u0644 \u0645\u0646 (CWE-384,CWE-297,CWE-287).","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#_3","text":"\u064a\u064f\u0639\u062f \u062a\u0623\u0643\u064a\u062f \u0647\u0648\u064a\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0648\u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0648\u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u062c\u0644\u0633\u0629 \u0623\u0645\u0631\u064b\u0627 \u0628\u0627\u0644\u063a \u0627\u0644\u0623\u0647\u0645\u064a\u0629 \u0648\u0630\u0644\u0643 \u0644\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629. \u0642\u062f \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u0636\u0639\u0641 \u0641\u064a \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642: \u064a\u0633\u0645\u062d \u0628\u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0622\u0644\u064a\u0629 \u0645\u062b\u0644 \u0647\u062c\u0645\u0627\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f (Credential Stuffing)\u060c \u062d\u064a\u062b \u064a\u0643\u0648\u0646 \u0644\u062f\u0649 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0642\u0627\u0626\u0645\u0629 \u0628\u0623\u0633\u0645\u0627\u0621 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0648\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631. \u064a\u0633\u0645\u062d \u0628\u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0647\u062c\u0648\u0645 \u0643\u0633\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 (Brute Force) \u0623\u0648 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0622\u0644\u064a\u0629 \u0627\u0644\u0623\u062e\u0631\u0649. \u064a\u0633\u0645\u062d \u0628\u0647\u062c\u0645\u0627\u062a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0623\u0648 \u0627\u0644\u0636\u0639\u064a\u0641\u0629 \u0623\u0648 \u0627\u0644\u0645\u0639\u0631\u0648\u0641\u0629 \u060c \u0645\u062b\u0644 \"Password1\" \u0623\u0648 \" Admin / Admin\". \u064a\u0633\u062a\u062e\u062f\u0645 \u0639\u0648\u0627\u0645\u0644 \u0636\u0639\u064a\u0641\u0629 \u0648\u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644\u0629 \u0644\u0627\u0633\u062a\u0639\u0627\u062f\u0629 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u0627\u0633\u062a\u0631\u062c\u0627\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0648\u0627\u0644\u062a\u064a \u064a\u062c\u0639\u0644\u0647\u0627 \u0622\u0645\u0646\u0629\u060c \u0645\u062b\u0644 \"\u0627\u0644\u0623\u062c\u0648\u0628\u0629 \u0627\u0644\u0645\u0633\u062a\u0646\u062f\u0650\u0629 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0631\u0641\u0629\". \u064a\u0633\u062a\u062e\u062f\u0645 \u0643\u0644\u0645\u0627\u062a \u0645\u0631\u0648\u0631 \u063a\u064a\u0631 \u0645\u0634\u0641\u0651\u0631\u0629\u060c \u0623\u0648 \u0645\u0634\u0641\u0651\u0631\u0629 \u0628\u0634\u0643\u0644 \u0645\u064f\u062c\u0632\u0651\u0623 \u0623\u0648 \u0628\u0634\u0643\u0644 \u0636\u0639\u064a\u0641 (\u0631\u0627\u062c\u0639 A3:2017- \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0651\u0629 \u0623\u0648 \u0627\u0644\u0645\u0643\u0634\u0648\u0641\u0629). \u0639\u062f\u0645 \u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u062b\u0646\u0627\u0626\u064a \u0623\u0648 \u062a\u0643\u0648\u0646 \u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644\u0629. \u064a\u0639\u0631\u0636 \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0629 (Session IDs) \u0641\u064a \u0639\u0646\u0648\u0627\u0646 URL \u0644\u0627 \u064a\u0642\u0648\u0645 \u0628\u0625\u0639\u0627\u062f\u0629 \u0625\u0646\u0634\u0627\u0621 \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0629 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0628\u0646\u062c\u0627\u062d. \u0644\u0627 \u064a\u0646\u0647\u064a \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0629 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d. \u0644\u0627 \u064a\u062a\u0645 \u0625\u0646\u0647\u0627\u0621 \u062c\u0644\u0633\u0627\u062a \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0623\u0648 \u0631\u0645\u0648\u0632 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 (Authentication Tokens) \u0648\u062e\u0627\u0635\u0629 \u0631\u0645\u0648\u0632 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u0645\u0648\u062d\u0651\u062f (SSO) \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d \u062e\u0644\u0627\u0644 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c \u0623\u0648 \u0641\u064a \u0641\u062a\u0631\u0629 \u0627\u0644\u062e\u0645\u0648\u0644.","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#_4","text":"\u062d\u064a\u062b\u0645\u0627 \u0623\u0645\u0643\u0646 \u0630\u0644\u0643\u060c \u0642\u0645 \u0628\u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u062b\u0646\u0627\u0626\u064a \u0644\u0645\u0646\u0639 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0622\u0644\u064a\u0629 \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f(Credential Stuffing)\u060c \u0648\u0647\u062c\u0648\u0645 \u0643\u0633\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 (Brute Force) \u0648\u0647\u062c\u0645\u0627\u062a \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0644\u0645\u0633\u0631\u0648\u0642\u0629. \u0644\u0627 \u062a\u0631\u0633\u0644 \u0623\u0648 \u062a\u0636\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0639\u062a\u0645\u0627\u062f \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629\u060c \u062e\u0627\u0635\u0629 \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0645\u062f\u0631\u0627\u0621 \u0627\u0644\u0646\u0638\u0627\u0645 (\u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646) \u0646\u0641\u0650\u0651\u0630 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0636\u0639\u064a\u0641\u0629\u060c \u0645\u062b\u0644 \u0627\u062e\u062a\u0628\u0627\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062c\u062f\u064a\u062f\u0629 \u0623\u0648 \u0627\u0644\u062a\u064a \u062a\u0645 \u062a\u063a\u064a\u064a\u0631\u0647\u0627 \u0648\u0645\u0642\u0627\u0631\u0646\u062a\u0647\u0627 \u0628\u0642\u0627\u0626\u0645\u0629 \u0623\u0633\u0648\u0623 10,000 \u0643\u0644\u0645\u0629 \u0645\u0631\u0648\u0631. \u0627\u0636\u0628\u0637 \u0637\u0648\u0644 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u0635\u0639\u0648\u0628\u062a\u0647\u0627 \u0648\u0642\u0645 \u0628\u0627\u062a\u0628\u0627\u0639 \u0627\u0644\u0633\u064a\u0627\u0633\u0627\u062a \u0648\u0627\u0644\u0625\u0631\u0634\u0627\u062f\u0627\u062a \u0627\u0644\u0648\u0627\u0631\u062f\u0629 \u0641\u064a NIST 800-63b \u0641\u064a \u0627\u0644\u0642\u0633\u0645 5.1.1 \"\u062a\u0630\u0643\u0651\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0633\u0631 \u0627\u0644\u0645\u062d\u0641\u0648\u0638\u0629 \u0623\u0648 \u0633\u064a\u0627\u0633\u0627\u062a \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631\". \u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0645\u0633\u0627\u0631\u0627\u062a \u0643\u064f\u0644\u064b\u0627 \u0645\u0646 \u0627\u0644\u062a\u0633\u062c\u064a\u0644 \u0648\u0627\u0633\u062a\u0639\u0627\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0648\u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a (API) \u0645\u062d\u0645\u064a\u0651\u0629 \u0636\u062f \u0647\u062c\u0645\u0627\u062a \u0641\u062d\u0635 \u0627\u0644\u062d\u0633\u0627\u0628\u0627\u062a (Account Enumeration) \u060c \u0642\u0645 \u0628\u0625\u0638\u0647\u0627\u0631 \u0646\u0641\u0633 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062e\u0637\u0623 \u0644\u062c\u0645\u064a\u0639 \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644. \u0627\u0644\u062d\u062f \u0645\u0646 \u0645\u062d\u0627\u0648\u0644\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u0641\u0627\u0634\u0644\u0629. \u0648\u0642\u0645 \u0628\u062a\u0633\u062c\u064a\u0644 \u062c\u0645\u064a\u0639 \u062d\u0627\u0644\u0627\u062a \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0648\u0642\u0645 \u0628\u062a\u0646\u0628\u064a\u0647 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646 \u0639\u0646\u062f \u0627\u0643\u062a\u0634\u0627\u0641 \u0645\u062d\u0627\u0648\u0644\u0629 \u0647\u062c\u0645\u0627\u062a \u0643\u0633\u0631 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f (Credential Stuffing) \u0623\u0648 \u0647\u062c\u0648\u0645 \u0643\u0633\u0631 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 (Brute Force) \u0623\u0648 \u0623\u064a \u0647\u062c\u0645\u0627\u062a \u0623\u062e\u0631\u0649. \u0627\u0633\u062a\u062e\u062f\u0645 \u0645\u062f\u064a\u0631 \u062c\u0644\u0633\u0629 \u0645\u064f\u062f\u0645\u062c \u0648\u0622\u0645\u0646 \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645\u060c \u064a\u0642\u0648\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0645\u0639\u0631\u0651\u0641 \u062c\u0644\u0633\u0629 \u0639\u0634\u0648\u0627\u0626\u064a\u0629 \u062c\u062f\u064a\u062f\u0629 \u0645\u0639 (Entropy) \u0639\u0627\u0644\u064a\u0629 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644\u060c \u0645\u0639\u0631\u0651\u0641\u0627\u062a \u0627\u0644\u062c\u0644\u0633\u0627\u062a \u064a\u062c\u0628 \u0623\u0644\u0627 \u062a\u0643\u0648\u0646 \u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0639\u0646\u0648\u0627\u0646 URL\u060c \u0648\u064a\u062c\u0628 \u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0628\u0634\u0643\u0644 \u0622\u0645\u0646 \u0648 \u0625\u0646\u0647\u0627\u0621 \u0635\u0644\u0627\u062d\u064a\u062a\u0647\u0627 \u0628\u0639\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c\u060c \u0623\u0648 \u0627\u0644\u062e\u0645\u0648\u0644\u060c \u0648\u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0621 \u0627\u0644\u0645\u064f\u0637\u0644\u0642 (\u0627\u0646\u062a\u0647\u0627\u0621 \u0623\u0648 \u0646\u0641\u0627\u0630 \u0627\u0644\u0648\u0642\u062a).","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0647\u062c\u0645\u0627\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0648\u0647\u064a \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0642\u0648\u0627\u0626\u0645 \u0645\u0639\u0631\u0648\u0641\u0629 \u0633\u0627\u0628\u0642\u064b\u0627 \u0644\u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u062a\u064f\u0639\u062a\u0628\u0631 \u0645\u0646 \u0623\u0643\u062b\u0631 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0634\u064a\u0648\u0639\u064b\u0627\u060c \u0648 \u0644\u0646\u0641\u0631\u0636 \u0623\u0646 \u0623\u062d\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0645 \u064a\u064f\u0637\u0628\u0651\u0642 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a\u0629 \u0648\u0627\u0644\u0643\u0627\u0641\u064a\u0629 \u0644\u0644\u062d\u062f \u0645\u0646 \u0627\u0644\u062a\u0647\u062f\u064a\u062f\u0627\u062a \u0623\u0648 \u0647\u062c\u0645\u0627\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f\u060c \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629\u060c \u064a\u0645\u0643\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062e\u0637\u0623 \u0627\u0644\u0635\u0627\u062f\u0631\u0629 \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0643\u0645\u0639\u064a\u0627\u0631 \u0644\u062a\u062d\u062f\u064a\u062f \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0635\u0627\u0644\u062d\u0629. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u062a\u062d\u062f\u062b \u0645\u0639\u0638\u0645 \u0647\u062c\u0645\u0627\u062a \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0628\u0633\u0628\u0628 \u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u0633\u062a\u0645\u0631 \u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0643\u0639\u0627\u0645\u0644 \u0648\u062d\u064a\u062f \u0644\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u062d\u062a\u0649 \u0648\u0625\u0646 \u062a\u0645 \u0627\u0639\u062a\u0645\u0627\u062f \u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0645\u0627\u0631\u0633\u0627\u062a \u0648\u0627\u0644\u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0645\u0633\u062a\u0645\u0631 \u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u062d\u064a\u062b \u062c\u0639\u0644 \u0633\u064a\u0627\u0633\u0629 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0645\u0639\u0642\u0651\u062f\u0629\u060c \u064a\u064f\u0634\u062c\u0651\u0639 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0639\u0644\u0649 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631. \u0644\u0630\u0644\u0643 \u0646\u0646\u0635\u062d \u0627\u0644\u0645\u0624\u0633\u0633\u0627\u062a \u0628\u0625\u064a\u0642\u0627\u0641 \u0647\u0630\u0647 \u0627\u0644\u0645\u064f\u0645\u0627\u0631\u0633\u0627\u062a \u0648\u0641\u0642\u064b\u0627 \u0644\u0640 NIST 800-63 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0627\u0644\u062b\u0646\u0627\u0626\u064a. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0644\u0627 \u064a\u062a\u0645 \u062a\u0639\u064a\u064a\u0646 \u0645\u062f\u0629 \u0627\u0646\u062a\u0647\u0627\u0621 \u0627\u0644\u062c\u0644\u0633\u0629 (Timeouts) \u0644\u0644\u062a\u0637\u0628\u064a\u0642 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d\u060c \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062d\u062f \u0627\u0644\u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0627\u0644\u0623\u0645\u0627\u0643\u0646 \u0627\u0644\u0639\u0627\u0645\u0629 \u0644\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0623\u062d\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0628\u062f\u0644\u064b\u0627 \u0645\u0646 \u0627\u062e\u062a\u064a\u0627\u0631 \"\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062e\u0631\u0648\u062c\"\u060c \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0628\u0628\u0633\u0627\u0637\u0629 \u0628\u0625\u063a\u0644\u0627\u0642 \u0639\u0644\u0627\u0645\u0629 \u062a\u0628\u0648\u064a\u0628 \u0627\u0644\u0645\u062a\u0635\u0641\u062d\u060c \u0641\u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0646\u0641\u0633 \u0627\u0644\u0645\u062a\u0635\u0641\u062d \u0628\u0639\u062f \u0633\u0627\u0639\u0627\u062a \u0642\u0644\u064a\u0644\u0629 \u0644\u064a\u062c\u062f \u0623\u0646\u0647 \u0644\u0627 \u064a\u0632\u0627\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0642\u064a\u062f \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 (Authenticated).","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#_6","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A07_2021-Identification_and_Authentication_Failures/#cwes","text":"CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/","text":"A08:2021 \u2013 \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 10 16.67% 2.05% 75.04% 45.35% 6.94 7.94 47,972 1,152 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u062a\u0645\u062a \u0625\u0636\u0627\u0641\u0629 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0641\u064a \u0639\u0627\u0645 2021 \u062d\u064a\u062b \u064a\u064f\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0648\u0636\u0639 \u0627\u0641\u062a\u0631\u0627\u0636\u0627\u062a \u062a\u062a\u0639\u0644\u0651\u0642 \u0628\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u062a\u0637\u0628\u064a\u0642 \u0645\u0639\u0627\u064a\u064a\u0631 CI/CD pipeline \u0645\u0646 \u062f\u0648\u0646 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0633\u0644\u0627\u0645\u062a\u0647\u0627. \u0625\u0646 \u0623\u062d\u062f \u0623\u0643\u0628\u0631 \u0627\u0644\u062a\u0623\u062b\u064a\u0631\u0627\u062a \u0627\u0644\u0643\u0628\u064a\u0631\u0629 \u0648\u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0642\u0648\u0627\u0639\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062b\u063a\u0631\u0627\u062a CVE /CVSS \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u0648\u0647\u0645: CWE-502\u060c CWE-829\u060c CWE-494. \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0627\u0645\u062c \u062a\u062a\u0639\u0644\u0651\u0642 \u0628\u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0648\u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0651\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0651\u0629 \u0645\u0646 \u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0643\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u0639\u0651\u0644\u0642 \u0628\u0633\u0644\u0627\u0645\u062a\u0647\u0627. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644: \u062d\u064a\u0646 \u064a\u062a\u0645 \u062a\u0631\u0645\u064a\u0632 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a \u0623\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0637\u0631\u064a\u0642\u0629 \u062a\u064f\u0645\u0643\u0651\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0623\u0646 \u064a\u0637\u0651\u0644\u0639 \u0623\u0648 \u064a\u0642\u0648\u0645 \u0628\u0625\u062c\u0631\u0627\u0621 \u0627\u0644\u062a\u0639\u062f\u064a\u0644\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u064f\u0635\u0631\u0651\u062d \u0628\u0647\u0627. \u0645\u062b\u0627\u0644 \u0622\u062e\u0631: \u0639\u0646\u062f\u0645\u0627 \u064a\u0639\u062a\u0645\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0639\u0644\u0649 \u0625\u0636\u0627\u0641\u0627\u062a \u0623\u062e\u0631\u0649 \u0623\u0648 \u0645\u0643\u062a\u0628\u0627\u062a \u0623\u0648 \u0628\u0639\u0636 \u0627\u0644\u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642\u0629 \u0623\u0648 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0634\u0628\u0643\u0627\u062a \u062a\u0648\u0635\u064a\u0644 \u0627\u0644\u0645\u062d\u062a\u0648\u0649 CDNs \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642 \u0628\u0647\u0627\u060c \u0648\u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0624\u062f\u064a CI / CIC \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0625\u0644\u0649 \u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u063a\u064a\u0631 \u0645\u064f\u0635\u0631\u0651\u062d \u0628\u0647 \u0623\u0648 \u062a\u0646\u0632\u064a\u0644 \u0628\u0631\u0645\u062c\u064a\u0629 \u062e\u0628\u064a\u062b\u0629 \u0623\u0648 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0646\u0638\u0627\u0645. \u0623\u062e\u064a\u0631\u064b\u0627\u060c \u062a\u062a\u0636\u0645\u0651\u0646 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0622\u0646 \u0648\u0638\u064a\u0641\u0629 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a\u060c \u062d\u064a\u062b \u064a\u062a\u0645 \u062a\u0646\u0632\u064a\u0644 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u062f\u0648\u0646 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0633\u0644\u0627\u0645\u0629 \u0628\u0634\u0643\u0644 \u0643\u0627\u0641\u064a \u0648\u062a\u062b\u0628\u064a\u062a\u0647\u0627 \u0639\u0644\u0649 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0648\u062b\u0648\u0642 \u0628\u0647\u0627 \u0633\u0627\u0628\u0642\u064b\u0627. \u0645\u0645\u0627 \u064a\u064f\u0645\u0643\u0651\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0623\u0646 \u064a\u0642\u0648\u0645\u0648\u0627 \u0628\u062a\u062d\u0645\u064a\u0644 \u062a\u062d\u062f\u064a\u062b\u0627\u062a\u0647\u0645 \u0627\u0644\u062e\u0627\u0635\u0629 \u0644\u064a\u062a\u0645 \u062a\u062b\u0628\u064a\u062a\u0647\u0627 \u0648\u062a\u0634\u063a\u064a\u0644\u0647\u0627 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u0623\u062c\u0647\u0632\u0629. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u062a\u0623\u0643\u062f \u0645\u0646 \u0639\u062f\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0634\u0641\u0651\u0631\u0629 \u0623\u0648 \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u0642\u0651\u0639\u0629 \u0625\u0644\u0649 \u0639\u0645\u0644\u0627\u0621 \u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642\u064a\u0646 \u0628\u062f\u0648\u0646 \u0634\u0643\u0644 \u0645\u0646 \u0623\u0634\u0643\u0627\u0644 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0633\u0644\u0627\u0645\u0629 \u0623\u0648 \u0648\u062c\u0648\u062f \u062a\u0648\u0642\u064a\u0639 \u0631\u0642\u0645\u064a \u0648\u0630\u0644\u0643 \u0645\u0646 \u0623\u062c\u0644 \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0623\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u0631\u0633\u0645\u064a\u0629 \u0648\u0627\u0644\u0645\u062a\u0648\u0642\u0639\u0629\u060c \u0639\u0628\u0631 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0648\u062c\u0648\u062f \u0627\u0644\u062a\u0648\u0627\u0642\u064a\u0639 \u0623\u0648 \u0622\u0644\u064a\u0627\u062a \u0645\u064f\u0634\u0627\u0628\u0647\u0629 \u0644\u0636\u0645\u0627\u0646 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0648\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a\u060c \u0645\u062b\u0644 Npm \u0623\u0648 Maven\u060c \u062a\u0633\u062a\u062e\u062f\u0645 \u0645\u0635\u0627\u062f\u0631 \u0645\u0648\u062b\u0648\u0642\u0629. \u062a\u0623\u0643\u062f \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0639\u0646\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u0645\u062b\u0644 OWASP Dependency Check \u0623\u0648 OWASP CycloneDX \u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u064a \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 CI / CD \u0644\u062f\u064a\u0647 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628\u0629 \u0648\u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0627\u0644\u0645\u0646\u0627\u0633\u0628 \u0644\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0633\u0644\u0627\u0645\u062a\u0647\u0627 \u062e\u0644\u0627\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0644\u0646\u0634\u0631. \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1 \u0625\u0644\u063a\u0627\u0621 \u0627\u0644\u062a\u0633\u0644\u0633\u0644 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646: \u064a\u0633\u062a\u062f\u0639\u064a \u062a\u0637\u0628\u064a\u0642 React \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0645\u0635\u063a\u0651\u0631\u0629 \u0644\u0640 Spring Boot. \u0641\u0642\u062f \u062d\u0627\u0648\u0644 \u0627\u0644\u0645\u0628\u0631\u0645\u062c\u064a\u0646 \u0628\u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0645 \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u063a\u064a\u064a\u0631. \u0648\u0627\u0644\u062d\u0644 \u0627\u0644\u0630\u064a \u062a\u0648\u0635\u0644\u0648\u0627 \u0625\u0644\u064a\u0647 \u0647\u0648 \u0625\u062c\u0631\u0627\u0621 \u062a\u0633\u0644\u0633\u0644 \u0644\u062d\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0648\u062a\u0645\u0631\u064a\u0631\u0647\u0627 \u0630\u0647\u0627\u0628\u064b\u0627 \u0648\u0625\u064a\u0627\u0628\u064b\u0627 \u0645\u0639 \u0643\u0644 \u0637\u0644\u0628. \u0641\u0642\u062f \u0644\u0627\u062d\u0638 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u062a\u0648\u0642\u064a\u0639 \u0643\u0627\u0626\u0646 \u062c\u0627\u0641\u0627 R00 \u064a\u0645\u0643\u0646\u0647 \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0627\u0629 Java Serial Killer \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u062a\u0646\u0641\u064a\u0630 \u0639\u0646 \u0628\u0639\u062f. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0628\u062f\u0648\u0646 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0627\u0644\u062a\u0648\u0627\u0642\u064a\u0639: \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0645\u0648\u062c\u0651\u0647\u0627\u062a \u0627\u0644\u0645\u0646\u0632\u0644\u064a\u0629 \u0648\u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0627\u0644\u062b\u0627\u0628\u062a\u0629 Firmware \u0648\u063a\u064a\u0631\u0647\u0627 \u0644\u0627 \u062a\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0635\u062d\u0629 \u0627\u0644\u062a\u0648\u0627\u0642\u064a\u0639 \u0627\u0644\u0631\u0642\u0645\u064a\u0629 \u0639\u0646\u062f \u0625\u062c\u0631\u0627\u0621 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a. \u062d\u064a\u062b \u062a\u064f\u0639\u062f \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u0642\u0639\u0629 \u0647\u062f\u0641\u064b\u0627 \u0633\u0647\u0644\u064b\u0627 \u0644\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646. \u0641\u0627\u0644\u062e\u0637\u0631 \u0647\u0646\u0627 \u0623\u0646\u0647 \u0644\u0627 \u062a\u0648\u062c\u062f \u0622\u0644\u064a\u0629 \u0644\u0625\u0635\u0644\u0627\u062d\u0647\u060c \u0628\u0644 \u0641\u064a \u0627\u0646\u062a\u0638\u0627\u0631 \u0627\u0644\u0625\u0635\u0644\u0627\u062d \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0642\u0627\u062f\u0645\u0629 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u062a\u064a \u0627\u0633\u062a\u0647\u062f\u0641\u062a SolarWinds : \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u0648\u0646 \u0627\u0644\u0645\u062a\u0642\u062f\u0645\u0648\u0646 \u0628\u0627\u0633\u062a\u0647\u062f\u0627\u0641 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0644\u0644\u0623\u0646\u0638\u0645\u0629. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u0644\u0627\u062d\u0638\u0629 \u0627\u0644\u0647\u062c\u0645\u0629 \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0627\u0644\u062a\u064a \u0627\u0633\u062a\u0647\u062f\u0641\u062a SolarWinds Orion. \u062d\u064a\u062b \u0642\u0627\u0645\u062a \u0627\u0644\u0634\u0631\u0643\u0629 \u0628\u062a\u0637\u0648\u064a\u0631 \u0622\u0644\u064a\u0629 \u0648\u0633\u064a\u0627\u0633\u0629 \u0644\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0633\u0644\u0627\u0645\u0629 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0648\u0623\u0645\u0646\u0647\u0627. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0641\u0642\u062f \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u0648\u0646 \u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627\u060c \u0648\u0642\u062f \u062d\u062f\u062b \u0630\u0644\u0643 \u0648\u0627\u0633\u062a\u063a\u0644\u0648\u0627 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u062a\u0644\u0643 \u0627\u0644\u0622\u0644\u064a\u0629 \u0648\u0644\u0645\u062f\u0629 \u0623\u0634\u0647\u0631\u060c \u062d\u064a\u062b \u0642\u0627\u0645\u0648\u0627 \u0628\u062d\u0642\u0646 \u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0644\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u064a \u0623\u062b\u0651\u0631\u062a \u0639\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 18,000 \u0646\u0638\u0627\u0645 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 100 \u0645\u0646\u0638\u0645\u0629 \u062d\u0648\u0644 \u0627\u0644\u0639\u0627\u0644\u0645. \u062d\u064a\u062b \u064a\u064f\u0639\u062a\u0628\u0631 \u0647\u0630\u0627 \u0627\u0644\u0647\u062c\u0648\u0645 \u0645\u0646 \u0623\u062e\u0637\u0631 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u062d\u062f\u062b\u062a \u062d\u062a\u0649 \u064a\u0648\u0645\u0646\u0627 \u0647\u0630\u0627. \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Cheat Sheet: Software Supply Chain Security OWASP Cheat Sheet: Secure build and deployment OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"A08  \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0627\u062a"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#a082021","text":"","title":"A08:2021 \u2013 \u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 10 16.67% 2.05% 75.04% 45.35% 6.94 7.94 47,972 1,152","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#_2","text":"\u062a\u0645\u062a \u0625\u0636\u0627\u0641\u0629 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0641\u064a \u0639\u0627\u0645 2021 \u062d\u064a\u062b \u064a\u064f\u0631\u0643\u0651\u0632 \u0639\u0644\u0649 \u0648\u0636\u0639 \u0627\u0641\u062a\u0631\u0627\u0636\u0627\u062a \u062a\u062a\u0639\u0644\u0651\u0642 \u0628\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0623\u0648 \u062a\u0637\u0628\u064a\u0642 \u0645\u0639\u0627\u064a\u064a\u0631 CI/CD pipeline \u0645\u0646 \u062f\u0648\u0646 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0633\u0644\u0627\u0645\u062a\u0647\u0627. \u0625\u0646 \u0623\u062d\u062f \u0623\u0643\u0628\u0631 \u0627\u0644\u062a\u0623\u062b\u064a\u0631\u0627\u062a \u0627\u0644\u0643\u0628\u064a\u0631\u0629 \u0648\u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0642\u0648\u0627\u0639\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062b\u063a\u0631\u0627\u062a CVE /CVSS \u0648\u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u0648\u0647\u0645: CWE-502\u060c CWE-829\u060c CWE-494.","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#_3","text":"\u0641\u0634\u0644 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0628\u0631\u0627\u0645\u062c \u062a\u062a\u0639\u0644\u0651\u0642 \u0628\u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0648\u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0651\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0651\u0629 \u0645\u0646 \u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0643\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u0639\u0651\u0644\u0642 \u0628\u0633\u0644\u0627\u0645\u062a\u0647\u0627. \u0639\u0644\u0649 \u0633\u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644: \u062d\u064a\u0646 \u064a\u062a\u0645 \u062a\u0631\u0645\u064a\u0632 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a \u0623\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0637\u0631\u064a\u0642\u0629 \u062a\u064f\u0645\u0643\u0651\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0623\u0646 \u064a\u0637\u0651\u0644\u0639 \u0623\u0648 \u064a\u0642\u0648\u0645 \u0628\u0625\u062c\u0631\u0627\u0621 \u0627\u0644\u062a\u0639\u062f\u064a\u0644\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u064f\u0635\u0631\u0651\u062d \u0628\u0647\u0627. \u0645\u062b\u0627\u0644 \u0622\u062e\u0631: \u0639\u0646\u062f\u0645\u0627 \u064a\u0639\u062a\u0645\u062f \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0639\u0644\u0649 \u0625\u0636\u0627\u0641\u0627\u062a \u0623\u062e\u0631\u0649 \u0623\u0648 \u0645\u0643\u062a\u0628\u0627\u062a \u0623\u0648 \u0628\u0639\u0636 \u0627\u0644\u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642\u0629 \u0623\u0648 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0634\u0628\u0643\u0627\u062a \u062a\u0648\u0635\u064a\u0644 \u0627\u0644\u0645\u062d\u062a\u0648\u0649 CDNs \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642 \u0628\u0647\u0627\u060c \u0648\u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0624\u062f\u064a CI / CIC \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646 \u0625\u0644\u0649 \u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u063a\u064a\u0631 \u0645\u064f\u0635\u0631\u0651\u062d \u0628\u0647 \u0623\u0648 \u062a\u0646\u0632\u064a\u0644 \u0628\u0631\u0645\u062c\u064a\u0629 \u062e\u0628\u064a\u062b\u0629 \u0623\u0648 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0646\u0638\u0627\u0645. \u0623\u062e\u064a\u0631\u064b\u0627\u060c \u062a\u062a\u0636\u0645\u0651\u0646 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0622\u0646 \u0648\u0638\u064a\u0641\u0629 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a\u060c \u062d\u064a\u062b \u064a\u062a\u0645 \u062a\u0646\u0632\u064a\u0644 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u062f\u0648\u0646 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0627\u0644\u0633\u0644\u0627\u0645\u0629 \u0628\u0634\u0643\u0644 \u0643\u0627\u0641\u064a \u0648\u062a\u062b\u0628\u064a\u062a\u0647\u0627 \u0639\u0644\u0649 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u0648\u062b\u0648\u0642 \u0628\u0647\u0627 \u0633\u0627\u0628\u0642\u064b\u0627. \u0645\u0645\u0627 \u064a\u064f\u0645\u0643\u0651\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0623\u0646 \u064a\u0642\u0648\u0645\u0648\u0627 \u0628\u062a\u062d\u0645\u064a\u0644 \u062a\u062d\u062f\u064a\u062b\u0627\u062a\u0647\u0645 \u0627\u0644\u062e\u0627\u0635\u0629 \u0644\u064a\u062a\u0645 \u062a\u062b\u0628\u064a\u062a\u0647\u0627 \u0648\u062a\u0634\u063a\u064a\u0644\u0647\u0627 \u0639\u0644\u0649 \u062c\u0645\u064a\u0639 \u0627\u0644\u0623\u062c\u0647\u0632\u0629.","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#_4","text":"\u062a\u0623\u0643\u062f \u0645\u0646 \u0639\u062f\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0634\u0641\u0651\u0631\u0629 \u0623\u0648 \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u0642\u0651\u0639\u0629 \u0625\u0644\u0649 \u0639\u0645\u0644\u0627\u0621 \u063a\u064a\u0631 \u0645\u0648\u062b\u0648\u0642\u064a\u0646 \u0628\u062f\u0648\u0646 \u0634\u0643\u0644 \u0645\u0646 \u0623\u0634\u0643\u0627\u0644 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0633\u0644\u0627\u0645\u0629 \u0623\u0648 \u0648\u062c\u0648\u062f \u062a\u0648\u0642\u064a\u0639 \u0631\u0642\u0645\u064a \u0648\u0630\u0644\u0643 \u0645\u0646 \u0623\u062c\u0644 \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062a\u0644\u0627\u0639\u0628 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0623\u0648 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u0631\u0633\u0645\u064a\u0629 \u0648\u0627\u0644\u0645\u062a\u0648\u0642\u0639\u0629\u060c \u0639\u0628\u0631 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0648\u062c\u0648\u062f \u0627\u0644\u062a\u0648\u0627\u0642\u064a\u0639 \u0623\u0648 \u0622\u0644\u064a\u0627\u062a \u0645\u064f\u0634\u0627\u0628\u0647\u0629 \u0644\u0636\u0645\u0627\u0646 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0648\u0627\u0644\u0645\u0643\u0648\u0646\u0627\u062a\u060c \u0645\u062b\u0644 Npm \u0623\u0648 Maven\u060c \u062a\u0633\u062a\u062e\u062f\u0645 \u0645\u0635\u0627\u062f\u0631 \u0645\u0648\u062b\u0648\u0642\u0629. \u062a\u0623\u0643\u062f \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0648\u0627\u062a \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0639\u0646\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u0637\u0631\u0641 \u0627\u0644\u062b\u0627\u0644\u062b\u060c \u0645\u062b\u0644 OWASP Dependency Check \u0623\u0648 OWASP CycloneDX \u060c \u0648\u0627\u0644\u062a\u064a \u062a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u064a \u062b\u063a\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 CI / CD \u0644\u062f\u064a\u0647 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628\u0629 \u0648\u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0627\u0644\u0645\u0646\u0627\u0633\u0628 \u0644\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0628\u0631\u0627\u0645\u062c \u0648\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0633\u0644\u0627\u0645\u062a\u0647\u0627 \u062e\u0644\u0627\u0644 \u0622\u0644\u064a\u0629 \u0627\u0644\u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0644\u0646\u0634\u0631.","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1 \u0625\u0644\u063a\u0627\u0621 \u0627\u0644\u062a\u0633\u0644\u0633\u0644 \u0627\u0644\u063a\u064a\u0631 \u0622\u0645\u0646: \u064a\u0633\u062a\u062f\u0639\u064a \u062a\u0637\u0628\u064a\u0642 React \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0645\u0635\u063a\u0651\u0631\u0629 \u0644\u0640 Spring Boot. \u0641\u0642\u062f \u062d\u0627\u0648\u0644 \u0627\u0644\u0645\u0628\u0631\u0645\u062c\u064a\u0646 \u0628\u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0627\u0644\u0634\u0651\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0647\u0645 \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u062a\u063a\u064a\u064a\u0631. \u0648\u0627\u0644\u062d\u0644 \u0627\u0644\u0630\u064a \u062a\u0648\u0635\u0644\u0648\u0627 \u0625\u0644\u064a\u0647 \u0647\u0648 \u0625\u062c\u0631\u0627\u0621 \u062a\u0633\u0644\u0633\u0644 \u0644\u062d\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0648\u062a\u0645\u0631\u064a\u0631\u0647\u0627 \u0630\u0647\u0627\u0628\u064b\u0627 \u0648\u0625\u064a\u0627\u0628\u064b\u0627 \u0645\u0639 \u0643\u0644 \u0637\u0644\u0628. \u0641\u0642\u062f \u0644\u0627\u062d\u0638 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u062a\u0648\u0642\u064a\u0639 \u0643\u0627\u0626\u0646 \u062c\u0627\u0641\u0627 R00 \u064a\u0645\u0643\u0646\u0647 \u0645\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0627\u0629 Java Serial Killer \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u062a\u0646\u0641\u064a\u0630 \u0639\u0646 \u0628\u0639\u062f. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0628\u062f\u0648\u0646 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0627\u0644\u062a\u0648\u0627\u0642\u064a\u0639: \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0623\u062c\u0647\u0632\u0629 \u0627\u0644\u0645\u0648\u062c\u0651\u0647\u0627\u062a \u0627\u0644\u0645\u0646\u0632\u0644\u064a\u0629 \u0648\u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0627\u0644\u062b\u0627\u0628\u062a\u0629 Firmware \u0648\u063a\u064a\u0631\u0647\u0627 \u0644\u0627 \u062a\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0635\u062d\u0629 \u0627\u0644\u062a\u0648\u0627\u0642\u064a\u0639 \u0627\u0644\u0631\u0642\u0645\u064a\u0629 \u0639\u0646\u062f \u0625\u062c\u0631\u0627\u0621 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a. \u062d\u064a\u062b \u062a\u064f\u0639\u062f \u0627\u0644\u0628\u0631\u0627\u0645\u062c \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0627\u0644\u063a\u064a\u0631 \u0645\u0648\u0642\u0639\u0629 \u0647\u062f\u0641\u064b\u0627 \u0633\u0647\u0644\u064b\u0627 \u0644\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646. \u0641\u0627\u0644\u062e\u0637\u0631 \u0647\u0646\u0627 \u0623\u0646\u0647 \u0644\u0627 \u062a\u0648\u062c\u062f \u0622\u0644\u064a\u0629 \u0644\u0625\u0635\u0644\u0627\u062d\u0647\u060c \u0628\u0644 \u0641\u064a \u0627\u0646\u062a\u0638\u0627\u0631 \u0627\u0644\u0625\u0635\u0644\u0627\u062d \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0642\u0627\u062f\u0645\u0629 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u062a\u064a \u0627\u0633\u062a\u0647\u062f\u0641\u062a SolarWinds : \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u0648\u0646 \u0627\u0644\u0645\u062a\u0642\u062f\u0645\u0648\u0646 \u0628\u0627\u0633\u062a\u0647\u062f\u0627\u0641 \u0622\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0644\u0644\u0623\u0646\u0638\u0645\u0629. \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u0645\u0644\u0627\u062d\u0638\u0629 \u0627\u0644\u0647\u062c\u0645\u0629 \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0627\u0644\u062a\u064a \u0627\u0633\u062a\u0647\u062f\u0641\u062a SolarWinds Orion. \u062d\u064a\u062b \u0642\u0627\u0645\u062a \u0627\u0644\u0634\u0631\u0643\u0629 \u0628\u062a\u0637\u0648\u064a\u0631 \u0622\u0644\u064a\u0629 \u0648\u0633\u064a\u0627\u0633\u0629 \u0644\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0633\u0644\u0627\u0645\u0629 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0648\u0623\u0645\u0646\u0647\u0627. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0641\u0642\u062f \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u0648\u0646 \u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627\u060c \u0648\u0642\u062f \u062d\u062f\u062b \u0630\u0644\u0643 \u0648\u0627\u0633\u062a\u063a\u0644\u0648\u0627 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u062a\u0644\u0643 \u0627\u0644\u0622\u0644\u064a\u0629 \u0648\u0644\u0645\u062f\u0629 \u0623\u0634\u0647\u0631\u060c \u062d\u064a\u062b \u0642\u0627\u0645\u0648\u0627 \u0628\u062d\u0642\u0646 \u0628\u0631\u0645\u062c\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0644\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u064a \u0623\u062b\u0651\u0631\u062a \u0639\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 18,000 \u0646\u0638\u0627\u0645 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 100 \u0645\u0646\u0638\u0645\u0629 \u062d\u0648\u0644 \u0627\u0644\u0639\u0627\u0644\u0645. \u062d\u064a\u062b \u064a\u064f\u0639\u062a\u0628\u0631 \u0647\u0630\u0627 \u0627\u0644\u0647\u062c\u0648\u0645 \u0645\u0646 \u0623\u062e\u0637\u0631 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u062d\u062f\u062b\u062a \u062d\u062a\u0649 \u064a\u0648\u0645\u0646\u0627 \u0647\u0630\u0627.","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#_6","text":"OWASP Cheat Sheet: Software Supply Chain Security OWASP Cheat Sheet: Secure build and deployment OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A08_2021-Software_and_Data_Integrity_Failures/#cwes","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/","text":"A09:2021 \u2013 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0627\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 4 19.23% 6.51% 53.67% 39.97% 6.87 4.99 53,615 242 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u0634\u0647\u062f \" \u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \" \u0627\u0631\u062a\u0641\u0627\u0639 \u0628\u0633\u064a\u0637 \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0639\u0627\u0634\u0631\u0629 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2017 \u0625\u0644\u0649 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u062a\u0627\u0633\u0639\u0629 \u0641\u064a \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u0630\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647 \u0641\u064a \u0642\u0637\u0627\u0639 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u062d\u064a\u062b \u064a\u064f\u0634\u0643\u0651\u0644 \" \u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \" \u062a\u062d\u062f\u0651\u064a\u064b\u0627 \u0644\u0625\u064a\u062c\u0627\u062f \u0637\u0631\u064a\u0642\u0629 \u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0647\u060c \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u064a\u062a\u0637\u0644\u0651\u0628 \u200f\u0645\u0642\u0627\u0628\u0644\u0627\u062a \u0623\u0648 \u0627\u0633\u062a\u0641\u0633\u0627\u0631\u0627\u062a \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u062a\u0645 \u0627\u0643\u062a\u0634\u0627\u0641\u0647\u0627 \u0623\u062b\u0646\u0627\u0621 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0644\u0627 \u064a\u0648\u062c\u062f \u0644\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a CVE/CVSS,\u060c \u0648\u0644\u0643\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0644\u0631\u0635\u062f \u0648\u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0623\u0645\u0631 \u0641\u064a \u063a\u0627\u064a\u0629 \u0627\u0644\u0623\u0647\u0645\u064a\u0629. \u0648 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0645\u0624\u062b\u0631\u064b\u0627 \u0639\u0644\u0649 \u0639\u062f\u0645 \u0641\u0639\u0627\u0644\u064a\u0651\u0629 \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0644\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0639\u0644\u0649 \u0627\u0644\u0627\u0646\u062a\u0628\u0627\u0647 \u0644\u0644\u0625\u0646\u0630\u0627\u0631\u0627\u062a \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u064f\u0633\u0628\u0651\u0628 \u0627\u0644\u062d\u0648\u0627\u062f\u062b\u060c \u0623\u0648 \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u062f\u0644\u0629 \u0643\u0627\u0641\u064a\u0629 \u0639\u0646\u062f \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0627\u0644\u062a\u062d\u0627\u0644\u064a\u0644 \u0627\u0644\u062c\u0646\u0627\u0626\u064a\u0629 \u0648\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u064a\u0631\u062a\u0628\u0637 \u0628\u0640 CWE-778 \u0648\u0643\u0630\u0644\u0643 CWE-117 \u0648 CWE-223 \u0648 CWE-532. \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u0639\u0646\u062f \u0627\u0644\u0639\u0648\u062f\u0629 \u0625\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021\u060c \u0646\u062c\u062f \u0623\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u064a\u0642\u0648\u0645 \u0628\u0627\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0639\u0644\u0649 \u0631\u0635\u062f \u0648\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0646\u0634\u0650\u0637\u0629 \u0623\u0648 \u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b\u060c \u0648\u0645\u0646 \u063a\u064a\u0631 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627\u060c \u0644\u0646 \u062a\u0633\u062a\u0637\u064a\u0639 \u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0631\u0635\u062f \u0623\u0648 \u062d\u062a\u0649 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642\u0627\u062a\u060c \u0644\u0630\u0644\u0643 \u0648\u062c\u0648\u062f \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u064a\u0633\u0627\u0639\u062f \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628: \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0627\u0644\u0642\u0627\u0628\u0644\u0629 \u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u062a\u062f\u0642\u064a\u0642 \u0648\u0627\u0644\u0645\u062a\u0627\u0628\u0639\u0629\u060c \u0645\u062b\u0644 \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u0641\u0627\u0634\u0644\u0629 \u0648\u0643\u0630\u0644\u0643 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0646\u0642\u0644 \u0644\u0644\u0645\u0644\u0641\u0627\u062a \u0630\u0627\u062a \u0627\u0644\u0623\u062d\u062c\u0627\u0645 \u0627\u0644\u0639\u0627\u0644\u064a\u0629 \u0627\u0644\u062a\u064a \u0644\u0645 \u064a\u062a\u0645 \u062a\u0633\u062c\u064a\u0644\u0647\u0627. \u0627\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0648\u0627\u0644\u0625\u0646\u0630\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0645 \u064a\u062a\u0645 \u062a\u0633\u062c\u064a\u0644\u0647\u0627 \u0623\u0648 \u064a\u062a\u0645 \u062a\u0633\u062c\u064a\u0644\u0647\u0627 \u0645\u0646 \u062f\u0648\u0646 \u0648\u0635\u0641 \u0648\u0627\u0636\u062d. \u0644\u0627 \u064a\u062a\u0645 \u0645\u062a\u0627\u0628\u0639\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0623\u0648 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a API \u0623\u064a \u0623\u0646\u0634\u0637\u0629 \u0636\u0627\u0631\u0651\u0629. \u064a\u062a\u0645 \u062a\u062e\u0632\u064a\u0646 \u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0645\u062d\u0644\u0651\u064a\u064b\u0627 \u0641\u0642\u0637 \u0648\u0636\u0639 \u0645\u0639\u0627\u064a\u064a\u0631 \u0645\u0646\u0627\u0633\u0628\u0629 \u0644\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0645\u062b\u0644 (\u062d\u062f \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644) \u060c \u0648\u0643\u0630\u0644\u0643 \u0625\u064a\u062c\u0627\u062f \u0633\u064a\u0627\u0633\u0629 \u0648\u0627\u0636\u062d\u0629 \u0644\u0639\u0645\u0644\u064a\u0629 \u062a\u0635\u0639\u064a\u062f \u0627\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u064a\u0647\u0627 \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d. \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u064a \u0625\u0646\u0630\u0627\u0631\u0627\u062a \u0639\u0646\u062f \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0623\u0648 \u0627\u0644\u0641\u062d\u0635 \u0628\u0648\u0627\u0633\u0637\u0629 \u0623\u062f\u0627\u0629 DAST \u0645\u062b\u0644 OWASP ZAP \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0627 \u062a\u0633\u062a\u0637\u064a\u0639 \u0627\u0643\u062a\u0634\u0627\u0641 \u0623\u0648 \u0627\u0644\u062a\u0646\u0628\u064a\u0647 \u0639\u0646\u062f \u0648\u062c\u0648\u062f \u0623\u0646\u0634\u0637\u0629 \u0636\u0627\u0631\u0651\u0629 \u062a\u062d\u062f\u062b \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u062d\u0627\u0644\u064a. \u0623\u0646\u062a \u0645\u064f\u0639\u0631\u0651\u0636 \u0644\u062a\u0633\u0631\u064a\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0641\u064a \u062d\u0627\u0644 \u0639\u062f\u0645 \u0636\u0628\u0637 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0633\u0645\u062d \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0623\u0648 \u062d\u062a\u0649 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0645\u0646 \u0645\u0634\u0627\u0647\u062f\u062a\u0647\u0627 \u0627\u0646\u0638\u0631 \u0625\u0644\u0649 (A02- \u062a\u062e\u0637\u0651\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644.) \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u0645\u0637\u0648\u0651\u0631\u064a\u0646 \u062a\u0637\u0628\u064a\u0642 \u0628\u0639\u0636 \u0623\u0648 \u0643\u0644 \u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0627\u0644\u062a\u0627\u0644\u064a\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0645\u062f\u0649 \u0627\u0633\u062a\u0647\u062f\u0627\u0641 \u0648\u0627\u0631\u062a\u0641\u0627\u0639 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u062f\u0641 \u0627\u0644\u062a\u0637\u0628\u064a\u0642: \u064a\u062c\u0628 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u062c\u0645\u064a\u0639 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062f\u062e\u0648\u0644\u060c \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 \u0645\u0633\u062c\u0651\u0644\u0629 \u0628\u0637\u0631\u064a\u0642\u0629 \u0635\u062d\u064a\u062d\u0629 \u0648\u0648\u0627\u0636\u062d\u0629\u060c \u0648\u0630\u0644\u0643 \u0644\u0643\u0634\u0641 \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0636\u0627\u0631\u0651\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0639\u062f\u0643 \u0641\u064a\u0645\u0627 \u0628\u0639\u062f \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u062c\u0646\u0627\u0626\u064a \u0627\u0644\u0631\u0642\u0645\u064a \u0627\u0644\u062a\u0623\u0643\u062f \u0623\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u062a\u062a\u0645 \u0628\u0634\u0643\u0644 \u0645\u0646\u0633\u0651\u0642 \u0648\u0635\u062d\u064a\u062d \u0648\u0630\u0644\u0643 \u0644\u0643\u064a \u064a\u062a\u0645 \u0625\u062f\u0627\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d. \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0634\u0641\u0651\u0631\u0629 \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d \u0648\u0630\u0644\u0643 \u0644\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0623\u0648 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u0642\u062f \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0646\u0642\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u062a\u062a\u0645 \u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u0648\u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0633\u0644\u0627\u0645\u062a\u0647\u0627\u060c \u0648\u0630\u0644\u0643 \u0644\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0639\u062f\u0645 \u062a\u0639\u0631\u0651\u0636\u0647\u0627 \u0644\u062a\u062e\u0631\u064a\u0628 \u0623\u0648 \u062a\u0644\u0627\u0639\u0628 \u0623\u0648 \u0623\u064a \u062d\u0630\u0641. \u064a\u062c\u0628 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0644\u062f\u0649 \u0641\u0631\u064a\u0642 DevSecOps \u0622\u0644\u064a\u0629 \u0641\u0639\u0651\u0627\u0644\u0629 \u0644\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a\u060c \u0645\u062b\u0644 \u0627\u0644\u0623\u0646\u0634\u0637\u0629 \u0627\u0644\u0636\u0627\u0631\u0651\u0629. \u0648\u0645\u0646 \u0623\u0647\u0645 \u0627\u0644\u0645\u0631\u062a\u0643\u0632\u0627\u062a \u0647\u064a \u0633\u0631\u0639\u0629 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0647\u0627. \u0642\u0645 \u0628\u0625\u064a\u062c\u0627\u062f \u062e\u0637\u0629 \u0644\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u062d\u0648\u0627\u062f\u062b \u0627\u0644\u0633\u064a\u0628\u0631\u0627\u0646\u064a\u0629 \u0648\u062a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 NIST 800-61r2 \u0623\u0648 \u0627\u0644\u0646\u0633\u062e \u0627\u0644\u0623\u062d\u062f\u062b \u0625\u0646 \u062a\u0648\u0641\u0651\u0631\u062a. \u0647\u0646\u0627\u0643 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0625\u0637\u0627\u0631\u0627\u062a \u0645\u0641\u062a\u0648\u062d\u0629 \u0627\u0644\u0645\u0635\u062f\u0631 \u0648\u062a\u062c\u0627\u0631\u064a\u0629 \u0645\u062b\u0644 (OWASP ModSecurity Core Rule Set,\u060c Open-Source Log) \u0648\u0647\u0646\u0627 \u0643\u0630\u0644\u0643 \u0645\u0646\u0635\u0651\u0627\u062a \u062a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0648\u0631\u0628\u0637 \u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0645\u062b\u0644 \u0645\u0646\u0635\u0651\u0629 ELK Stack \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u062a\u064a\u062d \u0644\u0643 \u0645\u0645\u064a\u0632\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u0645\u0646\u0647\u0627 \u0644\u0648\u062d \u0644\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0643\u0630\u0644\u0643 \u062a\u0646\u0628\u064a\u0647\u0627\u062a. \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u200e\u0627\u0644\u0645\u0634\u063a\u0651\u0644 \u0644\u0645\u0648\u0642\u0639 \u062a\u0627\u0628\u0639 \u0644\u0634\u0631\u0643\u0629 \u062a\u0624\u0645\u0651\u0646 \u062e\u0637\u0637 \u0627\u0644\u062a\u0623\u0645\u064a\u0646 \u0627\u0644\u0637\u0628\u064a \u0644\u0644\u0623\u0637\u0641\u0627\u0644 \u0644\u0645 \u064a\u062a\u0645\u0643\u0646 \u0645\u0646 \u0627\u0643\u062a\u0634\u0627\u0641 \u062b\u063a\u0631\u0629 \u0627\u0645\u0646\u064a\u0629 \u0644\u0639\u062f\u0645 \u062a\u0648\u0641\u0631 \u0623\u062f\u0648\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0627\u062d\u062f\u0627\u062b \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627. \u062d\u064a\u062b \u0642\u0627\u0645 \u0623\u062d\u062f \u0627\u0644\u0623\u0637\u0631\u0627\u0641 \u0627\u0644\u062e\u0627\u0631\u062c\u064a\u0629 \u0628\u0625\u0628\u0644\u0627\u063a \u0634\u0631\u0643\u0629 \u0627\u0644\u062a\u0623\u0645\u064a\u0646 \u0627\u0644\u0637\u0628\u064a \u0639\u0646 \u0648\u062c\u0648\u062f \u0647\u062c\u0645\u0629 \u0633\u064a\u0628\u0631\u0627\u0646\u064a\u0629 \u062a\u0636\u0645\u0646\u062a \u0627\u0644\u062f\u062e\u0648\u0644 \u0648\u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u0649 \u0622\u0644\u0627\u0641 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u0629 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 3.5 \u0645\u0644\u064a\u0648\u0646 \u0637\u0641\u0644. \u0648\u0641\u064a \u0627\u0644\u062a\u0642\u0631\u064a\u0631 \u0627\u0644\u0645\u0639\u062f\u0651 \u0628\u0639\u062f \u0627\u0644\u0647\u062c\u0645\u0629 \u0648\u064f\u062c\u0650\u062f \u0623\u0646 \u0645\u0637\u0648\u0651\u0631\u064a \u0645\u0648\u0642\u0639 \u0627\u0644\u0648\u064a\u0628 \u0623\u0647\u0645\u0644\u0648\u0627 \u0646\u0642\u0627\u0637 \u0636\u0639\u0641 \u0627\u0645\u0646\u064a\u0629 \u0645\u0647\u0645\u0651\u0629. \u0648\u0644\u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u062f\u0648\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0627\u062d\u062f\u062b \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627\u060c \u0642\u062f \u064a\u0643\u0648\u0646 \u062a\u0633\u0631\u064a\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0642\u062f \u062d\u062f\u062b \u0645\u0646 \u0628\u062f\u0627\u064a\u0629 \u0639\u0627\u0645 2013 \u0648\u0627\u0645\u062a\u062f \u0627\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 7 \u0633\u0646\u0648\u0627\u062a. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u200e \u0648\u0627\u062c\u0647\u062a \u0634\u0631\u0643\u0629 \u0637\u064a\u0631\u0627\u0646 \u0647\u0646\u062f\u064a\u0629 \u0643\u0628\u0631\u0649 \u062a\u0633\u0631\u064a\u0628 \u0628\u064a\u0627\u0646\u0627\u062a \u064a\u0636\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u062c\u064f\u0645\u0639\u062a \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 \u0639\u0634\u0631 \u0633\u0646\u0648\u0627\u062a \u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u0633\u0627\u0641\u0631\u064a\u0647\u0627 \u0627\u0644\u0634\u062e\u0635\u064a\u0629 \u0645\u0645\u0627 \u064a\u062a\u0636\u0645\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062c\u0648\u0627\u0632\u0627\u062a \u0648\u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0628\u0646\u0643\u064a\u0629. \u062a\u0633\u0631\u064a\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062d\u062f\u062b \u0641\u064a \u062e\u062f\u0645\u0629 \u062a\u062e\u0632\u064a\u0646 \u0633\u062d\u0627\u0628\u064a\u0629 \u0645\u0646 \u0645\u0648\u0641\u0651\u0631 \u062e\u062f\u0645\u0627\u062a \u0633\u062d\u0627\u0628\u064a\u0629 \u0648\u0627\u0644\u0630\u064a \u0642\u0627\u0645 \u0628\u062f\u0648\u0631\u0647 \u0628\u062a\u0646\u0628\u064a\u0647 \u0634\u0631\u0643\u0629 \u0627\u0644\u0637\u064a\u0631\u0627\u0646 \u0628\u0648\u062c\u0648\u062f \u0627\u0644\u062a\u0633\u0631\u064a\u0628 \u0628\u0639\u062f \u0645\u062f\u0629. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u200e\u0639\u0627\u0646\u062a \u0634\u0631\u0643\u0629 \u0637\u064a\u0631\u0627\u0646 \u0623\u0648\u0631\u0648\u0628\u064a\u0629 \u0643\u0628\u0631\u0649 \u0645\u0646 \u062a\u0633\u0631\u064a\u0628 \u0636\u0645\u0646 \u0644\u0627\u0626\u062d\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0639\u0627\u0645 \u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a (GDPR). \u0648\u0642\u062f \u0639\u064f\u0644\u0645 \u0623\u0646 \u0627\u0644\u062a\u0633\u0631\u064a\u0628 \u062d\u062f\u062b \u0628\u0633\u0628\u0628 \u062b\u063a\u0631\u0627\u062a \u0641\u064a \u0646\u0638\u0627\u0645 \u0627\u0644\u062f\u0641\u0639 \u062a\u0645 \u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0646\u0641\u0630\u064a \u0627\u0644\u0647\u062c\u0648\u0645 \u0648\u0627\u0644\u0630\u064a\u0646 \u062c\u0645\u0639\u0648\u0627 \u0633\u062c\u0644\u0627\u062a \u0627\u0644\u062f\u0641\u0639 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 400,000 \u0639\u0645\u064a\u0644. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u0642\u0627\u0645 \u0645\u0634\u0631\u0651\u0639 \u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629 \u0628\u062a\u063a\u0631\u064a\u0645 \u0634\u0631\u0643\u0629 \u0627\u0644\u0637\u064a\u0631\u0627\u0646 20 \u0645\u0644\u064a\u0648\u0646 \u0628\u0627\u0648\u0646\u062f. \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"A09 \u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#a092021","text":"","title":"A09:2021 \u2013 \u0641\u0634\u0644 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0627\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 4 19.23% 6.51% 53.67% 39.97% 6.87 4.99 53,615 242","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#_2","text":"\u0634\u0647\u062f \" \u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \" \u0627\u0631\u062a\u0641\u0627\u0639 \u0628\u0633\u064a\u0637 \u0645\u0646 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u0639\u0627\u0634\u0631\u0629 \u0641\u064a \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2017 \u0625\u0644\u0649 \u0627\u0644\u0645\u0631\u062a\u0628\u0629 \u0627\u0644\u062a\u0627\u0633\u0639\u0629 \u0641\u064a \u0627\u0644\u0627\u0633\u062a\u0637\u0644\u0627\u0639 \u0627\u0644\u0630\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647 \u0641\u064a \u0642\u0637\u0627\u0639 \u0623\u0645\u0646 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a. \u062d\u064a\u062b \u064a\u064f\u0634\u0643\u0651\u0644 \" \u0641\u0634\u0644 \u0641\u064a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \" \u062a\u062d\u062f\u0651\u064a\u064b\u0627 \u0644\u0625\u064a\u062c\u0627\u062f \u0637\u0631\u064a\u0642\u0629 \u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0647\u060c \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u064a\u062a\u0637\u0644\u0651\u0628 \u200f\u0645\u0642\u0627\u0628\u0644\u0627\u062a \u0623\u0648 \u0627\u0633\u062a\u0641\u0633\u0627\u0631\u0627\u062a \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u062a\u0645 \u0627\u0643\u062a\u0634\u0627\u0641\u0647\u0627 \u0623\u062b\u0646\u0627\u0621 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642. \u0648\u0645\u0639 \u0630\u0644\u0643 \u0644\u0627 \u064a\u0648\u062c\u062f \u0644\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a CVE/CVSS,\u060c \u0648\u0644\u0643\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0644\u0631\u0635\u062f \u0648\u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0623\u0645\u0631 \u0641\u064a \u063a\u0627\u064a\u0629 \u0627\u0644\u0623\u0647\u0645\u064a\u0629. \u0648 \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0645\u0624\u062b\u0631\u064b\u0627 \u0639\u0644\u0649 \u0639\u062f\u0645 \u0641\u0639\u0627\u0644\u064a\u0651\u0629 \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0644\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0639\u0644\u0649 \u0627\u0644\u0627\u0646\u062a\u0628\u0627\u0647 \u0644\u0644\u0625\u0646\u0630\u0627\u0631\u0627\u062a \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u064f\u0633\u0628\u0651\u0628 \u0627\u0644\u062d\u0648\u0627\u062f\u062b\u060c \u0623\u0648 \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u062f\u0644\u0629 \u0643\u0627\u0641\u064a\u0629 \u0639\u0646\u062f \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0627\u0644\u062a\u062d\u0627\u0644\u064a\u0644 \u0627\u0644\u062c\u0646\u0627\u0626\u064a\u0629 \u0648\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u064a\u0631\u062a\u0628\u0637 \u0628\u0640 CWE-778 \u0648\u0643\u0630\u0644\u0643 CWE-117 \u0648 CWE-223 \u0648 CWE-532.","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#_3","text":"\u0639\u0646\u062f \u0627\u0644\u0639\u0648\u062f\u0629 \u0625\u0644\u0649 \u0623\u0639\u0644\u0649 \u0639\u0634\u0631\u0629 \u0645\u062e\u0627\u0637\u0631 \u0644\u0639\u0627\u0645 2021\u060c \u0646\u062c\u062f \u0623\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u064a\u0642\u0648\u0645 \u0628\u0627\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0639\u0644\u0649 \u0631\u0635\u062f \u0648\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0627\u0644\u0646\u0634\u0650\u0637\u0629 \u0623\u0648 \u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b\u060c \u0648\u0645\u0646 \u063a\u064a\u0631 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627\u060c \u0644\u0646 \u062a\u0633\u062a\u0637\u064a\u0639 \u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0631\u0635\u062f \u0623\u0648 \u062d\u062a\u0649 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u0627\u062e\u062a\u0631\u0627\u0642\u0627\u062a\u060c \u0644\u0630\u0644\u0643 \u0648\u062c\u0648\u062f \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u064a\u0633\u0627\u0639\u062f \u0639\u0644\u0649 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628: \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0627\u0644\u0642\u0627\u0628\u0644\u0629 \u0644\u0625\u062c\u0631\u0627\u0621\u0627\u062a \u0627\u0644\u062a\u062f\u0642\u064a\u0642 \u0648\u0627\u0644\u0645\u062a\u0627\u0628\u0639\u0629\u060c \u0645\u062b\u0644 \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u0641\u0627\u0634\u0644\u0629 \u0648\u0643\u0630\u0644\u0643 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0646\u0642\u0644 \u0644\u0644\u0645\u0644\u0641\u0627\u062a \u0630\u0627\u062a \u0627\u0644\u0623\u062d\u062c\u0627\u0645 \u0627\u0644\u0639\u0627\u0644\u064a\u0629 \u0627\u0644\u062a\u064a \u0644\u0645 \u064a\u062a\u0645 \u062a\u0633\u062c\u064a\u0644\u0647\u0627. \u0627\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0648\u0627\u0644\u0625\u0646\u0630\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0645 \u064a\u062a\u0645 \u062a\u0633\u062c\u064a\u0644\u0647\u0627 \u0623\u0648 \u064a\u062a\u0645 \u062a\u0633\u062c\u064a\u0644\u0647\u0627 \u0645\u0646 \u062f\u0648\u0646 \u0648\u0635\u0641 \u0648\u0627\u0636\u062d. \u0644\u0627 \u064a\u062a\u0645 \u0645\u062a\u0627\u0628\u0639\u0629 \u0648\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0623\u0648 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a API \u0623\u064a \u0623\u0646\u0634\u0637\u0629 \u0636\u0627\u0631\u0651\u0629. \u064a\u062a\u0645 \u062a\u062e\u0632\u064a\u0646 \u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0645\u062d\u0644\u0651\u064a\u064b\u0627 \u0641\u0642\u0637 \u0648\u0636\u0639 \u0645\u0639\u0627\u064a\u064a\u0631 \u0645\u0646\u0627\u0633\u0628\u0629 \u0644\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0645\u062b\u0644 (\u062d\u062f \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u062f\u062e\u0648\u0644) \u060c \u0648\u0643\u0630\u0644\u0643 \u0625\u064a\u062c\u0627\u062f \u0633\u064a\u0627\u0633\u0629 \u0648\u0627\u0636\u062d\u0629 \u0644\u0639\u0645\u0644\u064a\u0629 \u062a\u0635\u0639\u064a\u062f \u0627\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u064a\u0647\u0627 \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d. \u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u064a \u0625\u0646\u0630\u0627\u0631\u0627\u062a \u0639\u0646\u062f \u0625\u062c\u0631\u0627\u0621 \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642 \u0623\u0648 \u0627\u0644\u0641\u062d\u0635 \u0628\u0648\u0627\u0633\u0637\u0629 \u0623\u062f\u0627\u0629 DAST \u0645\u062b\u0644 OWASP ZAP \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0644\u0627 \u062a\u0633\u062a\u0637\u064a\u0639 \u0627\u0643\u062a\u0634\u0627\u0641 \u0623\u0648 \u0627\u0644\u062a\u0646\u0628\u064a\u0647 \u0639\u0646\u062f \u0648\u062c\u0648\u062f \u0623\u0646\u0634\u0637\u0629 \u0636\u0627\u0631\u0651\u0629 \u062a\u062d\u062f\u062b \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u062d\u0627\u0644\u064a. \u0623\u0646\u062a \u0645\u064f\u0639\u0631\u0651\u0636 \u0644\u062a\u0633\u0631\u064a\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0641\u064a \u062d\u0627\u0644 \u0639\u062f\u0645 \u0636\u0628\u0637 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0648\u0627\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0633\u0645\u062d \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0623\u0648 \u062d\u062a\u0649 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0645\u0646 \u0645\u0634\u0627\u0647\u062f\u062a\u0647\u0627 \u0627\u0646\u0638\u0631 \u0625\u0644\u0649 (A02- \u062a\u062e\u0637\u0651\u064a \u0635\u0644\u0627\u062d\u064a\u0627\u062a \u0627\u0644\u0648\u0635\u0648\u0644.)","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#_4","text":"\u064a\u062c\u0628 \u0639\u0644\u0649 \u0627\u0644\u0645\u0637\u0648\u0651\u0631\u064a\u0646 \u062a\u0637\u0628\u064a\u0642 \u0628\u0639\u0636 \u0623\u0648 \u0643\u0644 \u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0627\u0644\u062a\u0627\u0644\u064a\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0645\u062f\u0649 \u0627\u0633\u062a\u0647\u062f\u0627\u0641 \u0648\u0627\u0631\u062a\u0641\u0627\u0639 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u062f\u0641 \u0627\u0644\u062a\u0637\u0628\u064a\u0642: \u064a\u062c\u0628 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u062c\u0645\u064a\u0639 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062f\u062e\u0648\u0644\u060c \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0648\u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 \u0645\u0633\u062c\u0651\u0644\u0629 \u0628\u0637\u0631\u064a\u0642\u0629 \u0635\u062d\u064a\u062d\u0629 \u0648\u0648\u0627\u0636\u062d\u0629\u060c \u0648\u0630\u0644\u0643 \u0644\u0643\u0634\u0641 \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0636\u0627\u0631\u0651\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0639\u062f\u0643 \u0641\u064a\u0645\u0627 \u0628\u0639\u062f \u0641\u064a \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u062c\u0646\u0627\u0626\u064a \u0627\u0644\u0631\u0642\u0645\u064a \u0627\u0644\u062a\u0623\u0643\u062f \u0623\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u062a\u062a\u0645 \u0628\u0634\u0643\u0644 \u0645\u0646\u0633\u0651\u0642 \u0648\u0635\u062d\u064a\u062d \u0648\u0630\u0644\u0643 \u0644\u0643\u064a \u064a\u062a\u0645 \u0625\u062f\u0627\u0631\u062a\u0647\u0627 \u0628\u0634\u0643\u0644 \u0635\u062d\u064a\u062d. \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0634\u0641\u0651\u0631\u0629 \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0635\u062d\u064a\u062d \u0648\u0630\u0644\u0643 \u0644\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062d\u0642\u0646 \u0623\u0648 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u0642\u062f \u062a\u062d\u062f\u062b \u0639\u0644\u0649 \u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0639\u0645\u0644\u064a\u0627\u062a \u0646\u0642\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u062a\u062a\u0645 \u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627 \u0648\u0627\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0633\u0644\u0627\u0645\u062a\u0647\u0627\u060c \u0648\u0630\u0644\u0643 \u0644\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0639\u062f\u0645 \u062a\u0639\u0631\u0651\u0636\u0647\u0627 \u0644\u062a\u062e\u0631\u064a\u0628 \u0623\u0648 \u062a\u0644\u0627\u0639\u0628 \u0623\u0648 \u0623\u064a \u062d\u0630\u0641. \u064a\u062c\u0628 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0644\u062f\u0649 \u0641\u0631\u064a\u0642 DevSecOps \u0622\u0644\u064a\u0629 \u0641\u0639\u0651\u0627\u0644\u0629 \u0644\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0627\u0644\u062a\u064a \u062a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a\u060c \u0645\u062b\u0644 \u0627\u0644\u0623\u0646\u0634\u0637\u0629 \u0627\u0644\u0636\u0627\u0631\u0651\u0629. \u0648\u0645\u0646 \u0623\u0647\u0645 \u0627\u0644\u0645\u0631\u062a\u0643\u0632\u0627\u062a \u0647\u064a \u0633\u0631\u0639\u0629 \u0627\u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0648\u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0647\u0627. \u0642\u0645 \u0628\u0625\u064a\u062c\u0627\u062f \u062e\u0637\u0629 \u0644\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0644\u0644\u062d\u0648\u0627\u062f\u062b \u0627\u0644\u0633\u064a\u0628\u0631\u0627\u0646\u064a\u0629 \u0648\u062a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u0649 NIST 800-61r2 \u0623\u0648 \u0627\u0644\u0646\u0633\u062e \u0627\u0644\u0623\u062d\u062f\u062b \u0625\u0646 \u062a\u0648\u0641\u0651\u0631\u062a. \u0647\u0646\u0627\u0643 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0648\u0625\u0637\u0627\u0631\u0627\u062a \u0645\u0641\u062a\u0648\u062d\u0629 \u0627\u0644\u0645\u0635\u062f\u0631 \u0648\u062a\u062c\u0627\u0631\u064a\u0629 \u0645\u062b\u0644 (OWASP ModSecurity Core Rule Set,\u060c Open-Source Log) \u0648\u0647\u0646\u0627 \u0643\u0630\u0644\u0643 \u0645\u0646\u0635\u0651\u0627\u062a \u062a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644\u064a\u0629 \u062c\u0645\u0639 \u0648\u0631\u0628\u0637 \u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0623\u062d\u062f\u0627\u062b \u0645\u062b\u0644 \u0645\u0646\u0635\u0651\u0629 ELK Stack \u0648\u0627\u0644\u062a\u064a \u062a\u064f\u062a\u064a\u062d \u0644\u0643 \u0645\u0645\u064a\u0632\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629 \u0645\u0646\u0647\u0627 \u0644\u0648\u062d \u0644\u0644\u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0643\u0630\u0644\u0643 \u062a\u0646\u0628\u064a\u0647\u0627\u062a.","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#_5","text":"\u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u200e\u0627\u0644\u0645\u0634\u063a\u0651\u0644 \u0644\u0645\u0648\u0642\u0639 \u062a\u0627\u0628\u0639 \u0644\u0634\u0631\u0643\u0629 \u062a\u0624\u0645\u0651\u0646 \u062e\u0637\u0637 \u0627\u0644\u062a\u0623\u0645\u064a\u0646 \u0627\u0644\u0637\u0628\u064a \u0644\u0644\u0623\u0637\u0641\u0627\u0644 \u0644\u0645 \u064a\u062a\u0645\u0643\u0646 \u0645\u0646 \u0627\u0643\u062a\u0634\u0627\u0641 \u062b\u063a\u0631\u0629 \u0627\u0645\u0646\u064a\u0629 \u0644\u0639\u062f\u0645 \u062a\u0648\u0641\u0631 \u0623\u062f\u0648\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0627\u062d\u062f\u0627\u062b \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627. \u062d\u064a\u062b \u0642\u0627\u0645 \u0623\u062d\u062f \u0627\u0644\u0623\u0637\u0631\u0627\u0641 \u0627\u0644\u062e\u0627\u0631\u062c\u064a\u0629 \u0628\u0625\u0628\u0644\u0627\u063a \u0634\u0631\u0643\u0629 \u0627\u0644\u062a\u0623\u0645\u064a\u0646 \u0627\u0644\u0637\u0628\u064a \u0639\u0646 \u0648\u062c\u0648\u062f \u0647\u062c\u0645\u0629 \u0633\u064a\u0628\u0631\u0627\u0646\u064a\u0629 \u062a\u0636\u0645\u0646\u062a \u0627\u0644\u062f\u062e\u0648\u0644 \u0648\u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u0649 \u0622\u0644\u0627\u0641 \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u0629 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 3.5 \u0645\u0644\u064a\u0648\u0646 \u0637\u0641\u0644. \u0648\u0641\u064a \u0627\u0644\u062a\u0642\u0631\u064a\u0631 \u0627\u0644\u0645\u0639\u062f\u0651 \u0628\u0639\u062f \u0627\u0644\u0647\u062c\u0645\u0629 \u0648\u064f\u062c\u0650\u062f \u0623\u0646 \u0645\u0637\u0648\u0651\u0631\u064a \u0645\u0648\u0642\u0639 \u0627\u0644\u0648\u064a\u0628 \u0623\u0647\u0645\u0644\u0648\u0627 \u0646\u0642\u0627\u0637 \u0636\u0639\u0641 \u0627\u0645\u0646\u064a\u0629 \u0645\u0647\u0645\u0651\u0629. \u0648\u0644\u0639\u062f\u0645 \u0648\u062c\u0648\u062f \u0623\u062f\u0648\u0627\u062a \u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0627\u062d\u062f\u062b \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0648\u0645\u0631\u0627\u0642\u0628\u062a\u0647\u0627\u060c \u0642\u062f \u064a\u0643\u0648\u0646 \u062a\u0633\u0631\u064a\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0642\u062f \u062d\u062f\u062b \u0645\u0646 \u0628\u062f\u0627\u064a\u0629 \u0639\u0627\u0645 2013 \u0648\u0627\u0645\u062a\u062f \u0627\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 7 \u0633\u0646\u0648\u0627\u062a. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u200e \u0648\u0627\u062c\u0647\u062a \u0634\u0631\u0643\u0629 \u0637\u064a\u0631\u0627\u0646 \u0647\u0646\u062f\u064a\u0629 \u0643\u0628\u0631\u0649 \u062a\u0633\u0631\u064a\u0628 \u0628\u064a\u0627\u0646\u0627\u062a \u064a\u0636\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u062c\u064f\u0645\u0639\u062a \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 \u0639\u0634\u0631 \u0633\u0646\u0648\u0627\u062a \u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u0633\u0627\u0641\u0631\u064a\u0647\u0627 \u0627\u0644\u0634\u062e\u0635\u064a\u0629 \u0645\u0645\u0627 \u064a\u062a\u0636\u0645\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062c\u0648\u0627\u0632\u0627\u062a \u0648\u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062a \u0627\u0644\u0628\u0646\u0643\u064a\u0629. \u062a\u0633\u0631\u064a\u0628 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062d\u062f\u062b \u0641\u064a \u062e\u062f\u0645\u0629 \u062a\u062e\u0632\u064a\u0646 \u0633\u062d\u0627\u0628\u064a\u0629 \u0645\u0646 \u0645\u0648\u0641\u0651\u0631 \u062e\u062f\u0645\u0627\u062a \u0633\u062d\u0627\u0628\u064a\u0629 \u0648\u0627\u0644\u0630\u064a \u0642\u0627\u0645 \u0628\u062f\u0648\u0631\u0647 \u0628\u062a\u0646\u0628\u064a\u0647 \u0634\u0631\u0643\u0629 \u0627\u0644\u0637\u064a\u0631\u0627\u0646 \u0628\u0648\u062c\u0648\u062f \u0627\u0644\u062a\u0633\u0631\u064a\u0628 \u0628\u0639\u062f \u0645\u062f\u0629. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u200e\u0639\u0627\u0646\u062a \u0634\u0631\u0643\u0629 \u0637\u064a\u0631\u0627\u0646 \u0623\u0648\u0631\u0648\u0628\u064a\u0629 \u0643\u0628\u0631\u0649 \u0645\u0646 \u062a\u0633\u0631\u064a\u0628 \u0636\u0645\u0646 \u0644\u0627\u0626\u062d\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0639\u0627\u0645 \u0644\u062d\u0645\u0627\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a (GDPR). \u0648\u0642\u062f \u0639\u064f\u0644\u0645 \u0623\u0646 \u0627\u0644\u062a\u0633\u0631\u064a\u0628 \u062d\u062f\u062b \u0628\u0633\u0628\u0628 \u062b\u063a\u0631\u0627\u062a \u0641\u064a \u0646\u0638\u0627\u0645 \u0627\u0644\u062f\u0641\u0639 \u062a\u0645 \u0627\u0633\u062a\u063a\u0644\u0627\u0644\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0646\u0641\u0630\u064a \u0627\u0644\u0647\u062c\u0648\u0645 \u0648\u0627\u0644\u0630\u064a\u0646 \u062c\u0645\u0639\u0648\u0627 \u0633\u062c\u0644\u0627\u062a \u0627\u0644\u062f\u0641\u0639 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 400,000 \u0639\u0645\u064a\u0644. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u0642\u0627\u0645 \u0645\u0634\u0631\u0651\u0639 \u0627\u0644\u062e\u0635\u0648\u0635\u064a\u0629 \u0628\u062a\u063a\u0631\u064a\u0645 \u0634\u0631\u0643\u0629 \u0627\u0644\u0637\u064a\u0631\u0627\u0646 20 \u0645\u0644\u064a\u0648\u0646 \u0628\u0627\u0648\u0646\u062f.","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#_6","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A09_2021-Security_Logging_and_Monitoring_Failures/#cwes","text":"CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/","text":"A10:2021 \u2013 \u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF \u2693\ufe0e \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u2693\ufe0e \u062d\u064a\u062b \u062a\u064f\u0638\u0647\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0646 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u062d\u0648\u0627\u062f\u062b \u0643\u0627\u0646 \u0645\u064f\u0646\u062e\u0641\u0636 \u0646\u0633\u0628\u064a\u064b\u0627 \u0628\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0639 \u0623\u0646 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0643\u0627\u0646\u062a \u0641\u0648\u0642 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0648\u0623\u0646 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062d\u062f\u062b\u062a \u0648\u0627\u062b\u0627\u0631\u0647\u0627 \u0627\u0644\u0645\u062a\u0631\u062a\u0628\u0629 \u0633\u062a\u0643\u0648\u0646 \u0623\u0639\u0644\u0649 \u0645\u0646 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0648\u0645\u0646 \u0627\u0644\u0645\u062d\u062a\u0645\u0644 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u0627\u0647\u0645\u0627\u062a \u0627\u0644\u0635\u063a\u064a\u0631\u0629 \u0623\u0648 \u0627\u0644\u0641\u0631\u062f\u064a\u0629 \u0644\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0641\u064a \u0625\u0637\u0627\u0631 CWEs \u0648\u0630\u0644\u0643 \u0645\u0646 \u0623\u062c\u0644 \u0631\u0641\u0639 \u0627\u0644\u0648\u0639\u064a \u0627\u0644\u0623\u0645\u0646\u064a\u060c \u0644\u0630\u0627 \u0646\u0623\u0645\u0644 \u0623\u0646 \u064a\u062a\u0645 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u064a\u0647\u0627 \u0648\u0623\u0646 \u064a\u062a\u0645 \u0625\u062f\u0631\u0627\u062c\u0647\u0627 \u0636\u0645\u0646 \u062a\u0635\u0646\u064a\u0641 \u0623\u0643\u0628\u0631 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0645\u064f\u0642\u0628\u0644\u0629. \u0627\u0644\u0648\u0635\u0641 \u2693\ufe0e \u064a\u062a\u0645 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0639\u0646\u062f\u0645\u0627 \u064a\u0642\u0648\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0648\u064a\u0628 \u0628\u062c\u0644\u0628 \u0645\u0648\u0627\u0631\u062f \u0639\u0646 \u0628\u0639\u062f \u062f\u0648\u0646 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0635\u062d\u0629 \u0627\u0644\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0645\u0642\u062f\u0651\u0645 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u060c \u062d\u064a\u062b \u064a\u0633\u0645\u062d \u0630\u0644\u0643 \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0625\u062c\u0628\u0627\u0631 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0639\u0644\u0649 \u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u0645\u0639\u062f\u0651\u0644 \u0625\u0644\u0649 \u0648\u062c\u0647\u0629 \u063a\u064a\u0631 \u0645\u062a\u0648\u0642\u0639\u0629 \u0644\u0644\u062e\u0627\u062f\u0645\u060c \u062d\u062a\u0649 \u0639\u0646\u062f\u0645\u0627 \u064a\u0643\u0648\u0646 \u0645\u062d\u0645\u064a\u0651 \u0628\u062c\u062f\u0627\u0631 \u062d\u0645\u0627\u064a\u0629\u060c \u0623\u0648 \u0634\u0628\u0643\u0629 \u062e\u0627\u0635\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 VPN \u0623\u0648 \u0623\u064a\u0629 \u0646\u0648\u0639 \u0645\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0634\u0628\u0643\u0629. \u0646\u0638\u0631\u064b\u0627 \u0644\u0623\u0646 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628 (\u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a\u0629) \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u062a\u0648\u0641\u0651\u0631 \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0645\u064f\u0645\u064a\u0632\u0627\u062a \u0645\u062a\u0642\u062f\u0651\u0645\u0629\u060c \u0641\u0625\u0646 \u062c\u0644\u0628 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0645\u0646 \u0627\u0644\u062e\u0627\u062f\u0645 \u0623\u0635\u0628\u062d \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0634\u0627\u0626\u0639. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u0641\u0625\u0646 \u0645\u0639\u062f\u0651\u0644 \u062d\u062f\u0648\u062b \u062a\u0632\u0648\u064a\u0631 \u0644\u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0622\u062e\u0630 \u0641\u064a \u0627\u0644\u0627\u0632\u062f\u064a\u0627\u062f\u060c \u0644\u0630\u0644\u0643 \u0623\u0635\u0628\u062d \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0623\u0634\u062f \u062e\u0637\u0648\u0631\u0629 \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645 \u0639\u0646\u062f\u0645\u0627 \u0638\u0647\u0631\u062a \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 \u0648\u0643\u0630\u0644\u0643 \u062a\u0639\u0642\u064a\u062f \u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0651\u0629. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 \u2693\ufe0e \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u064f\u0637\u0648\u0651\u0631\u064a\u0646 \u0645\u0646\u0639 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0628\u062a\u0646\u0641\u064a\u0630 \u0628\u0639\u0636 \u0623\u0648 \u0643\u0644 \u0648\u0633\u0627\u0626\u0644 \u0627\u0644\u062f\u0641\u0627\u0639 \u0627\u0644\u062a\u0627\u0644\u064a\u0629 \u0641\u064a \u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u062f\u0641\u0627\u0639 \u0627\u0644\u0639\u0645\u064a\u0642 (Defense in Depth) : \u0645\u0646 \u062e\u0644\u0627\u0644 \u0637\u0628\u0642\u0627\u062a \u0627\u0644\u0634\u0628\u0643\u0629 \u2693\ufe0e \u062a\u0642\u0633\u064a\u0645 \u0648\u0638\u0627\u0626\u0641 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0645\u0648\u0627\u0631\u062f \u0639\u0646 \u0628\u0639\u062f \u0641\u064a \u0634\u0628\u0643\u0627\u062a \u0645\u064f\u0646\u0641\u0635\u0644\u0629 \u0644\u062a\u0642\u0644\u064a\u0644 \u062a\u0623\u062b\u064a\u0631 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645. \u0641\u0631\u0636 \u0633\u064a\u0627\u0633\u0627\u062a \u062c\u062f\u0627\u0631 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \"\u0627\u0644\u0631\u0641\u0636 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u064b\u0627\" \u0623\u0648 \u0636\u0628\u0637 \u0622\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0634\u0628\u0643\u0629 \u0644\u062d\u0638\u0631 \u062c\u0645\u064a\u0639 \u062d\u0631\u0643\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0644\u0644\u0634\u0628\u0643\u0629 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0628\u0627\u0633\u062a\u062b\u0646\u0627\u0621 \u062d\u0631\u0643\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629. \u0645\u0646 \u062e\u0644\u0627\u0644 \u0637\u0628\u0642\u0627\u062a \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u2693\ufe0e \u0627\u0644\u062a\u0635\u0651\u0641\u064a\u0629 \u0648\u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0635\u062d\u0629 \u062c\u0645\u064a\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0625\u062f\u062e\u0627\u0644 \u0627\u0644\u0645\u0642\u062f\u0651\u0645\u0629 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645. \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0646\u0627\u0648\u064a\u0646 \u0645\u062d\u062f\u0651\u062f\u0629 \u0641\u064a \u0627\u0644\u0631\u0648\u0627\u0628\u0637\u060c URL \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0646\u0627\u0641\u0630 \u0645\u062d\u062f\u0651\u062f\u0629 \u0645\u0639 \u062a\u062d\u062f\u064a\u062f \u0642\u0627\u0626\u0645\u0629 \u0645\u0646 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0645\u062d\u062f\u0651\u062f\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \u0641\u064a \u0642\u0627\u0626\u0645\u0629 \u0645\u0633\u0645\u0648\u062d \u0628\u0647\u0627. \u0644\u0627 \u062a\u0642\u0645 \u0628\u0631\u062f \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0644\u0644\u0639\u0645\u064a\u0644 \u0639\u0644\u0649 \u0634\u0643\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u062e\u0627\u0645 \u0642\u0645 \u0628\u062a\u0639\u0637\u064a\u0644 \u0625\u0639\u0627\u062f\u0629 \u0627\u0644\u062a\u0648\u062c\u064a\u0647 \u0625\u0644\u0649 HTTP. \u0643\u0646 \u0639\u0644\u0649 \u062d\u0630\u0631 \u0645\u0646 \u0647\u062c\u0645\u0627\u062a \u0625\u0639\u0627\u062f\u0629 \u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u0631\u0627\u0628\u0637 \u0623\u0648 \u0627\u0644\u0623\u062d\u0631\u0641 \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0623\u062a\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644 DNS \u0623\u0648 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 TOCTOU. \u0644\u0627 \u062a\u0642\u0645 \u0628\u062a\u062e\u0641\u064a\u0641 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0639\u0644\u0649 \u0647\u062c\u0645\u0627\u062a SSRF \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0633\u064a\u0627\u0633\u0629 \u0627\u0644\u0645\u0646\u0639 \u0627\u0644\u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u0639\u0628\u064a\u0631\u0627\u062a \u0627\u0644\u0645\u0646\u0637\u0642\u064a\u0629 \u0623\u0648 (Regular Expression). \u062d\u064a\u062b \u0623\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0644\u062f\u064a\u0647\u0645 \u0642\u0648\u0627\u0626\u0645 \u0645\u064f\u0639\u062f\u0651\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \u0648\u0645\u062a\u0639\u062f\u0651\u062f\u0629 \u0644\u0645\u062d\u0627\u0648\u0644\u0629 \u062a\u062e\u0637\u0651\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062d\u062c\u0628 \u062a\u0644\u0643. \u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645 \u2693\ufe0e \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0644\u0645\u0647\u0627\u062c\u0645\u0629 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u0645\u062d\u0645\u064a\u0651\u0629 \u062e\u0644\u0641 \u062c\u062f\u0631\u0627\u0646 \u062d\u0645\u0627\u064a\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628(WAF)\u060c \u0648\u062c\u062f\u0631\u0627\u0646 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0623\u0648 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0644\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0634\u0628\u0643\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0645\u062b\u0644: \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0641\u062d\u0635 \u0627\u0644\u0645\u0646\u0627\u0641\u0630 \u0644\u0644\u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0641\u064a \u0645\u0639\u0645\u0627\u0631\u064a\u0629 \u0627\u0644\u0634\u0628\u0643\u0629: \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0642\u0633\u0651\u0645\u0629 \u0628\u0634\u0643\u0644 \u062c\u064a\u0651\u062f \u062a\u064f\u0645\u0643\u0651\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0645\u0646 \u0631\u0633\u0645 \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0628\u0634\u0643\u0644 \u062f\u0642\u064a\u0642 \u0648\u064a\u0635\u0644 \u0625\u0644\u0649 \u062a\u0645\u0643\u064a\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u0645\u0646\u0627\u0641\u0630 \u0645\u0641\u062a\u0648\u062d\u0629 \u0623\u0645 \u0645\u064f\u063a\u0644\u0642\u0629 \u0644\u0644\u062e\u0648\u0627\u062f\u0645 \u0648\u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062f\u0631\u0627\u0633\u0629 \u0623\u0648 \u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0644\u0637\u0644\u0628\u0627\u062a \u0623\u0648 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u064f\u0633\u062a\u063a\u0631\u0642 \u0644\u0643\u0644 \u0637\u0644\u0628 \u0639\u0644\u0649 \u0643\u0644 \u0645\u0646\u0641\u0630 \u0645\u062e\u062a\u0644\u0641 \u0648\u0630\u0644\u0643 \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 SSRF \u0646\u062c\u062d \u0623\u0645 \u0641\u0634\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0651\u0629 \u0648\u0627\u0644\u062a\u064a \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u064a\u0647\u0627: \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0645\u062b\u0644 \u0645\u0644\u0641 ( file:///etc/passwd)\u0623\u0648 \u062d\u062a\u0649 \u0644\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0651\u0629 \u0644\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 : \u064a\u0645\u062a\u0644\u0643 \u0645\u0639\u0638\u0645 \u0645\u0648\u0641\u0631\u0651\u064a \u0627\u0644\u0633\u062d\u0627\u0628\u0629 \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0651\u0629 \u0645\u062b\u0644 http://169.254.169.254 \u0648\u064a\u0645\u0643\u0646 \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0642\u0631\u0627\u0621\u0629 \u062a\u0644\u0643 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0651\u0629 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0645\u0646\u0647\u0627. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #4: \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0648\u0625\u0633\u0627\u0621\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0647\u0627\u062c\u0645: \u064a\u0645\u0643\u0646 \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0625\u0633\u0627\u0621\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0644\u0625\u062c\u0631\u0627\u0621 \u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0645\u062b\u0644 \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0639\u0646 \u0628\u064f\u0639\u062f (RCE) \u0623\u0648 \u0647\u062c\u0648\u0645 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629 (DoS). \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10 \u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#a102021-ssrf","text":"","title":"A10:2021 \u2013 \u062a\u0632\u0648\u064a\u0631 \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0645\u0646 \u062c\u0627\u0646\u0628 \u0627\u0644\u062e\u0627\u062f\u0645 SSRF"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385","title":"\u0627\u0644\u0639\u0648\u0627\u0645\u0644"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_2","text":"\u062d\u064a\u062b \u062a\u064f\u0638\u0647\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0623\u0646 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u062d\u0648\u0627\u062f\u062b \u0643\u0627\u0646 \u0645\u064f\u0646\u062e\u0641\u0636 \u0646\u0633\u0628\u064a\u064b\u0627 \u0628\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0645\u0639 \u0623\u0646 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u0625\u062c\u0631\u0627\u0624\u0647\u0627 \u0643\u0627\u0646\u062a \u0641\u0648\u0642 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0648\u0623\u0646 \u0645\u0639\u062f\u0651\u0644 \u0627\u0644\u0627\u062e\u062a\u0631\u0627\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u062d\u062f\u062b\u062a \u0648\u0627\u062b\u0627\u0631\u0647\u0627 \u0627\u0644\u0645\u062a\u0631\u062a\u0628\u0629 \u0633\u062a\u0643\u0648\u0646 \u0623\u0639\u0644\u0649 \u0645\u0646 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0648\u0645\u0646 \u0627\u0644\u0645\u062d\u062a\u0645\u0644 \u0623\u0646 \u062a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u0627\u0647\u0645\u0627\u062a \u0627\u0644\u0635\u063a\u064a\u0631\u0629 \u0623\u0648 \u0627\u0644\u0641\u0631\u062f\u064a\u0629 \u0644\u0647\u0630\u0627 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0641\u064a \u0625\u0637\u0627\u0631 CWEs \u0648\u0630\u0644\u0643 \u0645\u0646 \u0623\u062c\u0644 \u0631\u0641\u0639 \u0627\u0644\u0648\u0639\u064a \u0627\u0644\u0623\u0645\u0646\u064a\u060c \u0644\u0630\u0627 \u0646\u0623\u0645\u0644 \u0623\u0646 \u064a\u062a\u0645 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u064a\u0647\u0627 \u0648\u0623\u0646 \u064a\u062a\u0645 \u0625\u062f\u0631\u0627\u062c\u0647\u0627 \u0636\u0645\u0646 \u062a\u0635\u0646\u064a\u0641 \u0623\u0643\u0628\u0631 \u0641\u064a \u0627\u0644\u0625\u0635\u062f\u0627\u0631\u0627\u062a \u0627\u0644\u0645\u064f\u0642\u0628\u0644\u0629.","title":"\u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_3","text":"\u064a\u062a\u0645 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0639\u0646\u062f\u0645\u0627 \u064a\u0642\u0648\u0645 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0648\u064a\u0628 \u0628\u062c\u0644\u0628 \u0645\u0648\u0627\u0631\u062f \u0639\u0646 \u0628\u0639\u062f \u062f\u0648\u0646 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0635\u062d\u0629 \u0627\u0644\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0645\u0642\u062f\u0651\u0645 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u060c \u062d\u064a\u062b \u064a\u0633\u0645\u062d \u0630\u0644\u0643 \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0625\u062c\u0628\u0627\u0631 \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0639\u0644\u0649 \u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u0645\u0639\u062f\u0651\u0644 \u0625\u0644\u0649 \u0648\u062c\u0647\u0629 \u063a\u064a\u0631 \u0645\u062a\u0648\u0642\u0639\u0629 \u0644\u0644\u062e\u0627\u062f\u0645\u060c \u062d\u062a\u0649 \u0639\u0646\u062f\u0645\u0627 \u064a\u0643\u0648\u0646 \u0645\u062d\u0645\u064a\u0651 \u0628\u062c\u062f\u0627\u0631 \u062d\u0645\u0627\u064a\u0629\u060c \u0623\u0648 \u0634\u0628\u0643\u0629 \u062e\u0627\u0635\u0629 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 VPN \u0623\u0648 \u0623\u064a\u0629 \u0646\u0648\u0639 \u0645\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0634\u0628\u0643\u0629. \u0646\u0638\u0631\u064b\u0627 \u0644\u0623\u0646 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628 (\u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a\u0629) \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u062a\u0648\u0641\u0651\u0631 \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0645\u064f\u0645\u064a\u0632\u0627\u062a \u0645\u062a\u0642\u062f\u0651\u0645\u0629\u060c \u0641\u0625\u0646 \u062c\u0644\u0628 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0645\u0646 \u0627\u0644\u062e\u0627\u062f\u0645 \u0623\u0635\u0628\u062d \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0634\u0627\u0626\u0639. \u0646\u062a\u064a\u062c\u0629 \u0644\u0630\u0644\u0643\u060c \u0641\u0625\u0646 \u0645\u0639\u062f\u0651\u0644 \u062d\u062f\u0648\u062b \u062a\u0632\u0648\u064a\u0631 \u0644\u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0622\u062e\u0630 \u0641\u064a \u0627\u0644\u0627\u0632\u062f\u064a\u0627\u062f\u060c \u0644\u0630\u0644\u0643 \u0623\u0635\u0628\u062d \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0623\u0634\u062f \u062e\u0637\u0648\u0631\u0629 \u0639\u0644\u0649 \u0627\u0644\u062e\u0627\u062f\u0645 \u0639\u0646\u062f\u0645\u0627 \u0638\u0647\u0631\u062a \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 \u0648\u0643\u0630\u0644\u0643 \u062a\u0639\u0642\u064a\u062f \u0627\u0644\u0628\u0646\u064a\u0629 \u0627\u0644\u062a\u062d\u062a\u064a\u0651\u0629.","title":"\u0627\u0644\u0648\u0635\u0641"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_4","text":"\u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u064f\u0637\u0648\u0651\u0631\u064a\u0646 \u0645\u0646\u0639 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0628\u062a\u0646\u0641\u064a\u0630 \u0628\u0639\u0636 \u0623\u0648 \u0643\u0644 \u0648\u0633\u0627\u0626\u0644 \u0627\u0644\u062f\u0641\u0627\u0639 \u0627\u0644\u062a\u0627\u0644\u064a\u0629 \u0641\u064a \u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u062f\u0641\u0627\u0639 \u0627\u0644\u0639\u0645\u064a\u0642 (Defense in Depth) :","title":"\u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_5","text":"\u062a\u0642\u0633\u064a\u0645 \u0648\u0638\u0627\u0626\u0641 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0645\u0648\u0627\u0631\u062f \u0639\u0646 \u0628\u0639\u062f \u0641\u064a \u0634\u0628\u0643\u0627\u062a \u0645\u064f\u0646\u0641\u0635\u0644\u0629 \u0644\u062a\u0642\u0644\u064a\u0644 \u062a\u0623\u062b\u064a\u0631 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645. \u0641\u0631\u0636 \u0633\u064a\u0627\u0633\u0627\u062a \u062c\u062f\u0627\u0631 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \"\u0627\u0644\u0631\u0641\u0636 \u0627\u0641\u062a\u0631\u0627\u0636\u064a\u064b\u0627\" \u0623\u0648 \u0636\u0628\u0637 \u0622\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0641\u064a \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0634\u0628\u0643\u0629 \u0644\u062d\u0638\u0631 \u062c\u0645\u064a\u0639 \u062d\u0631\u0643\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0644\u0644\u0634\u0628\u0643\u0629 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0628\u0627\u0633\u062a\u062b\u0646\u0627\u0621 \u062d\u0631\u0643\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629.","title":"\u0645\u0646 \u062e\u0644\u0627\u0644 \u0637\u0628\u0642\u0627\u062a \u0627\u0644\u0634\u0628\u0643\u0629"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_6","text":"\u0627\u0644\u062a\u0635\u0651\u0641\u064a\u0629 \u0648\u0627\u0644\u062a\u062d\u0642\u0651\u0642 \u0645\u0646 \u0635\u062d\u0629 \u062c\u0645\u064a\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0625\u062f\u062e\u0627\u0644 \u0627\u0644\u0645\u0642\u062f\u0651\u0645\u0629 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645. \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0646\u0627\u0648\u064a\u0646 \u0645\u062d\u062f\u0651\u062f\u0629 \u0641\u064a \u0627\u0644\u0631\u0648\u0627\u0628\u0637\u060c URL \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0646\u0627\u0641\u0630 \u0645\u062d\u062f\u0651\u062f\u0629 \u0645\u0639 \u062a\u062d\u062f\u064a\u062f \u0642\u0627\u0626\u0645\u0629 \u0645\u0646 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0645\u062d\u062f\u0651\u062f\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \u0641\u064a \u0642\u0627\u0626\u0645\u0629 \u0645\u0633\u0645\u0648\u062d \u0628\u0647\u0627. \u0644\u0627 \u062a\u0642\u0645 \u0628\u0631\u062f \u0627\u0644\u0637\u0644\u0628\u0627\u062a \u0644\u0644\u0639\u0645\u064a\u0644 \u0639\u0644\u0649 \u0634\u0643\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u062e\u0627\u0645 \u0642\u0645 \u0628\u062a\u0639\u0637\u064a\u0644 \u0625\u0639\u0627\u062f\u0629 \u0627\u0644\u062a\u0648\u062c\u064a\u0647 \u0625\u0644\u0649 HTTP. \u0643\u0646 \u0639\u0644\u0649 \u062d\u0630\u0631 \u0645\u0646 \u0647\u062c\u0645\u0627\u062a \u0625\u0639\u0627\u062f\u0629 \u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u0631\u0627\u0628\u0637 \u0623\u0648 \u0627\u0644\u0623\u062d\u0631\u0641 \u0648\u0627\u0644\u062a\u064a \u0642\u062f \u062a\u0623\u062a\u064a \u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644 DNS \u0623\u0648 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 TOCTOU. \u0644\u0627 \u062a\u0642\u0645 \u0628\u062a\u062e\u0641\u064a\u0641 \u0627\u0644\u0645\u062e\u0627\u0637\u0631 \u0639\u0644\u0649 \u0647\u062c\u0645\u0627\u062a SSRF \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0633\u064a\u0627\u0633\u0629 \u0627\u0644\u0645\u0646\u0639 \u0627\u0644\u0645\u0628\u0646\u064a\u0651\u0629 \u0639\u0644\u0649 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u0639\u0628\u064a\u0631\u0627\u062a \u0627\u0644\u0645\u0646\u0637\u0642\u064a\u0629 \u0623\u0648 (Regular Expression). \u062d\u064a\u062b \u0623\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0644\u062f\u064a\u0647\u0645 \u0642\u0648\u0627\u0626\u0645 \u0645\u064f\u0639\u062f\u0651\u0629 \u0645\u0633\u0628\u0642\u064b\u0627 \u0648\u0645\u062a\u0639\u062f\u0651\u062f\u0629 \u0644\u0645\u062d\u0627\u0648\u0644\u0629 \u062a\u062e\u0637\u0651\u064a \u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062d\u062c\u0628 \u062a\u0644\u0643.","title":"\u0645\u0646 \u062e\u0644\u0627\u0644 \u0637\u0628\u0642\u0627\u062a \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_7","text":"\u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062a\u0632\u0648\u064a\u0631 \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u062e\u0627\u062f\u0645 \u0644\u0645\u0647\u0627\u062c\u0645\u0629 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u0645\u062d\u0645\u064a\u0651\u0629 \u062e\u0644\u0641 \u062c\u062f\u0631\u0627\u0646 \u062d\u0645\u0627\u064a\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628(WAF)\u060c \u0648\u062c\u062f\u0631\u0627\u0646 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0623\u0648 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062a\u062d\u0643\u0651\u0645 \u0644\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0634\u0628\u0643\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0645\u062b\u0644: \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #1: \u0641\u062d\u0635 \u0627\u0644\u0645\u0646\u0627\u0641\u0630 \u0644\u0644\u062e\u0648\u0627\u062f\u0645 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0641\u064a \u0645\u0639\u0645\u0627\u0631\u064a\u0629 \u0627\u0644\u0634\u0628\u0643\u0629: \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u063a\u064a\u0631 \u0645\u0642\u0633\u0651\u0645\u0629 \u0628\u0634\u0643\u0644 \u062c\u064a\u0651\u062f \u062a\u064f\u0645\u0643\u0651\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645\u064a\u0646 \u0645\u0646 \u0631\u0633\u0645 \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0628\u0634\u0643\u0644 \u062f\u0642\u064a\u0642 \u0648\u064a\u0635\u0644 \u0625\u0644\u0649 \u062a\u0645\u0643\u064a\u0646 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646\u062a \u0627\u0644\u0645\u0646\u0627\u0641\u0630 \u0645\u0641\u062a\u0648\u062d\u0629 \u0623\u0645 \u0645\u064f\u063a\u0644\u0642\u0629 \u0644\u0644\u062e\u0648\u0627\u062f\u0645 \u0648\u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062f\u0631\u0627\u0633\u0629 \u0623\u0648 \u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0627\u0644\u062e\u0627\u062f\u0645 \u0644\u0637\u0644\u0628\u0627\u062a \u0623\u0648 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u064f\u0633\u062a\u063a\u0631\u0642 \u0644\u0643\u0644 \u0637\u0644\u0628 \u0639\u0644\u0649 \u0643\u0644 \u0645\u0646\u0641\u0630 \u0645\u062e\u062a\u0644\u0641 \u0648\u0630\u0644\u0643 \u0644\u0645\u0639\u0631\u0641\u0629 \u0641\u064a \u062d\u0627\u0644 \u0643\u0627\u0646 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 SSRF \u0646\u062c\u062d \u0623\u0645 \u0641\u0634\u0644. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #2: \u0628\u064a\u0627\u0646\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u063a\u064a\u0631 \u0645\u062d\u0645\u064a\u0651\u0629 \u0648\u0627\u0644\u062a\u064a \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u064a\u0647\u0627: \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629 \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0645\u062b\u0644 \u0645\u0644\u0641 ( file:///etc/passwd)\u0623\u0648 \u062d\u062a\u0649 \u0644\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #3: \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0651\u0629 \u0644\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u0633\u062d\u0627\u0628\u064a\u0651\u0629 : \u064a\u0645\u062a\u0644\u0643 \u0645\u0639\u0638\u0645 \u0645\u0648\u0641\u0631\u0651\u064a \u0627\u0644\u0633\u062d\u0627\u0628\u0629 \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0651\u0629 \u0645\u062b\u0644 http://169.254.169.254 \u0648\u064a\u0645\u0643\u0646 \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0642\u0631\u0627\u0621\u0629 \u062a\u0644\u0643 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0651\u0629 \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0645\u0646\u0647\u0627. \u0633\u064a\u0646\u0627\u0631\u064a\u0648 #4: \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0648\u0625\u0633\u0627\u0621\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0645\u0646 \u0642\u0650\u0628\u0644 \u0627\u0644\u0645\u0647\u0627\u062c\u0645: \u064a\u0645\u0643\u0646 \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0625\u0633\u0627\u0621\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0629 \u0644\u0625\u062c\u0631\u0627\u0621 \u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0647\u062c\u0645\u0627\u062a \u0645\u062b\u0644 \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0639\u0646 \u0628\u064f\u0639\u062f (RCE) \u0623\u0648 \u0647\u062c\u0648\u0645 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629 (DoS).","title":"\u0623\u0645\u062b\u0644\u0629 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648\u0647\u0627\u062a \u0627\u0644\u0647\u062c\u0648\u0645"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_8","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"\u0627\u0644\u0645\u0635\u0627\u062f\u0631"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_(SSRF)/#cwes","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0631\u0628\u0637 \u0645\u0639 \u0625\u0637\u0627\u0631 CWEs"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/","text":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF) \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Vis\u00e3o Geral \u2693\ufe0e Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura. Descri\u00e7\u00e3o \u2693\ufe0e As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas. Como Previnir \u2693\ufe0e Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade: Para a Camada de Rede \u2693\ufe0e Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ). Para a Camada de Aplica\u00e7\u00e3o: \u2693\ufe0e Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o. Medidas Adicionais a Considerar: \u2693\ufe0e N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas. Cen\u00e1rio de exemplo de um ataque \u2693\ufe0e Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS). Refer\u00eancias \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista de CWEs mapeadas \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)    ![icon](assets/TOP_10_Icons_Final_SSRF.png)"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#a102021-falsificacao-de-solicitacao-do-lado-do-servidor-ssrf","text":"","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#fatores","text":"CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fatores"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#visao-geral","text":"Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura.","title":"Vis\u00e3o Geral"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#descricao","text":"As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas.","title":"Descri\u00e7\u00e3o"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#como-previnir","text":"Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade:","title":"Como Previnir"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-rede","text":"Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ).","title":"Para a Camada de Rede"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-aplicacao","text":"Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o.","title":"Para a Camada de Aplica\u00e7\u00e3o:"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#medidas-adicionais-a-considerar","text":"N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas.","title":"Medidas Adicionais a Considerar:"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#cenario-de-exemplo-de-um-ataque","text":"Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS).","title":"Cen\u00e1rio de exemplo de um ataque"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#referencias","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Refer\u00eancias"},{"location":"ar/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#lista-de-cwes-mapeadas","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista de CWEs mapeadas"},{"location":"ar/A11_2021-Next_Steps/","text":"A11:2021 \u2013 \u0627\u0644\u062e\u0637\u0648\u0627\u062a \u0627\u0644\u0645\u0642\u0628\u0644\u0629 \u2693\ufe0e \u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0639\u0645\u0644 \u0644\u0628\u0646\u0627\u0621 \u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646\u064a \u0645\u062a\u0643\u0627\u0645\u0644 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0623\u0648 \u062a\u0642\u062f\u064a\u0645 \u0627\u0633\u062a\u0634\u0627\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u0623\u0648 \u062e\u0644\u0642 \u0623\u062f\u0648\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629\u061b \u062a\u0623\u0645\u0644 \u0641\u064a \u062a\u0648\u0633\u064a\u0639 \u0646\u0637\u0627\u0642 \u062e\u062f\u0645\u0627\u062a\u0647\u0627. \u062e\u0644\u0627\u0644 \u0630\u0644\u0643 \u0642\u062f \u062a\u0648\u0627\u062c\u0647 \u0647\u0630\u0647 \u0627\u0644\u0645\u0634\u0643\u0644\u0627\u062a \u0627\u0644\u0623\u0631\u0628\u0639\u0629 \u0627\u0644\u062a\u0627\u0644\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062d\u0642 \u0627\u0644\u0627\u0644\u062a\u0641\u0627\u062a \u0644\u0647\u0627 \u0648\u062a\u062d\u062f\u064a\u062f\u0647\u0627 \u0648\u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627: \u0645\u0634\u0643\u0644\u0627\u062a \u062c\u0648\u062f\u0629 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 38 49.46% 2.22% 60.85% 23.42% 101736 7564 \u0627\u0644\u0648\u0635\u0641. \u062a\u062a\u0636\u0645\u0646 \u0645\u0634\u0643\u0644\u0627\u062a \u062c\u0648\u062f\u0629 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629: \u0639\u064a\u0648\u0628\u064b\u0627 \u0623\u0645\u0646\u064a\u0629\u060c \u0623\u0648 \u0627\u0646\u0645\u0627\u0637\u064b\u0627 \u0645\u0639\u0631\u0648\u0641\u0629\u060c \u0623\u0648 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u062a\u063a\u064a\u0631\u0627\u062a \u0644\u0623\u063a\u0631\u0627\u0636 \u0645\u062a\u0639\u062f\u062f\u0629\u060c \u0638\u0647\u0648\u0631 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0641\u064a \u0646\u0645\u0637 \u0627\u0644\u062a\u0635\u062d\u064a\u062d \u201cdebugging output\u201d\u060c \u062a\u0643\u0648\u0646 \u0633\u0644\u0633\u0644\u0629 \u0645\u0646 \u0627\u0644\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0645\u062a\u062a\u0627\u0628\u0639\u0629\u060c \u0638\u0647\u0648\u0631 \u062e\u0637\u0623 \u0628\u0631\u0645\u062c\u064a \u0628\u0633\u0628\u0628 \u062a\u063a\u064a\u0631 \u0641\u064a \u0644\u0644\u0646\u0638\u0627\u0645 \u0645\u0627 \u0628\u064a\u0646 \u0639\u0645\u0644\u064a\u0629 \u0641\u062d\u0635 \u0627\u0644\u0634\u0631\u0637 \u0627\u0644\u0628\u0631\u0645\u062c\u064a/\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062e\u0631\u062c\u0627\u062a \u0647\u0630\u0627 \u0627\u0644\u0634\u0631\u0637\u060c \u0638\u0647\u0648\u0631 unassigned \u0623\u0648 signed conversion \u0648\u0627\u0644\u062a\u064a \u064a\u0642\u0648\u0645 \u0628\u0647\u0627 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0628\u0627\u0633\u0645\u201d use after free errors\u201d\u060c \u0648\u0645\u0634\u0643\u0644\u0627\u062a \u0623\u062e\u0631\u0649. \u0645\u0627 \u064a\u0645\u064a\u0632 \u0647\u0630\u0647 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0623\u0646\u0647\u0627 \u064a\u0645\u0643\u0646 \u062a\u062d\u062f\u064a\u062f\u0647\u0627 \u0639\u0627\u062f\u0629\u064b \u0628\u0623\u062f\u0648\u0627\u062a \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0648stringent compiler flags \u0648linter IDE plugins\u060c \u0623\u0644\u063a\u062a \u0627\u0644\u0644\u063a\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u0634\u0643\u0644\u0627\u062a\u060c \u0645\u062b\u0644 \u0645\u0644\u0643\u064a\u0629 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0627\u0648 (memory ownership) \u0627\u0648 \u0645\u0641\u0647\u0648\u0645 (borrowing concept) \u0627\u0648 \u0645\u0641\u0647\u0648\u0645 (Rust\u2019s threading design) \u0648\u062a\u0637\u0628\u064a\u0642 \u0645\u0641\u0627\u0647\u064a\u0645 \u0623\u062e\u0631\u0649 \u062a\u0637\u0628\u0642 \u0641\u064a \u0622\u0644\u064a\u0629 \u0627\u0644\u0643\u062a\u0627\u0628\u0629. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 .\u0642\u0645 \u0628\u062a\u0645\u0643\u064a\u0646 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u062d\u0631\u0631 \u0648\u062e\u064a\u0627\u0631\u0627\u062a \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0644\u0644\u063a\u0629\u060c \u0636\u0639 \u0641\u064a \u0627\u0639\u062a\u0628\u0627\u0631\u0643 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0627\u0629 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u062b\u0627\u0628\u062a\u0629. \u0636\u0639 \u0641\u064a \u0627\u0639\u062a\u0628\u0627\u0631\u0643 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0644\u063a\u0629 \u0623\u0648 \u0625\u0637\u0627\u0631 \u0639\u0645\u0644 \u064a\u0639\u0645\u0644 \u0639\u0644\u0649 \u0627\u0644\u062a\u062e\u0644\u0635 \u0645\u0646 \u0627\u0644\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0645\u0639\u062a\u0627\u062f\u0629\u060c \u0645\u062b\u0644 Rust \u0623\u0648 Go. \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0647\u062c\u0648\u0645 . \u0642\u062f \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0627\u0648 \u064a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u063a\u064a\u0631 \u0627\u0644\u063a\u064a\u0631 \u0645\u0635\u0631\u062d \u0628\u0647 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0645\u0627 \u064a\u0633\u0645\u0649 (race condition) \u0639\u0628\u0631 \u0645\u0624\u0634\u0631\u0627\u062a \u0645\u062a\u0631\u0627\u0628\u0637\u0629 \u0648\u0645\u062a\u0639\u062f\u062f\u0629 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 OWASP Code Review Guide Google Code Review Guide \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 8 17.54% 4.89% 79.58% 33.26% 66985 973 \u0627\u0644\u0648\u0635\u0641 . \u062f\u0627\u0626\u0645\u064b\u0627 \u0645\u0627 \u064a\u0643\u0648\u0646 \u0647\u062c\u0645\u0627\u062a \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629 \u0645\u0645\u0643\u0646\u064b\u0627 \u0625\u0630\u0627 \u062a\u0648\u0641\u0631\u062a \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u0643\u0627\u0641\u064a\u0629. \u0648\u0644\u0643\u0646 \u0645\u0645\u0627\u0631\u0633\u0627\u062a \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0648\u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0644\u0647\u0627 \u062a\u0623\u062b\u064a\u0631 \u0643\u0628\u064a\u0631 \u0639\u0644\u0649 \u0642\u0648\u0629 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629. \u0644\u0646\u0641\u062a\u0631\u0636 \u0627\u0646 \u0623\u064a \u0634\u062e\u0635 \u0627\u0641\u062a\u0631\u0636 \u0623\u0646 \u0623\u064a \u0634\u062e\u0635 \u0644\u062f\u064a\u0647 \u0635\u0644\u0627\u062d\u064a\u0629 \u0627\u0644\u062f\u062e\u0648\u0644 \u0644\u0645\u0644\u0641 \u0643\u0628\u064a\u0631\u060c \u0623\u0648 \u0623\u0646\u0647 \u064a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644\u064a\u0629 \u062d\u0633\u0627\u0628\u064a\u0629 \u062a\u0633\u062a\u0647\u0644\u0643 \u0627\u0644\u0645\u0648\u0627\u0631\u062f \u0648\u062a\u062d\u062f\u062b \u0641\u064a \u0643\u0644 \u0635\u0641\u062d\u0629 \u0645\u0646 \u0635\u0641\u062d\u0627\u062a \u0627\u0644\u0645\u0648\u0642\u0639. \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629\u060c \u062a\u062d\u062f\u062b \u0647\u062c\u0645\u0627\u062a \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629 \u0645\u0646 \u062f\u0648\u0646 \u0623\u064a \u062c\u0647\u0648\u062f \u062a\u0630\u0643\u0631. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 . - \u0642\u0645 \u0628\u0639\u0645\u0644 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0644\u0648\u062d\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\u0629CPU\u060c \u0648\u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a / \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a\u060c \u0648\u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629. \u0642\u0645 \u0628\u0625\u0639\u0627\u062f\u0629 \u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u0644\u0643 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0623\u0648 \u062a\u062d\u0633\u064a\u0646\u0647\u0627 \u0623\u0648 \u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0645\u0624\u0642\u062a\u064b\u0627. \u0636\u0639 \u0641\u064a \u0627\u0639\u062a\u0628\u0627\u0631\u0643 \u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0623\u0634\u064a\u0627\u0621 \u0630\u0627\u062a \u0627\u0644\u0627\u062d\u062c\u0627\u0645 \u0627\u0644\u0643\u0628\u064a\u0631\u0629 \u0644\u0636\u0645\u0627\u0646 \u0623\u0646 \u0627\u0644\u0623\u0641\u0631\u0627\u062f \u0627\u0644\u0645\u0635\u0631\u062d \u0644\u0647\u0645 \u0641\u0642\u0637 \u064a\u0645\u0643\u0646\u0647\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0645\u0644\u0641\u0627\u062a \u0623\u0648 \u0623\u0634\u064a\u0627\u0621 \u0636\u062e\u0645\u0629 \u0623\u0648 \u0642\u0645 \u0628\u062e\u062f\u0645\u062a\u0647\u0645 \u0639\u0646 \u0637\u0631\u064a\u0642 \u0634\u0628\u0643\u0629 \u062a\u062e\u0632\u064a\u0646 \u0645\u0624\u0642\u062a. \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0647\u062c\u0648\u0645 . - \u0642\u062f \u064a\u062a\u0648\u0642\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0623\u0646 \u0643\u0644 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062a\u063a\u0631\u0642 \u0644\u062a\u0646\u0641\u064a\u0630\u0647\u0627 \u0645\u0646 5 \u0625\u0644\u0649 10 \u062b\u0648\u0627\u0646\u064d \u062d\u062a\u0649 \u062a\u0643\u062a\u0645\u0644. \u0644\u0630\u0644\u0643 \u064a\u0642\u0648\u0645 \u0628\u062a\u0634\u063a\u064a\u0644 \u0623\u0631\u0628\u0639 \u0639\u0645\u0644\u064a\u0627\u062a \u0641\u064a \u0646\u0641\u0633 \u0627\u0644\u0648\u0642\u062a \u0648\u0644\u0647\u0627 (thread) \u0645\u062d\u062f\u062f\u060c \u0633\u064a\u0628\u062f\u0648 \u0644\u0643 \u0623\u0646 \u0627\u0644\u062e\u0627\u062f\u0645 \u0642\u062f \u064a\u062a\u0648\u0642\u0641 \u0639\u0646 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0628\u0633\u0628\u0628 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0636\u063a\u0637. \u0644\u0630\u0644\u0643 \u064a\u0639\u0648\u062f \u0627\u0644\u0645\u0647\u0627\u062c\u0645 (1000 thread ) \u0644\u0643\u064a \u064a\u062a\u0639\u0637\u0644 \u0627\u0644\u0646\u0638\u0627\u0645 \u0648\u0644\u0627 \u064a\u0633\u062a\u062c\u064a\u0628 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service \u0627\u062f\u0627\u0631\u0629 \u0627\u062e\u0637\u0627\u0621 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u2693\ufe0e \u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 14 7.03% 1.16% 56.06% 31.74% 26576 16184 \u0627\u0644\u0648\u0635\u0641 . \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u062a\u0645 \u0643\u062a\u0627\u0628\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628 \u0628\u0644\u063a\u0627\u062a \u064a\u0645\u0643\u0646 \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0630\u0627\u0643\u0631\u062a\u0647\u0627\u060c \u0645\u062b\u0644 Java \u0623\u0648 .NET \u0623\u0648 node.js (JavaScript \u0623\u0648 TypeScript). \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u062a\u062a\u0645 \u0643\u062a\u0627\u0628\u0629 \u0647\u0630\u0647 \u0627\u0644\u0644\u063a\u0627\u062a \u0628\u0644\u063a\u0627\u062a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u064a \u0628\u0647\u0627 \u0645\u0634\u0643\u0644\u0627\u062a \u0641\u064a \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0630\u0627\u0643\u0631\u0629\u060c \u0645\u062b\u0644 (buffer or heap overflows\u060c use after free\u060c integer overflows\u060c \u0648\u0645\u0634\u0643\u0644\u0627\u062a \u0623\u062e\u0631\u0649)\u060c \u0643\u0645\u0627 \u0627\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u062a\u0647\u0631\u0628 \u0645\u0646 \u0648\u0636\u0639 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 (Sandbox) \u0639\u0644\u0649 \u0645\u0631 \u0627\u0644\u0633\u0646\u064a\u0646\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u062b\u0628\u062a \u0627\u0646 \u0644\u063a\u0629 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0648\u064a\u0628 \u0627\u0633\u0627\u0633\u0627\u064b \u0644\u064a\u0633\u062a \u0627\u0645\u0646\u0647 \u0643\u0645\u0627 \u062a\u0645 \u0648\u0635\u0641\u0647\u0627. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 . \u062a\u062a\u0645 \u0627\u0644\u0622\u0646 \u0643\u062a\u0627\u0628\u0629 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0628\u0644\u063a\u0627\u062a \u0622\u0645\u0646\u0629 \u0644\u0644\u0630\u0627\u0643\u0631\u0629 \u0645\u062b\u0644 Rust \u0623\u0648 Go. \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0640Rust\u060c \u062a\u0639\u062a\u0628\u0631 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0633\u0645\u0629 \u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u063a\u0629. \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0627\u0644\u062d\u0627\u0644\u064a\u0629\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0631\u062c\u0645 \u201cstrict compiler flags\u201d \u0648 (strong typing, static code analysis, \u060c fuzz testing) \u0645\u0641\u064a\u062f\u064b\u0627 \u0641\u064a \u062a\u062d\u062f\u064a\u062f \u062a\u0633\u0631\u0628 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0648\u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0648\u062a\u062c\u0627\u0648\u0632 \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u062d\u062f\u062f \u0648\u063a\u064a\u0631 \u0630\u0644\u0643 \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0647\u062c\u0648\u0645 \u0623\u0646 \u062b\u063a\u0631\u0627\u062a (Buffer \u0648 heap overflows) \u0647\u064a \u0645\u0646 \u0623\u062e\u0637\u0631 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0639\u0644\u0649 \u0645\u0631 \u0627\u0644\u0633\u0646\u064a\u0646\u060c \u062d\u064a\u062b \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0649 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c\u060c \u0648\u0627\u0644\u062a\u064a \u064a\u0642\u0648\u0645 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0628\u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u0624\u0642\u062a \u0641\u064a \u0645\u062e\u0632\u0646 \u0635\u063a\u064a\u0631 \u0627\u0644\u062d\u062c\u0645. \u0648\u0639\u0646\u062f\u0645\u0627 \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0625\u0631\u0633\u0627\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0627\u0643\u0628\u0631 \u0645\u0646 \u062d\u062c\u0645 \u0627\u0644\u0645\u062e\u0632\u0646 \u064a\u062d\u062f\u062b \u0627\u0644\u0643\u062a\u0627\u0628\u0629 \u0641\u0648\u0642 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0646\u0629. \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u0645\u062d \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0648\u0638\u0627\u0626\u0641 \u0627\u0644\u062a\u064a \u062a\u0645\u0643\u0646\u0647 \u0645\u0646 \u0627\u0644\u062a\u062d\u0643\u0645 \u0648\u0627\u0644\u0633\u064a\u0637\u0631\u0629 \u0639\u0644\u0649 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0648\u0648\u0638\u0627\u0626\u0641\u0647\u060c \u0627\u0644\u0645\u0635\u0627\u062f\u0631 OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"\u0627\u0644\u062e\u0637\u0648\u0627\u062a \u0627\u0644\u0645\u0642\u0628\u0644\u0629"},{"location":"ar/A11_2021-Next_Steps/#a112021","text":"\u0627\u0644\u0645\u0646\u0638\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0639\u0645\u0644 \u0644\u0628\u0646\u0627\u0621 \u0628\u0631\u0646\u0627\u0645\u062c \u0623\u0645\u0646\u064a \u0645\u062a\u0643\u0627\u0645\u0644 \u0644\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0623\u0648 \u062a\u0642\u062f\u064a\u0645 \u0627\u0633\u062a\u0634\u0627\u0631\u0627\u062a \u0623\u0645\u0646\u064a\u0629 \u0623\u0648 \u062e\u0644\u0642 \u0623\u062f\u0648\u0627\u062a \u0628\u0631\u0645\u062c\u064a\u0629\u061b \u062a\u0623\u0645\u0644 \u0641\u064a \u062a\u0648\u0633\u064a\u0639 \u0646\u0637\u0627\u0642 \u062e\u062f\u0645\u0627\u062a\u0647\u0627. \u062e\u0644\u0627\u0644 \u0630\u0644\u0643 \u0642\u062f \u062a\u0648\u0627\u062c\u0647 \u0647\u0630\u0647 \u0627\u0644\u0645\u0634\u0643\u0644\u0627\u062a \u0627\u0644\u0623\u0631\u0628\u0639\u0629 \u0627\u0644\u062a\u0627\u0644\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062d\u0642 \u0627\u0644\u0627\u0644\u062a\u0641\u0627\u062a \u0644\u0647\u0627 \u0648\u062a\u062d\u062f\u064a\u062f\u0647\u0627 \u0648\u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627:","title":"A11:2021 \u2013 \u0627\u0644\u062e\u0637\u0648\u0627\u062a \u0627\u0644\u0645\u0642\u0628\u0644\u0629"},{"location":"ar/A11_2021-Next_Steps/#_1","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 38 49.46% 2.22% 60.85% 23.42% 101736 7564 \u0627\u0644\u0648\u0635\u0641. \u062a\u062a\u0636\u0645\u0646 \u0645\u0634\u0643\u0644\u0627\u062a \u062c\u0648\u062f\u0629 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629: \u0639\u064a\u0648\u0628\u064b\u0627 \u0623\u0645\u0646\u064a\u0629\u060c \u0623\u0648 \u0627\u0646\u0645\u0627\u0637\u064b\u0627 \u0645\u0639\u0631\u0648\u0641\u0629\u060c \u0623\u0648 \u0625\u0639\u0627\u062f\u0629 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u062a\u063a\u064a\u0631\u0627\u062a \u0644\u0623\u063a\u0631\u0627\u0636 \u0645\u062a\u0639\u062f\u062f\u0629\u060c \u0638\u0647\u0648\u0631 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0641\u064a \u0646\u0645\u0637 \u0627\u0644\u062a\u0635\u062d\u064a\u062d \u201cdebugging output\u201d\u060c \u062a\u0643\u0648\u0646 \u0633\u0644\u0633\u0644\u0629 \u0645\u0646 \u0627\u0644\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0645\u062a\u062a\u0627\u0628\u0639\u0629\u060c \u0638\u0647\u0648\u0631 \u062e\u0637\u0623 \u0628\u0631\u0645\u062c\u064a \u0628\u0633\u0628\u0628 \u062a\u063a\u064a\u0631 \u0641\u064a \u0644\u0644\u0646\u0638\u0627\u0645 \u0645\u0627 \u0628\u064a\u0646 \u0639\u0645\u0644\u064a\u0629 \u0641\u062d\u0635 \u0627\u0644\u0634\u0631\u0637 \u0627\u0644\u0628\u0631\u0645\u062c\u064a/\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062e\u0631\u062c\u0627\u062a \u0647\u0630\u0627 \u0627\u0644\u0634\u0631\u0637\u060c \u0638\u0647\u0648\u0631 unassigned \u0623\u0648 signed conversion \u0648\u0627\u0644\u062a\u064a \u064a\u0642\u0648\u0645 \u0628\u0647\u0627 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0628\u0627\u0633\u0645\u201d use after free errors\u201d\u060c \u0648\u0645\u0634\u0643\u0644\u0627\u062a \u0623\u062e\u0631\u0649. \u0645\u0627 \u064a\u0645\u064a\u0632 \u0647\u0630\u0647 \u0627\u0644\u0645\u0634\u0627\u0643\u0644 \u0623\u0646\u0647\u0627 \u064a\u0645\u0643\u0646 \u062a\u062d\u062f\u064a\u062f\u0647\u0627 \u0639\u0627\u062f\u0629\u064b \u0628\u0623\u062f\u0648\u0627\u062a \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0648stringent compiler flags \u0648linter IDE plugins\u060c \u0623\u0644\u063a\u062a \u0627\u0644\u0644\u063a\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u0634\u0643\u0644\u0627\u062a\u060c \u0645\u062b\u0644 \u0645\u0644\u0643\u064a\u0629 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0627\u0648 (memory ownership) \u0627\u0648 \u0645\u0641\u0647\u0648\u0645 (borrowing concept) \u0627\u0648 \u0645\u0641\u0647\u0648\u0645 (Rust\u2019s threading design) \u0648\u062a\u0637\u0628\u064a\u0642 \u0645\u0641\u0627\u0647\u064a\u0645 \u0623\u062e\u0631\u0649 \u062a\u0637\u0628\u0642 \u0641\u064a \u0622\u0644\u064a\u0629 \u0627\u0644\u0643\u062a\u0627\u0628\u0629. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 .\u0642\u0645 \u0628\u062a\u0645\u0643\u064a\u0646 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0645\u062d\u0631\u0631 \u0648\u062e\u064a\u0627\u0631\u0627\u062a \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u062b\u0627\u0628\u062a\u0629 \u0644\u0644\u063a\u0629\u060c \u0636\u0639 \u0641\u064a \u0627\u0639\u062a\u0628\u0627\u0631\u0643 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u062f\u0627\u0629 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0629 \u0627\u0644\u062b\u0627\u0628\u062a\u0629. \u0636\u0639 \u0641\u064a \u0627\u0639\u062a\u0628\u0627\u0631\u0643 \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0644\u063a\u0629 \u0623\u0648 \u0625\u0637\u0627\u0631 \u0639\u0645\u0644 \u064a\u0639\u0645\u0644 \u0639\u0644\u0649 \u0627\u0644\u062a\u062e\u0644\u0635 \u0645\u0646 \u0627\u0644\u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u0645\u0639\u062a\u0627\u062f\u0629\u060c \u0645\u062b\u0644 Rust \u0623\u0648 Go. \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0647\u062c\u0648\u0645 . \u0642\u062f \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u062d\u0633\u0627\u0633\u0629 \u0627\u0648 \u064a\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u063a\u064a\u0631 \u0627\u0644\u063a\u064a\u0631 \u0645\u0635\u0631\u062d \u0628\u0647 \u0639\u0644\u0649 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0645\u0627 \u064a\u0633\u0645\u0649 (race condition) \u0639\u0628\u0631 \u0645\u0624\u0634\u0631\u0627\u062a \u0645\u062a\u0631\u0627\u0628\u0637\u0629 \u0648\u0645\u062a\u0639\u062f\u062f\u0629 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 OWASP Code Review Guide Google Code Review Guide","title":"\u0645\u0634\u0643\u0644\u0627\u062a \u062c\u0648\u062f\u0629 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629"},{"location":"ar/A11_2021-Next_Steps/#_2","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 8 17.54% 4.89% 79.58% 33.26% 66985 973 \u0627\u0644\u0648\u0635\u0641 . \u062f\u0627\u0626\u0645\u064b\u0627 \u0645\u0627 \u064a\u0643\u0648\u0646 \u0647\u062c\u0645\u0627\u062a \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629 \u0645\u0645\u0643\u0646\u064b\u0627 \u0625\u0630\u0627 \u062a\u0648\u0641\u0631\u062a \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u0643\u0627\u0641\u064a\u0629. \u0648\u0644\u0643\u0646 \u0645\u0645\u0627\u0631\u0633\u0627\u062a \u0627\u0644\u062a\u0635\u0645\u064a\u0645 \u0648\u0627\u0644\u062a\u0634\u0641\u064a\u0631 \u0644\u0647\u0627 \u062a\u0623\u062b\u064a\u0631 \u0643\u0628\u064a\u0631 \u0639\u0644\u0649 \u0642\u0648\u0629 \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629. \u0644\u0646\u0641\u062a\u0631\u0636 \u0627\u0646 \u0623\u064a \u0634\u062e\u0635 \u0627\u0641\u062a\u0631\u0636 \u0623\u0646 \u0623\u064a \u0634\u062e\u0635 \u0644\u062f\u064a\u0647 \u0635\u0644\u0627\u062d\u064a\u0629 \u0627\u0644\u062f\u062e\u0648\u0644 \u0644\u0645\u0644\u0641 \u0643\u0628\u064a\u0631\u060c \u0623\u0648 \u0623\u0646\u0647 \u064a\u0642\u0648\u0645 \u0628\u0639\u0645\u0644\u064a\u0629 \u062d\u0633\u0627\u0628\u064a\u0629 \u062a\u0633\u062a\u0647\u0644\u0643 \u0627\u0644\u0645\u0648\u0627\u0631\u062f \u0648\u062a\u062d\u062f\u062b \u0641\u064a \u0643\u0644 \u0635\u0641\u062d\u0629 \u0645\u0646 \u0635\u0641\u062d\u0627\u062a \u0627\u0644\u0645\u0648\u0642\u0639. \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062d\u0627\u0644\u0629\u060c \u062a\u062d\u062f\u062b \u0647\u062c\u0645\u0627\u062a \u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629 \u0645\u0646 \u062f\u0648\u0646 \u0623\u064a \u062c\u0647\u0648\u062f \u062a\u0630\u0643\u0631. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 . - \u0642\u0645 \u0628\u0639\u0645\u0644 \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0644\u0648\u062d\u062f\u0629 \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\u0629CPU\u060c \u0648\u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a / \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a\u060c \u0648\u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629. \u0642\u0645 \u0628\u0625\u0639\u0627\u062f\u0629 \u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u0647\u0644\u0643 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0623\u0648 \u062a\u062d\u0633\u064a\u0646\u0647\u0627 \u0623\u0648 \u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0645\u0624\u0642\u062a\u064b\u0627. \u0636\u0639 \u0641\u064a \u0627\u0639\u062a\u0628\u0627\u0631\u0643 \u0636\u0648\u0627\u0628\u0637 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0623\u0634\u064a\u0627\u0621 \u0630\u0627\u062a \u0627\u0644\u0627\u062d\u062c\u0627\u0645 \u0627\u0644\u0643\u0628\u064a\u0631\u0629 \u0644\u0636\u0645\u0627\u0646 \u0623\u0646 \u0627\u0644\u0623\u0641\u0631\u0627\u062f \u0627\u0644\u0645\u0635\u0631\u062d \u0644\u0647\u0645 \u0641\u0642\u0637 \u064a\u0645\u0643\u0646\u0647\u0645 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0645\u0644\u0641\u0627\u062a \u0623\u0648 \u0623\u0634\u064a\u0627\u0621 \u0636\u062e\u0645\u0629 \u0623\u0648 \u0642\u0645 \u0628\u062e\u062f\u0645\u062a\u0647\u0645 \u0639\u0646 \u0637\u0631\u064a\u0642 \u0634\u0628\u0643\u0629 \u062a\u062e\u0632\u064a\u0646 \u0645\u0624\u0642\u062a. \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0647\u062c\u0648\u0645 . - \u0642\u062f \u064a\u062a\u0648\u0642\u0639 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0623\u0646 \u0643\u0644 \u0639\u0645\u0644\u064a\u0629 \u062a\u0633\u062a\u063a\u0631\u0642 \u0644\u062a\u0646\u0641\u064a\u0630\u0647\u0627 \u0645\u0646 5 \u0625\u0644\u0649 10 \u062b\u0648\u0627\u0646\u064d \u062d\u062a\u0649 \u062a\u0643\u062a\u0645\u0644. \u0644\u0630\u0644\u0643 \u064a\u0642\u0648\u0645 \u0628\u062a\u0634\u063a\u064a\u0644 \u0623\u0631\u0628\u0639 \u0639\u0645\u0644\u064a\u0627\u062a \u0641\u064a \u0646\u0641\u0633 \u0627\u0644\u0648\u0642\u062a \u0648\u0644\u0647\u0627 (thread) \u0645\u062d\u062f\u062f\u060c \u0633\u064a\u0628\u062f\u0648 \u0644\u0643 \u0623\u0646 \u0627\u0644\u062e\u0627\u062f\u0645 \u0642\u062f \u064a\u062a\u0648\u0642\u0641 \u0639\u0646 \u0627\u0644\u0627\u0633\u062a\u062c\u0627\u0628\u0629 \u0628\u0633\u0628\u0628 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0636\u063a\u0637. \u0644\u0630\u0644\u0643 \u064a\u0639\u0648\u062f \u0627\u0644\u0645\u0647\u0627\u062c\u0645 (1000 thread ) \u0644\u0643\u064a \u064a\u062a\u0639\u0637\u0644 \u0627\u0644\u0646\u0638\u0627\u0645 \u0648\u0644\u0627 \u064a\u0633\u062a\u062c\u064a\u0628 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service","title":"\u062d\u062c\u0628 \u0627\u0644\u062e\u062f\u0645\u0629"},{"location":"ar/A11_2021-Next_Steps/#_3","text":"\u0631\u0628\u0637\u0647\u0627 \u0645\u0639 CWEs \u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u062d\u062f\u0648\u062b \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062d\u062f\u0648\u062b \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0627\u0644\u0642\u0635\u0648\u0649 \u0645\u062a\u0648\u0633\u0637 \u0645\u0639\u062f\u0644 \u0627\u0644\u062a\u063a\u0637\u064a\u0629 \u0645\u062a\u0648\u0633\u0637 \u0627\u0633\u062a\u063a\u0644\u0627\u0644 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062a\u0623\u062b\u064a\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0625\u062c\u0645\u0627\u0644\u064a \u0646\u0642\u0627\u0637 \u0627\u0644\u0636\u0639\u0641 CVEs 14 7.03% 1.16% 56.06% 31.74% 26576 16184 \u0627\u0644\u0648\u0635\u0641 . \u063a\u0627\u0644\u0628\u064b\u0627 \u0645\u0627 \u062a\u062a\u0645 \u0643\u062a\u0627\u0628\u0629 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628 \u0628\u0644\u063a\u0627\u062a \u064a\u0645\u0643\u0646 \u0627\u0644\u062a\u062d\u0643\u0645 \u0628\u0630\u0627\u0643\u0631\u062a\u0647\u0627\u060c \u0645\u062b\u0644 Java \u0623\u0648 .NET \u0623\u0648 node.js (JavaScript \u0623\u0648 TypeScript). \u0648\u0645\u0639 \u0630\u0644\u0643\u060c \u062a\u062a\u0645 \u0643\u062a\u0627\u0628\u0629 \u0647\u0630\u0647 \u0627\u0644\u0644\u063a\u0627\u062a \u0628\u0644\u063a\u0627\u062a \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0627\u0644\u062a\u064a \u0628\u0647\u0627 \u0645\u0634\u0643\u0644\u0627\u062a \u0641\u064a \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0630\u0627\u0643\u0631\u0629\u060c \u0645\u062b\u0644 (buffer or heap overflows\u060c use after free\u060c integer overflows\u060c \u0648\u0645\u0634\u0643\u0644\u0627\u062a \u0623\u062e\u0631\u0649)\u060c \u0643\u0645\u0627 \u0627\u0646 \u0647\u0646\u0627\u0643 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u062a\u0647\u0631\u0628 \u0645\u0646 \u0648\u0636\u0639 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 (Sandbox) \u0639\u0644\u0649 \u0645\u0631 \u0627\u0644\u0633\u0646\u064a\u0646\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u062b\u0628\u062a \u0627\u0646 \u0644\u063a\u0629 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0648\u064a\u0628 \u0627\u0633\u0627\u0633\u0627\u064b \u0644\u064a\u0633\u062a \u0627\u0645\u0646\u0647 \u0643\u0645\u0627 \u062a\u0645 \u0648\u0635\u0641\u0647\u0627. \u0643\u064a\u0641\u064a\u0629 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0645\u0646\u0647\u0627 . \u062a\u062a\u0645 \u0627\u0644\u0622\u0646 \u0643\u062a\u0627\u0628\u0629 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0648\u0627\u062c\u0647\u0627\u062a \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062d\u062f\u064a\u062b\u0629 \u0628\u0644\u063a\u0627\u062a \u0622\u0645\u0646\u0629 \u0644\u0644\u0630\u0627\u0643\u0631\u0629 \u0645\u062b\u0644 Rust \u0623\u0648 Go. \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0640Rust\u060c \u062a\u0639\u062a\u0628\u0631 \u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0633\u0645\u0629 \u0623\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u063a\u0629. \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0644\u0634\u0641\u0631\u0629 \u0627\u0644\u0645\u0635\u062f\u0631\u064a\u0629 \u0627\u0644\u062d\u0627\u0644\u064a\u0629\u060c \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0631\u062c\u0645 \u201cstrict compiler flags\u201d \u0648 (strong typing, static code analysis, \u060c fuzz testing) \u0645\u0641\u064a\u062f\u064b\u0627 \u0641\u064a \u062a\u062d\u062f\u064a\u062f \u062a\u0633\u0631\u0628 \u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0648\u0627\u0644\u0630\u0627\u0643\u0631\u0629 \u0648\u062a\u062c\u0627\u0648\u0632 \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0645\u062d\u062f\u062f \u0648\u063a\u064a\u0631 \u0630\u0644\u0643 \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0647\u062c\u0648\u0645 \u0623\u0646 \u062b\u063a\u0631\u0627\u062a (Buffer \u0648 heap overflows) \u0647\u064a \u0645\u0646 \u0623\u062e\u0637\u0631 \u0627\u0644\u062b\u063a\u0631\u0627\u062a \u0639\u0644\u0649 \u0645\u0631 \u0627\u0644\u0633\u0646\u064a\u0646\u060c \u062d\u064a\u062b \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0649 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c\u060c \u0648\u0627\u0644\u062a\u064a \u064a\u0642\u0648\u0645 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0628\u062a\u062e\u0632\u064a\u0646\u0647\u0627 \u0628\u0634\u0643\u0644 \u0645\u0624\u0642\u062a \u0641\u064a \u0645\u062e\u0632\u0646 \u0635\u063a\u064a\u0631 \u0627\u0644\u062d\u062c\u0645. \u0648\u0639\u0646\u062f\u0645\u0627 \u064a\u0642\u0648\u0645 \u0627\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0625\u0631\u0633\u0627\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0627\u0643\u0628\u0631 \u0645\u0646 \u062d\u062c\u0645 \u0627\u0644\u0645\u062e\u0632\u0646 \u064a\u062d\u062f\u062b \u0627\u0644\u0643\u062a\u0627\u0628\u0629 \u0641\u0648\u0642 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0645\u062e\u0632\u0646\u0629. \u0648\u0627\u0644\u062a\u064a \u062a\u0633\u0645\u062d \u0644\u0644\u0645\u0647\u0627\u062c\u0645 \u0628\u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0648\u0638\u0627\u0626\u0641 \u0627\u0644\u062a\u064a \u062a\u0645\u0643\u0646\u0647 \u0645\u0646 \u0627\u0644\u062a\u062d\u0643\u0645 \u0648\u0627\u0644\u0633\u064a\u0637\u0631\u0629 \u0639\u0644\u0649 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u0648\u0648\u0638\u0627\u0626\u0641\u0647\u060c \u0627\u0644\u0645\u0635\u0627\u062f\u0631 OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"\u0627\u062f\u0627\u0631\u0629 \u0627\u062e\u0637\u0627\u0621 \u0627\u0644\u0630\u0627\u0643\u0631\u0629"},{"location":"ar/ar/assets/readme/","text":"","title":"Readme"},{"location":"it/","text":"Introduzione alla OWASP Top 10 2021 \u2693\ufe0e Vi presentiamo la the OWASP Top 10 - 2021 \u2693\ufe0e Ecco a voi l'ultima versione della OWASP Top 10! La OWASP Top 10 2021 \u00e8 tutta nuova, con un nuovo design grafico e un'infografica di una pagina che potete stampare o scaricare dalla nostra home page. Un enorme grazie a tutti coloro che hanno contribuito con il loro tempo e i loro dati per questa versione. Senza di voi, tutto questo non sarebbe stato possibile. GRAZIE! Cosa \u00e8 cambiato nella Top 10 2021 \u2693\ufe0e Ci sono tre nuove categorie, quattro categorie con cambiamenti nella denominazione e nello scopo, e alcuni consolidamenti nella Top 10 per il 2021. Quando necessario abbiamo cambiato i nomi per concentrarci pi\u00f9 sulla causa principale anzich\u00e8 sui sintomi. A01:2021-Broken Access Control sale dalla quinta posizione alla categoria con il pi\u00f9 grave rischio per la sicurezza delle applicazioni web; i dati analizzati indicano che in media, il 3,81% delle applicazioni testate aveva una o pi\u00f9 Common Weakness Enumerations (CWEs) con pi\u00f9 di 318k occorrenze di CWEs in questa categoria di rischio. Le 34 CWE che corrispondevano a Broken Access Control avevano pi\u00f9 occorrenze di qualsiasi altra categoria. A02:2021-Cryptographic Failures si sposta di una posizione alla #2, precedentemente nota come A3:2017-Sensitive Data Exposure , che era un sintomo generico piuttosto che la causa principale. Il nome rinnovato si concentra sulle problematiche relative alla crittografia come \u00e8 stato prima, ma implicitamente. Questa categoria porta spesso all'esposizione di dati sensibili o alla compromissione del sistema. A03:2021-Injection scivola in terza posizione. Il 94% delle applicazioni \u00e8 stato testato per qualche forma di injection con un tasso di incidenza massimo del 19%, un tasso di incidenza medio del 3,37%, e le 33 CWE che corrispondevano a questa categoria hanno il secondo maggior numero di occorrenze nelle applicazioni, con 274k. In questa edizione il Cross-site Scripting fa parte di questa categoria. A04:2021-Insecure Design \u00e8 una nuova categoria per il 2021, con un focus sui rischi relativi ai difetti di progettazione. Se vogliamo veramente \"spostarci a sinistra\" come industria, abbiamo bisogno di pi\u00f9 threat modeling, secure design patterns e architetture di riferimento. Un design insicuro non pu\u00f2 essere corretto con un'implementazione perfetta, poich\u00e9 per definizione i controlli di sicurezza necessari non sono mai stati creati per difendersi da attacchi specifici. A05:2021-Security Misconfiguration sale dal numero 6 dell'edizione precedente; il 90% delle applicazioni \u00e8 stato testato per qualche forma di misconfigurazione, con un tasso di incidenza medio del 4,5% e oltre 208k casi di CWE corrispondenti a questa categoria di rischio. Con una tendenza al software altamente configurabile, non \u00e8 sorprendente vedere questa categoria salire. La precedente categoria per A4:2017-XML External Entities (XXE) \u00e8 ora parte di questa categoria di rischio. A06:2021-Vulnerable and Outdated Components era precedentemente intitolata \"Using Components with Known Vulnerabilities\" ed \u00e8 #2 nel sondaggio della comunit\u00e0 Top 10, ma aveva anche abbastanza numeri per far parte della Top 10 grazie ai dati raccolti e analizzati. Questa categoria sale dalla #9 del 2017 ed \u00e8 un problema noto per cui facciamo fatica a testare e a valutarne il rischio. \u00c8 l'unica categoria a non avere alcun Common Vulnerability and Exposures (CVE) corrispondente alle CWE incluse, quindi nel punteggio \u00e8 stato inserito un peso predefinito per sfruttabilit\u00e0 e impatto di 5.0. A07:2021-Identification and Authentication Failures era precedentemente nota come \"Broken Authentication\" e sta scivolando gi\u00f9 dalla seconda posizione, e ora include CWEs che sono pi\u00f9 legate a problematiche di identificazione. Questa categoria \u00e8 ancora parte integrante della Top 10, ma la maggiore diffusione di framework standard sembra aiutare. A08:2021-Software and Data Integrity Failures \u00e8 una nuova categoria per il 2021, che si concentra sul fare ipotesi relative agli aggiornamenti del software, ai dati critici e alle pipeline CI/CD senza verificare l'integrit\u00e0. Uno dei pi\u00f9 alti impatti ponderati dai dati di Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) \u00e8 stato messo in corrispondenza alle 10 CWE di questa categoria. A8:2017-Insecure Deserialization fa ora parte di questa categoria pi\u00f9 ampia. A09:2021-Security Logging and Monitoring Failures era precedentemente A10:2017-Insufficient Logging & Monitoring e viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#3), passando dalla precedente #10. Questa categoria \u00e8 stata ampliata per includere pi\u00f9 tipi di problematiche, \u00e8 difficile da testare e non \u00e8 ben rappresentata nei dati CVE/CVSS. Tuttavia, le problematiche in questa categoria possono avere un impatto diretto sulla visibilit\u00e0, sull'alerting degli incidenti e sulle attivit\u00e0 forensi. A10:2021-Server-Side Request Forgery viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#1). I dati mostrano un tasso di incidenza relativamente basso con una copertura di test superiore alla media, insieme a valutazioni superiori alla media per il potenziale di sfruttabilit\u00e0 e di impatto. Questa categoria rappresenta lo scenario in cui i membri della nostra comunit\u00e0 ci stanno comunicando che \u00e8 importante, anche se in questo momento non \u00e8 evidente dai dati. Metodologia \u2693\ufe0e Questa versione della Top 10 \u00e8 pi\u00f9 data-driven che mai, ma non ciecamente data-driven. Abbiamo selezionato otto delle dieci categorie dai dati forniti e due categorie dal sondaggio della comunit\u00e0 Top 10. Questo lo facciamo per una ragione fondamentale, guardare i dati forniti \u00e8 guardare nel passato. I ricercatori nel campo dell'AppSec impiegano tempo per trovare nuove vulnerabilit\u00e0 e nuovi modi per testarle. Ci vuole tempo per integrare questi test negli strumenti e nei processi. Nel momento in cui possiamo testare in modo affidabile una debolezza su larga scala, probabilmente sono passati anni. Per bilanciare questo punto di vista, usiamo un sondaggio comunitario per chiedere agli esperti di sicurezza e sviluppatori di applicazioni in prima linea quali sono le debolezze essenziali che i dati potrebbero non mostrare ancora. Ci sono alcuni cambiamenti importanti che abbiamo adottato per continuare a migliorare la Top 10. Come sono strutturate le categorie \u2693\ufe0e Alcune categorie sono cambiate dalla precedente versione della Top Ten di OWASP. Ecco un riassunto ad alto livello dei cambiamenti relativi alle categorie. I precedenti sforzi di raccolta dati erano focalizzati su un sottoinsieme prescritto di circa 30 CWE con un campo aperto che ne richiedeva altri. Abbiamo imparato che le organizzazioni si concentravano principalmente solo su quelle 30 CWE e raramente aggiungevano ulteriori CWE che avevano incontrato. In questa iterazione abbiamo chiesto solo dati, senza restrizioni sulle CWE. Abbiamo chiesto il numero di applicazioni testate per un dato anno (a partire dal 2017), e il numero di applicazioni con almeno un'istanza di una CWE trovata nei test. Questo formato ci permette di tracciare quanto sia prevalente ogni CWE all'interno della popolazione delle applicazioni. Per i nostri scopi ignoriamo la frequenza; mentre pu\u00f2 essere necessaria per altre situazioni, nasconde solo la reale prevalenza nella popolazione delle applicazioni. Che un'applicazione abbia quattro istanze di una CWE o 4.000 istanze, questo valore non influisce nel calcolo per la Top 10. Siamo passati da circa 30 CWE a quasi 400 CWE da analizzare. In futuro abbiamo in programma di fare ulteriori analisi dei dati come integrazione. Questo aumento significativo del numero di CWE richiede cambiamenti nel modo in cui le categorie sono strutturate. Abbiamo trascorso diversi mesi a raggruppare e categorizzare le CWE e avremmo potuto continuare per mesi. Ad un certo punto ci siamo dovuti fermare. Ci sono entrambi i tipi di CWE causa principale e sintomo , dove i tipi causa principale sono come \"Cryptographic Failures\" e \"Misconfiguration\" in contrasto con i tipi sintomo come \"Sensitive Data Exposure\" e \"Denial of Service\". Abbiamo deciso di concentrarci sulla causa principale ogni volta che \u00e8 possibile, in quanto \u00e8 pi\u00f9 logico per fornire una guida all'identificazione e al rimedio. Concentrarsi sulla causa principale piuttosto che sul sintomo non \u00e8 un concetto nuovo; la Top Ten \u00e8 stata un mix di sintomo e causa principale . Anche le CWE sono un mix di sintomo e causa principale ; siamo semplicemente pi\u00f9 consapevoli di questo e lo diciamo ad alta voce. C'\u00e8 una media di 19.6 CWE per categoria in questa versione, con i limiti inferiori a 1 CWE per A10:2021-Server-Side Request Forgery (SSRF) a 40 CWE in A04:2021-Insecure Design . Questa struttura aggiornata delle categorie offre ulteriori benefici per la formazione in quanto le aziende possono concentrarsi sulle CWE che hanno senso per un linguaggio/framework. Come vengono usati i dati per selezionare le categorie \u2693\ufe0e Nel 2017, abbiamo selezionato le categorie in base al tasso di incidenza per determinare la probabilit\u00e0, poi le abbiamo classificate in base alla discussione con il team sulla base di decenni di esperienza per Exploitability , Detectability (anche likelihood ), e Technical Impact . Per il 2021, vogliamo usare i dati per Exploitability e (Technical) Impact se possibile. Abbiamo scaricato OWASP Dependency Check ed estratto i punteggi CVSS relativi a Exploit e Impact raggruppati per CWE correlati. Ci sono voluti un bel po' di ricerche e sforzi, poich\u00e9 tutti i CVE hanno punteggi CVSSv2, ma ci sono problematiche in CVSSv2 che CVSSv3 dovrebbe risolvere. Dopo un certo periodo di tempo, a tutti i CVE viene assegnato anche un punteggio CVSSv3. Inoltre, gli intervalli di punteggio e le formule sono stati aggiornati tra CVSSv2 e CVSSv3. Nel CVSSv2, sia Exploit che (Technical) Impact potevano essere fino a 10.0, ma la formula li riduceva al 60% per Exploit e al 40% per Impact . Nel CVSSv3, il massimo teorico era limitato a 6.0 per Exploit e 4.0 per Impact . Con la ponderazione considerata, il punteggio di Impact si \u00e8 spostato pi\u00f9 in alto, quasi un punto e mezzo in media in CVSSv3, e l'exploitability si \u00e8 spostato quasi mezzo punto pi\u00f9 in basso in media. Ci sono 125k record di una CVE corrispondente a una CWE nei dati del National Vulnerability Database (NVD) estratti da OWASP Dependency Check, e ci sono 241 CWE uniche corrispondenti a un CVE. 62k corrispondenze di CWE hanno un punteggio CVSSv3, che \u00e8 circa la met\u00e0 della popolazione nel set di dati. Per la Top Ten 2021, abbiamo calcolato i punteggi medi di Exploit e Impact nel modo seguente. Abbiamo raggruppato tutte le CVE con punteggi CVSS per CWE e ponderato entrambi i punteggi di Exploit e Impact per la percentuale della popolazione che aveva CVSSv3 pi\u00f9 la restante popolazione di punteggi CVSSv2 per ottenere una media complessiva. Abbiamo messo in corrispondenza queste medie alle CWE nel dataset da usare come punteggio di Exploit e (Technical) Impact per l'altra met\u00e0 dell'equazione del rischio. Perch\u00e8 non utilizzare dati puramente statistici? \u2693\ufe0e I risultati nei dati sono principalmente limitati a ci\u00f2 che possiamo testare in modo automatico. Parlate con un professionista esperto di AppSec e vi racconter\u00e0 delle vulnerabilit\u00e0 che trova e delle tendenze che vede che non sono ancora visibili nei dati. Ci vuole tempo perch\u00e9 le persone sviluppino metodologie di test per certi tipi di vulnerabilit\u00e0 e poi ancora pi\u00f9 tempo perch\u00e9 quei test siano automatizzati ed eseguiti su una vasta popolazione di applicazioni. Tutto ci\u00f2 che troviamo sta guardando indietro nel passato e potrebbe mancare delle tendenze dell'ultimo anno, che non sono presenti nei dati. Pertanto, prendiamo solo otto delle dieci categorie dai dati perch\u00e9 sono incompleti. Le altre due categorie provengono dal sondaggio della comunit\u00e0 Top 10. Questo permette ai professionisti in prima linea di votare per ci\u00f2 che identificano come i rischi pi\u00f9 alti che potrebbero non essere ancora visibili nei dati (e potrebbero non essere mai espressi nei dati). Perch\u00e8 tasso di incidenza anzich\u00e8 frequenza? \u2693\ufe0e Ci sono tre fonti primarie di dati. Le identifichiamo come Human-assisted Tooling (HaT), Tool-assisted Human (TaH), e Tooling grezzo. Tooling e HaT generano una grande quantit\u00e0 di dati. Gli strumenti cercheranno vulnerabilit\u00e0 specifiche e tenteranno instancabilmente di trovare ogni istanza di quella vulnerabilit\u00e0 e genereranno un numero elevato di risultati per alcuni tipi di vulnerabilit\u00e0. Guardate il Cross-Site Scripting, che \u00e8 tipicamente di due tipi: o \u00e8 un errore piccolo e isolato o un problema sistemico. Quando si tratta di un problema sistemico, il conteggio pu\u00f2 essere di migliaia per una singola applicazione. Questa alta frequenza copre la maggior parte delle altre vulnerabilit\u00e0 trovate nei report o nei dati. TaH, d'altra parte, trover\u00e0 una gamma pi\u00f9 ampia di tipi di vulnerabilit\u00e0, ma con una frequenza molto pi\u00f9 bassa a causa dei vincoli temporali. Quando gli esseri umani testano un'applicazione e identificano problematiche come il Cross-Site Scripting, in genere trovano tre o quattro istanze e si fermano. Possono determinare una scoperta sistemica e scrivere nel report consigli per la correzione della problematica sull'intera applicazione. Non c'\u00e8 bisogno (o tempo) di trovare ogni istanza. Supponiamo di prendere questi due insiemi di dati distinti e cercare di unirli ina base alla frequenza. In questo caso, i dati di Tooling e HaT sommergeranno i pi\u00f9 accurati (ma ampi) dati TaH ed \u00e8 una buona parte del motivo per cui qualcosa come Cross-Site Scripting \u00e8 stato cos\u00ec altamente classificato in molte liste quando l'impatto \u00e8 generalmente basso o moderato. \u00c8 a causa dell'enorme volume di risultati. (Il Cross-Site Scripting \u00e8 anche ragionevolmente facile da testare, quindi ci sono molti pi\u00f9 test anche per questo). Nel 2017, abbiamo introdotto l'uso del tasso di incidenza per dare un nuovo sguardo ai dati e fondere in modo pulito i dati di Tooling e HaT con i dati TaH. Il tasso di incidenza chiede quale percentuale della popolazione di applicazioni ha avuto almeno un'istanza di un tipo di vulnerabilit\u00e0. Non ci interessa se era una tantum o sistemica. Questo \u00e8 irrilevante per i nostri scopi; abbiamo solo bisogno di sapere quante applicazioni ne avevano almeno un'istanza, il che aiuta a fornire una visione pi\u00f9 chiara dei risultati senza rischiare di inquinare i dati con risultati relativi a problematiche ad alta frequenza. Questo corrisponde a una visione legata al rischio, poich\u00e9 un attaccante ha bisogno di una sola istanza di una determinata vulnerabilit\u00e0 per attaccare con successo un'applicazione. Quale \u00e8 il processo di raccolta e analisi dei dati? \u2693\ufe0e Abbiamo formalizzato il processo di raccolta dati OWASP Top 10 all'Open Security Summit del 2017. I leader di OWASP Top 10 e la comunit\u00e0 hanno trascorso due giorni a formalizzare un processo di raccolta dati trasparente. Per l'edizione 2021 \u00e8 la seconda volta che abbiamo usato questa metodologia. Richiediamo i dati attraverso i canali dei social media a nostra disposizione, sia del progetto che di OWASP. Sulla pagina del progetto OWASP, elenchiamo quali variabili e quale struttura stiamo cercando nei dati e come inviarli. Nela pagina GitHub, abbiamo file di esempio che servono come modelli. Lavoriamo con le organizzazioni, se necessario, per aiutarle a capire la struttura e la correlazione delle relative CWE. Otteniamo dati da organizzazioni che sono aziende che svolgono test di sicurezza, piattaforme di bug bounty e organizzazioni che contribuiscono con dati di test interni. Una volta che abbiamo i dati, li carichiamo insieme ed eseguiamo un'analisi fondamentale, ovvero la corrispondenza delle CWE alle categorie di rischio. C'\u00e8 una sovrapposizione tra alcune CWE, e altre sono strettamente correlati (es. vulnerabilit\u00e0 crittografiche). Qualsiasi decisione relativa ai dati grezzi presentati \u00e8 documentata e pubblicata per essere aperti e trasparenti sul processo di normalizzazione dei dati. Guardiamo le otto categorie con i pi\u00f9 alti tassi di incidenza per l'inclusione nella Top 10. Guardiamo anche i risultati del sondaggio della comunit\u00e0 Top 10 per vedere quali possono essere gi\u00e0 presenti nei dati. I primi due voti che non sono gi\u00e0 presenti nei dati saranno selezionati per gli altri due posti nella Top 10. Una volta che tutti e dieci sono stati selezionati, abbiamo applicato fattori generici per la sfruttabilit\u00e0 e l'impatto; per produrre una Top 10 2021 in un ordine basato sul rischio. Etichette dei dati \u2693\ufe0e Ci sono alcune etichette che sono elencati per ciascuna delle 10 categorie principali, ecco cosa significano: CWEs corrispondenti: Il numero di CWE corrispondenti a una categoria dal team Top 10. Tasso di incidenza: Il tasso di incidenza \u00e8 la percentuale di applicazioni vulnerabili a quel CWE dalla popolazione testata da quella org per quell'anno. Copertura (di test): La percentuale di applicazioni testate da tutte le organizzazioni per un dato CWE. Sfruttabilit\u00e0 pesata: Il sub-score Exploit dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzati e posizionati su una scala di 10 punti. Impatto pesato: Il sub-score di impatto dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzato e posizionato su una scala di 10 punti. Occorrenze totali: Numero totale di applicazioni trovate che hanno i CWE corrispondenti ad una categoria. CVE totali: Numero totale di CVE nel DB NVD che sono stati messi in corrispondenza ai CWE relativi a una categoria. Ringraziamo chi ha contribuito con i dati \u2693\ufe0e Le seguenti organizzazioni (insieme ad alcuni donatori anonimi) hanno gentilmente donato i dati per oltre 500.000 applicazioni per rendere questo il pi\u00f9 grande e completo set di dati sulla sicurezza delle applicazioni. Senza di voi, questo non sarebbe possibile. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Grazie ai nostri sponsor \u2693\ufe0e Il team OWASP Top 10 2021 ringrazia il supporto finanziario di Secure Code Warrior e Just Eat.","title":"Home"},{"location":"it/#introduzione-alla-owasp-top-10-2021","text":"","title":"Introduzione alla OWASP Top 10 2021"},{"location":"it/#vi-presentiamo-la-the-owasp-top-10-2021","text":"Ecco a voi l'ultima versione della OWASP Top 10! La OWASP Top 10 2021 \u00e8 tutta nuova, con un nuovo design grafico e un'infografica di una pagina che potete stampare o scaricare dalla nostra home page. Un enorme grazie a tutti coloro che hanno contribuito con il loro tempo e i loro dati per questa versione. Senza di voi, tutto questo non sarebbe stato possibile. GRAZIE!","title":"Vi presentiamo la the OWASP Top 10 - 2021"},{"location":"it/#cosa-e-cambiato-nella-top-10-2021","text":"Ci sono tre nuove categorie, quattro categorie con cambiamenti nella denominazione e nello scopo, e alcuni consolidamenti nella Top 10 per il 2021. Quando necessario abbiamo cambiato i nomi per concentrarci pi\u00f9 sulla causa principale anzich\u00e8 sui sintomi. A01:2021-Broken Access Control sale dalla quinta posizione alla categoria con il pi\u00f9 grave rischio per la sicurezza delle applicazioni web; i dati analizzati indicano che in media, il 3,81% delle applicazioni testate aveva una o pi\u00f9 Common Weakness Enumerations (CWEs) con pi\u00f9 di 318k occorrenze di CWEs in questa categoria di rischio. Le 34 CWE che corrispondevano a Broken Access Control avevano pi\u00f9 occorrenze di qualsiasi altra categoria. A02:2021-Cryptographic Failures si sposta di una posizione alla #2, precedentemente nota come A3:2017-Sensitive Data Exposure , che era un sintomo generico piuttosto che la causa principale. Il nome rinnovato si concentra sulle problematiche relative alla crittografia come \u00e8 stato prima, ma implicitamente. Questa categoria porta spesso all'esposizione di dati sensibili o alla compromissione del sistema. A03:2021-Injection scivola in terza posizione. Il 94% delle applicazioni \u00e8 stato testato per qualche forma di injection con un tasso di incidenza massimo del 19%, un tasso di incidenza medio del 3,37%, e le 33 CWE che corrispondevano a questa categoria hanno il secondo maggior numero di occorrenze nelle applicazioni, con 274k. In questa edizione il Cross-site Scripting fa parte di questa categoria. A04:2021-Insecure Design \u00e8 una nuova categoria per il 2021, con un focus sui rischi relativi ai difetti di progettazione. Se vogliamo veramente \"spostarci a sinistra\" come industria, abbiamo bisogno di pi\u00f9 threat modeling, secure design patterns e architetture di riferimento. Un design insicuro non pu\u00f2 essere corretto con un'implementazione perfetta, poich\u00e9 per definizione i controlli di sicurezza necessari non sono mai stati creati per difendersi da attacchi specifici. A05:2021-Security Misconfiguration sale dal numero 6 dell'edizione precedente; il 90% delle applicazioni \u00e8 stato testato per qualche forma di misconfigurazione, con un tasso di incidenza medio del 4,5% e oltre 208k casi di CWE corrispondenti a questa categoria di rischio. Con una tendenza al software altamente configurabile, non \u00e8 sorprendente vedere questa categoria salire. La precedente categoria per A4:2017-XML External Entities (XXE) \u00e8 ora parte di questa categoria di rischio. A06:2021-Vulnerable and Outdated Components era precedentemente intitolata \"Using Components with Known Vulnerabilities\" ed \u00e8 #2 nel sondaggio della comunit\u00e0 Top 10, ma aveva anche abbastanza numeri per far parte della Top 10 grazie ai dati raccolti e analizzati. Questa categoria sale dalla #9 del 2017 ed \u00e8 un problema noto per cui facciamo fatica a testare e a valutarne il rischio. \u00c8 l'unica categoria a non avere alcun Common Vulnerability and Exposures (CVE) corrispondente alle CWE incluse, quindi nel punteggio \u00e8 stato inserito un peso predefinito per sfruttabilit\u00e0 e impatto di 5.0. A07:2021-Identification and Authentication Failures era precedentemente nota come \"Broken Authentication\" e sta scivolando gi\u00f9 dalla seconda posizione, e ora include CWEs che sono pi\u00f9 legate a problematiche di identificazione. Questa categoria \u00e8 ancora parte integrante della Top 10, ma la maggiore diffusione di framework standard sembra aiutare. A08:2021-Software and Data Integrity Failures \u00e8 una nuova categoria per il 2021, che si concentra sul fare ipotesi relative agli aggiornamenti del software, ai dati critici e alle pipeline CI/CD senza verificare l'integrit\u00e0. Uno dei pi\u00f9 alti impatti ponderati dai dati di Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) \u00e8 stato messo in corrispondenza alle 10 CWE di questa categoria. A8:2017-Insecure Deserialization fa ora parte di questa categoria pi\u00f9 ampia. A09:2021-Security Logging and Monitoring Failures era precedentemente A10:2017-Insufficient Logging & Monitoring e viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#3), passando dalla precedente #10. Questa categoria \u00e8 stata ampliata per includere pi\u00f9 tipi di problematiche, \u00e8 difficile da testare e non \u00e8 ben rappresentata nei dati CVE/CVSS. Tuttavia, le problematiche in questa categoria possono avere un impatto diretto sulla visibilit\u00e0, sull'alerting degli incidenti e sulle attivit\u00e0 forensi. A10:2021-Server-Side Request Forgery viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#1). I dati mostrano un tasso di incidenza relativamente basso con una copertura di test superiore alla media, insieme a valutazioni superiori alla media per il potenziale di sfruttabilit\u00e0 e di impatto. Questa categoria rappresenta lo scenario in cui i membri della nostra comunit\u00e0 ci stanno comunicando che \u00e8 importante, anche se in questo momento non \u00e8 evidente dai dati.","title":"Cosa \u00e8 cambiato nella Top 10 2021"},{"location":"it/#metodologia","text":"Questa versione della Top 10 \u00e8 pi\u00f9 data-driven che mai, ma non ciecamente data-driven. Abbiamo selezionato otto delle dieci categorie dai dati forniti e due categorie dal sondaggio della comunit\u00e0 Top 10. Questo lo facciamo per una ragione fondamentale, guardare i dati forniti \u00e8 guardare nel passato. I ricercatori nel campo dell'AppSec impiegano tempo per trovare nuove vulnerabilit\u00e0 e nuovi modi per testarle. Ci vuole tempo per integrare questi test negli strumenti e nei processi. Nel momento in cui possiamo testare in modo affidabile una debolezza su larga scala, probabilmente sono passati anni. Per bilanciare questo punto di vista, usiamo un sondaggio comunitario per chiedere agli esperti di sicurezza e sviluppatori di applicazioni in prima linea quali sono le debolezze essenziali che i dati potrebbero non mostrare ancora. Ci sono alcuni cambiamenti importanti che abbiamo adottato per continuare a migliorare la Top 10.","title":"Metodologia"},{"location":"it/#come-sono-strutturate-le-categorie","text":"Alcune categorie sono cambiate dalla precedente versione della Top Ten di OWASP. Ecco un riassunto ad alto livello dei cambiamenti relativi alle categorie. I precedenti sforzi di raccolta dati erano focalizzati su un sottoinsieme prescritto di circa 30 CWE con un campo aperto che ne richiedeva altri. Abbiamo imparato che le organizzazioni si concentravano principalmente solo su quelle 30 CWE e raramente aggiungevano ulteriori CWE che avevano incontrato. In questa iterazione abbiamo chiesto solo dati, senza restrizioni sulle CWE. Abbiamo chiesto il numero di applicazioni testate per un dato anno (a partire dal 2017), e il numero di applicazioni con almeno un'istanza di una CWE trovata nei test. Questo formato ci permette di tracciare quanto sia prevalente ogni CWE all'interno della popolazione delle applicazioni. Per i nostri scopi ignoriamo la frequenza; mentre pu\u00f2 essere necessaria per altre situazioni, nasconde solo la reale prevalenza nella popolazione delle applicazioni. Che un'applicazione abbia quattro istanze di una CWE o 4.000 istanze, questo valore non influisce nel calcolo per la Top 10. Siamo passati da circa 30 CWE a quasi 400 CWE da analizzare. In futuro abbiamo in programma di fare ulteriori analisi dei dati come integrazione. Questo aumento significativo del numero di CWE richiede cambiamenti nel modo in cui le categorie sono strutturate. Abbiamo trascorso diversi mesi a raggruppare e categorizzare le CWE e avremmo potuto continuare per mesi. Ad un certo punto ci siamo dovuti fermare. Ci sono entrambi i tipi di CWE causa principale e sintomo , dove i tipi causa principale sono come \"Cryptographic Failures\" e \"Misconfiguration\" in contrasto con i tipi sintomo come \"Sensitive Data Exposure\" e \"Denial of Service\". Abbiamo deciso di concentrarci sulla causa principale ogni volta che \u00e8 possibile, in quanto \u00e8 pi\u00f9 logico per fornire una guida all'identificazione e al rimedio. Concentrarsi sulla causa principale piuttosto che sul sintomo non \u00e8 un concetto nuovo; la Top Ten \u00e8 stata un mix di sintomo e causa principale . Anche le CWE sono un mix di sintomo e causa principale ; siamo semplicemente pi\u00f9 consapevoli di questo e lo diciamo ad alta voce. C'\u00e8 una media di 19.6 CWE per categoria in questa versione, con i limiti inferiori a 1 CWE per A10:2021-Server-Side Request Forgery (SSRF) a 40 CWE in A04:2021-Insecure Design . Questa struttura aggiornata delle categorie offre ulteriori benefici per la formazione in quanto le aziende possono concentrarsi sulle CWE che hanno senso per un linguaggio/framework.","title":"Come sono strutturate le categorie"},{"location":"it/#come-vengono-usati-i-dati-per-selezionare-le-categorie","text":"Nel 2017, abbiamo selezionato le categorie in base al tasso di incidenza per determinare la probabilit\u00e0, poi le abbiamo classificate in base alla discussione con il team sulla base di decenni di esperienza per Exploitability , Detectability (anche likelihood ), e Technical Impact . Per il 2021, vogliamo usare i dati per Exploitability e (Technical) Impact se possibile. Abbiamo scaricato OWASP Dependency Check ed estratto i punteggi CVSS relativi a Exploit e Impact raggruppati per CWE correlati. Ci sono voluti un bel po' di ricerche e sforzi, poich\u00e9 tutti i CVE hanno punteggi CVSSv2, ma ci sono problematiche in CVSSv2 che CVSSv3 dovrebbe risolvere. Dopo un certo periodo di tempo, a tutti i CVE viene assegnato anche un punteggio CVSSv3. Inoltre, gli intervalli di punteggio e le formule sono stati aggiornati tra CVSSv2 e CVSSv3. Nel CVSSv2, sia Exploit che (Technical) Impact potevano essere fino a 10.0, ma la formula li riduceva al 60% per Exploit e al 40% per Impact . Nel CVSSv3, il massimo teorico era limitato a 6.0 per Exploit e 4.0 per Impact . Con la ponderazione considerata, il punteggio di Impact si \u00e8 spostato pi\u00f9 in alto, quasi un punto e mezzo in media in CVSSv3, e l'exploitability si \u00e8 spostato quasi mezzo punto pi\u00f9 in basso in media. Ci sono 125k record di una CVE corrispondente a una CWE nei dati del National Vulnerability Database (NVD) estratti da OWASP Dependency Check, e ci sono 241 CWE uniche corrispondenti a un CVE. 62k corrispondenze di CWE hanno un punteggio CVSSv3, che \u00e8 circa la met\u00e0 della popolazione nel set di dati. Per la Top Ten 2021, abbiamo calcolato i punteggi medi di Exploit e Impact nel modo seguente. Abbiamo raggruppato tutte le CVE con punteggi CVSS per CWE e ponderato entrambi i punteggi di Exploit e Impact per la percentuale della popolazione che aveva CVSSv3 pi\u00f9 la restante popolazione di punteggi CVSSv2 per ottenere una media complessiva. Abbiamo messo in corrispondenza queste medie alle CWE nel dataset da usare come punteggio di Exploit e (Technical) Impact per l'altra met\u00e0 dell'equazione del rischio.","title":"Come vengono usati i dati per selezionare le categorie"},{"location":"it/#perche-non-utilizzare-dati-puramente-statistici","text":"I risultati nei dati sono principalmente limitati a ci\u00f2 che possiamo testare in modo automatico. Parlate con un professionista esperto di AppSec e vi racconter\u00e0 delle vulnerabilit\u00e0 che trova e delle tendenze che vede che non sono ancora visibili nei dati. Ci vuole tempo perch\u00e9 le persone sviluppino metodologie di test per certi tipi di vulnerabilit\u00e0 e poi ancora pi\u00f9 tempo perch\u00e9 quei test siano automatizzati ed eseguiti su una vasta popolazione di applicazioni. Tutto ci\u00f2 che troviamo sta guardando indietro nel passato e potrebbe mancare delle tendenze dell'ultimo anno, che non sono presenti nei dati. Pertanto, prendiamo solo otto delle dieci categorie dai dati perch\u00e9 sono incompleti. Le altre due categorie provengono dal sondaggio della comunit\u00e0 Top 10. Questo permette ai professionisti in prima linea di votare per ci\u00f2 che identificano come i rischi pi\u00f9 alti che potrebbero non essere ancora visibili nei dati (e potrebbero non essere mai espressi nei dati).","title":"Perch\u00e8 non utilizzare dati puramente statistici?"},{"location":"it/#perche-tasso-di-incidenza-anziche-frequenza","text":"Ci sono tre fonti primarie di dati. Le identifichiamo come Human-assisted Tooling (HaT), Tool-assisted Human (TaH), e Tooling grezzo. Tooling e HaT generano una grande quantit\u00e0 di dati. Gli strumenti cercheranno vulnerabilit\u00e0 specifiche e tenteranno instancabilmente di trovare ogni istanza di quella vulnerabilit\u00e0 e genereranno un numero elevato di risultati per alcuni tipi di vulnerabilit\u00e0. Guardate il Cross-Site Scripting, che \u00e8 tipicamente di due tipi: o \u00e8 un errore piccolo e isolato o un problema sistemico. Quando si tratta di un problema sistemico, il conteggio pu\u00f2 essere di migliaia per una singola applicazione. Questa alta frequenza copre la maggior parte delle altre vulnerabilit\u00e0 trovate nei report o nei dati. TaH, d'altra parte, trover\u00e0 una gamma pi\u00f9 ampia di tipi di vulnerabilit\u00e0, ma con una frequenza molto pi\u00f9 bassa a causa dei vincoli temporali. Quando gli esseri umani testano un'applicazione e identificano problematiche come il Cross-Site Scripting, in genere trovano tre o quattro istanze e si fermano. Possono determinare una scoperta sistemica e scrivere nel report consigli per la correzione della problematica sull'intera applicazione. Non c'\u00e8 bisogno (o tempo) di trovare ogni istanza. Supponiamo di prendere questi due insiemi di dati distinti e cercare di unirli ina base alla frequenza. In questo caso, i dati di Tooling e HaT sommergeranno i pi\u00f9 accurati (ma ampi) dati TaH ed \u00e8 una buona parte del motivo per cui qualcosa come Cross-Site Scripting \u00e8 stato cos\u00ec altamente classificato in molte liste quando l'impatto \u00e8 generalmente basso o moderato. \u00c8 a causa dell'enorme volume di risultati. (Il Cross-Site Scripting \u00e8 anche ragionevolmente facile da testare, quindi ci sono molti pi\u00f9 test anche per questo). Nel 2017, abbiamo introdotto l'uso del tasso di incidenza per dare un nuovo sguardo ai dati e fondere in modo pulito i dati di Tooling e HaT con i dati TaH. Il tasso di incidenza chiede quale percentuale della popolazione di applicazioni ha avuto almeno un'istanza di un tipo di vulnerabilit\u00e0. Non ci interessa se era una tantum o sistemica. Questo \u00e8 irrilevante per i nostri scopi; abbiamo solo bisogno di sapere quante applicazioni ne avevano almeno un'istanza, il che aiuta a fornire una visione pi\u00f9 chiara dei risultati senza rischiare di inquinare i dati con risultati relativi a problematiche ad alta frequenza. Questo corrisponde a una visione legata al rischio, poich\u00e9 un attaccante ha bisogno di una sola istanza di una determinata vulnerabilit\u00e0 per attaccare con successo un'applicazione.","title":"Perch\u00e8 tasso di incidenza anzich\u00e8 frequenza?"},{"location":"it/#quale-e-il-processo-di-raccolta-e-analisi-dei-dati","text":"Abbiamo formalizzato il processo di raccolta dati OWASP Top 10 all'Open Security Summit del 2017. I leader di OWASP Top 10 e la comunit\u00e0 hanno trascorso due giorni a formalizzare un processo di raccolta dati trasparente. Per l'edizione 2021 \u00e8 la seconda volta che abbiamo usato questa metodologia. Richiediamo i dati attraverso i canali dei social media a nostra disposizione, sia del progetto che di OWASP. Sulla pagina del progetto OWASP, elenchiamo quali variabili e quale struttura stiamo cercando nei dati e come inviarli. Nela pagina GitHub, abbiamo file di esempio che servono come modelli. Lavoriamo con le organizzazioni, se necessario, per aiutarle a capire la struttura e la correlazione delle relative CWE. Otteniamo dati da organizzazioni che sono aziende che svolgono test di sicurezza, piattaforme di bug bounty e organizzazioni che contribuiscono con dati di test interni. Una volta che abbiamo i dati, li carichiamo insieme ed eseguiamo un'analisi fondamentale, ovvero la corrispondenza delle CWE alle categorie di rischio. C'\u00e8 una sovrapposizione tra alcune CWE, e altre sono strettamente correlati (es. vulnerabilit\u00e0 crittografiche). Qualsiasi decisione relativa ai dati grezzi presentati \u00e8 documentata e pubblicata per essere aperti e trasparenti sul processo di normalizzazione dei dati. Guardiamo le otto categorie con i pi\u00f9 alti tassi di incidenza per l'inclusione nella Top 10. Guardiamo anche i risultati del sondaggio della comunit\u00e0 Top 10 per vedere quali possono essere gi\u00e0 presenti nei dati. I primi due voti che non sono gi\u00e0 presenti nei dati saranno selezionati per gli altri due posti nella Top 10. Una volta che tutti e dieci sono stati selezionati, abbiamo applicato fattori generici per la sfruttabilit\u00e0 e l'impatto; per produrre una Top 10 2021 in un ordine basato sul rischio.","title":"Quale \u00e8 il processo di raccolta e analisi dei dati?"},{"location":"it/#etichette-dei-dati","text":"Ci sono alcune etichette che sono elencati per ciascuna delle 10 categorie principali, ecco cosa significano: CWEs corrispondenti: Il numero di CWE corrispondenti a una categoria dal team Top 10. Tasso di incidenza: Il tasso di incidenza \u00e8 la percentuale di applicazioni vulnerabili a quel CWE dalla popolazione testata da quella org per quell'anno. Copertura (di test): La percentuale di applicazioni testate da tutte le organizzazioni per un dato CWE. Sfruttabilit\u00e0 pesata: Il sub-score Exploit dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzati e posizionati su una scala di 10 punti. Impatto pesato: Il sub-score di impatto dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzato e posizionato su una scala di 10 punti. Occorrenze totali: Numero totale di applicazioni trovate che hanno i CWE corrispondenti ad una categoria. CVE totali: Numero totale di CVE nel DB NVD che sono stati messi in corrispondenza ai CWE relativi a una categoria.","title":"Etichette dei dati"},{"location":"it/#ringraziamo-chi-ha-contribuito-con-i-dati","text":"Le seguenti organizzazioni (insieme ad alcuni donatori anonimi) hanno gentilmente donato i dati per oltre 500.000 applicazioni per rendere questo il pi\u00f9 grande e completo set di dati sulla sicurezza delle applicazioni. Senza di voi, questo non sarebbe possibile. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Ringraziamo chi ha contribuito con i dati"},{"location":"it/#grazie-ai-nostri-sponsor","text":"Il team OWASP Top 10 2021 ringrazia il supporto finanziario di Secure Code Warrior e Just Eat.","title":"Grazie ai nostri sponsor"},{"location":"it/0x00-notice/","text":"Rilascio \u2693\ufe0e Rilasciata il 24 Settembre 2021 Autori principali \u2693\ufe0e Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet ) Collaboratori \u2693\ufe0e Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination Come puoi aiutarci \u2693\ufe0e In questa fase, chiediamo Data scientists - per favore, fate una peer review delle nostra analisi Web designers - abbiamo bisogno di fare una versione mobile friendly del sito Traduttori - per favore rivedete il testo inglese per assicurarvi che sia traducibile Responsabili di ASVS, Testing Guide, and Code Review Guide - per favore usate i nostri dati e aiutateci a collegare tra loro i nostri documenti e standard Log issues and pull requests \u2693\ufe0e Si prega di segnalare qualsiasi correzione o problema: https://github.com/OWASP/Top10/issues","title":"Avvisi"},{"location":"it/0x00-notice/#rilascio","text":"Rilasciata il 24 Settembre 2021","title":"Rilascio"},{"location":"it/0x00-notice/#autori-principali","text":"Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet )","title":"Autori principali"},{"location":"it/0x00-notice/#collaboratori","text":"Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination","title":"Collaboratori"},{"location":"it/0x00-notice/#come-puoi-aiutarci","text":"In questa fase, chiediamo Data scientists - per favore, fate una peer review delle nostra analisi Web designers - abbiamo bisogno di fare una versione mobile friendly del sito Traduttori - per favore rivedete il testo inglese per assicurarvi che sia traducibile Responsabili di ASVS, Testing Guide, and Code Review Guide - per favore usate i nostri dati e aiutateci a collegare tra loro i nostri documenti e standard","title":"Come puoi aiutarci"},{"location":"it/0x00-notice/#log-issues-and-pull-requests","text":"Si prega di segnalare qualsiasi correzione o problema: https://github.com/OWASP/Top10/issues","title":"Log issues and pull requests"},{"location":"it/A00-about-owasp/","text":"A proposito di OWASP \u2693\ufe0e L'Open Web Application Security Project (OWASP) \u00e8 una comunit\u00e0 aperta dedicata per permettere alle organizzazioni di sviluppare, acquistare e mantenere applicazioni e API affidabili. All'OWASP, troverete in modo libero e aperto: Strumenti e standard di sicurezza delle applicazioni Ricerca all'avanguardia Controlli di sicurezza standard e librerie Libri completi su test di sicurezza delle applicazioni, sviluppo di codice sicuro e revisione del codice sicuro Presentazioni e video Cheat sheets su molti argomenti di interesse comune Chapter meetings Eventi, corsi, e conferenze . Google Groups Scopri di pi\u00f9 su: https://www.owasp.org . Tutti gli strumenti, i documenti, i video, le presentazioni e i chapter di OWASP sono gratuiti e aperti a chiunque sia interessato a migliorare la sicurezza delle applicazioni. Sosteniamo l'approccio alla sicurezza delle applicazioni come un problema di persone, processi e tecnologia, perch\u00e9 gli approcci pi\u00f9 efficaci alla sicurezza delle applicazioni richiedono miglioramenti in tutte queste aree. OWASP \u00e8 un nuovo tipo di organizzazione. La nostra libert\u00e0 dalle pressioni commerciali ci permette di fornire informazioni imparziali, pratiche e convenienti sulla sicurezza delle applicazioni. OWASP non \u00e8 affiliata ad alcuna azienda tecnologica, anche se sosteniamo l'uso informato della tecnologia di sicurezza commerciale. OWASP produce molti tipi di materiali in modo collaborativo, trasparente e aperto. La Fondazione OWASP \u00e8 l'entit\u00e0 non-profit che assicura il successo a lungo termine del progetto. Quasi tutti coloro che sono associati a OWASP sono volontari, compreso il consiglio di OWASP, i leader dei chapter, i leader dei progetti e i membri degli stessi. Sosteniamo la ricerca innovativa sulla sicurezza con sovvenzioni e infrastrutture. Unisciti a noi! Copyright and License \u2693\ufe0e Copyright \u00a9 2003-2021 The OWASP\u2122 Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"A proposito di OWASP"},{"location":"it/A00-about-owasp/#a-proposito-di-owasp","text":"L'Open Web Application Security Project (OWASP) \u00e8 una comunit\u00e0 aperta dedicata per permettere alle organizzazioni di sviluppare, acquistare e mantenere applicazioni e API affidabili. All'OWASP, troverete in modo libero e aperto: Strumenti e standard di sicurezza delle applicazioni Ricerca all'avanguardia Controlli di sicurezza standard e librerie Libri completi su test di sicurezza delle applicazioni, sviluppo di codice sicuro e revisione del codice sicuro Presentazioni e video Cheat sheets su molti argomenti di interesse comune Chapter meetings Eventi, corsi, e conferenze . Google Groups Scopri di pi\u00f9 su: https://www.owasp.org . Tutti gli strumenti, i documenti, i video, le presentazioni e i chapter di OWASP sono gratuiti e aperti a chiunque sia interessato a migliorare la sicurezza delle applicazioni. Sosteniamo l'approccio alla sicurezza delle applicazioni come un problema di persone, processi e tecnologia, perch\u00e9 gli approcci pi\u00f9 efficaci alla sicurezza delle applicazioni richiedono miglioramenti in tutte queste aree. OWASP \u00e8 un nuovo tipo di organizzazione. La nostra libert\u00e0 dalle pressioni commerciali ci permette di fornire informazioni imparziali, pratiche e convenienti sulla sicurezza delle applicazioni. OWASP non \u00e8 affiliata ad alcuna azienda tecnologica, anche se sosteniamo l'uso informato della tecnologia di sicurezza commerciale. OWASP produce molti tipi di materiali in modo collaborativo, trasparente e aperto. La Fondazione OWASP \u00e8 l'entit\u00e0 non-profit che assicura il successo a lungo termine del progetto. Quasi tutti coloro che sono associati a OWASP sono volontari, compreso il consiglio di OWASP, i leader dei chapter, i leader dei progetti e i membri degli stessi. Sosteniamo la ricerca innovativa sulla sicurezza con sovvenzioni e infrastrutture. Unisciti a noi!","title":"A proposito di OWASP"},{"location":"it/A00-about-owasp/#copyright-and-license","text":"Copyright \u00a9 2003-2021 The OWASP\u2122 Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"Copyright and License"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/","text":"Come avviare un programma di AppSec con la OWASP Top 10 \u2693\ufe0e In precedenza, la OWASP Top 10 non \u00e8 mai stata progettata per essere la base di un programma AppSec. Tuttavia, per molte aziende che hanno appena iniziato il loro viaggio nella sicurezza delle applicazioni \u00e8 essenziale avere una base di partenza. La OWASP Top 10 2021 \u00e8 un buon inizio come riferimento per le checklist e cos\u00ec via, ma non \u00e8 di per s\u00e9 sufficiente. Passo 1. Identificare le lacune e gli obiettivi del vostro programma AppSec \u2693\ufe0e Molti programmi di sicurezza delle applicazioni (AppSec) cercano di mettere il carro davanti ai buoi. I programmi eseguiti in questo modo sono destinati a fallire. Noi incoraggiamo fortemente i CISO e i responsabili della AppSec ad usare OWASP Software Assurance Maturity Model (SAMM) per identificare i punti deboli e le aree di miglioramento su un periodo di 1-3 anni. Il primo passo \u00e8 quello di valutare dove siete ora, identificare le lacune nella governance, nel design, nell'implementazione, nella verifica e nella parte operativa che dovete risolvere immediatamente rispetto a quelle che possono aspettare, e dare la priorit\u00e0 all'implementazione o al migliorare le quindici pratiche di sicurezza OWASP SAMM. OWASP SAMM pu\u00f2 aiutarvi a costruire e misurare i miglioramenti nei vostri sforzi per migliorare la sicurezza del software. Passo 2. Pianificare per un ciclo di vita del software sicuro su una paved road \u2693\ufe0e Tradizionalmente appannaggio dei cosiddetti \"unicorni\", il concetto di paved road \u00e8 il modo pi\u00f9 semplice per ottenere il massimo impatto e scalare le risorse AppSec con la velocit\u00e0 del team di sviluppo, che aumenta ogni anno. Il concetto di paved road \u00e8 \"il modo pi\u00f9 semplice \u00e8 anche il modo pi\u00f9 sicuro\" e dovrebbe comportare una cultura di partnership profonda tra il team di sviluppo e il team di sicurezza, preferibilmente in modo che siano nello stesso team. La paved road mira a migliorare continuamente, misurare, rilevare e sostituire le alternative insicure avendo una lista a livello aziendale di alternative sicure pronte ad essere utilizzate, con strumenti per aiutare a vedere dove si possono fare miglioramenti grazie alla paved road. Questo permette agli strumenti di sviluppo esistenti di segnalare le build insicure e aiutare i team di sviluppo a stare lontano dalle alternative non sicure. La paved road potrebbe sembrare molto laboriosa da realizzare, ma dovrebbe essere costruita incrementalmente nel tempo. Esistono anche altre forme di programmi AppSec, in particolare il Microsoft Agile Secure Development Lifecycle. Non esiste una metodologia di programma AppSec che si adatti ad ogni tipo di azienda. Passo 3. Realizzare la paved road con il team di sviluppo \u2693\ufe0e Le paved road vengono realizzate con il consenso e il coinvolgimento diretto dei team di sviluppo e operativi interessati. La paved road dovrebbe essere allineata strategicamente con il business e aiutare a fornire pi\u00f9 velocemente applicazioni pi\u00f9 sicure. Realizzare la paved road dovrebbe essere un esercizio olistico che copre l'intera azienda o ecosistema di applicazioni, non un cerotto da applicare alle app, come avveniva in passato. Passo 4. Migrare tutte le applicazioni imminenti ed esistenti sulla paved road \u2693\ufe0e Aggiungere strumenti di rilevamento per la paved road nella fase di development e fornire informazioni ai team di sviluppo per migliorare la sicurezza delle loro applicazioni permettendo loro di adottare direttamente elementi della paved road. Una volta che un aspetto della paved road \u00e8 stato adottato, le organizzazioni dovrebbero implementare sistemi di continuous integration che ispezionino il codice esistente e che avvertano nel caso di utilizzo di alternative proibite e avvisino o rifiutino la build. Questo previene che opzioni insicure si insinuino nel codice nel tempo, prevenendo il debito tecnico e un'applicazione insicura. Questi avvertimenti dovrebbero suggerire l'alternativa sicura, cos\u00ec che il team di sviluppo riceva immediatamente la risposta corretta. Possono svolgere il refactoring del codice e adottare rapidamente il componente della paved road. Passo 5. Testare che la paved road abbia mitigato le problematriche segnalate dalla OWASP Top 10 \u2693\ufe0e I componenti della paved road dovrebbero affrontare una problematica significativa con l'OWASP Top 10, per esempio, come rilevare o correggere automaticamente i componenti vulnerabili, o un plugin per l'IDE per svolgere l'analisi statica del codice per rilevare injection, o ancora meglio iniziare ad usare una libreria che \u00e8 notoriamente sicura contro le injection. Pi\u00f9 queste alternative sicure pronte all'uso vengono fornite ai team, meglio \u00e8. Un compito vitale del team AppSec \u00e8 quello di garantire che la sicurezza di questi componenti sia continuamente valutata e migliorata. Una volta applicate le migliorie, si dovrebbe indicare a chi utilizza il componente che si dovrebbe eseguire un aggiornamento, meglio ancora se avvenisse automaticamente, ma se cos\u00ec non fosse, almeno evidenziarlo su un dashboard o simile. Passo 6. Integrare il tuo processo in un programma di AppSec maturo \u2693\ufe0e Non dovete fermarvi alla Top 10 di OWASP. Copre solo 10 categorie di rischio. Incoraggiamo fortemente le organizzazioni ad adottare l'Application Security Verification Standard e aggiungere progressivamente componenti e test per il livello 1, 2 e 3, a seconda del livello di rischio delle applicazioni sviluppate. Andare oltre \u2693\ufe0e Tutti i grandi programmi AppSec vanno oltre il minimo indispensabile. Tutti devono continuare ad andare avanti se vogliamo essere al top delle vulnerabilit\u00e0 dell'AppSec. Integrit\u00e0 concettuale . I programmi AppSec maturi devono contenere qualche concetto di architettura di sicurezza, sia che si tratti di un architettura di sicurezza enterprise, cloud o threat modeling. Automazione e scalabilit\u00e0 . I programmi AppSec maturi cercano di automatizzare il pi\u00f9 possibile, usando script per emulare complesse fasi di penetration test, strumenti di analisi statica del codice direttamente a disposizione dei team di sviluppo, assistendo i team di sviluppo nello sviluppare unit e integration test per AppSec, e altro ancora. Cultura . I programmi AppSec maturi cercano smantellare design insicuri ed eliminare il debito tecnico dal codice esistente essendo una parte integrante del team di sviluppo, non accessoria. I team AppSec che vedono i team di sviluppo come degli estranei sono destinati a fallire. Miglioramento continuo . I programmi AppSec maturi cercano di migliorare costantemente. Se qualcosa non funziona, smetti di farlo. Se qualcosa \u00e8 rudimentale o non scalabile, lavorate per migliorarlo. Se qualcosa non viene usato dai team di sviluppo e ha un impatto limitato, fate qualcosa di diverso. Solo perch\u00e9 facciamo verifiche documentali dagli anni '70 non significa che sia una buona idea. Misurare, valutare e poi costruire o migliorare.","title":"Come avviare un programma di AppSec con la OWASP Top 10"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#come-avviare-un-programma-di-appsec-con-la-owasp-top-10","text":"In precedenza, la OWASP Top 10 non \u00e8 mai stata progettata per essere la base di un programma AppSec. Tuttavia, per molte aziende che hanno appena iniziato il loro viaggio nella sicurezza delle applicazioni \u00e8 essenziale avere una base di partenza. La OWASP Top 10 2021 \u00e8 un buon inizio come riferimento per le checklist e cos\u00ec via, ma non \u00e8 di per s\u00e9 sufficiente.","title":"Come avviare un programma di AppSec con la OWASP Top 10"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#passo-1-identificare-le-lacune-e-gli-obiettivi-del-vostro-programma-appsec","text":"Molti programmi di sicurezza delle applicazioni (AppSec) cercano di mettere il carro davanti ai buoi. I programmi eseguiti in questo modo sono destinati a fallire. Noi incoraggiamo fortemente i CISO e i responsabili della AppSec ad usare OWASP Software Assurance Maturity Model (SAMM) per identificare i punti deboli e le aree di miglioramento su un periodo di 1-3 anni. Il primo passo \u00e8 quello di valutare dove siete ora, identificare le lacune nella governance, nel design, nell'implementazione, nella verifica e nella parte operativa che dovete risolvere immediatamente rispetto a quelle che possono aspettare, e dare la priorit\u00e0 all'implementazione o al migliorare le quindici pratiche di sicurezza OWASP SAMM. OWASP SAMM pu\u00f2 aiutarvi a costruire e misurare i miglioramenti nei vostri sforzi per migliorare la sicurezza del software.","title":"Passo 1. Identificare le lacune e gli obiettivi del vostro programma AppSec"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#passo-2-pianificare-per-un-ciclo-di-vita-del-software-sicuro-su-una-paved-road","text":"Tradizionalmente appannaggio dei cosiddetti \"unicorni\", il concetto di paved road \u00e8 il modo pi\u00f9 semplice per ottenere il massimo impatto e scalare le risorse AppSec con la velocit\u00e0 del team di sviluppo, che aumenta ogni anno. Il concetto di paved road \u00e8 \"il modo pi\u00f9 semplice \u00e8 anche il modo pi\u00f9 sicuro\" e dovrebbe comportare una cultura di partnership profonda tra il team di sviluppo e il team di sicurezza, preferibilmente in modo che siano nello stesso team. La paved road mira a migliorare continuamente, misurare, rilevare e sostituire le alternative insicure avendo una lista a livello aziendale di alternative sicure pronte ad essere utilizzate, con strumenti per aiutare a vedere dove si possono fare miglioramenti grazie alla paved road. Questo permette agli strumenti di sviluppo esistenti di segnalare le build insicure e aiutare i team di sviluppo a stare lontano dalle alternative non sicure. La paved road potrebbe sembrare molto laboriosa da realizzare, ma dovrebbe essere costruita incrementalmente nel tempo. Esistono anche altre forme di programmi AppSec, in particolare il Microsoft Agile Secure Development Lifecycle. Non esiste una metodologia di programma AppSec che si adatti ad ogni tipo di azienda.","title":"Passo 2. Pianificare per un ciclo di vita del software sicuro su una paved road"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#passo-3-realizzare-la-paved-road-con-il-team-di-sviluppo","text":"Le paved road vengono realizzate con il consenso e il coinvolgimento diretto dei team di sviluppo e operativi interessati. La paved road dovrebbe essere allineata strategicamente con il business e aiutare a fornire pi\u00f9 velocemente applicazioni pi\u00f9 sicure. Realizzare la paved road dovrebbe essere un esercizio olistico che copre l'intera azienda o ecosistema di applicazioni, non un cerotto da applicare alle app, come avveniva in passato.","title":"Passo 3. Realizzare la paved road con il team di sviluppo"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#passo-4-migrare-tutte-le-applicazioni-imminenti-ed-esistenti-sulla-paved-road","text":"Aggiungere strumenti di rilevamento per la paved road nella fase di development e fornire informazioni ai team di sviluppo per migliorare la sicurezza delle loro applicazioni permettendo loro di adottare direttamente elementi della paved road. Una volta che un aspetto della paved road \u00e8 stato adottato, le organizzazioni dovrebbero implementare sistemi di continuous integration che ispezionino il codice esistente e che avvertano nel caso di utilizzo di alternative proibite e avvisino o rifiutino la build. Questo previene che opzioni insicure si insinuino nel codice nel tempo, prevenendo il debito tecnico e un'applicazione insicura. Questi avvertimenti dovrebbero suggerire l'alternativa sicura, cos\u00ec che il team di sviluppo riceva immediatamente la risposta corretta. Possono svolgere il refactoring del codice e adottare rapidamente il componente della paved road.","title":"Passo 4. Migrare tutte le applicazioni imminenti ed esistenti sulla paved road"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#passo-5-testare-che-la-paved-road-abbia-mitigato-le-problematriche-segnalate-dalla-owasp-top-10","text":"I componenti della paved road dovrebbero affrontare una problematica significativa con l'OWASP Top 10, per esempio, come rilevare o correggere automaticamente i componenti vulnerabili, o un plugin per l'IDE per svolgere l'analisi statica del codice per rilevare injection, o ancora meglio iniziare ad usare una libreria che \u00e8 notoriamente sicura contro le injection. Pi\u00f9 queste alternative sicure pronte all'uso vengono fornite ai team, meglio \u00e8. Un compito vitale del team AppSec \u00e8 quello di garantire che la sicurezza di questi componenti sia continuamente valutata e migliorata. Una volta applicate le migliorie, si dovrebbe indicare a chi utilizza il componente che si dovrebbe eseguire un aggiornamento, meglio ancora se avvenisse automaticamente, ma se cos\u00ec non fosse, almeno evidenziarlo su un dashboard o simile.","title":"Passo 5. Testare che la paved road abbia mitigato le problematriche segnalate dalla OWASP Top 10"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#passo-6-integrare-il-tuo-processo-in-un-programma-di-appsec-maturo","text":"Non dovete fermarvi alla Top 10 di OWASP. Copre solo 10 categorie di rischio. Incoraggiamo fortemente le organizzazioni ad adottare l'Application Security Verification Standard e aggiungere progressivamente componenti e test per il livello 1, 2 e 3, a seconda del livello di rischio delle applicazioni sviluppate.","title":"Passo 6. Integrare il tuo processo in un programma di AppSec maturo"},{"location":"it/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#andare-oltre","text":"Tutti i grandi programmi AppSec vanno oltre il minimo indispensabile. Tutti devono continuare ad andare avanti se vogliamo essere al top delle vulnerabilit\u00e0 dell'AppSec. Integrit\u00e0 concettuale . I programmi AppSec maturi devono contenere qualche concetto di architettura di sicurezza, sia che si tratti di un architettura di sicurezza enterprise, cloud o threat modeling. Automazione e scalabilit\u00e0 . I programmi AppSec maturi cercano di automatizzare il pi\u00f9 possibile, usando script per emulare complesse fasi di penetration test, strumenti di analisi statica del codice direttamente a disposizione dei team di sviluppo, assistendo i team di sviluppo nello sviluppare unit e integration test per AppSec, e altro ancora. Cultura . I programmi AppSec maturi cercano smantellare design insicuri ed eliminare il debito tecnico dal codice esistente essendo una parte integrante del team di sviluppo, non accessoria. I team AppSec che vedono i team di sviluppo come degli estranei sono destinati a fallire. Miglioramento continuo . I programmi AppSec maturi cercano di migliorare costantemente. Se qualcosa non funziona, smetti di farlo. Se qualcosa \u00e8 rudimentale o non scalabile, lavorate per migliorarlo. Se qualcosa non viene usato dai team di sviluppo e ha un impatto limitato, fate qualcosa di diverso. Solo perch\u00e9 facciamo verifiche documentali dagli anni '70 non significa che sia una buona idea. Misurare, valutare e poi costruire o migliorare.","title":"Andare oltre"},{"location":"it/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/","text":"Come usare la OWASP Top 10 come standard \u2693\ufe0e La OWASP Top 10 \u00e8 principalmente un documento per diffondere consapevolezza. Tuttavia, questo non ha impedito alle organizzazioni di usarlo come standard de facto per l'AppSec sin dal suo inizio nel 2003. Se volete usare la OWASP Top 10 come standard di codifica o di test, sappiate che \u00e8 il minimo indispensabile e solo un punto di partenza. Una delle difficolt\u00e0 nell'usare la OWASP Top 10 come standard \u00e8 che documentiamo i rischi di sicurezza delle applicazioni, e non necessariamente problematiche facilmente testabili. Per esempio, A04:2021-Insecure Design \u00e8 oltre la portata della maggior parte delle forme di test. Un altro esempio \u00e8 il test sul posto, in uso, ed efficace dei log e il monitoraggio degli stessi che pu\u00f2 essere fatto solo con interviste e con la richiesta di un campione di risposte agli incidenti di sicurezza. Uno strumento di analisi statica del codice pu\u00f2 cercare l'assenza di istruzioni di logging, ma potrebbe essere impossibile determinare se la logica di business o il controllo degli accessi sta registrando violazioni della sicurezza. I penetration tester possono essere in grado solo di determinare che hanno invocato la procedura di incident response in un ambiente di test, ambienti che sono raramente monitorati allo stesso modo dell'ambiente di produzione. Ecco le nostre raccomandazioni per quando \u00e8 appropriato usare la OWASP Top 10: Caso d'uso OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Si Training Livello base Completo Design and architecture Occasionalmente Si Coding standard Minimo indispensabile Si Secure Code review Minimo indispensabile Si Peer review checklist Minimo indispensabile Si Unit testing Occasionalmente Si Integration testing Occasionalmente Si Penetration testing Minimo indispensabile Si Tool support Minimo indispensabile Si Secure Supply Chain Occasionalmente Si Incoraggiamo chiunque voglia adottare uno standard di sicurezza per le applicazioni ad utilizzare lo standard OWASP Application Security Verification Standard (ASVS), poich\u00e9 \u00e8 progettato per essere verificabile e testato, e pu\u00f2 essere usato in tutte le parti del un ciclo di vita di sviluppo sicuro del software. L'ASVS \u00e8 l'unica scelta accettabile per chi produce strumenti di testing. Gli strumenti non possono rilevare, testare o proteggere in modo esaustivo contro la Top 10 di OWASP a causa della natura di molti dei rischi OWASP Top 10, ad esempio A04:2021-Insecure Design. OWASP scoraggia qualsiasi pretesa di copertura completa della OWASP Top 10, perch\u00e9 \u00e8 semplicemente falso.","title":"Come utilizzare la OWASP Top 10 come standard"},{"location":"it/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#come-usare-la-owasp-top-10-come-standard","text":"La OWASP Top 10 \u00e8 principalmente un documento per diffondere consapevolezza. Tuttavia, questo non ha impedito alle organizzazioni di usarlo come standard de facto per l'AppSec sin dal suo inizio nel 2003. Se volete usare la OWASP Top 10 come standard di codifica o di test, sappiate che \u00e8 il minimo indispensabile e solo un punto di partenza. Una delle difficolt\u00e0 nell'usare la OWASP Top 10 come standard \u00e8 che documentiamo i rischi di sicurezza delle applicazioni, e non necessariamente problematiche facilmente testabili. Per esempio, A04:2021-Insecure Design \u00e8 oltre la portata della maggior parte delle forme di test. Un altro esempio \u00e8 il test sul posto, in uso, ed efficace dei log e il monitoraggio degli stessi che pu\u00f2 essere fatto solo con interviste e con la richiesta di un campione di risposte agli incidenti di sicurezza. Uno strumento di analisi statica del codice pu\u00f2 cercare l'assenza di istruzioni di logging, ma potrebbe essere impossibile determinare se la logica di business o il controllo degli accessi sta registrando violazioni della sicurezza. I penetration tester possono essere in grado solo di determinare che hanno invocato la procedura di incident response in un ambiente di test, ambienti che sono raramente monitorati allo stesso modo dell'ambiente di produzione. Ecco le nostre raccomandazioni per quando \u00e8 appropriato usare la OWASP Top 10: Caso d'uso OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Si Training Livello base Completo Design and architecture Occasionalmente Si Coding standard Minimo indispensabile Si Secure Code review Minimo indispensabile Si Peer review checklist Minimo indispensabile Si Unit testing Occasionalmente Si Integration testing Occasionalmente Si Penetration testing Minimo indispensabile Si Tool support Minimo indispensabile Si Secure Supply Chain Occasionalmente Si Incoraggiamo chiunque voglia adottare uno standard di sicurezza per le applicazioni ad utilizzare lo standard OWASP Application Security Verification Standard (ASVS), poich\u00e9 \u00e8 progettato per essere verificabile e testato, e pu\u00f2 essere usato in tutte le parti del un ciclo di vita di sviluppo sicuro del software. L'ASVS \u00e8 l'unica scelta accettabile per chi produce strumenti di testing. Gli strumenti non possono rilevare, testare o proteggere in modo esaustivo contro la Top 10 di OWASP a causa della natura di molti dei rischi OWASP Top 10, ad esempio A04:2021-Insecure Design. OWASP scoraggia qualsiasi pretesa di copertura completa della OWASP Top 10, perch\u00e9 \u00e8 semplicemente falso.","title":"Come usare la OWASP Top 10 come standard"},{"location":"it/A00_2021_Introduction/","text":"Introduzione alla OWASP Top 10 2021 \u2693\ufe0e Vi presentiamo la the OWASP Top 10 - 2021 \u2693\ufe0e Ecco a voi l'ultima versione della OWASP Top 10! La OWASP Top 10 2021 \u00e8 tutta nuova, con un nuovo design grafico e un'infografica di una pagina che potete stampare o scaricare dalla nostra home page. Un enorme grazie a tutti coloro che hanno contribuito con il loro tempo e i loro dati per questa versione. Senza di voi, tutto questo non sarebbe stato possibile. GRAZIE! Cosa \u00e8 cambiato nella Top 10 2021 \u2693\ufe0e Ci sono tre nuove categorie, quattro categorie con cambiamenti nella denominazione e nello scopo, e alcuni consolidamenti nella Top 10 per il 2021. Quando necessario abbiamo cambiato i nomi per concentrarci pi\u00f9 sulla causa principale anzich\u00e8 sui sintomi. A01:2021-Broken Access Control sale dalla quinta posizione alla categoria con il pi\u00f9 grave rischio per la sicurezza delle applicazioni web; i dati analizzati indicano che in media, il 3,81% delle applicazioni testate aveva una o pi\u00f9 Common Weakness Enumerations (CWEs) con pi\u00f9 di 318k occorrenze di CWEs in questa categoria di rischio. Le 34 CWE che corrispondevano a Broken Access Control avevano pi\u00f9 occorrenze di qualsiasi altra categoria. A02:2021-Cryptographic Failures si sposta di una posizione alla #2, precedentemente nota come A3:2017-Sensitive Data Exposure , che era un sintomo generico piuttosto che la causa principale. Il nome rinnovato si concentra sulle problematiche relative alla crittografia come \u00e8 stato prima, ma implicitamente. Questa categoria porta spesso all'esposizione di dati sensibili o alla compromissione del sistema. A03:2021-Injection scivola in terza posizione. Il 94% delle applicazioni \u00e8 stato testato per qualche forma di injection con un tasso di incidenza massimo del 19%, un tasso di incidenza medio del 3,37%, e le 33 CWE che corrispondevano a questa categoria hanno il secondo maggior numero di occorrenze nelle applicazioni, con 274k. In questa edizione il Cross-site Scripting fa parte di questa categoria. A04:2021-Insecure Design \u00e8 una nuova categoria per il 2021, con un focus sui rischi relativi ai difetti di progettazione. Se vogliamo veramente \"spostarci a sinistra\" come industria, abbiamo bisogno di pi\u00f9 threat modeling, secure design patterns e architetture di riferimento. Un design insicuro non pu\u00f2 essere corretto con un'implementazione perfetta, poich\u00e9 per definizione i controlli di sicurezza necessari non sono mai stati creati per difendersi da attacchi specifici. A05:2021-Security Misconfiguration sale dal numero 6 dell'edizione precedente; il 90% delle applicazioni \u00e8 stato testato per qualche forma di misconfigurazione, con un tasso di incidenza medio del 4,5% e oltre 208k casi di CWE corrispondenti a questa categoria di rischio. Con una tendenza al software altamente configurabile, non \u00e8 sorprendente vedere questa categoria salire. La precedente categoria per A4:2017-XML External Entities (XXE) \u00e8 ora parte di questa categoria di rischio. A06:2021-Vulnerable and Outdated Components era precedentemente intitolata \"Using Components with Known Vulnerabilities\" ed \u00e8 #2 nel sondaggio della comunit\u00e0 Top 10, ma aveva anche abbastanza numeri per far parte della Top 10 grazie ai dati raccolti e analizzati. Questa categoria sale dalla #9 del 2017 ed \u00e8 un problema noto per cui facciamo fatica a testare e a valutarne il rischio. \u00c8 l'unica categoria a non avere alcun Common Vulnerability and Exposures (CVE) corrispondente alle CWE incluse, quindi nel punteggio \u00e8 stato inserito un peso predefinito per sfruttabilit\u00e0 e impatto di 5.0. A07:2021-Identification and Authentication Failures era precedentemente nota come \"Broken Authentication\" e sta scivolando gi\u00f9 dalla seconda posizione, e ora include CWEs che sono pi\u00f9 legate a problematiche di identificazione. Questa categoria \u00e8 ancora parte integrante della Top 10, ma la maggiore diffusione di framework standard sembra aiutare. A08:2021-Software and Data Integrity Failures \u00e8 una nuova categoria per il 2021, che si concentra sul fare ipotesi relative agli aggiornamenti del software, ai dati critici e alle pipeline CI/CD senza verificare l'integrit\u00e0. Uno dei pi\u00f9 alti impatti ponderati dai dati di Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) \u00e8 stato messo in corrispondenza alle 10 CWE di questa categoria. A8:2017-Insecure Deserialization fa ora parte di questa categoria pi\u00f9 ampia. A09:2021-Security Logging and Monitoring Failures era precedentemente A10:2017-Insufficient Logging & Monitoring e viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#3), passando dalla precedente #10. Questa categoria \u00e8 stata ampliata per includere pi\u00f9 tipi di problematiche, \u00e8 difficile da testare e non \u00e8 ben rappresentata nei dati CVE/CVSS. Tuttavia, le problematiche in questa categoria possono avere un impatto diretto sulla visibilit\u00e0, sull'alerting degli incidenti e sulle attivit\u00e0 forensi. A10:2021-Server-Side Request Forgery viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#1). I dati mostrano un tasso di incidenza relativamente basso con una copertura di test superiore alla media, insieme a valutazioni superiori alla media per il potenziale di sfruttabilit\u00e0 e di impatto. Questa categoria rappresenta lo scenario in cui i membri della nostra comunit\u00e0 ci stanno comunicando che \u00e8 importante, anche se in questo momento non \u00e8 evidente dai dati. Metodologia \u2693\ufe0e Questa versione della Top 10 \u00e8 pi\u00f9 data-driven che mai, ma non ciecamente data-driven. Abbiamo selezionato otto delle dieci categorie dai dati forniti e due categorie dal sondaggio della comunit\u00e0 Top 10. Questo lo facciamo per una ragione fondamentale, guardare i dati forniti \u00e8 guardare nel passato. I ricercatori nel campo dell'AppSec impiegano tempo per trovare nuove vulnerabilit\u00e0 e nuovi modi per testarle. Ci vuole tempo per integrare questi test negli strumenti e nei processi. Nel momento in cui possiamo testare in modo affidabile una debolezza su larga scala, probabilmente sono passati anni. Per bilanciare questo punto di vista, usiamo un sondaggio comunitario per chiedere agli esperti di sicurezza e sviluppatori di applicazioni in prima linea quali sono le debolezze essenziali che i dati potrebbero non mostrare ancora. Ci sono alcuni cambiamenti importanti che abbiamo adottato per continuare a migliorare la Top 10. Come sono strutturate le categorie \u2693\ufe0e Alcune categorie sono cambiate dalla precedente versione della Top Ten di OWASP. Ecco un riassunto ad alto livello dei cambiamenti relativi alle categorie. I precedenti sforzi di raccolta dati erano focalizzati su un sottoinsieme prescritto di circa 30 CWE con un campo aperto che ne richiedeva altri. Abbiamo imparato che le organizzazioni si concentravano principalmente solo su quelle 30 CWE e raramente aggiungevano ulteriori CWE che avevano incontrato. In questa iterazione abbiamo chiesto solo dati, senza restrizioni sulle CWE. Abbiamo chiesto il numero di applicazioni testate per un dato anno (a partire dal 2017), e il numero di applicazioni con almeno un'istanza di una CWE trovata nei test. Questo formato ci permette di tracciare quanto sia prevalente ogni CWE all'interno della popolazione delle applicazioni. Per i nostri scopi ignoriamo la frequenza; mentre pu\u00f2 essere necessaria per altre situazioni, nasconde solo la reale prevalenza nella popolazione delle applicazioni. Che un'applicazione abbia quattro istanze di una CWE o 4.000 istanze, questo valore non influisce nel calcolo per la Top 10. Siamo passati da circa 30 CWE a quasi 400 CWE da analizzare. In futuro abbiamo in programma di fare ulteriori analisi dei dati come integrazione. Questo aumento significativo del numero di CWE richiede cambiamenti nel modo in cui le categorie sono strutturate. Abbiamo trascorso diversi mesi a raggruppare e categorizzare le CWE e avremmo potuto continuare per mesi. Ad un certo punto ci siamo dovuti fermare. Ci sono entrambi i tipi di CWE causa principale e sintomo , dove i tipi causa principale sono come \"Cryptographic Failures\" e \"Misconfiguration\" in contrasto con i tipi sintomo come \"Sensitive Data Exposure\" e \"Denial of Service\". Abbiamo deciso di concentrarci sulla causa principale ogni volta che \u00e8 possibile, in quanto \u00e8 pi\u00f9 logico per fornire una guida all'identificazione e al rimedio. Concentrarsi sulla causa principale piuttosto che sul sintomo non \u00e8 un concetto nuovo; la Top Ten \u00e8 stata un mix di sintomo e causa principale . Anche le CWE sono un mix di sintomo e causa principale ; siamo semplicemente pi\u00f9 consapevoli di questo e lo diciamo ad alta voce. C'\u00e8 una media di 19.6 CWE per categoria in questa versione, con i limiti inferiori a 1 CWE per A10:2021-Server-Side Request Forgery (SSRF) a 40 CWE in A04:2021-Insecure Design . Questa struttura aggiornata delle categorie offre ulteriori benefici per la formazione in quanto le aziende possono concentrarsi sulle CWE che hanno senso per un linguaggio/framework. Come vengono usati i dati per selezionare le categorie \u2693\ufe0e Nel 2017, abbiamo selezionato le categorie in base al tasso di incidenza per determinare la probabilit\u00e0, poi le abbiamo classificate in base alla discussione con il team sulla base di decenni di esperienza per Exploitability , Detectability (anche likelihood ), e Technical Impact . Per il 2021, vogliamo usare i dati per Exploitability e (Technical) Impact se possibile. Abbiamo scaricato OWASP Dependency Check ed estratto i punteggi CVSS relativi a Exploit e Impact raggruppati per CWE correlati. Ci sono voluti un bel po' di ricerche e sforzi, poich\u00e9 tutti i CVE hanno punteggi CVSSv2, ma ci sono problematiche in CVSSv2 che CVSSv3 dovrebbe risolvere. Dopo un certo periodo di tempo, a tutti i CVE viene assegnato anche un punteggio CVSSv3. Inoltre, gli intervalli di punteggio e le formule sono stati aggiornati tra CVSSv2 e CVSSv3. Nel CVSSv2, sia Exploit che (Technical) Impact potevano essere fino a 10.0, ma la formula li riduceva al 60% per Exploit e al 40% per Impact . Nel CVSSv3, il massimo teorico era limitato a 6.0 per Exploit e 4.0 per Impact . Con la ponderazione considerata, il punteggio di Impact si \u00e8 spostato pi\u00f9 in alto, quasi un punto e mezzo in media in CVSSv3, e l'exploitability si \u00e8 spostato quasi mezzo punto pi\u00f9 in basso in media. Ci sono 125k record di una CVE corrispondente a una CWE nei dati del National Vulnerability Database (NVD) estratti da OWASP Dependency Check, e ci sono 241 CWE uniche corrispondenti a un CVE. 62k corrispondenze di CWE hanno un punteggio CVSSv3, che \u00e8 circa la met\u00e0 della popolazione nel set di dati. Per la Top Ten 2021, abbiamo calcolato i punteggi medi di Exploit e Impact nel modo seguente. Abbiamo raggruppato tutte le CVE con punteggi CVSS per CWE e ponderato entrambi i punteggi di Exploit e Impact per la percentuale della popolazione che aveva CVSSv3 pi\u00f9 la restante popolazione di punteggi CVSSv2 per ottenere una media complessiva. Abbiamo messo in corrispondenza queste medie alle CWE nel dataset da usare come punteggio di Exploit e (Technical) Impact per l'altra met\u00e0 dell'equazione del rischio. Perch\u00e8 non utilizzare dati puramente statistici? \u2693\ufe0e I risultati nei dati sono principalmente limitati a ci\u00f2 che possiamo testare in modo automatico. Parlate con un professionista esperto di AppSec e vi racconter\u00e0 delle vulnerabilit\u00e0 che trova e delle tendenze che vede che non sono ancora visibili nei dati. Ci vuole tempo perch\u00e9 le persone sviluppino metodologie di test per certi tipi di vulnerabilit\u00e0 e poi ancora pi\u00f9 tempo perch\u00e9 quei test siano automatizzati ed eseguiti su una vasta popolazione di applicazioni. Tutto ci\u00f2 che troviamo sta guardando indietro nel passato e potrebbe mancare delle tendenze dell'ultimo anno, che non sono presenti nei dati. Pertanto, prendiamo solo otto delle dieci categorie dai dati perch\u00e9 sono incompleti. Le altre due categorie provengono dal sondaggio della comunit\u00e0 Top 10. Questo permette ai professionisti in prima linea di votare per ci\u00f2 che identificano come i rischi pi\u00f9 alti che potrebbero non essere ancora visibili nei dati (e potrebbero non essere mai espressi nei dati). Perch\u00e8 tasso di incidenza anzich\u00e8 frequenza? \u2693\ufe0e Ci sono tre fonti primarie di dati. Le identifichiamo come Human-assisted Tooling (HaT), Tool-assisted Human (TaH), e Tooling grezzo. Tooling e HaT generano una grande quantit\u00e0 di dati. Gli strumenti cercheranno vulnerabilit\u00e0 specifiche e tenteranno instancabilmente di trovare ogni istanza di quella vulnerabilit\u00e0 e genereranno un numero elevato di risultati per alcuni tipi di vulnerabilit\u00e0. Guardate il Cross-Site Scripting, che \u00e8 tipicamente di due tipi: o \u00e8 un errore piccolo e isolato o un problema sistemico. Quando si tratta di un problema sistemico, il conteggio pu\u00f2 essere di migliaia per una singola applicazione. Questa alta frequenza copre la maggior parte delle altre vulnerabilit\u00e0 trovate nei report o nei dati. TaH, d'altra parte, trover\u00e0 una gamma pi\u00f9 ampia di tipi di vulnerabilit\u00e0, ma con una frequenza molto pi\u00f9 bassa a causa dei vincoli temporali. Quando gli esseri umani testano un'applicazione e identificano problematiche come il Cross-Site Scripting, in genere trovano tre o quattro istanze e si fermano. Possono determinare una scoperta sistemica e scrivere nel report consigli per la correzione della problematica sull'intera applicazione. Non c'\u00e8 bisogno (o tempo) di trovare ogni istanza. Supponiamo di prendere questi due insiemi di dati distinti e cercare di unirli ina base alla frequenza. In questo caso, i dati di Tooling e HaT sommergeranno i pi\u00f9 accurati (ma ampi) dati TaH ed \u00e8 una buona parte del motivo per cui qualcosa come Cross-Site Scripting \u00e8 stato cos\u00ec altamente classificato in molte liste quando l'impatto \u00e8 generalmente basso o moderato. \u00c8 a causa dell'enorme volume di risultati. (Il Cross-Site Scripting \u00e8 anche ragionevolmente facile da testare, quindi ci sono molti pi\u00f9 test anche per questo). Nel 2017, abbiamo introdotto l'uso del tasso di incidenza per dare un nuovo sguardo ai dati e fondere in modo pulito i dati di Tooling e HaT con i dati TaH. Il tasso di incidenza chiede quale percentuale della popolazione di applicazioni ha avuto almeno un'istanza di un tipo di vulnerabilit\u00e0. Non ci interessa se era una tantum o sistemica. Questo \u00e8 irrilevante per i nostri scopi; abbiamo solo bisogno di sapere quante applicazioni ne avevano almeno un'istanza, il che aiuta a fornire una visione pi\u00f9 chiara dei risultati senza rischiare di inquinare i dati con risultati relativi a problematiche ad alta frequenza. Questo corrisponde a una visione legata al rischio, poich\u00e9 un attaccante ha bisogno di una sola istanza di una determinata vulnerabilit\u00e0 per attaccare con successo un'applicazione. Quale \u00e8 il processo di raccolta e analisi dei dati? \u2693\ufe0e Abbiamo formalizzato il processo di raccolta dati OWASP Top 10 all'Open Security Summit del 2017. I leader di OWASP Top 10 e la comunit\u00e0 hanno trascorso due giorni a formalizzare un processo di raccolta dati trasparente. Per l'edizione 2021 \u00e8 la seconda volta che abbiamo usato questa metodologia. Richiediamo i dati attraverso i canali dei social media a nostra disposizione, sia del progetto che di OWASP. Sulla pagina del progetto OWASP, elenchiamo quali variabili e quale struttura stiamo cercando nei dati e come inviarli. Nela pagina GitHub, abbiamo file di esempio che servono come modelli. Lavoriamo con le organizzazioni, se necessario, per aiutarle a capire la struttura e la correlazione delle relative CWE. Otteniamo dati da organizzazioni che sono aziende che svolgono test di sicurezza, piattaforme di bug bounty e organizzazioni che contribuiscono con dati di test interni. Una volta che abbiamo i dati, li carichiamo insieme ed eseguiamo un'analisi fondamentale, ovvero la corrispondenza delle CWE alle categorie di rischio. C'\u00e8 una sovrapposizione tra alcune CWE, e altre sono strettamente correlati (es. vulnerabilit\u00e0 crittografiche). Qualsiasi decisione relativa ai dati grezzi presentati \u00e8 documentata e pubblicata per essere aperti e trasparenti sul processo di normalizzazione dei dati. Guardiamo le otto categorie con i pi\u00f9 alti tassi di incidenza per l'inclusione nella Top 10. Guardiamo anche i risultati del sondaggio della comunit\u00e0 Top 10 per vedere quali possono essere gi\u00e0 presenti nei dati. I primi due voti che non sono gi\u00e0 presenti nei dati saranno selezionati per gli altri due posti nella Top 10. Una volta che tutti e dieci sono stati selezionati, abbiamo applicato fattori generici per la sfruttabilit\u00e0 e l'impatto; per produrre una Top 10 2021 in un ordine basato sul rischio. Etichette dei dati \u2693\ufe0e Ci sono alcune etichette che sono elencati per ciascuna delle 10 categorie principali, ecco cosa significano: CWEs corrispondenti: Il numero di CWE corrispondenti a una categoria dal team Top 10. Tasso di incidenza: Il tasso di incidenza \u00e8 la percentuale di applicazioni vulnerabili a quel CWE dalla popolazione testata da quella org per quell'anno. Copertura (di test): La percentuale di applicazioni testate da tutte le organizzazioni per un dato CWE. Sfruttabilit\u00e0 pesata: Il sub-score Exploit dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzati e posizionati su una scala di 10 punti. Impatto pesato: Il sub-score di impatto dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzato e posizionato su una scala di 10 punti. Occorrenze totali: Numero totale di applicazioni trovate che hanno i CWE corrispondenti ad una categoria. CVE totali: Numero totale di CVE nel DB NVD che sono stati messi in corrispondenza ai CWE relativi a una categoria. Ringraziamo chi ha contribuito con i dati \u2693\ufe0e Le seguenti organizzazioni (insieme ad alcuni donatori anonimi) hanno gentilmente donato i dati per oltre 500.000 applicazioni per rendere questo il pi\u00f9 grande e completo set di dati sulla sicurezza delle applicazioni. Senza di voi, questo non sarebbe possibile. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Grazie ai nostri sponsor \u2693\ufe0e Il team OWASP Top 10 2021 ringrazia il supporto finanziario di Secure Code Warrior e Just Eats.","title":"Introduzione"},{"location":"it/A00_2021_Introduction/#introduzione-alla-owasp-top-10-2021","text":"","title":"Introduzione alla OWASP Top 10 2021"},{"location":"it/A00_2021_Introduction/#vi-presentiamo-la-the-owasp-top-10-2021","text":"Ecco a voi l'ultima versione della OWASP Top 10! La OWASP Top 10 2021 \u00e8 tutta nuova, con un nuovo design grafico e un'infografica di una pagina che potete stampare o scaricare dalla nostra home page. Un enorme grazie a tutti coloro che hanno contribuito con il loro tempo e i loro dati per questa versione. Senza di voi, tutto questo non sarebbe stato possibile. GRAZIE!","title":"Vi presentiamo la the OWASP Top 10 - 2021"},{"location":"it/A00_2021_Introduction/#cosa-e-cambiato-nella-top-10-2021","text":"Ci sono tre nuove categorie, quattro categorie con cambiamenti nella denominazione e nello scopo, e alcuni consolidamenti nella Top 10 per il 2021. Quando necessario abbiamo cambiato i nomi per concentrarci pi\u00f9 sulla causa principale anzich\u00e8 sui sintomi. A01:2021-Broken Access Control sale dalla quinta posizione alla categoria con il pi\u00f9 grave rischio per la sicurezza delle applicazioni web; i dati analizzati indicano che in media, il 3,81% delle applicazioni testate aveva una o pi\u00f9 Common Weakness Enumerations (CWEs) con pi\u00f9 di 318k occorrenze di CWEs in questa categoria di rischio. Le 34 CWE che corrispondevano a Broken Access Control avevano pi\u00f9 occorrenze di qualsiasi altra categoria. A02:2021-Cryptographic Failures si sposta di una posizione alla #2, precedentemente nota come A3:2017-Sensitive Data Exposure , che era un sintomo generico piuttosto che la causa principale. Il nome rinnovato si concentra sulle problematiche relative alla crittografia come \u00e8 stato prima, ma implicitamente. Questa categoria porta spesso all'esposizione di dati sensibili o alla compromissione del sistema. A03:2021-Injection scivola in terza posizione. Il 94% delle applicazioni \u00e8 stato testato per qualche forma di injection con un tasso di incidenza massimo del 19%, un tasso di incidenza medio del 3,37%, e le 33 CWE che corrispondevano a questa categoria hanno il secondo maggior numero di occorrenze nelle applicazioni, con 274k. In questa edizione il Cross-site Scripting fa parte di questa categoria. A04:2021-Insecure Design \u00e8 una nuova categoria per il 2021, con un focus sui rischi relativi ai difetti di progettazione. Se vogliamo veramente \"spostarci a sinistra\" come industria, abbiamo bisogno di pi\u00f9 threat modeling, secure design patterns e architetture di riferimento. Un design insicuro non pu\u00f2 essere corretto con un'implementazione perfetta, poich\u00e9 per definizione i controlli di sicurezza necessari non sono mai stati creati per difendersi da attacchi specifici. A05:2021-Security Misconfiguration sale dal numero 6 dell'edizione precedente; il 90% delle applicazioni \u00e8 stato testato per qualche forma di misconfigurazione, con un tasso di incidenza medio del 4,5% e oltre 208k casi di CWE corrispondenti a questa categoria di rischio. Con una tendenza al software altamente configurabile, non \u00e8 sorprendente vedere questa categoria salire. La precedente categoria per A4:2017-XML External Entities (XXE) \u00e8 ora parte di questa categoria di rischio. A06:2021-Vulnerable and Outdated Components era precedentemente intitolata \"Using Components with Known Vulnerabilities\" ed \u00e8 #2 nel sondaggio della comunit\u00e0 Top 10, ma aveva anche abbastanza numeri per far parte della Top 10 grazie ai dati raccolti e analizzati. Questa categoria sale dalla #9 del 2017 ed \u00e8 un problema noto per cui facciamo fatica a testare e a valutarne il rischio. \u00c8 l'unica categoria a non avere alcun Common Vulnerability and Exposures (CVE) corrispondente alle CWE incluse, quindi nel punteggio \u00e8 stato inserito un peso predefinito per sfruttabilit\u00e0 e impatto di 5.0. A07:2021-Identification and Authentication Failures era precedentemente nota come \"Broken Authentication\" e sta scivolando gi\u00f9 dalla seconda posizione, e ora include CWEs che sono pi\u00f9 legate a problematiche di identificazione. Questa categoria \u00e8 ancora parte integrante della Top 10, ma la maggiore diffusione di framework standard sembra aiutare. A08:2021-Software and Data Integrity Failures \u00e8 una nuova categoria per il 2021, che si concentra sul fare ipotesi relative agli aggiornamenti del software, ai dati critici e alle pipeline CI/CD senza verificare l'integrit\u00e0. Uno dei pi\u00f9 alti impatti ponderati dai dati di Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) \u00e8 stato messo in corrispondenza alle 10 CWE di questa categoria. A8:2017-Insecure Deserialization fa ora parte di questa categoria pi\u00f9 ampia. A09:2021-Security Logging and Monitoring Failures era precedentemente A10:2017-Insufficient Logging & Monitoring e viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#3), passando dalla precedente #10. Questa categoria \u00e8 stata ampliata per includere pi\u00f9 tipi di problematiche, \u00e8 difficile da testare e non \u00e8 ben rappresentata nei dati CVE/CVSS. Tuttavia, le problematiche in questa categoria possono avere un impatto diretto sulla visibilit\u00e0, sull'alerting degli incidenti e sulle attivit\u00e0 forensi. A10:2021-Server-Side Request Forgery viene aggiunto dal sondaggio della comunit\u00e0 Top 10 (#1). I dati mostrano un tasso di incidenza relativamente basso con una copertura di test superiore alla media, insieme a valutazioni superiori alla media per il potenziale di sfruttabilit\u00e0 e di impatto. Questa categoria rappresenta lo scenario in cui i membri della nostra comunit\u00e0 ci stanno comunicando che \u00e8 importante, anche se in questo momento non \u00e8 evidente dai dati.","title":"Cosa \u00e8 cambiato nella Top 10 2021"},{"location":"it/A00_2021_Introduction/#metodologia","text":"Questa versione della Top 10 \u00e8 pi\u00f9 data-driven che mai, ma non ciecamente data-driven. Abbiamo selezionato otto delle dieci categorie dai dati forniti e due categorie dal sondaggio della comunit\u00e0 Top 10. Questo lo facciamo per una ragione fondamentale, guardare i dati forniti \u00e8 guardare nel passato. I ricercatori nel campo dell'AppSec impiegano tempo per trovare nuove vulnerabilit\u00e0 e nuovi modi per testarle. Ci vuole tempo per integrare questi test negli strumenti e nei processi. Nel momento in cui possiamo testare in modo affidabile una debolezza su larga scala, probabilmente sono passati anni. Per bilanciare questo punto di vista, usiamo un sondaggio comunitario per chiedere agli esperti di sicurezza e sviluppatori di applicazioni in prima linea quali sono le debolezze essenziali che i dati potrebbero non mostrare ancora. Ci sono alcuni cambiamenti importanti che abbiamo adottato per continuare a migliorare la Top 10.","title":"Metodologia"},{"location":"it/A00_2021_Introduction/#come-sono-strutturate-le-categorie","text":"Alcune categorie sono cambiate dalla precedente versione della Top Ten di OWASP. Ecco un riassunto ad alto livello dei cambiamenti relativi alle categorie. I precedenti sforzi di raccolta dati erano focalizzati su un sottoinsieme prescritto di circa 30 CWE con un campo aperto che ne richiedeva altri. Abbiamo imparato che le organizzazioni si concentravano principalmente solo su quelle 30 CWE e raramente aggiungevano ulteriori CWE che avevano incontrato. In questa iterazione abbiamo chiesto solo dati, senza restrizioni sulle CWE. Abbiamo chiesto il numero di applicazioni testate per un dato anno (a partire dal 2017), e il numero di applicazioni con almeno un'istanza di una CWE trovata nei test. Questo formato ci permette di tracciare quanto sia prevalente ogni CWE all'interno della popolazione delle applicazioni. Per i nostri scopi ignoriamo la frequenza; mentre pu\u00f2 essere necessaria per altre situazioni, nasconde solo la reale prevalenza nella popolazione delle applicazioni. Che un'applicazione abbia quattro istanze di una CWE o 4.000 istanze, questo valore non influisce nel calcolo per la Top 10. Siamo passati da circa 30 CWE a quasi 400 CWE da analizzare. In futuro abbiamo in programma di fare ulteriori analisi dei dati come integrazione. Questo aumento significativo del numero di CWE richiede cambiamenti nel modo in cui le categorie sono strutturate. Abbiamo trascorso diversi mesi a raggruppare e categorizzare le CWE e avremmo potuto continuare per mesi. Ad un certo punto ci siamo dovuti fermare. Ci sono entrambi i tipi di CWE causa principale e sintomo , dove i tipi causa principale sono come \"Cryptographic Failures\" e \"Misconfiguration\" in contrasto con i tipi sintomo come \"Sensitive Data Exposure\" e \"Denial of Service\". Abbiamo deciso di concentrarci sulla causa principale ogni volta che \u00e8 possibile, in quanto \u00e8 pi\u00f9 logico per fornire una guida all'identificazione e al rimedio. Concentrarsi sulla causa principale piuttosto che sul sintomo non \u00e8 un concetto nuovo; la Top Ten \u00e8 stata un mix di sintomo e causa principale . Anche le CWE sono un mix di sintomo e causa principale ; siamo semplicemente pi\u00f9 consapevoli di questo e lo diciamo ad alta voce. C'\u00e8 una media di 19.6 CWE per categoria in questa versione, con i limiti inferiori a 1 CWE per A10:2021-Server-Side Request Forgery (SSRF) a 40 CWE in A04:2021-Insecure Design . Questa struttura aggiornata delle categorie offre ulteriori benefici per la formazione in quanto le aziende possono concentrarsi sulle CWE che hanno senso per un linguaggio/framework.","title":"Come sono strutturate le categorie"},{"location":"it/A00_2021_Introduction/#come-vengono-usati-i-dati-per-selezionare-le-categorie","text":"Nel 2017, abbiamo selezionato le categorie in base al tasso di incidenza per determinare la probabilit\u00e0, poi le abbiamo classificate in base alla discussione con il team sulla base di decenni di esperienza per Exploitability , Detectability (anche likelihood ), e Technical Impact . Per il 2021, vogliamo usare i dati per Exploitability e (Technical) Impact se possibile. Abbiamo scaricato OWASP Dependency Check ed estratto i punteggi CVSS relativi a Exploit e Impact raggruppati per CWE correlati. Ci sono voluti un bel po' di ricerche e sforzi, poich\u00e9 tutti i CVE hanno punteggi CVSSv2, ma ci sono problematiche in CVSSv2 che CVSSv3 dovrebbe risolvere. Dopo un certo periodo di tempo, a tutti i CVE viene assegnato anche un punteggio CVSSv3. Inoltre, gli intervalli di punteggio e le formule sono stati aggiornati tra CVSSv2 e CVSSv3. Nel CVSSv2, sia Exploit che (Technical) Impact potevano essere fino a 10.0, ma la formula li riduceva al 60% per Exploit e al 40% per Impact . Nel CVSSv3, il massimo teorico era limitato a 6.0 per Exploit e 4.0 per Impact . Con la ponderazione considerata, il punteggio di Impact si \u00e8 spostato pi\u00f9 in alto, quasi un punto e mezzo in media in CVSSv3, e l'exploitability si \u00e8 spostato quasi mezzo punto pi\u00f9 in basso in media. Ci sono 125k record di una CVE corrispondente a una CWE nei dati del National Vulnerability Database (NVD) estratti da OWASP Dependency Check, e ci sono 241 CWE uniche corrispondenti a un CVE. 62k corrispondenze di CWE hanno un punteggio CVSSv3, che \u00e8 circa la met\u00e0 della popolazione nel set di dati. Per la Top Ten 2021, abbiamo calcolato i punteggi medi di Exploit e Impact nel modo seguente. Abbiamo raggruppato tutte le CVE con punteggi CVSS per CWE e ponderato entrambi i punteggi di Exploit e Impact per la percentuale della popolazione che aveva CVSSv3 pi\u00f9 la restante popolazione di punteggi CVSSv2 per ottenere una media complessiva. Abbiamo messo in corrispondenza queste medie alle CWE nel dataset da usare come punteggio di Exploit e (Technical) Impact per l'altra met\u00e0 dell'equazione del rischio.","title":"Come vengono usati i dati per selezionare le categorie"},{"location":"it/A00_2021_Introduction/#perche-non-utilizzare-dati-puramente-statistici","text":"I risultati nei dati sono principalmente limitati a ci\u00f2 che possiamo testare in modo automatico. Parlate con un professionista esperto di AppSec e vi racconter\u00e0 delle vulnerabilit\u00e0 che trova e delle tendenze che vede che non sono ancora visibili nei dati. Ci vuole tempo perch\u00e9 le persone sviluppino metodologie di test per certi tipi di vulnerabilit\u00e0 e poi ancora pi\u00f9 tempo perch\u00e9 quei test siano automatizzati ed eseguiti su una vasta popolazione di applicazioni. Tutto ci\u00f2 che troviamo sta guardando indietro nel passato e potrebbe mancare delle tendenze dell'ultimo anno, che non sono presenti nei dati. Pertanto, prendiamo solo otto delle dieci categorie dai dati perch\u00e9 sono incompleti. Le altre due categorie provengono dal sondaggio della comunit\u00e0 Top 10. Questo permette ai professionisti in prima linea di votare per ci\u00f2 che identificano come i rischi pi\u00f9 alti che potrebbero non essere ancora visibili nei dati (e potrebbero non essere mai espressi nei dati).","title":"Perch\u00e8 non utilizzare dati puramente statistici?"},{"location":"it/A00_2021_Introduction/#perche-tasso-di-incidenza-anziche-frequenza","text":"Ci sono tre fonti primarie di dati. Le identifichiamo come Human-assisted Tooling (HaT), Tool-assisted Human (TaH), e Tooling grezzo. Tooling e HaT generano una grande quantit\u00e0 di dati. Gli strumenti cercheranno vulnerabilit\u00e0 specifiche e tenteranno instancabilmente di trovare ogni istanza di quella vulnerabilit\u00e0 e genereranno un numero elevato di risultati per alcuni tipi di vulnerabilit\u00e0. Guardate il Cross-Site Scripting, che \u00e8 tipicamente di due tipi: o \u00e8 un errore piccolo e isolato o un problema sistemico. Quando si tratta di un problema sistemico, il conteggio pu\u00f2 essere di migliaia per una singola applicazione. Questa alta frequenza copre la maggior parte delle altre vulnerabilit\u00e0 trovate nei report o nei dati. TaH, d'altra parte, trover\u00e0 una gamma pi\u00f9 ampia di tipi di vulnerabilit\u00e0, ma con una frequenza molto pi\u00f9 bassa a causa dei vincoli temporali. Quando gli esseri umani testano un'applicazione e identificano problematiche come il Cross-Site Scripting, in genere trovano tre o quattro istanze e si fermano. Possono determinare una scoperta sistemica e scrivere nel report consigli per la correzione della problematica sull'intera applicazione. Non c'\u00e8 bisogno (o tempo) di trovare ogni istanza. Supponiamo di prendere questi due insiemi di dati distinti e cercare di unirli ina base alla frequenza. In questo caso, i dati di Tooling e HaT sommergeranno i pi\u00f9 accurati (ma ampi) dati TaH ed \u00e8 una buona parte del motivo per cui qualcosa come Cross-Site Scripting \u00e8 stato cos\u00ec altamente classificato in molte liste quando l'impatto \u00e8 generalmente basso o moderato. \u00c8 a causa dell'enorme volume di risultati. (Il Cross-Site Scripting \u00e8 anche ragionevolmente facile da testare, quindi ci sono molti pi\u00f9 test anche per questo). Nel 2017, abbiamo introdotto l'uso del tasso di incidenza per dare un nuovo sguardo ai dati e fondere in modo pulito i dati di Tooling e HaT con i dati TaH. Il tasso di incidenza chiede quale percentuale della popolazione di applicazioni ha avuto almeno un'istanza di un tipo di vulnerabilit\u00e0. Non ci interessa se era una tantum o sistemica. Questo \u00e8 irrilevante per i nostri scopi; abbiamo solo bisogno di sapere quante applicazioni ne avevano almeno un'istanza, il che aiuta a fornire una visione pi\u00f9 chiara dei risultati senza rischiare di inquinare i dati con risultati relativi a problematiche ad alta frequenza. Questo corrisponde a una visione legata al rischio, poich\u00e9 un attaccante ha bisogno di una sola istanza di una determinata vulnerabilit\u00e0 per attaccare con successo un'applicazione.","title":"Perch\u00e8 tasso di incidenza anzich\u00e8 frequenza?"},{"location":"it/A00_2021_Introduction/#quale-e-il-processo-di-raccolta-e-analisi-dei-dati","text":"Abbiamo formalizzato il processo di raccolta dati OWASP Top 10 all'Open Security Summit del 2017. I leader di OWASP Top 10 e la comunit\u00e0 hanno trascorso due giorni a formalizzare un processo di raccolta dati trasparente. Per l'edizione 2021 \u00e8 la seconda volta che abbiamo usato questa metodologia. Richiediamo i dati attraverso i canali dei social media a nostra disposizione, sia del progetto che di OWASP. Sulla pagina del progetto OWASP, elenchiamo quali variabili e quale struttura stiamo cercando nei dati e come inviarli. Nela pagina GitHub, abbiamo file di esempio che servono come modelli. Lavoriamo con le organizzazioni, se necessario, per aiutarle a capire la struttura e la correlazione delle relative CWE. Otteniamo dati da organizzazioni che sono aziende che svolgono test di sicurezza, piattaforme di bug bounty e organizzazioni che contribuiscono con dati di test interni. Una volta che abbiamo i dati, li carichiamo insieme ed eseguiamo un'analisi fondamentale, ovvero la corrispondenza delle CWE alle categorie di rischio. C'\u00e8 una sovrapposizione tra alcune CWE, e altre sono strettamente correlati (es. vulnerabilit\u00e0 crittografiche). Qualsiasi decisione relativa ai dati grezzi presentati \u00e8 documentata e pubblicata per essere aperti e trasparenti sul processo di normalizzazione dei dati. Guardiamo le otto categorie con i pi\u00f9 alti tassi di incidenza per l'inclusione nella Top 10. Guardiamo anche i risultati del sondaggio della comunit\u00e0 Top 10 per vedere quali possono essere gi\u00e0 presenti nei dati. I primi due voti che non sono gi\u00e0 presenti nei dati saranno selezionati per gli altri due posti nella Top 10. Una volta che tutti e dieci sono stati selezionati, abbiamo applicato fattori generici per la sfruttabilit\u00e0 e l'impatto; per produrre una Top 10 2021 in un ordine basato sul rischio.","title":"Quale \u00e8 il processo di raccolta e analisi dei dati?"},{"location":"it/A00_2021_Introduction/#etichette-dei-dati","text":"Ci sono alcune etichette che sono elencati per ciascuna delle 10 categorie principali, ecco cosa significano: CWEs corrispondenti: Il numero di CWE corrispondenti a una categoria dal team Top 10. Tasso di incidenza: Il tasso di incidenza \u00e8 la percentuale di applicazioni vulnerabili a quel CWE dalla popolazione testata da quella org per quell'anno. Copertura (di test): La percentuale di applicazioni testate da tutte le organizzazioni per un dato CWE. Sfruttabilit\u00e0 pesata: Il sub-score Exploit dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzati e posizionati su una scala di 10 punti. Impatto pesato: Il sub-score di impatto dai punteggi CVSSv2 e CVSSv3 assegnati ai CVE corrispondenti ai CWE, normalizzato e posizionato su una scala di 10 punti. Occorrenze totali: Numero totale di applicazioni trovate che hanno i CWE corrispondenti ad una categoria. CVE totali: Numero totale di CVE nel DB NVD che sono stati messi in corrispondenza ai CWE relativi a una categoria.","title":"Etichette dei dati"},{"location":"it/A00_2021_Introduction/#ringraziamo-chi-ha-contribuito-con-i-dati","text":"Le seguenti organizzazioni (insieme ad alcuni donatori anonimi) hanno gentilmente donato i dati per oltre 500.000 applicazioni per rendere questo il pi\u00f9 grande e completo set di dati sulla sicurezza delle applicazioni. Senza di voi, questo non sarebbe possibile. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Ringraziamo chi ha contribuito con i dati"},{"location":"it/A00_2021_Introduction/#grazie-ai-nostri-sponsor","text":"Il team OWASP Top 10 2021 ringrazia il supporto finanziario di Secure Code Warrior e Just Eats.","title":"Grazie ai nostri sponsor"},{"location":"it/A01_2021-Broken_Access_Control/","text":"A01:2021 \u2013 Broken Access Control \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013 Panoramica \u2693\ufe0e Salendo dalla quinta posizione, il 94% delle applicazioni \u00e8 stato testato per una qualche forma di broken access control con un tasso medio di incidenza del 3,81%, e ha il maggior numero di occorrenze nel dataset con oltre 318k. Le Common Weakness Enumerations (CWE) incluse sono CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , e CWE-352: Cross-Site Request Forgery . Descrizione \u2693\ufe0e Il controllo degli accessi fa rispettare la policy in modo che gli utenti non possano agire al di fuori dei permessi previsti. Problematiche su questo tipo di controllo tipicamente portano alla divulgazione non autorizzata di informazioni, alla modifica o alla distruzione di tutti i dati o l'esecuzione di una funzione di business al di fuori dei limiti dell'utente. Le vulnerabilit\u00e0 pi\u00f9 comuni che affliggono i meccanismi di controllo degli accessi includono: Violazione del principio del minimo privilegio o deny by default, dove l'accesso dovrebbe essere concesso solo per particolari capabilities, ruoli o utenti, ma \u00e8 disponibile a chiunque. Bypassare i controlli di accesso modificando l'URL (modifica dei parametri o navigazione forzata), lo stato interno dell'applicazione o la pagina HTML, o utilizzando uno strumento di attacco che modifica le richieste API. Permettere la visualizzazione o la modifica dell'account di qualcun altro, fornendo il suo identificatore unico (insecure direct object references) Accesso all'API con controlli di accesso mancanti per POST, PUT e DELETE. Elevazione dei privilegi. Agire come un utente senza essere loggato o agire come amministratore quando si \u00e8 svolto il login come utente base. Manipolazione dei metadati, come la riproduzione o la modifica di un JSON Web Token (JWT), o un cookie o un campo nascosto manipolati per elevare i privilegi o abusare dell'invalidazione del JWT. La configurazione errata di CORS permette l'accesso all'API da origini non autorizzate/non fidate. Forzare la navigazione verso pagine autenticate come utente non autenticato o a pagine privilegiate come utente base. Come prevenirla \u2693\ufe0e Il controllo degli accessi \u00e8 efficace solo nel codice lato server o API server-less, dove l'attaccante non pu\u00f2 modificare i meccanismi di controllo dell'accesso o i metadati. Tranne che per le risorse pubbliche, applicare il principio di deny by default. Implementare i meccanismi di controllo dell'accesso una volta sola e riutilizzarli in tutta l'applicazione, incluso limitare l'utilizzo di Cross-Origin Resource Sharing (CORS). I controlli di accesso del Model dovrebbero imporre la propriet\u00e0 dei record piuttosto che accettare che l'utente possa creare, leggere, aggiornare o cancellare qualsiasi record. I requisiti unici dei vincoli di business di un'applicazione dovrebbero essere applicati nei modelli di dominio. Disabilitare il directory listing del server web e garantire che i metadati dei file (ad es, .git) e i file di backup non siano presenti all'interno delle web roots. Registrare i fallimenti dei meccanismi di controllo dell'accesso, avvisare gli amministratori quando appropriato (ad es, fallimenti ripetuti). Implementare meccanismi di rate limiting per accesso all'API e al controller per minimizzare il danno da strumenti di attacco automatizzati. Gli identificatori di sessione stateful dovrebbero essere invalidati sul server dopo il logout. I token JWT stateless dovrebbero piuttosto essere di breve durata in modo che la finestra di opportunit\u00e0 per un attaccante sia ridotta al minimo. Per i JWT di lunga durata \u00e8 altamente raccomandato di seguire gli standard OAuth per revocare l'accesso. Gli sviluppatori e lo staff di QA dovrebbero includere test funzionali di controllo dell'accesso e test di integrazione. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1: L'applicazione usa dati non verificati in una chiamata SQL che sta accedendo alle informazioni dell'account: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); Un attaccante modifica semplicemente il parametro 'acct' del browser per inviare numero di conto a piacere. Se il parametro non \u00e8 verificato correttamente, l'attaccante pu\u00f2 accedere all'account di qualsiasi utente. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: Un attaccante forza semplicemente la navigazione verso gli URL di destinazione. Sono richiesti i diritti di amministratore per accedere alla pagina di amministrazione. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo Se un utente non autenticato pu\u00f2 accedere a una delle due pagine, \u00e8 una falla. Se un non amministratore pu\u00f2 accedere alla pagina dell'amministratore, questa \u00e8 una falla. Riferimenti \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access Lista dei CWEs correlati \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"A01 Broken Access Control"},{"location":"it/A01_2021-Broken_Access_Control/#a012021-broken-access-control","text":"","title":"A01:2021 \u2013 Broken Access Control"},{"location":"it/A01_2021-Broken_Access_Control/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013","title":"Fattori"},{"location":"it/A01_2021-Broken_Access_Control/#panoramica","text":"Salendo dalla quinta posizione, il 94% delle applicazioni \u00e8 stato testato per una qualche forma di broken access control con un tasso medio di incidenza del 3,81%, e ha il maggior numero di occorrenze nel dataset con oltre 318k. Le Common Weakness Enumerations (CWE) incluse sono CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , e CWE-352: Cross-Site Request Forgery .","title":"Panoramica"},{"location":"it/A01_2021-Broken_Access_Control/#descrizione","text":"Il controllo degli accessi fa rispettare la policy in modo che gli utenti non possano agire al di fuori dei permessi previsti. Problematiche su questo tipo di controllo tipicamente portano alla divulgazione non autorizzata di informazioni, alla modifica o alla distruzione di tutti i dati o l'esecuzione di una funzione di business al di fuori dei limiti dell'utente. Le vulnerabilit\u00e0 pi\u00f9 comuni che affliggono i meccanismi di controllo degli accessi includono: Violazione del principio del minimo privilegio o deny by default, dove l'accesso dovrebbe essere concesso solo per particolari capabilities, ruoli o utenti, ma \u00e8 disponibile a chiunque. Bypassare i controlli di accesso modificando l'URL (modifica dei parametri o navigazione forzata), lo stato interno dell'applicazione o la pagina HTML, o utilizzando uno strumento di attacco che modifica le richieste API. Permettere la visualizzazione o la modifica dell'account di qualcun altro, fornendo il suo identificatore unico (insecure direct object references) Accesso all'API con controlli di accesso mancanti per POST, PUT e DELETE. Elevazione dei privilegi. Agire come un utente senza essere loggato o agire come amministratore quando si \u00e8 svolto il login come utente base. Manipolazione dei metadati, come la riproduzione o la modifica di un JSON Web Token (JWT), o un cookie o un campo nascosto manipolati per elevare i privilegi o abusare dell'invalidazione del JWT. La configurazione errata di CORS permette l'accesso all'API da origini non autorizzate/non fidate. Forzare la navigazione verso pagine autenticate come utente non autenticato o a pagine privilegiate come utente base.","title":"Descrizione"},{"location":"it/A01_2021-Broken_Access_Control/#come-prevenirla","text":"Il controllo degli accessi \u00e8 efficace solo nel codice lato server o API server-less, dove l'attaccante non pu\u00f2 modificare i meccanismi di controllo dell'accesso o i metadati. Tranne che per le risorse pubbliche, applicare il principio di deny by default. Implementare i meccanismi di controllo dell'accesso una volta sola e riutilizzarli in tutta l'applicazione, incluso limitare l'utilizzo di Cross-Origin Resource Sharing (CORS). I controlli di accesso del Model dovrebbero imporre la propriet\u00e0 dei record piuttosto che accettare che l'utente possa creare, leggere, aggiornare o cancellare qualsiasi record. I requisiti unici dei vincoli di business di un'applicazione dovrebbero essere applicati nei modelli di dominio. Disabilitare il directory listing del server web e garantire che i metadati dei file (ad es, .git) e i file di backup non siano presenti all'interno delle web roots. Registrare i fallimenti dei meccanismi di controllo dell'accesso, avvisare gli amministratori quando appropriato (ad es, fallimenti ripetuti). Implementare meccanismi di rate limiting per accesso all'API e al controller per minimizzare il danno da strumenti di attacco automatizzati. Gli identificatori di sessione stateful dovrebbero essere invalidati sul server dopo il logout. I token JWT stateless dovrebbero piuttosto essere di breve durata in modo che la finestra di opportunit\u00e0 per un attaccante sia ridotta al minimo. Per i JWT di lunga durata \u00e8 altamente raccomandato di seguire gli standard OAuth per revocare l'accesso. Gli sviluppatori e lo staff di QA dovrebbero includere test funzionali di controllo dell'accesso e test di integrazione.","title":"Come prevenirla"},{"location":"it/A01_2021-Broken_Access_Control/#esempi-di-scenari-dattacco","text":"Scenario #1: L'applicazione usa dati non verificati in una chiamata SQL che sta accedendo alle informazioni dell'account: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); Un attaccante modifica semplicemente il parametro 'acct' del browser per inviare numero di conto a piacere. Se il parametro non \u00e8 verificato correttamente, l'attaccante pu\u00f2 accedere all'account di qualsiasi utente. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: Un attaccante forza semplicemente la navigazione verso gli URL di destinazione. Sono richiesti i diritti di amministratore per accedere alla pagina di amministrazione. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo Se un utente non autenticato pu\u00f2 accedere a una delle due pagine, \u00e8 una falla. Se un non amministratore pu\u00f2 accedere alla pagina dell'amministratore, questa \u00e8 una falla.","title":"Esempi di scenari d'attacco"},{"location":"it/A01_2021-Broken_Access_Control/#riferimenti","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access","title":"Riferimenti"},{"location":"it/A01_2021-Broken_Access_Control/#lista-dei-cwes-correlati","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"Lista dei CWEs correlati"},{"location":"it/A02_2021-Cryptographic_Failures/","text":"A02:2021 \u2013 Cryptographic Failures \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075 Panoramica \u2693\ufe0e Sale alla seconda posizione, precedentemente conosciuta come Sensitive Data Exposure , che \u00e8 pi\u00f9 un ampio sintomo piuttosto che la causa principale, l'attenzione \u00e8 sulle problematiche relative alla crittografia (o la sua mancanza) che spesso portano all'esposizione di dati sensibili. Le Common Weakness Enumerations (CWE) incluse sono CWE-259: Use of Hard-coded Password, CWE-327: Broken or Risky Crypto Algorithm, e CWE-331 Insufficient Entropy . Descrizione \u2693\ufe0e Il primo passo \u00e8 determinare le esigenze di protezione dei dati in transito e a riposo. Per esempio, password, numeri di carte di credito, documenti sanitari, informazioni personali e segreti aziendali richiedono una protezione adeguata, soprattutto se quei dati ricadono sotto le leggi sulla privacy, ad es. General Data Protection Regulation (GDPR), o regolamenti, ad es, protezione dei dati finanziari come il PCI Data Security Standard (PCI DSS). Per tutti questi dati: I dati sono trasmessi in chiaro? Questo riguarda protocolli come come HTTP, SMTP, FTP che utilizzano anche aggiornamenti TLS come STARTTLS. Il traffico internet esterno \u00e8 pericoloso. Verificare tutto il traffico interno, ad es, tra load balancer, server web o sistemi back-end. Ci sono algoritmi o protocolli crittografici vecchi o deboli utilizzati di default o nel codice pi\u00f9 vecchio? Sono utilizzate chiavi crittografiche predefinite, chiavi crittografiche deboli generate o riutilizzate, o manca un'adeguata gestione o rotazione delle chiavi? Le chiavi crittografiche sono nei repository del codice sorgente? La crittografia non \u00e8 applicata, ad esempio, ci sono header HTTP (browser) direttive di sicurezza o altri header mancanti? Il certificato ricevuto dal server e la chain of trust sono validati correttamente? I vettori di inizializzazione sono ignorati, riutilizzati o non generati in modo sufficientemente sicuro per il funzionamento di una certa modalit\u00e0 crittografica? \u00c8 in uso una modalit\u00e0 crittografica insicura come l'ECB? Viene utilizzata la semplice crittografia quando \u00e8 invece necessario abbinarla anche ad un meccanismo di autenticazione? Le password vengono usate come chiavi crittografiche senza l'utilizzo di una funzione di derivazione della chiave basata sulla password? Viene utilizzata una funzione di randomness che non \u00e8 stata progettata per soddisfare i requisiti crittografici? Anche se viene utilizzata la funzione appropriata, il seed deve essere inizializzato dallo sviluppatore, e se no, lo sviluppatore ha sovrascritto la funzionalit\u00e0 di seed forte incorporata con una che manca di sufficiente entropia/imprevedibilit\u00e0? Vengono utilizzate funzioni hash deprecate come MD5 o SHA1, o vengono utilizzate funzioni hash non crittografiche quando sono necessarie funzioni hash crittografiche? Sono utilizzati metodi deprecati di padding crittografico come PKCS#1 v1.5? I messaggi di errore crittografici o le informazioni ottenute da un side channel sono sfruttabili, per esempio per svolgere attacchi padding oracle? Vedi ASVS Crypto (V7), Data Protection (V9), e SSL/TLS (V10) Come prevenire \u2693\ufe0e Fare quanto segue, come minimo, e consultare i riferimenti in calce: Classificare i dati elaborati, memorizzati o trasmessi da un'applicazione. Identificare quali dati sono sensibili secondo le leggi sulla privacy, requisiti normativi o esigenze aziendali. Non conservare inutilmente i dati sensibili. Eliminarli il prima possibile o utilizzare un meccanismo di tokenizzazione conforme a PCI DSS o anche il troncamento. I dati che non vengono conservati non possono essere rubati. Assicurarsi di cifrare tutti i dati sensibili a riposo. Utilizzare algoritmi, protocolli e chiavi standard forti e aggiornati. Avere un adeguato processo di key management. Crittografare tutti i dati in transito con protocolli sicuri come TLS con cifrari che garantiscano la FS (forward secrecy), prioritizzazione dei cifrari da parte del server e parametri sicuri. Applicare la crittografia usando direttive come HTTP Strict Transport Security (HSTS). Disabilitare il caching per le risposte che contengono dati sensibili. Applicare i controlli di sicurezza adeguati secondo la classificazione dei dati. Non usare protocolli legacy come FTP e SMTP per il trasporto di dati sensibili. Memorizzare le password usando forti funzioni di hashing adattive con salt con un work factor (delay factor), come Argon2, scrypt, bcrypt o PBKDF2. I vettori di inizializzazione devono essere scelti in modo appropriato per il modo di funzionamento. Per molti modi di funzionamento, questo significa usare un CSPRNG (cryptographically secure pseudo random number generator). Per quelli che richiedono un nonce, allora il vettore di inizializzazione (IV) non ha bisogno di un CSPRNG. In tutti i casi, l'IV non dovrebbe mai essere usato due volte per una stessa chiave. Usare sempre un meccanismo di crittografia autenticata invece della semplice crittografia. Le chiavi dovrebbero essere generate crittograficamente in modo casuale e memorizzate in memoria come array di byte. Se viene usata una password, questa deve essere convertita in una chiave tramite un'appropriata funzione di derivazione della chiave basata sulla password. Assicuratevi che la randomness crittografica venga utilizzata laddove appropriato, e che non sia stato utilizzato un seed prevedibile o con bassa entropia. La maggior parte delle API moderne non richiedono allo sviluppatore di inizializzare il seed della CSPRNG. Evitare funzioni crittografiche e schemi di padding deprecati, come MD5, SHA1, PKCS#1 v1.5 Verificare in modo indipendente l'efficacia della configurazione e delle impostazioni. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1 : Un'applicazione cifra i numeri delle carte di credito in un database usando la crittografia automatica del database. Tuttavia, questi dati sono automaticamente decriptati quando vengono recuperati, permettendo ad una falla di SQL injection di recuperare i numeri delle carte di credito in chiaro. Scenario #2 : Un sito non usa o applica TLS per tutte le pagine o supporta una crittografia debole. Un aggressore monitora il traffico di rete (ad es. una rete wireless insicura), svolge il downgrade della connessione da HTTPS a HTTP, intercetta le richieste e ruba il cookie di sessione dell'utente. L'attaccante riproduce questo cookie e dirotta la sessione dell'utente (autenticato) accedendo o modificando i dati privati dell'utente. Oppure potrebbe alterare tutti i dati in transito, ad esempio, modificando il destinatario di un trasferimento di denaro. Scenario #3 : Il database delle password usa hash semplici o senza salt per memorizzare le password di tutti gli utenti. Una falla nel caricamento dei file permette ad un attaccante di recuperare il database delle password. Tutti gli hash senza salt possono essere violati con una rainbow table di hash precalcolati. Gli hash generati da funzioni hash semplici o veloci possono essere decifrati dalle GPU, anche se in presenza di salt. Riferimenti \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography Lista dei CWE correlati \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"A02 Cryptographic Failures"},{"location":"it/A02_2021-Cryptographic_Failures/#a022021-cryptographic-failures","text":"","title":"A02:2021 \u2013 Cryptographic Failures"},{"location":"it/A02_2021-Cryptographic_Failures/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075","title":"Fattori"},{"location":"it/A02_2021-Cryptographic_Failures/#panoramica","text":"Sale alla seconda posizione, precedentemente conosciuta come Sensitive Data Exposure , che \u00e8 pi\u00f9 un ampio sintomo piuttosto che la causa principale, l'attenzione \u00e8 sulle problematiche relative alla crittografia (o la sua mancanza) che spesso portano all'esposizione di dati sensibili. Le Common Weakness Enumerations (CWE) incluse sono CWE-259: Use of Hard-coded Password, CWE-327: Broken or Risky Crypto Algorithm, e CWE-331 Insufficient Entropy .","title":"Panoramica"},{"location":"it/A02_2021-Cryptographic_Failures/#descrizione","text":"Il primo passo \u00e8 determinare le esigenze di protezione dei dati in transito e a riposo. Per esempio, password, numeri di carte di credito, documenti sanitari, informazioni personali e segreti aziendali richiedono una protezione adeguata, soprattutto se quei dati ricadono sotto le leggi sulla privacy, ad es. General Data Protection Regulation (GDPR), o regolamenti, ad es, protezione dei dati finanziari come il PCI Data Security Standard (PCI DSS). Per tutti questi dati: I dati sono trasmessi in chiaro? Questo riguarda protocolli come come HTTP, SMTP, FTP che utilizzano anche aggiornamenti TLS come STARTTLS. Il traffico internet esterno \u00e8 pericoloso. Verificare tutto il traffico interno, ad es, tra load balancer, server web o sistemi back-end. Ci sono algoritmi o protocolli crittografici vecchi o deboli utilizzati di default o nel codice pi\u00f9 vecchio? Sono utilizzate chiavi crittografiche predefinite, chiavi crittografiche deboli generate o riutilizzate, o manca un'adeguata gestione o rotazione delle chiavi? Le chiavi crittografiche sono nei repository del codice sorgente? La crittografia non \u00e8 applicata, ad esempio, ci sono header HTTP (browser) direttive di sicurezza o altri header mancanti? Il certificato ricevuto dal server e la chain of trust sono validati correttamente? I vettori di inizializzazione sono ignorati, riutilizzati o non generati in modo sufficientemente sicuro per il funzionamento di una certa modalit\u00e0 crittografica? \u00c8 in uso una modalit\u00e0 crittografica insicura come l'ECB? Viene utilizzata la semplice crittografia quando \u00e8 invece necessario abbinarla anche ad un meccanismo di autenticazione? Le password vengono usate come chiavi crittografiche senza l'utilizzo di una funzione di derivazione della chiave basata sulla password? Viene utilizzata una funzione di randomness che non \u00e8 stata progettata per soddisfare i requisiti crittografici? Anche se viene utilizzata la funzione appropriata, il seed deve essere inizializzato dallo sviluppatore, e se no, lo sviluppatore ha sovrascritto la funzionalit\u00e0 di seed forte incorporata con una che manca di sufficiente entropia/imprevedibilit\u00e0? Vengono utilizzate funzioni hash deprecate come MD5 o SHA1, o vengono utilizzate funzioni hash non crittografiche quando sono necessarie funzioni hash crittografiche? Sono utilizzati metodi deprecati di padding crittografico come PKCS#1 v1.5? I messaggi di errore crittografici o le informazioni ottenute da un side channel sono sfruttabili, per esempio per svolgere attacchi padding oracle? Vedi ASVS Crypto (V7), Data Protection (V9), e SSL/TLS (V10)","title":"Descrizione"},{"location":"it/A02_2021-Cryptographic_Failures/#come-prevenire","text":"Fare quanto segue, come minimo, e consultare i riferimenti in calce: Classificare i dati elaborati, memorizzati o trasmessi da un'applicazione. Identificare quali dati sono sensibili secondo le leggi sulla privacy, requisiti normativi o esigenze aziendali. Non conservare inutilmente i dati sensibili. Eliminarli il prima possibile o utilizzare un meccanismo di tokenizzazione conforme a PCI DSS o anche il troncamento. I dati che non vengono conservati non possono essere rubati. Assicurarsi di cifrare tutti i dati sensibili a riposo. Utilizzare algoritmi, protocolli e chiavi standard forti e aggiornati. Avere un adeguato processo di key management. Crittografare tutti i dati in transito con protocolli sicuri come TLS con cifrari che garantiscano la FS (forward secrecy), prioritizzazione dei cifrari da parte del server e parametri sicuri. Applicare la crittografia usando direttive come HTTP Strict Transport Security (HSTS). Disabilitare il caching per le risposte che contengono dati sensibili. Applicare i controlli di sicurezza adeguati secondo la classificazione dei dati. Non usare protocolli legacy come FTP e SMTP per il trasporto di dati sensibili. Memorizzare le password usando forti funzioni di hashing adattive con salt con un work factor (delay factor), come Argon2, scrypt, bcrypt o PBKDF2. I vettori di inizializzazione devono essere scelti in modo appropriato per il modo di funzionamento. Per molti modi di funzionamento, questo significa usare un CSPRNG (cryptographically secure pseudo random number generator). Per quelli che richiedono un nonce, allora il vettore di inizializzazione (IV) non ha bisogno di un CSPRNG. In tutti i casi, l'IV non dovrebbe mai essere usato due volte per una stessa chiave. Usare sempre un meccanismo di crittografia autenticata invece della semplice crittografia. Le chiavi dovrebbero essere generate crittograficamente in modo casuale e memorizzate in memoria come array di byte. Se viene usata una password, questa deve essere convertita in una chiave tramite un'appropriata funzione di derivazione della chiave basata sulla password. Assicuratevi che la randomness crittografica venga utilizzata laddove appropriato, e che non sia stato utilizzato un seed prevedibile o con bassa entropia. La maggior parte delle API moderne non richiedono allo sviluppatore di inizializzare il seed della CSPRNG. Evitare funzioni crittografiche e schemi di padding deprecati, come MD5, SHA1, PKCS#1 v1.5 Verificare in modo indipendente l'efficacia della configurazione e delle impostazioni.","title":"Come prevenire"},{"location":"it/A02_2021-Cryptographic_Failures/#esempi-di-scenari-dattacco","text":"Scenario #1 : Un'applicazione cifra i numeri delle carte di credito in un database usando la crittografia automatica del database. Tuttavia, questi dati sono automaticamente decriptati quando vengono recuperati, permettendo ad una falla di SQL injection di recuperare i numeri delle carte di credito in chiaro. Scenario #2 : Un sito non usa o applica TLS per tutte le pagine o supporta una crittografia debole. Un aggressore monitora il traffico di rete (ad es. una rete wireless insicura), svolge il downgrade della connessione da HTTPS a HTTP, intercetta le richieste e ruba il cookie di sessione dell'utente. L'attaccante riproduce questo cookie e dirotta la sessione dell'utente (autenticato) accedendo o modificando i dati privati dell'utente. Oppure potrebbe alterare tutti i dati in transito, ad esempio, modificando il destinatario di un trasferimento di denaro. Scenario #3 : Il database delle password usa hash semplici o senza salt per memorizzare le password di tutti gli utenti. Una falla nel caricamento dei file permette ad un attaccante di recuperare il database delle password. Tutti gli hash senza salt possono essere violati con una rainbow table di hash precalcolati. Gli hash generati da funzioni hash semplici o veloci possono essere decifrati dalle GPU, anche se in presenza di salt.","title":"Esempi di scenari d'attacco"},{"location":"it/A02_2021-Cryptographic_Failures/#riferimenti","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"Riferimenti"},{"location":"it/A02_2021-Cryptographic_Failures/#lista-dei-cwe-correlati","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"Lista dei CWE correlati"},{"location":"it/A03_2021-Injection/","text":"A03:2021 \u2013 Injection \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078 Panoramica \u2693\ufe0e Injection scende alla terza posizione. Il 94% delle applicazioni sono state testate per qualche forma di injection con un tasso massimo di incidenza del 19%, un tasso medio di incidenza del 3% e 274k occorrenze. Le Common Weakness Enumerations (CWEs) incluse sono CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path . Descrizione \u2693\ufe0e Un'applicazione \u00e8 vulnerabile alle injection quando: I dati forniti dall'utente non sono validati, filtrati o sanificati dall'applicazione. Le query dinamiche o le chiamate non parametrizzate senza escaping contestuale vengono passate direttamente all'interprete. Input malevolo viene usato all'interno di parametri di ricerca di un ORM (object-relational mapping) per estrarre ulteriori record sensibili. Input malevolo viene usato in modo diretto o concatenato. Le query SQL o i comandi includono i dati ostili nelle query dinamiche, nei comandi o nelle stored procedure. Alcune delle forme di injection pi\u00f9 comuni sono SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, e Expression Language (EL) o Object Graph Navigation Library (OGNL). Il concetto \u00e8 identico tra tutti gli interpreti. La revisione del codice sorgente \u00e8 il metodo migliore per rilevare se le applicazioni sono vulnerabili alle injection. \u00c8 fortemente consigliato il testing automatico di tutti i parametri, headers, URL, cookie, e sui formati di dato come JSON, SOAP e XML. Le organizzazioni possono includere strumenti statici (SAST), dinamici (DAST) e interattivi (IAST) per i test di sicurezza delle applicazioni nella pipeline CI/CD per identificare prima della messa in produzione le problematiche di injection eventualmente presenti. Come prevenire \u2693\ufe0e Prevenire le forme di injection richiede di mantenere i dati separati dai comandi e dalle query: L'opzione preferita \u00e8 quella di usare un'API sicura, che eviti di usare l'interprete interamente, che fornisce un'interfaccia parametrizzata o migra verso strumenti di Object Relational Mapping (ORM). Nota: Anche quando sono parametrizzate, le stored procedure possono ancora introdurre SQL injection se PL/SQL o T-SQL concatena query e dati o esegue input ostili con EXECUTE IMMEDIATE o exec(). Usare una validazione degli input lato server positiva. Questa non \u00e8 una difesa completa, poich\u00e9 molte applicazioni richiedono caratteri speciali, come aree di testo o API per applicazioni mobili. Per qualsiasi query dinamica residua, svolgera l'escaping dei caratteri speciali usando la sintassi di escape specifica per quell'interprete. Nota: Le strutture SQL come i nomi delle tabelle, i nomi delle colonne e cos\u00ec via non possono essere oggetto di escape, e quindi i nomi di queste strutture fornite dall'utente sono e rimangono pericolose. Questo \u00e8 un problema comune nel software di reportistica. Usare LIMIT e altri controlli SQL all'interno delle query per prevenire la divulgazione di massa dei record in caso di SQL injection. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1: Un'applicazione usa dati non fidati nella costruzione della seguente chiamata SQL vulnerabile: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Allo stesso modo, la fiducia cieca di un'applicazione nei framework pu\u00f2 risultare in query che sono ancora vulnerabili, (ad esempio, Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In entrambi i casi, l'attaccante modifica il valore del parametro 'id' nel suo browser per inviare: ' or '1'='1. Per esempio: http://example.com/app/accountView?id=' or '1'='1 Questo cambia il significato di entrambe le query per restituire tutti i record dalla della tabella degli account. Attacchi pi\u00f9 pericolosi potrebbero modificare o cancellare i dati o anche invocare stored procedures. Riferimenti \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection Lista dei CWE correlati \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') [CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')] (https://cwe.mitre.org/data/definitions/917.html)","title":"A03 Injection"},{"location":"it/A03_2021-Injection/#a032021-injection","text":"","title":"A03:2021 \u2013 Injection"},{"location":"it/A03_2021-Injection/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078","title":"Fattori"},{"location":"it/A03_2021-Injection/#panoramica","text":"Injection scende alla terza posizione. Il 94% delle applicazioni sono state testate per qualche forma di injection con un tasso massimo di incidenza del 19%, un tasso medio di incidenza del 3% e 274k occorrenze. Le Common Weakness Enumerations (CWEs) incluse sono CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path .","title":"Panoramica"},{"location":"it/A03_2021-Injection/#descrizione","text":"Un'applicazione \u00e8 vulnerabile alle injection quando: I dati forniti dall'utente non sono validati, filtrati o sanificati dall'applicazione. Le query dinamiche o le chiamate non parametrizzate senza escaping contestuale vengono passate direttamente all'interprete. Input malevolo viene usato all'interno di parametri di ricerca di un ORM (object-relational mapping) per estrarre ulteriori record sensibili. Input malevolo viene usato in modo diretto o concatenato. Le query SQL o i comandi includono i dati ostili nelle query dinamiche, nei comandi o nelle stored procedure. Alcune delle forme di injection pi\u00f9 comuni sono SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, e Expression Language (EL) o Object Graph Navigation Library (OGNL). Il concetto \u00e8 identico tra tutti gli interpreti. La revisione del codice sorgente \u00e8 il metodo migliore per rilevare se le applicazioni sono vulnerabili alle injection. \u00c8 fortemente consigliato il testing automatico di tutti i parametri, headers, URL, cookie, e sui formati di dato come JSON, SOAP e XML. Le organizzazioni possono includere strumenti statici (SAST), dinamici (DAST) e interattivi (IAST) per i test di sicurezza delle applicazioni nella pipeline CI/CD per identificare prima della messa in produzione le problematiche di injection eventualmente presenti.","title":"Descrizione"},{"location":"it/A03_2021-Injection/#come-prevenire","text":"Prevenire le forme di injection richiede di mantenere i dati separati dai comandi e dalle query: L'opzione preferita \u00e8 quella di usare un'API sicura, che eviti di usare l'interprete interamente, che fornisce un'interfaccia parametrizzata o migra verso strumenti di Object Relational Mapping (ORM). Nota: Anche quando sono parametrizzate, le stored procedure possono ancora introdurre SQL injection se PL/SQL o T-SQL concatena query e dati o esegue input ostili con EXECUTE IMMEDIATE o exec(). Usare una validazione degli input lato server positiva. Questa non \u00e8 una difesa completa, poich\u00e9 molte applicazioni richiedono caratteri speciali, come aree di testo o API per applicazioni mobili. Per qualsiasi query dinamica residua, svolgera l'escaping dei caratteri speciali usando la sintassi di escape specifica per quell'interprete. Nota: Le strutture SQL come i nomi delle tabelle, i nomi delle colonne e cos\u00ec via non possono essere oggetto di escape, e quindi i nomi di queste strutture fornite dall'utente sono e rimangono pericolose. Questo \u00e8 un problema comune nel software di reportistica. Usare LIMIT e altri controlli SQL all'interno delle query per prevenire la divulgazione di massa dei record in caso di SQL injection.","title":"Come prevenire"},{"location":"it/A03_2021-Injection/#esempi-di-scenari-dattacco","text":"Scenario #1: Un'applicazione usa dati non fidati nella costruzione della seguente chiamata SQL vulnerabile: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Allo stesso modo, la fiducia cieca di un'applicazione nei framework pu\u00f2 risultare in query che sono ancora vulnerabili, (ad esempio, Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In entrambi i casi, l'attaccante modifica il valore del parametro 'id' nel suo browser per inviare: ' or '1'='1. Per esempio: http://example.com/app/accountView?id=' or '1'='1 Questo cambia il significato di entrambe le query per restituire tutti i record dalla della tabella degli account. Attacchi pi\u00f9 pericolosi potrebbero modificare o cancellare i dati o anche invocare stored procedures.","title":"Esempi di scenari d'attacco"},{"location":"it/A03_2021-Injection/#riferimenti","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"Riferimenti"},{"location":"it/A03_2021-Injection/#lista-dei-cwe-correlati","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') [CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')] (https://cwe.mitre.org/data/definitions/917.html)","title":"Lista dei CWE correlati"},{"location":"it/A04_2021-Insecure_Design/","text":"A04:2021 \u2013 Insecure Design \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691 Panoramica \u2693\ufe0e Una nuova categoria per il 2021 si concentra sui rischi legati ai difetti di progettazione e di architettura, con un appello per un maggiore uso del threat modeling, dei design pattern sicuri e delle architetture di riferimento. Come comunit\u00e0 dobbiamo andare oltre lo \"spostamento a sinistra\" nel processo di sviluppo per svolgere attivit\u00e0 preliminari che sono fondamentali per i principi di Secure by Design. Le Common Weakness Enumerations (CWEs) incluse sono CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials . Descrizione \u2693\ufe0e Insecure design \u00e8 un'ampia categoria che rappresenta diverse debolezze, espressa come \"progettazione inefficace o mancante dei controlli di sicurezza\". Il design insicuro non \u00e8 la fonte di tutte le altre categorie di rischio nella Top 10. Design insicuro e implementazione insicura sono differenti. Distinguiamo tra difetti di progettazione e difetti di implementazione per un motivo: hanno cause e rimedi diversi. Un design sicuro pu\u00f2 ancora avere difetti di implementazione che portano a vulnerabilit\u00e0 che possono essere sfruttate. Un design insicuro non pu\u00f2 essere corretto da un'implementazione perfetta, poich\u00e9 per definizione, i controlli di sicurezza necessari non sono mai stati creati per difendersi da attacchi specifici. Uno dei fattori che contribuiscono al design insicuro \u00e8 la mancanza di un profilo di rischio aziendale inerente al software o al sistema che viene sviluppato, e quindi il fallimento nel determinare quale livello di security design \u00e8 richiesto. Requisiti e gestione delle risorse \u2693\ufe0e Raccogliere e negoziare i requisiti di business per un'applicazione con l'azienda, compresi i requisiti di protezione relativi a riservatezza, integrit\u00e0, disponibilit\u00e0 e autenticit\u00e0 di tutte le risorse di dati e la logica di business prevista. Prendete in considerazione quanto sar\u00e0 esposta la vostra applicazione e se avete bisogno della segregazione dei tenants (oltre al controllo degli accessi). Compilare i requisiti tecnici, compresi i requisiti di sicurezza funzionali e non funzionali. Pianificare e negoziare il budget che copre tutte le attivit\u00e0 di progettazione, costruzione, test e funzionamento, comprese quelle di sicurezza. Secure Design \u2693\ufe0e Il secure design \u00e8 una cultura e una metodologia che valuta costantemente le minacce e assicura che il codice sia progettato e testato in modo robusto per prevenire attacchi conosciuti. La fase di threat modeling dovrebbe essere integrata nelle sessioni di perfezionamento (o attivit\u00e0 simili); prestare particolare attenzione ai cambiamenti nei flussi di dati e nel controllo degli accessi o altri controlli di sicurezza. Nello sviluppo della user story determinare il flusso corretto e gli stati considerati invalidi, assicurarsi che siano ben compresi e concordati dalle parti responsabili e interessate. Analizzare i presupposti e le condizioni per i flussi attesi e non attesi, assicurarsi che siano ancora accurati e auspicabili. Determinare come convalidare i presupposti e applicare le condizioni necessarie per i comportamenti corretti. Assicurarsi che i risultati siano documentati nella user story. Imparare dagli errori e offrire incentivi positivi per promuovere i miglioramenti. La progettazione sicura non \u00e8 n\u00e9 un add-on n\u00e9 uno strumento che si pu\u00f2 aggiungere al software. Secure Development Lifecycle \u2693\ufe0e Il software sicuro richiede un ciclo di vita di sviluppo sicuro, una qualche forma di modello di progettazione sicuro, una metodologia paved road, una libreria di componenti sicura, strumenti e threat modeling. Rivolgetevi agli specialisti della sicurezza all'inizio di un progetto software per tutto il progetto e la manutenzione del vostro software. Considerate di sfruttare il OWASP Software Assurance Maturity Model (SAMM) per aiutare a strutturare i vostri sforzi di sviluppo del software sicuro. Come prevenire \u2693\ufe0e Stabilire e utilizzare un ciclo di vita di sviluppo sicuro con i professionisti di AppSec per aiutare a valutare e progettare la sicurezza e i controlli relativi alla privacy Stabilire e utilizzare una libreria di design pattern sicuri o componenti pronti all'uso Usare il threat modeling per i componenti di autenticazione pi\u00f9 critici, il controllo dell'accesso, logica di business e flussi chiave Integrare il linguaggio e i controlli di sicurezza nelle user stories Integrare i controlli di plausibilit\u00e0 ad ogni livello della vostra applicazione (dal frontend al backend) Scrivere test unitari e di integrazione per convalidare che tutti i flussi critici siano resistenti al modello di minaccia rappresentato. Compilare i casi d'uso e i casi di uso improprio per ogni livello della vostra applicazione. Segregare i tier su livelli di sistema e di rete a seconda delle esigenze di esposizione e protezione. Segregare i tenant in modo robusto by design in tutti i tier. Limitare il consumo di risorse per utente o servizio Esempi di scenari d'attacco \u2693\ufe0e Scenario #1: Un flusso per il recupero delle credenziali potrebbe includere \"domande e risposte\", che \u00e8 proibito da NIST 800-63b, OWASP ASVS e OWASP Top 10. Domande e risposte non possono essere attendibili come prova di identit\u00e0 in quanto pi\u00f9 di una persona pu\u00f2 conoscere le risposte, ed \u00e8 per questo che sono state proibite. Tale codice dovrebbe essere rimosso e sostituito con un design pi\u00f9 pi\u00f9 sicuro. Scenario #2: Una catena di cinema permette sconti per prenotazioni di gruppo e ha un massimo di quindici partecipanti prima di richiedere un pagamento. Gli attaccanti potrebbero svolgere il threat modeling di questo flusso e testare se possono prenotare seicento posti in tutti i cinema in una volta sola con poche richieste, causando una massiccia perdita di incassi. Scenario #3: Il sito di e-commerce di una catena di negozi non ha protezione contro i bot gestiti da scalper che comprano schede video di fascia alta per rivenderle su siti di aste online. Questo crea una terribile pubblicit\u00e0 per i produttori di schede video e i proprietari di catene di vendita al dettaglio e il perdurare del cattivo sangue con appassionati che non possono acquistare queste schede in nessun modo. Un'attenta progettazione anti-bot e regole di logica di dominio, come gli acquisti effettuati entro pochi secondi dalla disponibilit\u00e0, potrebbero identificare gli acquisti non autentici e respingere tali transazioni. Riferimenti \u2693\ufe0e OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling Lista dei CWE correlati \u2693\ufe0e CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"A04 Insecure Design"},{"location":"it/A04_2021-Insecure_Design/#a042021-insecure-design","text":"","title":"A04:2021 \u2013 Insecure Design"},{"location":"it/A04_2021-Insecure_Design/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691","title":"Fattori"},{"location":"it/A04_2021-Insecure_Design/#panoramica","text":"Una nuova categoria per il 2021 si concentra sui rischi legati ai difetti di progettazione e di architettura, con un appello per un maggiore uso del threat modeling, dei design pattern sicuri e delle architetture di riferimento. Come comunit\u00e0 dobbiamo andare oltre lo \"spostamento a sinistra\" nel processo di sviluppo per svolgere attivit\u00e0 preliminari che sono fondamentali per i principi di Secure by Design. Le Common Weakness Enumerations (CWEs) incluse sono CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials .","title":"Panoramica"},{"location":"it/A04_2021-Insecure_Design/#descrizione","text":"Insecure design \u00e8 un'ampia categoria che rappresenta diverse debolezze, espressa come \"progettazione inefficace o mancante dei controlli di sicurezza\". Il design insicuro non \u00e8 la fonte di tutte le altre categorie di rischio nella Top 10. Design insicuro e implementazione insicura sono differenti. Distinguiamo tra difetti di progettazione e difetti di implementazione per un motivo: hanno cause e rimedi diversi. Un design sicuro pu\u00f2 ancora avere difetti di implementazione che portano a vulnerabilit\u00e0 che possono essere sfruttate. Un design insicuro non pu\u00f2 essere corretto da un'implementazione perfetta, poich\u00e9 per definizione, i controlli di sicurezza necessari non sono mai stati creati per difendersi da attacchi specifici. Uno dei fattori che contribuiscono al design insicuro \u00e8 la mancanza di un profilo di rischio aziendale inerente al software o al sistema che viene sviluppato, e quindi il fallimento nel determinare quale livello di security design \u00e8 richiesto.","title":"Descrizione"},{"location":"it/A04_2021-Insecure_Design/#requisiti-e-gestione-delle-risorse","text":"Raccogliere e negoziare i requisiti di business per un'applicazione con l'azienda, compresi i requisiti di protezione relativi a riservatezza, integrit\u00e0, disponibilit\u00e0 e autenticit\u00e0 di tutte le risorse di dati e la logica di business prevista. Prendete in considerazione quanto sar\u00e0 esposta la vostra applicazione e se avete bisogno della segregazione dei tenants (oltre al controllo degli accessi). Compilare i requisiti tecnici, compresi i requisiti di sicurezza funzionali e non funzionali. Pianificare e negoziare il budget che copre tutte le attivit\u00e0 di progettazione, costruzione, test e funzionamento, comprese quelle di sicurezza.","title":"Requisiti e gestione delle risorse"},{"location":"it/A04_2021-Insecure_Design/#secure-design","text":"Il secure design \u00e8 una cultura e una metodologia che valuta costantemente le minacce e assicura che il codice sia progettato e testato in modo robusto per prevenire attacchi conosciuti. La fase di threat modeling dovrebbe essere integrata nelle sessioni di perfezionamento (o attivit\u00e0 simili); prestare particolare attenzione ai cambiamenti nei flussi di dati e nel controllo degli accessi o altri controlli di sicurezza. Nello sviluppo della user story determinare il flusso corretto e gli stati considerati invalidi, assicurarsi che siano ben compresi e concordati dalle parti responsabili e interessate. Analizzare i presupposti e le condizioni per i flussi attesi e non attesi, assicurarsi che siano ancora accurati e auspicabili. Determinare come convalidare i presupposti e applicare le condizioni necessarie per i comportamenti corretti. Assicurarsi che i risultati siano documentati nella user story. Imparare dagli errori e offrire incentivi positivi per promuovere i miglioramenti. La progettazione sicura non \u00e8 n\u00e9 un add-on n\u00e9 uno strumento che si pu\u00f2 aggiungere al software.","title":"Secure Design"},{"location":"it/A04_2021-Insecure_Design/#secure-development-lifecycle","text":"Il software sicuro richiede un ciclo di vita di sviluppo sicuro, una qualche forma di modello di progettazione sicuro, una metodologia paved road, una libreria di componenti sicura, strumenti e threat modeling. Rivolgetevi agli specialisti della sicurezza all'inizio di un progetto software per tutto il progetto e la manutenzione del vostro software. Considerate di sfruttare il OWASP Software Assurance Maturity Model (SAMM) per aiutare a strutturare i vostri sforzi di sviluppo del software sicuro.","title":"Secure Development Lifecycle"},{"location":"it/A04_2021-Insecure_Design/#come-prevenire","text":"Stabilire e utilizzare un ciclo di vita di sviluppo sicuro con i professionisti di AppSec per aiutare a valutare e progettare la sicurezza e i controlli relativi alla privacy Stabilire e utilizzare una libreria di design pattern sicuri o componenti pronti all'uso Usare il threat modeling per i componenti di autenticazione pi\u00f9 critici, il controllo dell'accesso, logica di business e flussi chiave Integrare il linguaggio e i controlli di sicurezza nelle user stories Integrare i controlli di plausibilit\u00e0 ad ogni livello della vostra applicazione (dal frontend al backend) Scrivere test unitari e di integrazione per convalidare che tutti i flussi critici siano resistenti al modello di minaccia rappresentato. Compilare i casi d'uso e i casi di uso improprio per ogni livello della vostra applicazione. Segregare i tier su livelli di sistema e di rete a seconda delle esigenze di esposizione e protezione. Segregare i tenant in modo robusto by design in tutti i tier. Limitare il consumo di risorse per utente o servizio","title":"Come prevenire"},{"location":"it/A04_2021-Insecure_Design/#esempi-di-scenari-dattacco","text":"Scenario #1: Un flusso per il recupero delle credenziali potrebbe includere \"domande e risposte\", che \u00e8 proibito da NIST 800-63b, OWASP ASVS e OWASP Top 10. Domande e risposte non possono essere attendibili come prova di identit\u00e0 in quanto pi\u00f9 di una persona pu\u00f2 conoscere le risposte, ed \u00e8 per questo che sono state proibite. Tale codice dovrebbe essere rimosso e sostituito con un design pi\u00f9 pi\u00f9 sicuro. Scenario #2: Una catena di cinema permette sconti per prenotazioni di gruppo e ha un massimo di quindici partecipanti prima di richiedere un pagamento. Gli attaccanti potrebbero svolgere il threat modeling di questo flusso e testare se possono prenotare seicento posti in tutti i cinema in una volta sola con poche richieste, causando una massiccia perdita di incassi. Scenario #3: Il sito di e-commerce di una catena di negozi non ha protezione contro i bot gestiti da scalper che comprano schede video di fascia alta per rivenderle su siti di aste online. Questo crea una terribile pubblicit\u00e0 per i produttori di schede video e i proprietari di catene di vendita al dettaglio e il perdurare del cattivo sangue con appassionati che non possono acquistare queste schede in nessun modo. Un'attenta progettazione anti-bot e regole di logica di dominio, come gli acquisti effettuati entro pochi secondi dalla disponibilit\u00e0, potrebbero identificare gli acquisti non autentici e respingere tali transazioni.","title":"Esempi di scenari d'attacco"},{"location":"it/A04_2021-Insecure_Design/#riferimenti","text":"OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling","title":"Riferimenti"},{"location":"it/A04_2021-Insecure_Design/#lista-dei-cwe-correlati","text":"CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"Lista dei CWE correlati"},{"location":"it/A05_2021-Security_Misconfiguration/","text":"A05:2021 \u2013 Security Misconfiguration \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789 Panoramica \u2693\ufe0e Sale dalla posizione #6 della scorsa edizione, il 90% delle applicazioni testate sono risultate vulnerabili ad una qualche forma di malconfigurazione, con un tasso medio di incidenza del 4%, e pi\u00f9 di 208k occorrenze di Common Weakness Enumeration (CWE) in questa categoria di rischio. Con un trend in crescita verso software sempre pi\u00f9 configurabili, non sorprende vedere queste categoria salire in classifica. Le CWE incluse sono CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference . Descrizione \u2693\ufe0e L'applicazione potrebbe risultare vulnerabile se: Manca l'hardening di sicurezza appropriato in qualsiasi parte dello stack applicativo o permessi configurati in modo improprio sui servizi cloud. Sono abilitate o installate funzioni non necessarie (ad es. porte, servizi, pagine, account o privilegi non necessari). Gli account di default sono ancora abilitati e presentano password predefinite. A seguito di condizioni di errore, vengono rivelate agli utenti stack traces o altri messaggi di errore troppo verbosi. Per i sistemi aggiornati, le ultime funzionalit\u00e0 di sicurezza sono disabilitate o non configurate in modo adeguato. Le impostazioni di sicurezza negli application server, nei framework (ad esempio, Struts, Spring, ASP.NET), nelle librerie, database, ecc. non sono configurate su valori sicuri. Il server non invia header o direttive di sicurezza o non sono impostati su valori sicuri. Il software non \u00e8 aggiornato o \u00e8 vulnerabile (vedere A06:2021-Vulnerable and Outdated Components ). Senza un processo coordinato e ripetibile per la configurazione della sicurezza delle applicazioni, i sistemi presentano un rischio maggiore. Come prevenire \u2693\ufe0e Dovrebbero essere implementati processi di installazione sicuri, tra cui: Un processo di hardening ripetibile rende veloce e facile il deploy di un altro ambiente preconfigurato in modo sicuro. Gli ambienti di sviluppo, QA e di produzione dovrebbero essere tutti configurati in modo speculare, con credenziali diverse per ogni ambiente. Questo processo dovrebbe essere automatizzato per minimizzare lo sforzo richiesto per impostare un nuovo ambiente configurato in modo sicuro. Una piattaforma minimale senza funzionalit\u00e0,componenti, documentazione ed esempi inutili. Rimuovere o non installare funzionalit\u00e0 e framework inutilizzati. Un task per rivedere e aggiornare le configurazioni appropriate a tutte le security notes, aggiornamenti e patch come parte del processo di gestione delle patch (vedere A06:2021-Vulnerable and Outdated Components ). Revisionare i permessi del cloud storage (ad esempio, i permessi dei bucket S3). Un'architettura applicativa segmentata fornisce un'efficace e sicura separazione tra componenti o tenant, con segmentazione, containerizzazione, o cloud security groups (ACL). L'invio di direttive di sicurezza ai client, ad esempio, i Security Headers. Un processo automatizzato per verificare l'efficacia delle configurazioni e impostazioni in tutti gli ambienti. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1: L'application server viene fornito con applicazioni di esempio non rimosse dal server di produzione. Queste applicazioni di esempio hanno falle di sicurezza note che gli attaccanti usano per compromettere il server. Supponiamo che una di queste applicazioni sia la console di amministrazione e che gli account predefiniti non siano stati cambiati. In questo caso, l'attaccante accede con le password predefinite e prende il controllo. Scenario #2: La funzionalit\u00e0 di directory listing non \u00e8 disabilitata sul server. Un attaccante scopre che si possono elencare tutte le directory. L'attaccante trova e scarica le classi Java compilate, su cui esegue la decompilazione e il reverse engineering per visualizzare il codice sorgente. L'attaccante trova poi una grave difetto di controllo degli accessi nell'applicazione. Scenario #3: La configurazione dell'application server permette di restituire agli utenti messaggi di errore dettagliati, ad esempio la stack trace. Questa problematica potenzialmente espone informazioni sensibili o problematiche come versioni dei componenti che sono note per essere vulnerabili. Scenario #4: Un cloud service provider ha dei permessi di condivisione predefiniti aperti a Internet da altri utenti nell'header Content Security Policy (CSP). Questo permette l'accesso ai dati sensibili memorizzati nel cloud storage. Riferimenti \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration Lista dei CWE correlati \u2693\ufe0e CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"A05 Security Misconfiguration"},{"location":"it/A05_2021-Security_Misconfiguration/#a052021-security-misconfiguration","text":"","title":"A05:2021 \u2013 Security Misconfiguration"},{"location":"it/A05_2021-Security_Misconfiguration/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789","title":"Fattori"},{"location":"it/A05_2021-Security_Misconfiguration/#panoramica","text":"Sale dalla posizione #6 della scorsa edizione, il 90% delle applicazioni testate sono risultate vulnerabili ad una qualche forma di malconfigurazione, con un tasso medio di incidenza del 4%, e pi\u00f9 di 208k occorrenze di Common Weakness Enumeration (CWE) in questa categoria di rischio. Con un trend in crescita verso software sempre pi\u00f9 configurabili, non sorprende vedere queste categoria salire in classifica. Le CWE incluse sono CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference .","title":"Panoramica"},{"location":"it/A05_2021-Security_Misconfiguration/#descrizione","text":"L'applicazione potrebbe risultare vulnerabile se: Manca l'hardening di sicurezza appropriato in qualsiasi parte dello stack applicativo o permessi configurati in modo improprio sui servizi cloud. Sono abilitate o installate funzioni non necessarie (ad es. porte, servizi, pagine, account o privilegi non necessari). Gli account di default sono ancora abilitati e presentano password predefinite. A seguito di condizioni di errore, vengono rivelate agli utenti stack traces o altri messaggi di errore troppo verbosi. Per i sistemi aggiornati, le ultime funzionalit\u00e0 di sicurezza sono disabilitate o non configurate in modo adeguato. Le impostazioni di sicurezza negli application server, nei framework (ad esempio, Struts, Spring, ASP.NET), nelle librerie, database, ecc. non sono configurate su valori sicuri. Il server non invia header o direttive di sicurezza o non sono impostati su valori sicuri. Il software non \u00e8 aggiornato o \u00e8 vulnerabile (vedere A06:2021-Vulnerable and Outdated Components ). Senza un processo coordinato e ripetibile per la configurazione della sicurezza delle applicazioni, i sistemi presentano un rischio maggiore.","title":"Descrizione"},{"location":"it/A05_2021-Security_Misconfiguration/#come-prevenire","text":"Dovrebbero essere implementati processi di installazione sicuri, tra cui: Un processo di hardening ripetibile rende veloce e facile il deploy di un altro ambiente preconfigurato in modo sicuro. Gli ambienti di sviluppo, QA e di produzione dovrebbero essere tutti configurati in modo speculare, con credenziali diverse per ogni ambiente. Questo processo dovrebbe essere automatizzato per minimizzare lo sforzo richiesto per impostare un nuovo ambiente configurato in modo sicuro. Una piattaforma minimale senza funzionalit\u00e0,componenti, documentazione ed esempi inutili. Rimuovere o non installare funzionalit\u00e0 e framework inutilizzati. Un task per rivedere e aggiornare le configurazioni appropriate a tutte le security notes, aggiornamenti e patch come parte del processo di gestione delle patch (vedere A06:2021-Vulnerable and Outdated Components ). Revisionare i permessi del cloud storage (ad esempio, i permessi dei bucket S3). Un'architettura applicativa segmentata fornisce un'efficace e sicura separazione tra componenti o tenant, con segmentazione, containerizzazione, o cloud security groups (ACL). L'invio di direttive di sicurezza ai client, ad esempio, i Security Headers. Un processo automatizzato per verificare l'efficacia delle configurazioni e impostazioni in tutti gli ambienti.","title":"Come prevenire"},{"location":"it/A05_2021-Security_Misconfiguration/#esempi-di-scenari-dattacco","text":"Scenario #1: L'application server viene fornito con applicazioni di esempio non rimosse dal server di produzione. Queste applicazioni di esempio hanno falle di sicurezza note che gli attaccanti usano per compromettere il server. Supponiamo che una di queste applicazioni sia la console di amministrazione e che gli account predefiniti non siano stati cambiati. In questo caso, l'attaccante accede con le password predefinite e prende il controllo. Scenario #2: La funzionalit\u00e0 di directory listing non \u00e8 disabilitata sul server. Un attaccante scopre che si possono elencare tutte le directory. L'attaccante trova e scarica le classi Java compilate, su cui esegue la decompilazione e il reverse engineering per visualizzare il codice sorgente. L'attaccante trova poi una grave difetto di controllo degli accessi nell'applicazione. Scenario #3: La configurazione dell'application server permette di restituire agli utenti messaggi di errore dettagliati, ad esempio la stack trace. Questa problematica potenzialmente espone informazioni sensibili o problematiche come versioni dei componenti che sono note per essere vulnerabili. Scenario #4: Un cloud service provider ha dei permessi di condivisione predefiniti aperti a Internet da altri utenti nell'header Content Security Policy (CSP). Questo permette l'accesso ai dati sensibili memorizzati nel cloud storage.","title":"Esempi di scenari d'attacco"},{"location":"it/A05_2021-Security_Misconfiguration/#riferimenti","text":"OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration","title":"Riferimenti"},{"location":"it/A05_2021-Security_Misconfiguration/#lista-dei-cwe-correlati","text":"CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"Lista dei CWE correlati"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/","text":"A06:2021 \u2013 Vulnerable and Outdated Components \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 Panoramica \u2693\ufe0e Era gi\u00e0 la numero #2 dal sondaggio della community della Top 10, ma aveva anche abbastanza evidenze da poter entrare nella Top 10 grazie ai dati. Vulnerable Components sono una problematica nota che si fatica a testare e a calcolarne il rischio, ed \u00e8 l'unica categoria per cui non abbiamo Common Weakness Enumerations (CWEs) correlate alle CWE incluse, verr\u00e0 quindi utilizzato un peso predefinito di 5.0 per sfruttabilit\u00e0/impatto. CWEs incluse sono CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017. Descrizione \u2693\ufe0e La vulnerabilit\u00e0 si presenta se: Non conosci le versioni di tutti i componenti utilizzati (sia lato client che lato server). Questo include i componenti utilizzati direttamente cos\u00ec come le dipendenze annidate. Se il software \u00e8 vulnerabile, non supportato o non aggiornato. Questo include il sistema operativo, il server web/applicazione, il database management system (DBMS), applicazioni, API e tutti i componenti, ambienti di esecuzione, e librerie. Se non si fa la scansione delle vulnerabilit\u00e0 regolarmente e non si consultano i bollettini di sicurezza relativi ai componenti utilizzati. Se non si corregge o non si aggiorna la piattaforma sottostante, i framework, e le dipendenze in modo tempestivo e basato sul rischio. Questo comunemente accade in ambienti in cui le patch vengono applicate mensilmente o trimestralmente sotto change control, lasciando le organizzazioni scoperte per giorni o mesi verso vulnerabilit\u00e0 gi\u00e0 risolte. Se gli sviluppatori non testano la compatibilit\u00e0 delle librerie aggiornate, nuove o patchate. Se i componenti non vengono configurati in modo sicuro (vedere A05:2021-Security Misconfiguration). Come prevenire \u2693\ufe0e Ci dovrebbe essere un processo di gestione delle patch in atto per: Rimuovere le dipendenze, le funzionalit\u00e0, i componenti, i file, e la documentazione non utilizzate. Inventariare in modo continuo le versioni dei componenti lato client e lato server (ad esempio, framework, librerie) e le loro dipendenze usando strumenti come OWASP Dependency Check, retire.js, ecc. Monitorare continuamente fonti come Common Vulnerability and Exposures (CVE) e il National Vulnerability Database (NVD) per vulnerabilit\u00e0 nei componenti. Usare strumenti di software composition per automatizzare il processo. Sottoscrivere avvisi e-mail per le vulnerabilit\u00e0 di sicurezza relative ai componenti utilizzati. Ottenere i componenti solo da fonti ufficiali tramite link sicuri. Preferire pacchetti firmati per ridurre la possibilit\u00e0 di includere un componente modificato o dannoso (vedere A08:2021-Software and Data Integrity Failures). Controllare le librerie e i componenti che non sono pi\u00f9 mantenuti o che non sviluppano pi\u00f9 patch di sicurezza per le vecchie versioni. Se il patching non \u00e8 possibile, considerare l'implementazione di una patch virtuale per monitorare, rilevare o proteggere dal problema individuato. Ogni organizzazione deve garantire un piano continuo per il monitoraggio, il triage, e l'applicazione di aggiornamenti o modifiche di configurazione per tutta la durata dell'applicazione o del portafoglio. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1: I componenti solitamente vengono eseguiti con gli stessi privilegi dell'applicazione stessa, quindi le falle in qualsiasi componente possono avere un serio impatto. Tali difetti possono essere accidentali (ad esempio, un errore nel codice) o intenzionali (ad esempio, una backdoor in un componente). Alcuni esempi di vulnerabilit\u00e0 sfruttabili scoperte nei componenti sono: CVE-2017-5638, una vulnerabilit\u00e0 di esecuzione di codice remoto di Struts 2 che permette l'esecuzione di codice arbitrario sul server, \u00e8 stata causa di breach importanti. Mentre l'internet delle cose (IoT) \u00e8 spesso difficile o impossibile da patchare, l'importanza nel riuscirci \u00e8 elevata (ad esempio, i dispositivi biomedici). Ci sono strumenti automatici per aiutare gli attaccanti a trovare sistemi non patchati o sistemi mal configurati. Per esempio, il motore di ricerca Shodan IoT pu\u00f2 aiutare a trovare i dispositivi che soffrono ancora della vulnerabilit\u00e0 Heartbleed patchata nell'aprile 2014. Riferimenti \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf Lista dei CWE correlati \u2693\ufe0e CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"A06 Vulnerable and Outdated Components"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#a062021-vulnerable-and-outdated-components","text":"","title":"A06:2021 \u2013 Vulnerable and Outdated Components"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"Fattori"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#panoramica","text":"Era gi\u00e0 la numero #2 dal sondaggio della community della Top 10, ma aveva anche abbastanza evidenze da poter entrare nella Top 10 grazie ai dati. Vulnerable Components sono una problematica nota che si fatica a testare e a calcolarne il rischio, ed \u00e8 l'unica categoria per cui non abbiamo Common Weakness Enumerations (CWEs) correlate alle CWE incluse, verr\u00e0 quindi utilizzato un peso predefinito di 5.0 per sfruttabilit\u00e0/impatto. CWEs incluse sono CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017.","title":"Panoramica"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#descrizione","text":"La vulnerabilit\u00e0 si presenta se: Non conosci le versioni di tutti i componenti utilizzati (sia lato client che lato server). Questo include i componenti utilizzati direttamente cos\u00ec come le dipendenze annidate. Se il software \u00e8 vulnerabile, non supportato o non aggiornato. Questo include il sistema operativo, il server web/applicazione, il database management system (DBMS), applicazioni, API e tutti i componenti, ambienti di esecuzione, e librerie. Se non si fa la scansione delle vulnerabilit\u00e0 regolarmente e non si consultano i bollettini di sicurezza relativi ai componenti utilizzati. Se non si corregge o non si aggiorna la piattaforma sottostante, i framework, e le dipendenze in modo tempestivo e basato sul rischio. Questo comunemente accade in ambienti in cui le patch vengono applicate mensilmente o trimestralmente sotto change control, lasciando le organizzazioni scoperte per giorni o mesi verso vulnerabilit\u00e0 gi\u00e0 risolte. Se gli sviluppatori non testano la compatibilit\u00e0 delle librerie aggiornate, nuove o patchate. Se i componenti non vengono configurati in modo sicuro (vedere A05:2021-Security Misconfiguration).","title":"Descrizione"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#come-prevenire","text":"Ci dovrebbe essere un processo di gestione delle patch in atto per: Rimuovere le dipendenze, le funzionalit\u00e0, i componenti, i file, e la documentazione non utilizzate. Inventariare in modo continuo le versioni dei componenti lato client e lato server (ad esempio, framework, librerie) e le loro dipendenze usando strumenti come OWASP Dependency Check, retire.js, ecc. Monitorare continuamente fonti come Common Vulnerability and Exposures (CVE) e il National Vulnerability Database (NVD) per vulnerabilit\u00e0 nei componenti. Usare strumenti di software composition per automatizzare il processo. Sottoscrivere avvisi e-mail per le vulnerabilit\u00e0 di sicurezza relative ai componenti utilizzati. Ottenere i componenti solo da fonti ufficiali tramite link sicuri. Preferire pacchetti firmati per ridurre la possibilit\u00e0 di includere un componente modificato o dannoso (vedere A08:2021-Software and Data Integrity Failures). Controllare le librerie e i componenti che non sono pi\u00f9 mantenuti o che non sviluppano pi\u00f9 patch di sicurezza per le vecchie versioni. Se il patching non \u00e8 possibile, considerare l'implementazione di una patch virtuale per monitorare, rilevare o proteggere dal problema individuato. Ogni organizzazione deve garantire un piano continuo per il monitoraggio, il triage, e l'applicazione di aggiornamenti o modifiche di configurazione per tutta la durata dell'applicazione o del portafoglio.","title":"Come prevenire"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#esempi-di-scenari-dattacco","text":"Scenario #1: I componenti solitamente vengono eseguiti con gli stessi privilegi dell'applicazione stessa, quindi le falle in qualsiasi componente possono avere un serio impatto. Tali difetti possono essere accidentali (ad esempio, un errore nel codice) o intenzionali (ad esempio, una backdoor in un componente). Alcuni esempi di vulnerabilit\u00e0 sfruttabili scoperte nei componenti sono: CVE-2017-5638, una vulnerabilit\u00e0 di esecuzione di codice remoto di Struts 2 che permette l'esecuzione di codice arbitrario sul server, \u00e8 stata causa di breach importanti. Mentre l'internet delle cose (IoT) \u00e8 spesso difficile o impossibile da patchare, l'importanza nel riuscirci \u00e8 elevata (ad esempio, i dispositivi biomedici). Ci sono strumenti automatici per aiutare gli attaccanti a trovare sistemi non patchati o sistemi mal configurati. Per esempio, il motore di ricerca Shodan IoT pu\u00f2 aiutare a trovare i dispositivi che soffrono ancora della vulnerabilit\u00e0 Heartbleed patchata nell'aprile 2014.","title":"Esempi di scenari d'attacco"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#riferimenti","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"Riferimenti"},{"location":"it/A06_2021-Vulnerable_and_Outdated_Components/#lista-dei-cwe-correlati","text":"CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"Lista dei CWE correlati"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/","text":"A07:2021 \u2013 Identification and Authentication Failures \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897 Panoramica \u2693\ufe0e Precedentemente sotto il nome di Broken Authentication , questa categoria scende dalla seconda posizione e ora include le Common Weakness Enumerations (CWEs) relative ai fallimenti dei meccanismi di autorizzazione. Le CWEs incluse sono CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , e CWE-384: Session Fixation . Descrizione \u2693\ufe0e La verifica dell'identit\u00e0 dell'utente, l'autenticazione e la gestione della sessione sono fondamentali per proteggersi dagli attacchi legati all'autenticazione. Ci possono essere debolezze sui meccanismi di autenticazione se l'applicazione: Permette attacchi automatici come il credential stuffing, dove l'attaccante ha una lista di coppie nome utente e password validi. Permette attacchi di brute force o altri attacchi automatizzati. Permette password di default, deboli o ben note, come \"Password1\" o \"admin/admin\". Utilizza un recupero delle credenziali e delle password dimenticate debole o inefficace come le \"risposte basate sulla conoscenza\", che non possono essere rese sicure. Memorizza le password in chiaro, in modo cifrato o con funzioni di hash deboli (vedi A02:2021-Cryptographic Failures ). Non ha un sistema di autenticazione a pi\u00f9 fattori o \u00e8 inefficace. Espone l'identificatore di sessione del URL. Riutilizza l'identificatore di sessione dopo un login avvenuto con successo. Non invalida correttamente l'identificatore di sessione. La sessione dell'utente o i token di autenticazione (principalmente token di single sign-on (SSO)) non vengono invalidati in modo opportuno durante il logout o dopo un periodo di inattivit\u00e0 Come prevenire \u2693\ufe0e Dove possibile, implementare l'autenticazione a pi\u00f9 fattori per prevenire attacchi di credential stuffing, brute force e riutilizzo delle credenziali rubate. Non mettere in produzione sistemi con credenziali di default, in particolare per gli utenti admin. Implementare controlli sulla debolezza delle password, come verificare le password nuove o modificate con la lista delle 10,000 password peggiori. Allineare i requisiti di lunghezza delle password, complessit\u00e0 e politiche di rotazione con le linee guida della sezione 5.1.1 del documento 800-63b pubblicato dal National Institute of Standards and Technology (NIST) riguardante la memorizzazione dei secret o altre policy relative alle password moderne e basate sui fatti . Assicurarsi che la registrazione, il recupero delle credenziali e le API siano robusti contro gli attacchi di enumerazione degli account utilizzando gli stessi messaggi generici per tutti i risultati. Limitare o ritardare sempre pi\u00f9 i tentativi di login falliti, ma fare attenzione a non creare uno scenario di denial of service. Loggare tutti i tentativi falliti e avvertire gli amministratori quando vengono rilevati attacchi di credential stuffing, brute force o altri. Usare un gestore di sessione integrato lato server, che sia sicuro, che generi un nuovo ID di sessione casuale con alta entropia dopo il login. L'identificatore di sessione non dovrebbe essere nell'URL, deve essere memorizzato in modo sicuro e invalidato dopo il logout, un periodo di inattivit\u00e0 e avere timeout assoluto. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1: Il credential stuffing, l'uso di liste di password conosciute, \u00e8 un attacco comune. Supponiamo che un'applicazione non implementi la protezione automatica contro le minacce o il credential stuffing. In questo caso, l'applicazione pu\u00f2 essere usata come un oracolo di password per determinare se le credenziali sono valide. Scenario #2: La maggior parte degli attacchi relativi all'autenticazione si verifica a causa del continuo uso delle password come singolo fattore. Le best practice, la rotazione delle password e i requisiti di complessit\u00e0 incoraggiano gli utenti a usare e riutilizzare password deboli. Si raccomanda alle organizzazioni di interrompere queste pratiche secondo NIST 800-63 e utilizzare l'autenticazione a pi\u00f9 fattori. Scenario #3: I timeout della sessione dell'applicazione non sono gestiti correttamente. Un utente usa un computer pubblico per accedere a un'applicazione. Invece di selezionare \"logout\", l'utente chiude semplicemente la scheda del browser e se ne va via. Un attaccante usa lo stesso browser un'ora dopo, e l'utente risulta ancora autenticato. Riferimenti \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets Lista dei CWE correlati \u2693\ufe0e CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"A07 Identification and Authentication Failures"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#a072021-identification-and-authentication-failures","text":"","title":"A07:2021 \u2013 Identification and Authentication Failures"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897","title":"Fattori"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#panoramica","text":"Precedentemente sotto il nome di Broken Authentication , questa categoria scende dalla seconda posizione e ora include le Common Weakness Enumerations (CWEs) relative ai fallimenti dei meccanismi di autorizzazione. Le CWEs incluse sono CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , e CWE-384: Session Fixation .","title":"Panoramica"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#descrizione","text":"La verifica dell'identit\u00e0 dell'utente, l'autenticazione e la gestione della sessione sono fondamentali per proteggersi dagli attacchi legati all'autenticazione. Ci possono essere debolezze sui meccanismi di autenticazione se l'applicazione: Permette attacchi automatici come il credential stuffing, dove l'attaccante ha una lista di coppie nome utente e password validi. Permette attacchi di brute force o altri attacchi automatizzati. Permette password di default, deboli o ben note, come \"Password1\" o \"admin/admin\". Utilizza un recupero delle credenziali e delle password dimenticate debole o inefficace come le \"risposte basate sulla conoscenza\", che non possono essere rese sicure. Memorizza le password in chiaro, in modo cifrato o con funzioni di hash deboli (vedi A02:2021-Cryptographic Failures ). Non ha un sistema di autenticazione a pi\u00f9 fattori o \u00e8 inefficace. Espone l'identificatore di sessione del URL. Riutilizza l'identificatore di sessione dopo un login avvenuto con successo. Non invalida correttamente l'identificatore di sessione. La sessione dell'utente o i token di autenticazione (principalmente token di single sign-on (SSO)) non vengono invalidati in modo opportuno durante il logout o dopo un periodo di inattivit\u00e0","title":"Descrizione"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#come-prevenire","text":"Dove possibile, implementare l'autenticazione a pi\u00f9 fattori per prevenire attacchi di credential stuffing, brute force e riutilizzo delle credenziali rubate. Non mettere in produzione sistemi con credenziali di default, in particolare per gli utenti admin. Implementare controlli sulla debolezza delle password, come verificare le password nuove o modificate con la lista delle 10,000 password peggiori. Allineare i requisiti di lunghezza delle password, complessit\u00e0 e politiche di rotazione con le linee guida della sezione 5.1.1 del documento 800-63b pubblicato dal National Institute of Standards and Technology (NIST) riguardante la memorizzazione dei secret o altre policy relative alle password moderne e basate sui fatti . Assicurarsi che la registrazione, il recupero delle credenziali e le API siano robusti contro gli attacchi di enumerazione degli account utilizzando gli stessi messaggi generici per tutti i risultati. Limitare o ritardare sempre pi\u00f9 i tentativi di login falliti, ma fare attenzione a non creare uno scenario di denial of service. Loggare tutti i tentativi falliti e avvertire gli amministratori quando vengono rilevati attacchi di credential stuffing, brute force o altri. Usare un gestore di sessione integrato lato server, che sia sicuro, che generi un nuovo ID di sessione casuale con alta entropia dopo il login. L'identificatore di sessione non dovrebbe essere nell'URL, deve essere memorizzato in modo sicuro e invalidato dopo il logout, un periodo di inattivit\u00e0 e avere timeout assoluto.","title":"Come prevenire"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#esempi-di-scenari-dattacco","text":"Scenario #1: Il credential stuffing, l'uso di liste di password conosciute, \u00e8 un attacco comune. Supponiamo che un'applicazione non implementi la protezione automatica contro le minacce o il credential stuffing. In questo caso, l'applicazione pu\u00f2 essere usata come un oracolo di password per determinare se le credenziali sono valide. Scenario #2: La maggior parte degli attacchi relativi all'autenticazione si verifica a causa del continuo uso delle password come singolo fattore. Le best practice, la rotazione delle password e i requisiti di complessit\u00e0 incoraggiano gli utenti a usare e riutilizzare password deboli. Si raccomanda alle organizzazioni di interrompere queste pratiche secondo NIST 800-63 e utilizzare l'autenticazione a pi\u00f9 fattori. Scenario #3: I timeout della sessione dell'applicazione non sono gestiti correttamente. Un utente usa un computer pubblico per accedere a un'applicazione. Invece di selezionare \"logout\", l'utente chiude semplicemente la scheda del browser e se ne va via. Un attaccante usa lo stesso browser un'ora dopo, e l'utente risulta ancora autenticato.","title":"Esempi di scenari d'attacco"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#riferimenti","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"Riferimenti"},{"location":"it/A07_2021-Identification_and_Authentication_Failures/#lista-dei-cwe-correlati","text":"CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"Lista dei CWE correlati"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/","text":"A08:2021 \u2013 Software and Data Integrity Failures \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152 Panoramica \u2693\ufe0e Una nuova categoria per il 2021 che \u00e8 relativa alla verifica dell'integrit\u00e0 di aggiornamenti software, dati critici, e pipeline di CI/CD. Uno dei pi\u00f9 alti impatti pesati dai dati di Common Vulnerability e Exposures/Common Vulnerability Scoring System (CVE/CVSS). Le Common Weakness Enumerations (CWEs) incluse sono CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , e CWE-502: Deserialization of Untrusted Data . Descrizione \u2693\ufe0e Le problematiche dell'integrit\u00e0 del software e dei dati riguardano il codice e l'infrastruttura che non ne verificano adeguatamente l'integrit\u00e0. Un esempio \u00e8 quando un'applicazione si affida a plugin, librerie o moduli da fonti, repository e content delivery network (CDN) non attendibili. Una pipeline CI/CD insicura pu\u00f2 aprire la porta ad accessi non autorizzati, codice dannoso o compromissione completa del sistema. Infine, molte applicazioni ora includono funzionalit\u00e0 di auto-aggiornamento, dove gli aggiornamenti vengono scaricati senza una sufficiente verifica dell'integrit\u00e0 e applicati all'applicazione. Gli attaccanti potrebbero potenzialmente caricare i propri aggiornamenti malevoli da distribuire e da eseguire su tutte le installazioni. Un altro esempio \u00e8 la deserializzazione insicura, quando gli oggetti o i dati sono codificati o serializzati in una struttura che un attaccante pu\u00f2 ispezionare e modificare liberamente. Come prevenire \u2693\ufe0e Usare firme digitali o meccanismi equivalenti per verificare che il software o i dati provengano dalla fonte prevista e non siano stati alterati. Assicurarsi che le librerie e le dipendenze, come npm o Maven, siano collegati a repository affidabili. Se avete un profilo di rischio pi\u00f9 alto, considerate l'hosting di un repository interno ben conosciuto e controllato. Assicuratevi che venga usato uno strumento di sicurezza della supply chain del software, come OWASP Dependency Check o OWASP CycloneDX, per verificare che i componenti non contengano vulnerabilit\u00e0 note Assicurarsi che ci sia un processo di revisione per le modifiche al codice e alla configurazione per ridurre al minimo la possibilit\u00e0 che codice o configurazione dannosi vengano introdotti nella pipeline del software. Assicurarsi che la pipeline CI/CD sia adeguatamente segregata, configurata adeguatamente e sia presente un meccanismo di controllo degli accessi per assicurare l'integrit\u00e0 del codice che passa attraverso i processi di compilazione e distribuzione. Assicuratevi che i dati serializzati non firmati o non crittografati non vengano inviati a client non fidati senza qualche forma di controllo dell'integrit\u00e0 o firma digitale per rilevare la manomissione o il replay dei dati serializzati. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1 Aggiornamenti senza firma: Molti router domestici, set-top box, e altri dispositivi non verificano gli aggiornamenti attraverso una firma. Il firmware non firmato \u00e8 sempre pi\u00f9 spesso un obiettivo per gli attaccanti e questo \u00e8 un trend che sembra non essere destinato a cessare. Questa \u00e8 una problematica rilevante in quanto molte volte non \u00e8 presente alcun meccanismo per rimediare se non quello di correggere in una versione futura e aspettare che le versioni precedenti invecchino. Scenario #2 Aggiornamento malevolo di SolarWinds : Gli stati-nazione sono sempre stati noti per perpetrare attacchi verso i meccanismi di aggiornamento, con un recente e degno di nota attacco a SolarWinds Orion. L'azienda che sviluppa il software aveva processi per svolgere le build in modo sicuro e controlli sull'integrit\u00e0 degli aggiornamenti. Tuttavia, questi controlli sono violati e per parecchi mesi l'azienda distribu\u00ec un aggiornamento malevolo altamente mirato a pi\u00f9 di 18,000 organizzazioni, delle quali, circa 100 sono state infettate. Questo \u00e8 uno dei breach di questa natura di pi\u00f9 ampia portata e pi\u00f9 significativo nella storia. Scenario #3 Deserializzazione insicura: Un'applicazione React chiama un insieme di microservizi Spring Boot. Essendo stata scritta nel paradigma funzionale, gli sviluppatori hanno cercato di garantire l'immutabilit\u00e0 del codice. La soluzione che hanno trovato \u00e8 serializzare lo stato dell'utente e passarlo avanti e indietro ad ogni richiesta. Un attaccante nota la firma dell'oggetto Java \"rO0\" (in base64) e usa lo strumento Java Serial Killer per ottenere esecuzione di codice remoto sul server dell'applicazione. Riferimenti \u2693\ufe0e [OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent Lista dei CWE correlati \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"A08 Software and Data Integrity Failures"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#a082021-software-and-data-integrity-failures","text":"","title":"A08:2021 \u2013 Software and Data Integrity Failures"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152","title":"Fattori"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#panoramica","text":"Una nuova categoria per il 2021 che \u00e8 relativa alla verifica dell'integrit\u00e0 di aggiornamenti software, dati critici, e pipeline di CI/CD. Uno dei pi\u00f9 alti impatti pesati dai dati di Common Vulnerability e Exposures/Common Vulnerability Scoring System (CVE/CVSS). Le Common Weakness Enumerations (CWEs) incluse sono CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , e CWE-502: Deserialization of Untrusted Data .","title":"Panoramica"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#descrizione","text":"Le problematiche dell'integrit\u00e0 del software e dei dati riguardano il codice e l'infrastruttura che non ne verificano adeguatamente l'integrit\u00e0. Un esempio \u00e8 quando un'applicazione si affida a plugin, librerie o moduli da fonti, repository e content delivery network (CDN) non attendibili. Una pipeline CI/CD insicura pu\u00f2 aprire la porta ad accessi non autorizzati, codice dannoso o compromissione completa del sistema. Infine, molte applicazioni ora includono funzionalit\u00e0 di auto-aggiornamento, dove gli aggiornamenti vengono scaricati senza una sufficiente verifica dell'integrit\u00e0 e applicati all'applicazione. Gli attaccanti potrebbero potenzialmente caricare i propri aggiornamenti malevoli da distribuire e da eseguire su tutte le installazioni. Un altro esempio \u00e8 la deserializzazione insicura, quando gli oggetti o i dati sono codificati o serializzati in una struttura che un attaccante pu\u00f2 ispezionare e modificare liberamente.","title":"Descrizione"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#come-prevenire","text":"Usare firme digitali o meccanismi equivalenti per verificare che il software o i dati provengano dalla fonte prevista e non siano stati alterati. Assicurarsi che le librerie e le dipendenze, come npm o Maven, siano collegati a repository affidabili. Se avete un profilo di rischio pi\u00f9 alto, considerate l'hosting di un repository interno ben conosciuto e controllato. Assicuratevi che venga usato uno strumento di sicurezza della supply chain del software, come OWASP Dependency Check o OWASP CycloneDX, per verificare che i componenti non contengano vulnerabilit\u00e0 note Assicurarsi che ci sia un processo di revisione per le modifiche al codice e alla configurazione per ridurre al minimo la possibilit\u00e0 che codice o configurazione dannosi vengano introdotti nella pipeline del software. Assicurarsi che la pipeline CI/CD sia adeguatamente segregata, configurata adeguatamente e sia presente un meccanismo di controllo degli accessi per assicurare l'integrit\u00e0 del codice che passa attraverso i processi di compilazione e distribuzione. Assicuratevi che i dati serializzati non firmati o non crittografati non vengano inviati a client non fidati senza qualche forma di controllo dell'integrit\u00e0 o firma digitale per rilevare la manomissione o il replay dei dati serializzati.","title":"Come prevenire"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#esempi-di-scenari-dattacco","text":"Scenario #1 Aggiornamenti senza firma: Molti router domestici, set-top box, e altri dispositivi non verificano gli aggiornamenti attraverso una firma. Il firmware non firmato \u00e8 sempre pi\u00f9 spesso un obiettivo per gli attaccanti e questo \u00e8 un trend che sembra non essere destinato a cessare. Questa \u00e8 una problematica rilevante in quanto molte volte non \u00e8 presente alcun meccanismo per rimediare se non quello di correggere in una versione futura e aspettare che le versioni precedenti invecchino. Scenario #2 Aggiornamento malevolo di SolarWinds : Gli stati-nazione sono sempre stati noti per perpetrare attacchi verso i meccanismi di aggiornamento, con un recente e degno di nota attacco a SolarWinds Orion. L'azienda che sviluppa il software aveva processi per svolgere le build in modo sicuro e controlli sull'integrit\u00e0 degli aggiornamenti. Tuttavia, questi controlli sono violati e per parecchi mesi l'azienda distribu\u00ec un aggiornamento malevolo altamente mirato a pi\u00f9 di 18,000 organizzazioni, delle quali, circa 100 sono state infettate. Questo \u00e8 uno dei breach di questa natura di pi\u00f9 ampia portata e pi\u00f9 significativo nella storia. Scenario #3 Deserializzazione insicura: Un'applicazione React chiama un insieme di microservizi Spring Boot. Essendo stata scritta nel paradigma funzionale, gli sviluppatori hanno cercato di garantire l'immutabilit\u00e0 del codice. La soluzione che hanno trovato \u00e8 serializzare lo stato dell'utente e passarlo avanti e indietro ad ogni richiesta. Un attaccante nota la firma dell'oggetto Java \"rO0\" (in base64) e usa lo strumento Java Serial Killer per ottenere esecuzione di codice remoto sul server dell'applicazione.","title":"Esempi di scenari d'attacco"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#riferimenti","text":"[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent","title":"Riferimenti"},{"location":"it/A08_2021-Software_and_Data_Integrity_Failures/#lista-dei-cwe-correlati","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"Lista dei CWE correlati"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/","text":"A09:2021 \u2013 Security Logging and Monitoring Failures \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242 Panoramica \u2693\ufe0e La problematica relativa alla mancanza di logging e monitoraggio degli eventi di sicurezza proviene dal sondaggio della community della Top 10 (#3), salita leggermente dalla decima posizione della OWASP Top 10 2017. Questa problematica \u00e8 complicata da testare, spesso si utilizzano interviste o si chiede se durante i penetration test sono stati individuati degli attacchi. In questa categoria non ci sono molti dati di CVE/CVSS, ma identificare e rispondere alle violazioni di sicurezza \u00e8 essenziale. Ha un impatto elevato per quanto riguarda la responsabilit\u00e0, la visibilit\u00e0, l'allerta sugli incidenti e la forensics. Questa categoria estende la CWE-778 Insufficient Logging per includere CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , e CWE-532 Insertion of Sensitive Information into Log File . Descrizione \u2693\ufe0e Tornando alla Top 10 2021 di OWASP, questa categoria \u00e8 per aiutare a rilevare, svolgere escalation e rispondere alle violazioni attive. Senza logging e monitoraggio, le violazioni non possono essere rilevate. Il logging, il rilevamento, il monitoraggio e la risposta attiva insufficienti si verificano ogni volta che: Gli eventi verificabili, come i login, i login falliti e le transazioni ad alto valore, non vengono registrati. Warning ed errori non generano messaggi di log, oppure sono inadeguati o poco chiari. I log di applicazioni e API non sono monitorati per attivit\u00e0 sospette. I file di log vengono memorizzati solo localmente. Non sono presenti o sono inefficaci le soglie di allarme e processi di escalation della risposta I penetration test e le scansioni da parte di strumenti DAST (Dynamic Application Security Testing) (come OWASP ZAP) non attivano nessun allarme. L'applicazione non \u00e8 in grado di rilevare, svolgere escalation o avvisare per gli attacchi attivi in real-time o quasi in real-time. Si \u00e8 vulnerabili alla fuga di informazioni se gli eventi di logging e gli alert sono visibili ad un utente o ad un attaccante (vedi A01:2021-Broken Access Control ). Come prevenire \u2693\ufe0e Gli sviluppatori dovrebbero implementare alcuni o tutti i seguenti controlli, a seconda del rischio dell'applicazione: Assicurarsi che tutti i login, il controllo degli accessi e gli errori a seguito della verifica degli input lato server possono essere registrati con un contesto utente sufficiente per identificare account sospetti o malevoli e conservati per un tempo sufficiente a consentire un'analisi forense a posteriori. Assicurarsi che i log siano generati in un formato che le soluzioni di gestione dei log possano facilmente consumare. Assicurarsi che i dati di log siano codificati correttamente per prevenire injection o attacchi ai sistemi di registrazione o monitoraggio. Assicurarsi che le transazioni di alto valore abbiano un audit trail con controlli di integrit\u00e0 per prevenire manomissioni o cancellazioni, come le tabelle append-only di un database, o simili. I team DevSecOps dovrebbero stabilire sistemi di monitoraggio di allerta efficaci in modo che le attivit\u00e0 sospette siano rilevate e affrontate rapidamente. Stabilire o adottare un piano incident response e recovery, come ad esempio il National Institute of Standards and Technology (NIST) 800-61r2 o successivo. Ci sono framework di protezione delle applicazioni commerciali e open-source come l'OWASP ModSecurity Core Rule Set, e software di correlazione dei log open-source, come Elasticsearch, Logstash, Kibana (ELK) che dispongono di dashboard e sistemi di alerting personalizzati. Esempi di scenari d'attacco \u2693\ufe0e Scenario #1: L'operatore del sito web di un fornitore di piani sanitari per bambini non ha potuto rilevare una violazione a causa di una mancanza di logging e monitoraggio. Una terza parte ha informato il fornitore del piano sanitario che un attaccante aveva acceduto e modificato migliaia di cartelle cliniche di pi\u00f9 di 3,5 milioni di bambini. Una indagine post-incidente ha rilevato che gli sviluppatori del sito web non avevano corretto delle vulnerabilit\u00e0 significative presenti. Poich\u00e9 non c'era nessuna forma di logging o monitoraggio del sistema, la violazione dei dati potrebbe essere stata in corso dal 2013, un periodo di pi\u00f9 di sette anni. Scenario #2: Una grande compagnia aerea indiana ha subito una violazione dei dati che ha coinvolto pi\u00f9 di dieci anni di dati personali di milioni di passeggeri, compresi i dati dei passaporti e delle carte di credito. La violazione dei dati si \u00e8 verificata presso un fornitore di hosting cloud di terze parti, che ha notificato la compagnia aerea della violazione dopo qualche tempo. Scenario #3: Una grande compagnia aerea europea ha subito una violazione riferibile al GDPR. La violazione \u00e8 stata causata da delle vulnerabilit\u00e0 dell'applicazione di pagamento sfruttate dagli aggressori, che hanno raccolto pi\u00f9 di 400.000 record di pagamento dei clienti. A seguito di ci\u00f2, la compagnia aerea \u00e8 stata multata 20 milioni di sterline dal garante della privacy. Riferimenti \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events Lista dei CWE correlati \u2693\ufe0e CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"A09 Security Logging and Monitoring Failures"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#a092021-security-logging-and-monitoring-failures","text":"","title":"A09:2021 \u2013 Security Logging and Monitoring Failures"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242","title":"Fattori"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#panoramica","text":"La problematica relativa alla mancanza di logging e monitoraggio degli eventi di sicurezza proviene dal sondaggio della community della Top 10 (#3), salita leggermente dalla decima posizione della OWASP Top 10 2017. Questa problematica \u00e8 complicata da testare, spesso si utilizzano interviste o si chiede se durante i penetration test sono stati individuati degli attacchi. In questa categoria non ci sono molti dati di CVE/CVSS, ma identificare e rispondere alle violazioni di sicurezza \u00e8 essenziale. Ha un impatto elevato per quanto riguarda la responsabilit\u00e0, la visibilit\u00e0, l'allerta sugli incidenti e la forensics. Questa categoria estende la CWE-778 Insufficient Logging per includere CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , e CWE-532 Insertion of Sensitive Information into Log File .","title":"Panoramica"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#descrizione","text":"Tornando alla Top 10 2021 di OWASP, questa categoria \u00e8 per aiutare a rilevare, svolgere escalation e rispondere alle violazioni attive. Senza logging e monitoraggio, le violazioni non possono essere rilevate. Il logging, il rilevamento, il monitoraggio e la risposta attiva insufficienti si verificano ogni volta che: Gli eventi verificabili, come i login, i login falliti e le transazioni ad alto valore, non vengono registrati. Warning ed errori non generano messaggi di log, oppure sono inadeguati o poco chiari. I log di applicazioni e API non sono monitorati per attivit\u00e0 sospette. I file di log vengono memorizzati solo localmente. Non sono presenti o sono inefficaci le soglie di allarme e processi di escalation della risposta I penetration test e le scansioni da parte di strumenti DAST (Dynamic Application Security Testing) (come OWASP ZAP) non attivano nessun allarme. L'applicazione non \u00e8 in grado di rilevare, svolgere escalation o avvisare per gli attacchi attivi in real-time o quasi in real-time. Si \u00e8 vulnerabili alla fuga di informazioni se gli eventi di logging e gli alert sono visibili ad un utente o ad un attaccante (vedi A01:2021-Broken Access Control ).","title":"Descrizione"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#come-prevenire","text":"Gli sviluppatori dovrebbero implementare alcuni o tutti i seguenti controlli, a seconda del rischio dell'applicazione: Assicurarsi che tutti i login, il controllo degli accessi e gli errori a seguito della verifica degli input lato server possono essere registrati con un contesto utente sufficiente per identificare account sospetti o malevoli e conservati per un tempo sufficiente a consentire un'analisi forense a posteriori. Assicurarsi che i log siano generati in un formato che le soluzioni di gestione dei log possano facilmente consumare. Assicurarsi che i dati di log siano codificati correttamente per prevenire injection o attacchi ai sistemi di registrazione o monitoraggio. Assicurarsi che le transazioni di alto valore abbiano un audit trail con controlli di integrit\u00e0 per prevenire manomissioni o cancellazioni, come le tabelle append-only di un database, o simili. I team DevSecOps dovrebbero stabilire sistemi di monitoraggio di allerta efficaci in modo che le attivit\u00e0 sospette siano rilevate e affrontate rapidamente. Stabilire o adottare un piano incident response e recovery, come ad esempio il National Institute of Standards and Technology (NIST) 800-61r2 o successivo. Ci sono framework di protezione delle applicazioni commerciali e open-source come l'OWASP ModSecurity Core Rule Set, e software di correlazione dei log open-source, come Elasticsearch, Logstash, Kibana (ELK) che dispongono di dashboard e sistemi di alerting personalizzati.","title":"Come prevenire"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#esempi-di-scenari-dattacco","text":"Scenario #1: L'operatore del sito web di un fornitore di piani sanitari per bambini non ha potuto rilevare una violazione a causa di una mancanza di logging e monitoraggio. Una terza parte ha informato il fornitore del piano sanitario che un attaccante aveva acceduto e modificato migliaia di cartelle cliniche di pi\u00f9 di 3,5 milioni di bambini. Una indagine post-incidente ha rilevato che gli sviluppatori del sito web non avevano corretto delle vulnerabilit\u00e0 significative presenti. Poich\u00e9 non c'era nessuna forma di logging o monitoraggio del sistema, la violazione dei dati potrebbe essere stata in corso dal 2013, un periodo di pi\u00f9 di sette anni. Scenario #2: Una grande compagnia aerea indiana ha subito una violazione dei dati che ha coinvolto pi\u00f9 di dieci anni di dati personali di milioni di passeggeri, compresi i dati dei passaporti e delle carte di credito. La violazione dei dati si \u00e8 verificata presso un fornitore di hosting cloud di terze parti, che ha notificato la compagnia aerea della violazione dopo qualche tempo. Scenario #3: Una grande compagnia aerea europea ha subito una violazione riferibile al GDPR. La violazione \u00e8 stata causata da delle vulnerabilit\u00e0 dell'applicazione di pagamento sfruttate dagli aggressori, che hanno raccolto pi\u00f9 di 400.000 record di pagamento dei clienti. A seguito di ci\u00f2, la compagnia aerea \u00e8 stata multata 20 milioni di sterline dal garante della privacy.","title":"Esempi di scenari d'attacco"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#riferimenti","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"Riferimenti"},{"location":"it/A09_2021-Security_Logging_and_Monitoring_Failures/#lista-dei-cwe-correlati","text":"CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"Lista dei CWE correlati"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/","text":"A10:2021 \u2013 Server-Side Request Forgery (SSRF) \u2693\ufe0e Fattori \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Panoramica \u2693\ufe0e Questa categoria \u00e8 stata aggiunta dal sondaggio della comunit\u00e0 Top 10 (#1). I dati mostrano un tasso di incidenza relativamente basso con una copertura di test superiore alla media e valutazioni potenziali di sfruttabilit\u00e0 e di impatto superiori alla media. Poich\u00e9 le nuove voci sono probabilmente un singolo o un piccolo gruppo di Common Weakness Enumerations (CWEs) per l'attenzione e per sensibilizzare, la speranza \u00e8 che siano oggetto di attenzione e possano essere incluse in una categoria adeguata in una futura edizione. Descrizione \u2693\ufe0e Le falle SSRF si verificano ogni volta che un'applicazione web recupera una risorsa remota senza validare l'URL fornito dall'utente. Questo permette ad un attaccante di forzare l'applicazione ad inviare una richiesta preparata ad hoc ad una destinazione inattesa, anche quando \u00e8 protetta da un firewall, una VPN o un altro tipo di network access control list (ACL). Dato che le moderne applicazioni web forniscono agli utenti finali parecchie funzionalit\u00e0, scaricare dati da un URL \u00e8 uno scenario comune. Di conseguenza, l'incidenza di SSRF \u00e8 in crescita. Inoltre, la gravit\u00e0 di SSRF sta diventando pi\u00f9 alta a causa dei servizi cloud e alla complessit\u00e0 crescente delle architetture. Come prevenire \u2693\ufe0e Gli sviluppatori possono prevenire le SSRF implementando alcuni o tutti i seguenti controlli di defense in depth: Dal layer di rete: \u2693\ufe0e Segmentare in reti separate le funzionalit\u00e0 che richiedono un accesso alle risorse remote per ridurre l'impatto di SSRF Applicare politiche di firewall \"deny by default\" o regole di controllo per bloccare tutto il traffico intranet tranne quello essenziale. Suggerimenti: ~ Stabilire una ownership e un ciclo di vita per le regole del firewall basate sulle applicazioni. ~ Registrare tutti i flussi di rete accettati e bloccati sui firewall (vedi A09:2021-Security Logging and Monitoring Failures ). Dal layer applicativo: \u2693\ufe0e Sanitizzare e convalidare tutti i dati di input forniti dal cliente Far rispettare lo URL schema, la porta e la destinazione con una allow list Non inviare risposte raw ai client Disabilitare i redirect HTTP Essere consapevoli della URL consistency per evitare attacchi come il DNS rebinding e race conditions come \"time of check, time of use\" (TOCTOU) Non mitigare la SSRF attraverso l'uso di una deny list o di un'espressione regolare. Gli attaccanti hanno a disposizione liste di payload, strumenti e abilit\u00e0 per bypassare le deny list. Contromisure addizionali da considerare: \u2693\ufe0e Non svolgere il deploy di altri servizi rilevanti per la sicurezza sui sistemi di frontend (es. OpenID). Controllare il traffico locale su questi sistemi (es. localhost) Per i frontend con gruppi di utenti dedicati e gestibili, usare la crittografia di rete (es. VPN) su sistemi indipendenti che hanno esigenze di protezione molto elevate Esempi di scenari d'attacco \u2693\ufe0e Gli attaccanti possono sfruttare SSRF per attaccare sistemi protetti dietro web application firewall, firewall o ACL di rete, utilizzando scenari come: Scenario #1: Port scan dei server interni - Se l'architettura di rete non \u00e8 segmentata, gli attaccanti possono mappare le reti interne e determinare se sono presenti porte aperte o chiuse in base ai risultati della connessione o il tempo trascorso per accettare o rifiutare le connessioni del payload SSRF. Scenario #2: Sensitive data exposure \u2013 Gli attaccanti possono accedere a file locali o servizi interni per ottenere informazioni sensibili come file:///etc/passwd</span> e http://localhost:28017/ . Scenario #3: Accedere allo storage dei metadati dei servizi cloud - La maggior parte dei provider hanno un metadata storage come http://169.254.169.254/ . Un attaccante pu\u00f2 leggere i metadati per ottenere informazioni sensibili. Scenario #4: Compromettere i servizi interni - L'attaccante pu\u00f2 abusare dei servizi interni per condurre ulteriori attacchi come Remote Code Execution (RCE) o Denial of Service (DoS). Riferimenti \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista dei CWE correlati \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10 Server Side Request Forgery (SSRF)"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#a102021-server-side-request-forgery-ssrf","text":"","title":"A10:2021 \u2013 Server-Side Request Forgery (SSRF)"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#fattori","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fattori"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#panoramica","text":"Questa categoria \u00e8 stata aggiunta dal sondaggio della comunit\u00e0 Top 10 (#1). I dati mostrano un tasso di incidenza relativamente basso con una copertura di test superiore alla media e valutazioni potenziali di sfruttabilit\u00e0 e di impatto superiori alla media. Poich\u00e9 le nuove voci sono probabilmente un singolo o un piccolo gruppo di Common Weakness Enumerations (CWEs) per l'attenzione e per sensibilizzare, la speranza \u00e8 che siano oggetto di attenzione e possano essere incluse in una categoria adeguata in una futura edizione.","title":"Panoramica"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#descrizione","text":"Le falle SSRF si verificano ogni volta che un'applicazione web recupera una risorsa remota senza validare l'URL fornito dall'utente. Questo permette ad un attaccante di forzare l'applicazione ad inviare una richiesta preparata ad hoc ad una destinazione inattesa, anche quando \u00e8 protetta da un firewall, una VPN o un altro tipo di network access control list (ACL). Dato che le moderne applicazioni web forniscono agli utenti finali parecchie funzionalit\u00e0, scaricare dati da un URL \u00e8 uno scenario comune. Di conseguenza, l'incidenza di SSRF \u00e8 in crescita. Inoltre, la gravit\u00e0 di SSRF sta diventando pi\u00f9 alta a causa dei servizi cloud e alla complessit\u00e0 crescente delle architetture.","title":"Descrizione"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#come-prevenire","text":"Gli sviluppatori possono prevenire le SSRF implementando alcuni o tutti i seguenti controlli di defense in depth:","title":"Come prevenire"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#dal-layer-di-rete","text":"Segmentare in reti separate le funzionalit\u00e0 che richiedono un accesso alle risorse remote per ridurre l'impatto di SSRF Applicare politiche di firewall \"deny by default\" o regole di controllo per bloccare tutto il traffico intranet tranne quello essenziale. Suggerimenti: ~ Stabilire una ownership e un ciclo di vita per le regole del firewall basate sulle applicazioni. ~ Registrare tutti i flussi di rete accettati e bloccati sui firewall (vedi A09:2021-Security Logging and Monitoring Failures ).","title":"Dal layer di rete:"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#dal-layer-applicativo","text":"Sanitizzare e convalidare tutti i dati di input forniti dal cliente Far rispettare lo URL schema, la porta e la destinazione con una allow list Non inviare risposte raw ai client Disabilitare i redirect HTTP Essere consapevoli della URL consistency per evitare attacchi come il DNS rebinding e race conditions come \"time of check, time of use\" (TOCTOU) Non mitigare la SSRF attraverso l'uso di una deny list o di un'espressione regolare. Gli attaccanti hanno a disposizione liste di payload, strumenti e abilit\u00e0 per bypassare le deny list.","title":"Dal layer applicativo:"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#contromisure-addizionali-da-considerare","text":"Non svolgere il deploy di altri servizi rilevanti per la sicurezza sui sistemi di frontend (es. OpenID). Controllare il traffico locale su questi sistemi (es. localhost) Per i frontend con gruppi di utenti dedicati e gestibili, usare la crittografia di rete (es. VPN) su sistemi indipendenti che hanno esigenze di protezione molto elevate","title":"Contromisure addizionali da considerare:"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#esempi-di-scenari-dattacco","text":"Gli attaccanti possono sfruttare SSRF per attaccare sistemi protetti dietro web application firewall, firewall o ACL di rete, utilizzando scenari come: Scenario #1: Port scan dei server interni - Se l'architettura di rete non \u00e8 segmentata, gli attaccanti possono mappare le reti interne e determinare se sono presenti porte aperte o chiuse in base ai risultati della connessione o il tempo trascorso per accettare o rifiutare le connessioni del payload SSRF. Scenario #2: Sensitive data exposure \u2013 Gli attaccanti possono accedere a file locali o servizi interni per ottenere informazioni sensibili come file:///etc/passwd</span> e http://localhost:28017/ . Scenario #3: Accedere allo storage dei metadati dei servizi cloud - La maggior parte dei provider hanno un metadata storage come http://169.254.169.254/ . Un attaccante pu\u00f2 leggere i metadati per ottenere informazioni sensibili. Scenario #4: Compromettere i servizi interni - L'attaccante pu\u00f2 abusare dei servizi interni per condurre ulteriori attacchi come Remote Code Execution (RCE) o Denial of Service (DoS).","title":"Esempi di scenari d'attacco"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#riferimenti","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Riferimenti"},{"location":"it/A10_2021-Server-Side_Request_Forgery_(SSRF)/#lista-dei-cwe-correlati","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista dei CWE correlati"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/","text":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF) \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Vis\u00e3o Geral \u2693\ufe0e Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura. Descri\u00e7\u00e3o \u2693\ufe0e As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas. Como Previnir \u2693\ufe0e Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade: Para a Camada de Rede \u2693\ufe0e Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ). Para a Camada de Aplica\u00e7\u00e3o: \u2693\ufe0e Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o. Medidas Adicionais a Considerar: \u2693\ufe0e N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas. Cen\u00e1rio de exemplo de um ataque \u2693\ufe0e Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS). Refer\u00eancias \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista de CWEs mapeadas \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)    ![icon](assets/TOP_10_Icons_Final_SSRF.png)"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#a102021-falsificacao-de-solicitacao-do-lado-do-servidor-ssrf","text":"","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#fatores","text":"CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fatores"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#visao-geral","text":"Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura.","title":"Vis\u00e3o Geral"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#descricao","text":"As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas.","title":"Descri\u00e7\u00e3o"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#como-previnir","text":"Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade:","title":"Como Previnir"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-rede","text":"Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ).","title":"Para a Camada de Rede"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-aplicacao","text":"Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o.","title":"Para a Camada de Aplica\u00e7\u00e3o:"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#medidas-adicionais-a-considerar","text":"N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas.","title":"Medidas Adicionais a Considerar:"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#cenario-de-exemplo-de-um-ataque","text":"Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS).","title":"Cen\u00e1rio de exemplo de um ataque"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#referencias","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Refer\u00eancias"},{"location":"it/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#lista-de-cwes-mapeadas","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista de CWEs mapeadas"},{"location":"it/A11_2021-Next_Steps/","text":"A11:2021 \u2013 Passi seguenti \u2693\ufe0e Per natura, la OWASP Top 10 \u00e8 limitata ai dieci rischi pi\u00f9 impattanti. Ogni versione della OWASP Top 10 ha dei rischi che sono stati in bilico per quanto riguarda la loro inclusione, ma alla fine non ce l'hanno fatta. In qualsiasi modo avessimo provato ad interpretare o distorcere i dati, gli altri rischi sono risultati comunque pi\u00f9 prevalenti e impattanti. Le organizzazioni che lavorano verso un programma di AppSec maturo, per consulenze, o fornitori di strumenti che desiderano espandere la copertura per i loro prodotti, le seguenti tre problematiche valgono lo sforzo di essere identificate e risolte. Problematiche sulla qualit\u00e0 del codice \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Descrizione. I problemi relativi alla qualit\u00e0 del codice includono difetti di sicurezza o pattern noti, il riutilizzo di variabili per scopi multipli, l'esposizione di informazioni sensibili nell'output delle istruzioni di debug, errori off-by-one, condizioni time of check/time of use (TOCTOU), race conditions, errori di conversione, use after free, e altro ancora. La caratteristica di questa sezione \u00e8 che queste problematiche di solito possono essere identificate con settaggi rigorosi dei flag del compilatore, strumenti di analisi statica del codice e plugin dell'IDE per il linting. I linguaggi moderni hanno eliminato molti di questi problemi by design, come il concetto di memory ownership, di borrowing, e il threading di Rust, lo strict typing e il bounds checking di Go. Come prevenire . Abilitare e utilizzare le opzioni di analisi statica del codice e dell'ambiente di sviluppo. Considerare l'uso di uno strumento di analisi statica del codice. Considerare se potrebbe essere possibile usare o migrare ad un linguaggio o framework che elimina intere classi classi di bug, come Rust o Go. Esempi di scenari d'attacco . Un attaccante potrebbe ottenere o aggiornare informazioni sensibili sfruttando una condizione di race condition con una variabile staticamente condivisa da pi\u00f9 thread. Riferimenti OWASP Code Review Guide Google Code Review Guide Denial of Service \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Descrizione . Denial of service \u00e8 sempre possibile date risorse sufficienti da parte di un attaccante. Tuttavia, le metodologie di progettazione e programmazione hanno un'influenza significativa sull'entit\u00e0 di questo tipo di attacchi. Supponiamo che chiunque abbia il link possa accedere ad un file di grandi dimensioni, o che in ogni pagina venga svolta una transazione computazionalmente costosa. In questo caso, lo sforzo per svolgere un attacco di denial of service richiederebbe pochissimo sforzo. Come prevenire . Testare le prestazioni del codice per utilizzo di CPU, I/O e memoria. Utilizzare, riarchitettare, ottimizzare o mettere in cache le operazioni pi\u00f9 costose. Considerare i controlli di accesso per gli oggetti pi\u00f9 grandi per assicurare che solo persone autorizzate possano accedere a file o oggetti di grandi dimensioni o servirli da una edge caching network. Esempi di scenari d'attacco . Un attaccante potrebbe determinare che un'operazione richiede 5-10 secondi per essere completata. Quando si eseguono quattro thread concorrenti, il server sembra smettere di rispondere. L'attaccante utilizza 1000 thread e porta l'intero sistema offline. Riferimenti OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service Errori di gestione della memoria \u2693\ufe0e CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Descrizione . Le applicazioni web tendono ad essere scritte in linguaggi managed, come Java, .NET, o Node.js (JavaScript o TypeScript). Tuttavia, questi linguaggi sono scritti con linguaggi di basso livello che soffrono di problemi di gestione della memoria, come buffer o heap overflow, use after free, integer overflow, e altro. Ci sono stati molti attacchi di sandbox escape nel corso degli anni che hanno dimostrato che solo perch\u00e9 il linguaggio delle applicazioni web \u00e8 nominalmente \"memory safe\", le basi sottostanti potrebbero non esserlo. Come prevenire . Molte API moderne vengono oramai scritte in linguaggi memory-safe come Rust o Go. Nel caso di Rust, la sicurezza della memoria \u00e8 una caratteristica cruciale del linguaggio. Per il codice esistente, l'uso di rigorosi flag del compilatore, strong typing, analisi statica del codice e fuzz testing possono essere utili per identificare memory leaks, overrun di memoria e array, e altro ancora. Esempi di scenari d'attacco . I buffer e gli heap overflow sono stati un un pilastro per gli attaccanti nel corso degli anni. L'attaccante invia dei dati ad un programma, che li memorizza in uno stack buffer sottodimensionato. Il risultato \u00e8 che le informazioni sul call stack vengono sovrascritte, incluso il puntatore di ritorno della funzione. I dati impostano il valore del puntatore di ritorno in modo che quando la funzione termina, trasferisce il controllo al codice maligno contenuto nei dati inviati dall'attaccante. Riferimenti OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"Passi seguenti"},{"location":"it/A11_2021-Next_Steps/#a112021-passi-seguenti","text":"Per natura, la OWASP Top 10 \u00e8 limitata ai dieci rischi pi\u00f9 impattanti. Ogni versione della OWASP Top 10 ha dei rischi che sono stati in bilico per quanto riguarda la loro inclusione, ma alla fine non ce l'hanno fatta. In qualsiasi modo avessimo provato ad interpretare o distorcere i dati, gli altri rischi sono risultati comunque pi\u00f9 prevalenti e impattanti. Le organizzazioni che lavorano verso un programma di AppSec maturo, per consulenze, o fornitori di strumenti che desiderano espandere la copertura per i loro prodotti, le seguenti tre problematiche valgono lo sforzo di essere identificate e risolte.","title":"A11:2021 \u2013 Passi seguenti"},{"location":"it/A11_2021-Next_Steps/#problematiche-sulla-qualita-del-codice","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Descrizione. I problemi relativi alla qualit\u00e0 del codice includono difetti di sicurezza o pattern noti, il riutilizzo di variabili per scopi multipli, l'esposizione di informazioni sensibili nell'output delle istruzioni di debug, errori off-by-one, condizioni time of check/time of use (TOCTOU), race conditions, errori di conversione, use after free, e altro ancora. La caratteristica di questa sezione \u00e8 che queste problematiche di solito possono essere identificate con settaggi rigorosi dei flag del compilatore, strumenti di analisi statica del codice e plugin dell'IDE per il linting. I linguaggi moderni hanno eliminato molti di questi problemi by design, come il concetto di memory ownership, di borrowing, e il threading di Rust, lo strict typing e il bounds checking di Go. Come prevenire . Abilitare e utilizzare le opzioni di analisi statica del codice e dell'ambiente di sviluppo. Considerare l'uso di uno strumento di analisi statica del codice. Considerare se potrebbe essere possibile usare o migrare ad un linguaggio o framework che elimina intere classi classi di bug, come Rust o Go. Esempi di scenari d'attacco . Un attaccante potrebbe ottenere o aggiornare informazioni sensibili sfruttando una condizione di race condition con una variabile staticamente condivisa da pi\u00f9 thread. Riferimenti OWASP Code Review Guide Google Code Review Guide","title":"Problematiche sulla qualit\u00e0 del codice"},{"location":"it/A11_2021-Next_Steps/#denial-of-service","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Descrizione . Denial of service \u00e8 sempre possibile date risorse sufficienti da parte di un attaccante. Tuttavia, le metodologie di progettazione e programmazione hanno un'influenza significativa sull'entit\u00e0 di questo tipo di attacchi. Supponiamo che chiunque abbia il link possa accedere ad un file di grandi dimensioni, o che in ogni pagina venga svolta una transazione computazionalmente costosa. In questo caso, lo sforzo per svolgere un attacco di denial of service richiederebbe pochissimo sforzo. Come prevenire . Testare le prestazioni del codice per utilizzo di CPU, I/O e memoria. Utilizzare, riarchitettare, ottimizzare o mettere in cache le operazioni pi\u00f9 costose. Considerare i controlli di accesso per gli oggetti pi\u00f9 grandi per assicurare che solo persone autorizzate possano accedere a file o oggetti di grandi dimensioni o servirli da una edge caching network. Esempi di scenari d'attacco . Un attaccante potrebbe determinare che un'operazione richiede 5-10 secondi per essere completata. Quando si eseguono quattro thread concorrenti, il server sembra smettere di rispondere. L'attaccante utilizza 1000 thread e porta l'intero sistema offline. Riferimenti OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service","title":"Denial of Service"},{"location":"it/A11_2021-Next_Steps/#errori-di-gestione-della-memoria","text":"CWEs corrispondenti Tasso di incidenza Max Tasso di incidenza Medio Sfruttabilit\u00e0 pesata Impatto Medio Copertura Max Copertura media Occorrenze Totali CVE Totali 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Descrizione . Le applicazioni web tendono ad essere scritte in linguaggi managed, come Java, .NET, o Node.js (JavaScript o TypeScript). Tuttavia, questi linguaggi sono scritti con linguaggi di basso livello che soffrono di problemi di gestione della memoria, come buffer o heap overflow, use after free, integer overflow, e altro. Ci sono stati molti attacchi di sandbox escape nel corso degli anni che hanno dimostrato che solo perch\u00e9 il linguaggio delle applicazioni web \u00e8 nominalmente \"memory safe\", le basi sottostanti potrebbero non esserlo. Come prevenire . Molte API moderne vengono oramai scritte in linguaggi memory-safe come Rust o Go. Nel caso di Rust, la sicurezza della memoria \u00e8 una caratteristica cruciale del linguaggio. Per il codice esistente, l'uso di rigorosi flag del compilatore, strong typing, analisi statica del codice e fuzz testing possono essere utili per identificare memory leaks, overrun di memoria e array, e altro ancora. Esempi di scenari d'attacco . I buffer e gli heap overflow sono stati un un pilastro per gli attaccanti nel corso degli anni. L'attaccante invia dei dati ad un programma, che li memorizza in uno stack buffer sottodimensionato. Il risultato \u00e8 che le informazioni sul call stack vengono sovrascritte, incluso il puntatore di ritorno della funzione. I dati impostano il valore del puntatore di ritorno in modo che quando la funzione termina, trasferisce il controllo al codice maligno contenuto nei dati inviati dall'attaccante. Riferimenti OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"Errori di gestione della memoria"},{"location":"it/ar/assets/readme/","text":"","title":"Readme"},{"location":"ja/","text":"OWASP Top 10 2021\u306e\u7d39\u4ecb \u2693\ufe0e OWASP \u30c8\u30c3\u30d7 10 \u306e\u6700\u65b0\u7248\u3078\u3088\u3046\u3053\u305d! OWASP \u30c8\u30c3\u30d7 10 2021\u5e74\u7248\u306f\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30c7\u30b6\u30a4\u30f3\u304c\u4e00\u65b0\u3055\u308c\u30011\u30da\u30fc\u30b8\u306e\u30a4\u30f3\u30d5\u30a9\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30a4\u30f3\u30d5\u30a9\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306f\u3001\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u304b\u3089\u5165\u624b\u3067\u304d\u3001\u5370\u5237\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4eca\u56de\u306e\u30c8\u30c3\u30d710\u306e\u4f5c\u6210\u306b\u3042\u305f\u3063\u3066\u3001\u8cb4\u91cd\u306a\u6642\u9593\u3084\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u3066\u304f\u3060\u3055\u3063\u305f\u3059\u3079\u3066\u306e\u7686\u3055\u3093\u306b\u611f\u8b1d\u3057\u307e\u3059\u3002\u7686\u69d8\u306e\u3054\u5354\u529b\u306a\u304f\u3057\u3066\u306f\u3001OWASP \u30c8\u30c3\u30d7 10 2021\u5e74\u7248\u306f\u5b58\u5728\u3057\u5f97\u307e\u305b\u3093\u3002 \u672c\u5f53\u306b\u3001\u611f\u8b1d\u3044\u305f\u3057\u307e\u3059 \u3002 2021\u5e74\u7248\u30c8\u30c3\u30d710\u306e\u5909\u66f4\u70b9 \u2693\ufe0e 2021\u5e74\u7248\u30c8\u30c3\u30d710\u3067\u306f\u30013\u3064\u306e\u65b0\u3057\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u30014\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u540d\u79f0\u3068\u30b9\u30b3\u30fc\u30d7\u306e\u5909\u66f4\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u7d71\u5408\u3055\u308c\u305f\u3082\u306e\u3082\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002 A01:2021-\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099 \u306f\u30015\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u300294%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u5f62\u3067\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u300c\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u6b20\u9665\u300d\u306b\u3042\u305f\u308b34\u4ef6\u306eCWE\u306f\u3001\u4ed6\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3088\u308a\u3082\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u591a\u304f\u767a\u751f\u3057\u3066\u3044\u307e\u3059\u3002 A02:2021-\u6697\u53f7\u5316\u306e\u5931\u6557 \u306f\u3001\u3072\u3068\u3064\u9806\u4f4d\u3092\u4e0a\u3052\u30662\u4f4d\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u4ee5\u524d\u306f\u3001\u300c\u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u300d\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u306f\u6839\u672c\u7684\u306a\u539f\u56e0\u3068\u3044\u3046\u3088\u308a\u5e45\u5e83\u304f\u307f\u3089\u308c\u308b\u75c7\u72b6\u3068\u8a00\u3048\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u6a5f\u5bc6\u30c7\u30fc\u30bf\u306e\u6f0f\u3048\u3044\u3084\u30b7\u30b9\u30c6\u30e0\u4fb5\u5bb3\u306b\u591a\u304f\u95a2\u9023\u3059\u308b\u3001\u6697\u53f7\u6280\u8853\u306b\u307e\u3064\u308f\u308b\u5931\u6557\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002 A03:2021-\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 \u306f\u30013\u4f4d\u306b\u4e0b\u304c\u3063\u3066\u3044\u307e\u3059\u300294%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u78ba\u8a8d\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u3042\u305f\u308b33\u306eCWE\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306e\u767a\u751f\u6570\u304c2\u756a\u76ee\u306b\u591a\u304f\u898b\u3089\u308c\u307e\u3059\u3002\u4eca\u56de\u304b\u3089\u3001\u30af\u30ed\u30b9\u30b5\u30a4\u30c8\u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0\u306f\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 A04:2021-\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08 \u306f\u30012021\u5e74\u306b\u65b0\u8a2d\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u8a2d\u8a08\u4e0a\u306e\u6b20\u9665\u306b\u95a2\u3059\u308b\u30ea\u30b9\u30af\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\u4e00\u696d\u754c\u3068\u3057\u3066\u3001\u6211\u3005\u304c\u7d14\u7c8b\u306b\u300c\u30b7\u30d5\u30c8\u30ec\u30d5\u30c8\u300d\u3059\u308b\u3053\u3068\u3092\u671b\u3080\u306e\u3067\u3042\u308c\u3070\u3001\u8105\u5a01\u30e2\u30c7\u30ea\u30f3\u30b0\u3084\u3001\u5b89\u5168\u306a\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3\u3068\u539f\u5247\u3001\u307e\u305f\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30fb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u3082\u3063\u3068\u5229\u7528\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002 A05:2021-\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u30df\u30b9 \u306f\u3001\u524d\u56de\u306e6\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e90\uff05\u306b\u306f\u4f55\u3089\u304b\u306e\u8a2d\u5b9a\u30df\u30b9\u304c\u898b\u3089\u308c\u307e\u3059\u3002\u9ad8\u5ea6\u306a\u8a2d\u5b9a\u304c\u53ef\u80fd\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3078\u306e\u79fb\u884c\u304c\u9032\u3080\u4e2d\u3067\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u9806\u4f4d\u304c\u4e0a\u304c\u3063\u305f\u3053\u3068\u306f\u5f53\u7136\u3068\u8a00\u3048\u307e\u3059\u3002\u4ee5\u524d\u306e\u3001XML\u5916\u90e8\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u53c2\u7167(XXE)\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306f\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 A06:2021-\u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u306f\u3001\u4ee5\u524d\u306f\u300c\u65e2\u77e5\u306e\u8106\u5f31\u6027\u306e\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528\u300d\u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u3067\u3057\u305f\u3002\u3053\u306e\u554f\u984c\u306f\u3001\u696d\u754c\u8abf\u67fb\u3067\u306f2\u4f4d\u3067\u3042\u308a\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306b\u3088\u3063\u3066\u30c8\u30c3\u30d710\u306b\u5165\u308b\u3060\u3051\u306e\u30c7\u30fc\u30bf\u3082\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306f2017\u5e74\u306e9\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30c6\u30b9\u30c8\u3084\u30ea\u30b9\u30af\u8a55\u4fa1\u306b\u82e6\u52b4\u3059\u308b\u3001\u3088\u304f\u77e5\u3089\u308c\u305f\u554f\u984c\u3067\u3059\u3002\u307e\u305f\u3001\u542b\u307e\u308c\u308bCWE\u306b\u3042\u305f\u308bCVE\u306e\u306a\u3044\u3001\u552f\u4e00\u306e\u30ab\u30c6\u30b4\u30ea\u3067\u3042\u308b\u305f\u3081\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30a4\u30c8\u3068\u30a4\u30f3\u30d1\u30af\u30c8\u306e\u91cd\u307f\u306f5.0\u3068\u3057\u3066\u30b9\u30b3\u30a2\u306b\u53cd\u6620\u3055\u308c\u3066\u3044\u307e\u3059\u3002 A07:2021-\u8b58\u5225\u3068\u8a8d\u8a3c\u306e\u5931\u6557 \u4ee5\u524d\u3001\u7b2c2\u4f4d\u3067\u300c\u8a8d\u8a3c\u306e\u4e0d\u5099\u300d\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u7248\u3067\u306f\u3001\u8b58\u5225\u306e\u5931\u6557\u306b\u95a2\u9023\u3059\u308bCWE\u3092\u3088\u308a\u591a\u304f\u542b\u3080\u610f\u5473\u5408\u3044\u306e\u30ab\u30c6\u30b4\u30ea\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306f\u4f9d\u7136\u3068\u3057\u3066\u30c8\u30c3\u30d710\u306b\u793a\u3059\u3079\u304d\u91cd\u8981\u306a\u9805\u76ee\u3067\u3059\u304c\u3001\u6a19\u6e96\u5316\u3055\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u5229\u7528\u304c\u9032\u3093\u3060\u3053\u3068\u304c\u529f\u3092\u594f\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 A08:2021-\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408 \u3053\u308c\u306f2021\u5e74\u306b\u65b0\u8a2d\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u66f4\u65b0\u3001\u91cd\u8981\u306a\u30c7\u30fc\u30bf\u3092\u3001CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u304a\u3044\u3066\u6574\u5408\u6027\u3092\u691c\u8a3c\u305b\u305a\u306b\u898b\u8fbc\u307f\u3067\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u308b\u554f\u984c\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u3044\u307e\u3059\u3002CVE/CVSS\u306e\u30c7\u30fc\u30bf\u304b\u3089\u6700\u3082\u91cd\u5927\u306a\u5f71\u97ff\u3092\u53d7\u3051\u305f\u3082\u306e\u306e1\u3064\u304c\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e10\u306eCWE\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u30022017\u5e74\u306e\u300c\u5b89\u5168\u3067\u306a\u3044\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u300d\u306f\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u4e00\u90e8\u3068\u306a\u308a\u307e\u3057\u305f\u3002 A09:2021-\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ed\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u5931\u6557 \u306f\u3001\u5f93\u6765\u306f\u300c\u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u4e0d\u8db3\u300d\u3067\u3057\u305f\u304c\u3001\u696d\u754c\u306e\u8abf\u67fb\uff08\u7b2c3\u4f4d\uff09\u304b\u3089\u8ffd\u52a0\u3055\u308c\u3001\u5f93\u6765\u306e\u7b2c10\u4f4d\u304b\u3089\u30e9\u30f3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u3088\u308a\u591a\u304f\u306e\u7a2e\u985e\u306e\u5931\u6557\u3092\u542b\u3080\u3088\u3046\u306b\u62e1\u5f35\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c6\u30b9\u30c8\u304c\u56f0\u96e3\u306a\u3082\u306e\u3067\u3042\u308a\u3001\u304b\u3064\u3001CVE/CVSS\u306e\u30c7\u30fc\u30bf\u306b\u306f\u3042\u307e\u308a\u53cd\u6620\u3055\u308c\u306a\u3044\u3082\u306e\u3067\u3059\u3002\u3068\u306f\u3044\u3048\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u5931\u6557\u304c\u8d77\u304d\u308b\u3068\u3001\u53ef\u8996\u6027\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30a2\u30e9\u30fc\u30c8\u3001\u30d5\u30a9\u30ec\u30f3\u30b8\u30c3\u30af\u306a\u3069\u306b\u76f4\u63a5\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 A10:2021-\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30fb\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30d5\u30a9\u30fc\u30b8\u30a7\u30ea \u306f\u3001\u696d\u754c\u306e\u8abf\u67fb\uff08\u7b2c1\u4f4d\uff09\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u3082\u306e\u3067\u3059\u3002\u8abf\u67fb\u30c7\u30fc\u30bf\u304b\u3089\u308f\u304b\u308b\u3053\u3068\u306f\u3001\u3088\u304f\u3042\u308b\u30c6\u30b9\u30c8\u3088\u308a\u5e83\u7bc4\u306a\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u554f\u984c\u306e\u767a\u751f\u7387\u306f\u6bd4\u8f03\u7684\u4f4e\u3044\u3082\u306e\u306e\u3001\u554f\u984c\u304c\u8d77\u304d\u305f\u5834\u5408\u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30a4\u30c8\u3068\u30a4\u30f3\u30d1\u30af\u30c8\u306f\u5e73\u5747\u4ee5\u4e0a\u306e\u3082\u306e\u3068\u306a\u308a\u5f97\u307e\u3059\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u73fe\u6642\u70b9\u3067\u30c7\u30fc\u30bf\u3068\u3057\u3066\u73fe\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u8907\u6570\u306e\u696d\u754c\u306e\u5c02\u9580\u5bb6\u306b\u3088\u308a\u91cd\u8981\u3068\u306e\u793a\u5506\u3092\u5f97\u305f\u30b7\u30ca\u30ea\u30aa\u3068\u3057\u3066\u53cd\u6620\u3057\u3066\u3044\u307e\u3059\u3002 \u65b9\u6cd5\u8ad6 \u2693\ufe0e \u4eca\u56de\u306e\u30c8\u30c3\u30d710\u306f\u3001\u3053\u308c\u307e\u3067\u4ee5\u4e0a\u306b\u30c7\u30fc\u30bf\u3092\u91cd\u8996\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3084\u307f\u304f\u3082\u306b\u30c7\u30fc\u30bf\u3092\u91cd\u8996\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u300210\u9805\u76ee\u306e\u3046\u30618\u9805\u76ee\u306f\u63d0\u4f9b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304b\u3089\u30012\u9805\u76ee\u306f\u696d\u754c\u8abf\u67fb\u304b\u3089\u9ad8\u3044\u30ec\u30d9\u30eb\u3067\u9078\u3073\u307e\u3057\u305f\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u306b\u306f\u3072\u3068\u3064\u306e\u6839\u672c\u7684\u306a\u7406\u7531\u304c\u3042\u308a\u307e\u3059\u3002\u63d0\u4f9b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3053\u3068\u306f\u3001\u904e\u53bb\u3092\u898b\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30ea\u30b5\u30fc\u30c1\u30e3\u30fc\u304c\u65b0\u3057\u3044\u8106\u5f31\u6027\u3084\u3001\u305d\u308c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u65b0\u3057\u3044\u65b9\u6cd5\u3092\u898b\u3064\u3051\u308b\u306e\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30c6\u30b9\u30c8\u3092\u30c4\u30fc\u30eb\u3084\u30d7\u30ed\u30bb\u30b9\u306b\u7d44\u307f\u8fbc\u3080\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u5f31\u70b9\u3092\u5e83\u304f\u78ba\u5b9f\u306b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\u306b\u306f\u3001\u4f55\u5e74\u3082\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u3002\u305d\u3053\u3067\u3001\u30c7\u30fc\u30bf\u3067\u306f\u308f\u304b\u3089\u306a\u3044\u3088\u3046\u306a\u672c\u8cea\u7684\u306a\u5f31\u70b9\u306f\u4f55\u304b\u3068\u3044\u3046\u3053\u3068\u306b\u3064\u3044\u3066\u306f\u3001\u696d\u754c\u306e\u7b2c\u4e00\u7dda\u3067\u6d3b\u8e8d\u3055\u308c\u3066\u3044\u308b\u65b9\u3005\u306b\u304a\u805e\u304d\u3059\u308b\u3053\u3068\u3067\u30d0\u30e9\u30f3\u30b9\u3092\u3068\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002 \u30c8\u30c3\u30d710\u3092\u7d99\u7d9a\u7684\u306b\u6210\u719f\u3055\u305b\u308b\u305f\u3081\u306b\u79c1\u305f\u3061\u304c\u63a1\u7528\u3057\u305f\u3001\u91cd\u8981\u306a\u5909\u66f4\u70b9\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002 How the categories are structured \u2693\ufe0e A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework. How the data is used for selecting categories \u2693\ufe0e In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability, Detectability (also likelihood), and Technical Impact. For 2021, we want to use data for Exploitability and Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact. In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact. With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the NVD data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE. 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and Impact scoring for the other half of the risk equation. Why not just pure statistical data? \u2693\ufe0e The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the industry survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data). Why incidence rate instead of frequency? \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page , we list the data elements and structure we are looking for and how to submit them. In the GitHub project , we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped : The number of CWEs mapped to a category by the Top 10 team. Incidence Rate : Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage : The percentage of applications tested by all organizations for a given CWE. Weighted Exploit : The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact : The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences : Total number of applications found to have the CWEs mapped to a category. Total CVEs : Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Category Relationships from 2017 \u2693\ufe0e There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities . While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT) Thank you to our sponsors \u2693\ufe0e The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"\u30db\u30fc\u30e0"},{"location":"ja/#owasp-top-10-2021","text":"OWASP \u30c8\u30c3\u30d7 10 \u306e\u6700\u65b0\u7248\u3078\u3088\u3046\u3053\u305d! OWASP \u30c8\u30c3\u30d7 10 2021\u5e74\u7248\u306f\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30c7\u30b6\u30a4\u30f3\u304c\u4e00\u65b0\u3055\u308c\u30011\u30da\u30fc\u30b8\u306e\u30a4\u30f3\u30d5\u30a9\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30a4\u30f3\u30d5\u30a9\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306f\u3001\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u304b\u3089\u5165\u624b\u3067\u304d\u3001\u5370\u5237\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4eca\u56de\u306e\u30c8\u30c3\u30d710\u306e\u4f5c\u6210\u306b\u3042\u305f\u3063\u3066\u3001\u8cb4\u91cd\u306a\u6642\u9593\u3084\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u3066\u304f\u3060\u3055\u3063\u305f\u3059\u3079\u3066\u306e\u7686\u3055\u3093\u306b\u611f\u8b1d\u3057\u307e\u3059\u3002\u7686\u69d8\u306e\u3054\u5354\u529b\u306a\u304f\u3057\u3066\u306f\u3001OWASP \u30c8\u30c3\u30d7 10 2021\u5e74\u7248\u306f\u5b58\u5728\u3057\u5f97\u307e\u305b\u3093\u3002 \u672c\u5f53\u306b\u3001\u611f\u8b1d\u3044\u305f\u3057\u307e\u3059 \u3002","title":"OWASP Top 10 2021\u306e\u7d39\u4ecb"},{"location":"ja/#202110","text":"2021\u5e74\u7248\u30c8\u30c3\u30d710\u3067\u306f\u30013\u3064\u306e\u65b0\u3057\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u30014\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u540d\u79f0\u3068\u30b9\u30b3\u30fc\u30d7\u306e\u5909\u66f4\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u7d71\u5408\u3055\u308c\u305f\u3082\u306e\u3082\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002 A01:2021-\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099 \u306f\u30015\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u300294%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u5f62\u3067\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u300c\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u6b20\u9665\u300d\u306b\u3042\u305f\u308b34\u4ef6\u306eCWE\u306f\u3001\u4ed6\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3088\u308a\u3082\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u591a\u304f\u767a\u751f\u3057\u3066\u3044\u307e\u3059\u3002 A02:2021-\u6697\u53f7\u5316\u306e\u5931\u6557 \u306f\u3001\u3072\u3068\u3064\u9806\u4f4d\u3092\u4e0a\u3052\u30662\u4f4d\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u4ee5\u524d\u306f\u3001\u300c\u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u300d\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u306f\u6839\u672c\u7684\u306a\u539f\u56e0\u3068\u3044\u3046\u3088\u308a\u5e45\u5e83\u304f\u307f\u3089\u308c\u308b\u75c7\u72b6\u3068\u8a00\u3048\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u6a5f\u5bc6\u30c7\u30fc\u30bf\u306e\u6f0f\u3048\u3044\u3084\u30b7\u30b9\u30c6\u30e0\u4fb5\u5bb3\u306b\u591a\u304f\u95a2\u9023\u3059\u308b\u3001\u6697\u53f7\u6280\u8853\u306b\u307e\u3064\u308f\u308b\u5931\u6557\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002 A03:2021-\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 \u306f\u30013\u4f4d\u306b\u4e0b\u304c\u3063\u3066\u3044\u307e\u3059\u300294%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u78ba\u8a8d\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u3042\u305f\u308b33\u306eCWE\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306e\u767a\u751f\u6570\u304c2\u756a\u76ee\u306b\u591a\u304f\u898b\u3089\u308c\u307e\u3059\u3002\u4eca\u56de\u304b\u3089\u3001\u30af\u30ed\u30b9\u30b5\u30a4\u30c8\u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0\u306f\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 A04:2021-\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08 \u306f\u30012021\u5e74\u306b\u65b0\u8a2d\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u8a2d\u8a08\u4e0a\u306e\u6b20\u9665\u306b\u95a2\u3059\u308b\u30ea\u30b9\u30af\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\u4e00\u696d\u754c\u3068\u3057\u3066\u3001\u6211\u3005\u304c\u7d14\u7c8b\u306b\u300c\u30b7\u30d5\u30c8\u30ec\u30d5\u30c8\u300d\u3059\u308b\u3053\u3068\u3092\u671b\u3080\u306e\u3067\u3042\u308c\u3070\u3001\u8105\u5a01\u30e2\u30c7\u30ea\u30f3\u30b0\u3084\u3001\u5b89\u5168\u306a\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3\u3068\u539f\u5247\u3001\u307e\u305f\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30fb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u3082\u3063\u3068\u5229\u7528\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002 A05:2021-\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u30df\u30b9 \u306f\u3001\u524d\u56de\u306e6\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e90\uff05\u306b\u306f\u4f55\u3089\u304b\u306e\u8a2d\u5b9a\u30df\u30b9\u304c\u898b\u3089\u308c\u307e\u3059\u3002\u9ad8\u5ea6\u306a\u8a2d\u5b9a\u304c\u53ef\u80fd\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3078\u306e\u79fb\u884c\u304c\u9032\u3080\u4e2d\u3067\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u9806\u4f4d\u304c\u4e0a\u304c\u3063\u305f\u3053\u3068\u306f\u5f53\u7136\u3068\u8a00\u3048\u307e\u3059\u3002\u4ee5\u524d\u306e\u3001XML\u5916\u90e8\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u53c2\u7167(XXE)\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306f\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 A06:2021-\u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u306f\u3001\u4ee5\u524d\u306f\u300c\u65e2\u77e5\u306e\u8106\u5f31\u6027\u306e\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528\u300d\u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u3067\u3057\u305f\u3002\u3053\u306e\u554f\u984c\u306f\u3001\u696d\u754c\u8abf\u67fb\u3067\u306f2\u4f4d\u3067\u3042\u308a\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306b\u3088\u3063\u3066\u30c8\u30c3\u30d710\u306b\u5165\u308b\u3060\u3051\u306e\u30c7\u30fc\u30bf\u3082\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306f2017\u5e74\u306e9\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30c6\u30b9\u30c8\u3084\u30ea\u30b9\u30af\u8a55\u4fa1\u306b\u82e6\u52b4\u3059\u308b\u3001\u3088\u304f\u77e5\u3089\u308c\u305f\u554f\u984c\u3067\u3059\u3002\u307e\u305f\u3001\u542b\u307e\u308c\u308bCWE\u306b\u3042\u305f\u308bCVE\u306e\u306a\u3044\u3001\u552f\u4e00\u306e\u30ab\u30c6\u30b4\u30ea\u3067\u3042\u308b\u305f\u3081\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30a4\u30c8\u3068\u30a4\u30f3\u30d1\u30af\u30c8\u306e\u91cd\u307f\u306f5.0\u3068\u3057\u3066\u30b9\u30b3\u30a2\u306b\u53cd\u6620\u3055\u308c\u3066\u3044\u307e\u3059\u3002 A07:2021-\u8b58\u5225\u3068\u8a8d\u8a3c\u306e\u5931\u6557 \u4ee5\u524d\u3001\u7b2c2\u4f4d\u3067\u300c\u8a8d\u8a3c\u306e\u4e0d\u5099\u300d\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u7248\u3067\u306f\u3001\u8b58\u5225\u306e\u5931\u6557\u306b\u95a2\u9023\u3059\u308bCWE\u3092\u3088\u308a\u591a\u304f\u542b\u3080\u610f\u5473\u5408\u3044\u306e\u30ab\u30c6\u30b4\u30ea\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306f\u4f9d\u7136\u3068\u3057\u3066\u30c8\u30c3\u30d710\u306b\u793a\u3059\u3079\u304d\u91cd\u8981\u306a\u9805\u76ee\u3067\u3059\u304c\u3001\u6a19\u6e96\u5316\u3055\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u5229\u7528\u304c\u9032\u3093\u3060\u3053\u3068\u304c\u529f\u3092\u594f\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 A08:2021-\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408 \u3053\u308c\u306f2021\u5e74\u306b\u65b0\u8a2d\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u66f4\u65b0\u3001\u91cd\u8981\u306a\u30c7\u30fc\u30bf\u3092\u3001CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u304a\u3044\u3066\u6574\u5408\u6027\u3092\u691c\u8a3c\u305b\u305a\u306b\u898b\u8fbc\u307f\u3067\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u308b\u554f\u984c\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u3044\u307e\u3059\u3002CVE/CVSS\u306e\u30c7\u30fc\u30bf\u304b\u3089\u6700\u3082\u91cd\u5927\u306a\u5f71\u97ff\u3092\u53d7\u3051\u305f\u3082\u306e\u306e1\u3064\u304c\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e10\u306eCWE\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u30022017\u5e74\u306e\u300c\u5b89\u5168\u3067\u306a\u3044\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u300d\u306f\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u4e00\u90e8\u3068\u306a\u308a\u307e\u3057\u305f\u3002 A09:2021-\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ed\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u5931\u6557 \u306f\u3001\u5f93\u6765\u306f\u300c\u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u4e0d\u8db3\u300d\u3067\u3057\u305f\u304c\u3001\u696d\u754c\u306e\u8abf\u67fb\uff08\u7b2c3\u4f4d\uff09\u304b\u3089\u8ffd\u52a0\u3055\u308c\u3001\u5f93\u6765\u306e\u7b2c10\u4f4d\u304b\u3089\u30e9\u30f3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u3088\u308a\u591a\u304f\u306e\u7a2e\u985e\u306e\u5931\u6557\u3092\u542b\u3080\u3088\u3046\u306b\u62e1\u5f35\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c6\u30b9\u30c8\u304c\u56f0\u96e3\u306a\u3082\u306e\u3067\u3042\u308a\u3001\u304b\u3064\u3001CVE/CVSS\u306e\u30c7\u30fc\u30bf\u306b\u306f\u3042\u307e\u308a\u53cd\u6620\u3055\u308c\u306a\u3044\u3082\u306e\u3067\u3059\u3002\u3068\u306f\u3044\u3048\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u5931\u6557\u304c\u8d77\u304d\u308b\u3068\u3001\u53ef\u8996\u6027\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30a2\u30e9\u30fc\u30c8\u3001\u30d5\u30a9\u30ec\u30f3\u30b8\u30c3\u30af\u306a\u3069\u306b\u76f4\u63a5\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 A10:2021-\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30fb\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30d5\u30a9\u30fc\u30b8\u30a7\u30ea \u306f\u3001\u696d\u754c\u306e\u8abf\u67fb\uff08\u7b2c1\u4f4d\uff09\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u3082\u306e\u3067\u3059\u3002\u8abf\u67fb\u30c7\u30fc\u30bf\u304b\u3089\u308f\u304b\u308b\u3053\u3068\u306f\u3001\u3088\u304f\u3042\u308b\u30c6\u30b9\u30c8\u3088\u308a\u5e83\u7bc4\u306a\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u554f\u984c\u306e\u767a\u751f\u7387\u306f\u6bd4\u8f03\u7684\u4f4e\u3044\u3082\u306e\u306e\u3001\u554f\u984c\u304c\u8d77\u304d\u305f\u5834\u5408\u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30a4\u30c8\u3068\u30a4\u30f3\u30d1\u30af\u30c8\u306f\u5e73\u5747\u4ee5\u4e0a\u306e\u3082\u306e\u3068\u306a\u308a\u5f97\u307e\u3059\u3002\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u73fe\u6642\u70b9\u3067\u30c7\u30fc\u30bf\u3068\u3057\u3066\u73fe\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u8907\u6570\u306e\u696d\u754c\u306e\u5c02\u9580\u5bb6\u306b\u3088\u308a\u91cd\u8981\u3068\u306e\u793a\u5506\u3092\u5f97\u305f\u30b7\u30ca\u30ea\u30aa\u3068\u3057\u3066\u53cd\u6620\u3057\u3066\u3044\u307e\u3059\u3002","title":"2021\u5e74\u7248\u30c8\u30c3\u30d710\u306e\u5909\u66f4\u70b9"},{"location":"ja/#_1","text":"\u4eca\u56de\u306e\u30c8\u30c3\u30d710\u306f\u3001\u3053\u308c\u307e\u3067\u4ee5\u4e0a\u306b\u30c7\u30fc\u30bf\u3092\u91cd\u8996\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3084\u307f\u304f\u3082\u306b\u30c7\u30fc\u30bf\u3092\u91cd\u8996\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u300210\u9805\u76ee\u306e\u3046\u30618\u9805\u76ee\u306f\u63d0\u4f9b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304b\u3089\u30012\u9805\u76ee\u306f\u696d\u754c\u8abf\u67fb\u304b\u3089\u9ad8\u3044\u30ec\u30d9\u30eb\u3067\u9078\u3073\u307e\u3057\u305f\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u306b\u306f\u3072\u3068\u3064\u306e\u6839\u672c\u7684\u306a\u7406\u7531\u304c\u3042\u308a\u307e\u3059\u3002\u63d0\u4f9b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3053\u3068\u306f\u3001\u904e\u53bb\u3092\u898b\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30ea\u30b5\u30fc\u30c1\u30e3\u30fc\u304c\u65b0\u3057\u3044\u8106\u5f31\u6027\u3084\u3001\u305d\u308c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u65b0\u3057\u3044\u65b9\u6cd5\u3092\u898b\u3064\u3051\u308b\u306e\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30c6\u30b9\u30c8\u3092\u30c4\u30fc\u30eb\u3084\u30d7\u30ed\u30bb\u30b9\u306b\u7d44\u307f\u8fbc\u3080\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u5f31\u70b9\u3092\u5e83\u304f\u78ba\u5b9f\u306b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\u306b\u306f\u3001\u4f55\u5e74\u3082\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u3002\u305d\u3053\u3067\u3001\u30c7\u30fc\u30bf\u3067\u306f\u308f\u304b\u3089\u306a\u3044\u3088\u3046\u306a\u672c\u8cea\u7684\u306a\u5f31\u70b9\u306f\u4f55\u304b\u3068\u3044\u3046\u3053\u3068\u306b\u3064\u3044\u3066\u306f\u3001\u696d\u754c\u306e\u7b2c\u4e00\u7dda\u3067\u6d3b\u8e8d\u3055\u308c\u3066\u3044\u308b\u65b9\u3005\u306b\u304a\u805e\u304d\u3059\u308b\u3053\u3068\u3067\u30d0\u30e9\u30f3\u30b9\u3092\u3068\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002 \u30c8\u30c3\u30d710\u3092\u7d99\u7d9a\u7684\u306b\u6210\u719f\u3055\u305b\u308b\u305f\u3081\u306b\u79c1\u305f\u3061\u304c\u63a1\u7528\u3057\u305f\u3001\u91cd\u8981\u306a\u5909\u66f4\u70b9\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002","title":"\u65b9\u6cd5\u8ad6"},{"location":"ja/#how-the-categories-are-structured","text":"A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework.","title":"How the categories are structured"},{"location":"ja/#how-the-data-is-used-for-selecting-categories","text":"In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability, Detectability (also likelihood), and Technical Impact. For 2021, we want to use data for Exploitability and Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact. In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact. With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the NVD data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE. 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and Impact scoring for the other half of the risk equation.","title":"How the data is used for selecting categories"},{"location":"ja/#why-not-just-pure-statistical-data","text":"The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the industry survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data).","title":"Why not just pure statistical data?"},{"location":"ja/#why-incidence-rate-instead-of-frequency","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results.","title":"Why incidence rate instead of frequency?"},{"location":"ja/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page , we list the data elements and structure we are looking for and how to submit them. In the GitHub project , we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order.","title":"What is your data collection and analysis process?"},{"location":"ja/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped : The number of CWEs mapped to a category by the Top 10 team. Incidence Rate : Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage : The percentage of applications tested by all organizations for a given CWE. Weighted Exploit : The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact : The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences : Total number of applications found to have the CWEs mapped to a category. Total CVEs : Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"ja/#category-relationships-from-2017","text":"There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities . While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks.","title":"Category Relationships from 2017"},{"location":"ja/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"ja/#thank-you-to-our-sponsors","text":"The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Thank you to our sponsors"},{"location":"ja/0x00-notice/","text":"Release \u2693\ufe0e Released 24th September 2021 Lead Authors \u2693\ufe0e Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet ) Contributors \u2693\ufe0e Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination How you can help \u2693\ufe0e At this stage, we are asking for Data scientists - please peer review our analysis Web designers - we need to make a mobile friendly version Translators - please review the English text to make sure it's translatable ASVS, Testing Guide, and Code Review Guide leadership - please use our data and help us link our documents and standards together Log issues and pull requests \u2693\ufe0e Please log any corrections or issues: https://github.com/OWASP/Top10/issues","title":"\u6ce8\u610f\u4e8b\u9805"},{"location":"ja/0x00-notice/#release","text":"Released 24th September 2021","title":"Release"},{"location":"ja/0x00-notice/#lead-authors","text":"Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet )","title":"Lead Authors"},{"location":"ja/0x00-notice/#contributors","text":"Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination","title":"Contributors"},{"location":"ja/0x00-notice/#how-you-can-help","text":"At this stage, we are asking for Data scientists - please peer review our analysis Web designers - we need to make a mobile friendly version Translators - please review the English text to make sure it's translatable ASVS, Testing Guide, and Code Review Guide leadership - please use our data and help us link our documents and standards together","title":"How you can help"},{"location":"ja/0x00-notice/#log-issues-and-pull-requests","text":"Please log any corrections or issues: https://github.com/OWASP/Top10/issues","title":"Log issues and pull requests"},{"location":"ja/A00-about-owasp/","text":"OWASP\u306b\u3064\u3044\u3066 \u2693\ufe0e Open Web Application Security Project\uff08OWASP\uff09\u306f\u3001\u7d44\u7e54\u304c\u4fe1\u983c\u3067\u304d\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3084 API \u3092\u958b\u767a\u3001\u8cfc\u5165\u3001\u7dad\u6301\u3067\u304d\u308b\u3088\u3046\u652f\u63f4\u3059\u308b\u3053\u3068\u306b\u5c02\u5ff5\u3059\u308b\u3001\u30aa\u30fc\u30d7\u30f3\u306a\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002 OWASP \u3067\u306f\u3001\u7121\u6599\u3067\u5229\u7528\u3067\u304d\u308b\u3082\u306e\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3068\u6a19\u6e96 \u6700\u5148\u7aef\u306e\u7814\u7a76 \u6a19\u6e96\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u7ba1\u7406\u3068\u30e9\u30a4\u30d6\u30e9\u30ea \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30c6\u30b9\u30c8\u3001\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u958b\u767a\u3001\u304a\u3088\u3073\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u30fb\u30ec\u30d3\u30e5\u30fc\u306b\u95a2\u3059\u308b\u3072\u3068\u305d\u308d\u3044\u306e\u6587\u732e \u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3068 \u30d3\u30c7\u30aa \u6570\u591a\u304f\u306e\u5171\u901a\u30c8\u30d4\u30c3\u30af\u306b\u95a2\u3059\u308b \u30c1\u30fc\u30c8\u30b7\u30fc\u30c8 \u30c1\u30e3\u30d7\u30bf\u30fc\u30df\u30fc\u30c6\u30a3\u30f3\u30b0 \u30a4\u30d9\u30f3\u30c8\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3001\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 \u3002 Google\u30b0\u30eb\u30fc\u30d7 \u8a73\u7d30\u306f\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044: https://www.owasp.org . \u3059\u3079\u3066\u306eOWASP\u306e\u30c4\u30fc\u30eb\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3001\u30d3\u30c7\u30aa\u3001\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u305d\u3057\u3066\u30c1\u30e3\u30d7\u30bf\u30fc\u306f\u81ea\u7531\u3067\u30aa\u30fc\u30d7\u30f3\u306a\u3082\u306e\u3067\u3042\u308a\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u6539\u5584\u3059\u308b\u4eba\u306a\u3089\u8ab0\u3067\u3082\u6d3b\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u308f\u305f\u3057\u305f\u3061\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u3001\u4eba\u3001\u30d7\u30ed\u30bb\u30b9\u3001\u304a\u3088\u3073\u6280\u8853\u306e\u554f\u984c\u3068\u3057\u3066\u3068\u3089\u3048\u308b\u3053\u3068\u3092\u63d0\u5531\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u3082\u52b9\u679c\u7684\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3078\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u305d\u308c\u3089\u306e\u9818\u57df\u306b\u304a\u3051\u308b\u6539\u5584\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3089\u3067\u3059\u3002 OWASP\u306f\u3001\u65b0\u3057\u3044\u30bf\u30a4\u30d7\u306e\u7d44\u7e54\u3067\u3059\u3002\u5546\u696d\u7684\u306a\u5727\u529b\u306b\u62d8\u675f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u3059\u308b\u504f\u308a\u306e\u306a\u3044\u3001\u5b9f\u7528\u7684\u3067\u30b3\u30b9\u30c8\u52b9\u7387\u306e\u9ad8\u3044\u60c5\u5831\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 OWASP\u306f\u3001\u5546\u7528\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6280\u8853\u3092\u3088\u304f\u7406\u89e3\u3057\u305f\u4e0a\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u306f\u8cdb\u540c\u3057\u307e\u3059\u304c\u3001OWASP\u306f\u3001\u3044\u304b\u306a\u308b\u30c6\u30af\u30ce\u30ed\u30b8\u4f01\u696d\u3068\u3082\u63d0\u643a\u3057\u307e\u305b\u3093\u3002OWASP\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u7a2e\u985e\u306e\u8cc7\u6599\u3092\u5171\u540c\u3067\u3001\u900f\u660e\u3067\u3001\u30aa\u30fc\u30d7\u30f3\u306a\u65b9\u6cd5\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002 The OWASP Foundation(\u30aa\u30ef\u30b9\u30d7\u30fb\u30d5\u30a1\u30a6\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3)\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u9577\u671f\u7684\u306a\u6210\u529f\u3092\u5b9f\u73fe\u3059\u308b\u975e\u55b6\u5229\u56e3\u4f53\u3067\u3059\u3002OWASP\u306b\u95a2\u308f\u308b\u307b\u3068\u3093\u3069\u306e\u4eba\u3059\u306a\u308f\u3061OWASP\u30dc\u30fc\u30c9\u3001\u30c1\u30e3\u30d7\u30bf\u30fc\u30ea\u30fc\u30c0\u30fc\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ea\u30fc\u30c0\u30fc\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30e1\u30f3\u30d0\u30fc\u306f\u30dc\u30e9\u30f3\u30c6\u30a3\u30a2\u3067\u3059\u3002\u79c1\u305f\u3061\u306f\u3001\u9769\u65b0\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b5\u30fc\u30c1\u3092\u3001\u91d1\u92ad\u9762\u3068\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002 \u3069\u3046\u305e\u3001\u3054\u53c2\u52a0\u304f\u3060\u3055\u3044\u3002 Copyright and License \u2693\ufe0e Copyright \u00a9 2003-2021 The OWASP&tm; Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"OWASP\u306b\u3064\u3044\u3066"},{"location":"ja/A00-about-owasp/#owasp","text":"Open Web Application Security Project\uff08OWASP\uff09\u306f\u3001\u7d44\u7e54\u304c\u4fe1\u983c\u3067\u304d\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3084 API \u3092\u958b\u767a\u3001\u8cfc\u5165\u3001\u7dad\u6301\u3067\u304d\u308b\u3088\u3046\u652f\u63f4\u3059\u308b\u3053\u3068\u306b\u5c02\u5ff5\u3059\u308b\u3001\u30aa\u30fc\u30d7\u30f3\u306a\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002 OWASP \u3067\u306f\u3001\u7121\u6599\u3067\u5229\u7528\u3067\u304d\u308b\u3082\u306e\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3068\u6a19\u6e96 \u6700\u5148\u7aef\u306e\u7814\u7a76 \u6a19\u6e96\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u7ba1\u7406\u3068\u30e9\u30a4\u30d6\u30e9\u30ea \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30c6\u30b9\u30c8\u3001\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u958b\u767a\u3001\u304a\u3088\u3073\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u30fb\u30ec\u30d3\u30e5\u30fc\u306b\u95a2\u3059\u308b\u3072\u3068\u305d\u308d\u3044\u306e\u6587\u732e \u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3068 \u30d3\u30c7\u30aa \u6570\u591a\u304f\u306e\u5171\u901a\u30c8\u30d4\u30c3\u30af\u306b\u95a2\u3059\u308b \u30c1\u30fc\u30c8\u30b7\u30fc\u30c8 \u30c1\u30e3\u30d7\u30bf\u30fc\u30df\u30fc\u30c6\u30a3\u30f3\u30b0 \u30a4\u30d9\u30f3\u30c8\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3001\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 \u3002 Google\u30b0\u30eb\u30fc\u30d7 \u8a73\u7d30\u306f\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044: https://www.owasp.org . \u3059\u3079\u3066\u306eOWASP\u306e\u30c4\u30fc\u30eb\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3001\u30d3\u30c7\u30aa\u3001\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u305d\u3057\u3066\u30c1\u30e3\u30d7\u30bf\u30fc\u306f\u81ea\u7531\u3067\u30aa\u30fc\u30d7\u30f3\u306a\u3082\u306e\u3067\u3042\u308a\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u6539\u5584\u3059\u308b\u4eba\u306a\u3089\u8ab0\u3067\u3082\u6d3b\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u308f\u305f\u3057\u305f\u3061\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u3001\u4eba\u3001\u30d7\u30ed\u30bb\u30b9\u3001\u304a\u3088\u3073\u6280\u8853\u306e\u554f\u984c\u3068\u3057\u3066\u3068\u3089\u3048\u308b\u3053\u3068\u3092\u63d0\u5531\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u3082\u52b9\u679c\u7684\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3078\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u305d\u308c\u3089\u306e\u9818\u57df\u306b\u304a\u3051\u308b\u6539\u5584\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3089\u3067\u3059\u3002 OWASP\u306f\u3001\u65b0\u3057\u3044\u30bf\u30a4\u30d7\u306e\u7d44\u7e54\u3067\u3059\u3002\u5546\u696d\u7684\u306a\u5727\u529b\u306b\u62d8\u675f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u3059\u308b\u504f\u308a\u306e\u306a\u3044\u3001\u5b9f\u7528\u7684\u3067\u30b3\u30b9\u30c8\u52b9\u7387\u306e\u9ad8\u3044\u60c5\u5831\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 OWASP\u306f\u3001\u5546\u7528\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6280\u8853\u3092\u3088\u304f\u7406\u89e3\u3057\u305f\u4e0a\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u306f\u8cdb\u540c\u3057\u307e\u3059\u304c\u3001OWASP\u306f\u3001\u3044\u304b\u306a\u308b\u30c6\u30af\u30ce\u30ed\u30b8\u4f01\u696d\u3068\u3082\u63d0\u643a\u3057\u307e\u305b\u3093\u3002OWASP\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u7a2e\u985e\u306e\u8cc7\u6599\u3092\u5171\u540c\u3067\u3001\u900f\u660e\u3067\u3001\u30aa\u30fc\u30d7\u30f3\u306a\u65b9\u6cd5\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002 The OWASP Foundation(\u30aa\u30ef\u30b9\u30d7\u30fb\u30d5\u30a1\u30a6\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3)\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u9577\u671f\u7684\u306a\u6210\u529f\u3092\u5b9f\u73fe\u3059\u308b\u975e\u55b6\u5229\u56e3\u4f53\u3067\u3059\u3002OWASP\u306b\u95a2\u308f\u308b\u307b\u3068\u3093\u3069\u306e\u4eba\u3059\u306a\u308f\u3061OWASP\u30dc\u30fc\u30c9\u3001\u30c1\u30e3\u30d7\u30bf\u30fc\u30ea\u30fc\u30c0\u30fc\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ea\u30fc\u30c0\u30fc\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30e1\u30f3\u30d0\u30fc\u306f\u30dc\u30e9\u30f3\u30c6\u30a3\u30a2\u3067\u3059\u3002\u79c1\u305f\u3061\u306f\u3001\u9769\u65b0\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b5\u30fc\u30c1\u3092\u3001\u91d1\u92ad\u9762\u3068\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002 \u3069\u3046\u305e\u3001\u3054\u53c2\u52a0\u304f\u3060\u3055\u3044\u3002","title":"OWASP\u306b\u3064\u3044\u3066"},{"location":"ja/A00-about-owasp/#copyright-and-license","text":"Copyright \u00a9 2003-2021 The OWASP&tm; Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"Copyright and License"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/","text":"OWASP Top 10 \u3092\u4f7f\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u59cb\u3081\u308b\u306b\u306f \u2693\ufe0e \u3053\u308c\u307e\u3067\u306f OWASP \u30c8\u30c3\u30d7 10 \u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u57fa\u790e\u3068\u306a\u308b\u3088\u3046\u306b\u306f\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u3057\u304b\u3057\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u9053\u3092\u6b69\u307f\u59cb\u3081\u305f\u3070\u304b\u308a\u306e\u591a\u304f\u306e\u7d44\u7e54\u306b\u3068\u3063\u3066\u306f\u3001\u57fa\u790e\u3068\u306a\u308b\u7269\u304c\u4e0d\u53ef\u6b20\u3067\u3059\u3002 OWASP \u30c8\u30c3\u30d7 10 2021 \u306f\u3001\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8\u306a\u3069\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3068\u3057\u3066\u306f\u826f\u3044\u30b9\u30bf\u30fc\u30c8\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3060\u3051\u3067\u306f\u5341\u5206\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30b9\u30c6\u30fc\u30b81. \u81ea\u793e\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ae\u30e3\u30c3\u30d7\u3068\u76ee\u6a19\u3092\u7279\u5b9a\u3059\u308b \u2693\ufe0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u591a\u304f\u306f\u3001\u5730\u9053\u306b\u4e01\u5be7\u306b\u9032\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4e00\u6c17\u306b\u9032\u3081\u3089\u308c\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u53d6\u308a\u7d44\u307f\u306f\u3001\u5931\u6557\u3059\u308b\u904b\u547d\u306b\u3042\u308a\u307e\u3059\u3002 \u79c1\u305f\u3061\u306f\u3001CISO \u3068 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30ea\u30fc\u30c0\u30fc\u306b\u3001 \u30bd\u30d5\u30c8\u30a6\u30a8\u30a2\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fdd\u8a3c\u6210\u719f\u5ea6\u30e2\u30c7\u30eb (OWASP SAMM) \u3092\u4f7f\u7528\u3057\u3066\u30011\uff5e3 \u5e74\u306e\u671f\u9593\u3067\u5f31\u70b9\u3068\u6539\u5584\u70b9\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3092\u5f37\u304f\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 \u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u73fe\u5728\u306e\u72b6\u6cc1\u3092\u8a55\u4fa1\u3057\u3001\u3059\u3050\u306b\u89e3\u6c7a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u30ac\u30d0\u30ca\u30f3\u30b9\u3001\u8a2d\u8a08\u3001\u5b9f\u88c5\u3001\u691c\u8a3c\u3001\u304a\u3088\u3073\u904b\u7528\u306b\u304a\u3051\u308b\u30ae\u30e3\u30c3\u30d7\u3068\u3001\u5f8c\u56de\u3057\u306b\u3057\u3066\u3082\u3088\u3044\u30ae\u30e3\u30c3\u30d7\u3092\u7279\u5b9a\u3057\u300115 \u306e OWASP SAMM \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30d7\u30e9\u30af \u30c6\u30a3\u30b9\u306e\u5b9f\u65bd\u307e\u305f\u306f\u6539\u5584\u3092\u512a\u5148\u3059\u308b\u3053\u3068\u3067\u3059\u3002 OWASP SAMM \u306f\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u4fdd\u8a3c\u306e\u53d6\u308a\u7d44\u307f\u3092\u69cb\u7bc9\u3057\u3001\u6210\u719f\u5ea6\u3092\u6e2c\u5b9a\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002 \u30b9\u30c6\u30fc\u30b8 2. \u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u30bb\u30ad\u30e5\u30a2\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306e\u8a08\u753b \u2693\ufe0e \u5f93\u6765\u306f\u3044\u308f\u3086\u308b\u300c\u30e6\u30cb\u30b3\u30fc\u30f3\u4f01\u696d\u300d\u306e\u3082\u306e\u3067\u3057\u305f\u304c\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u5e74\u3005\u5897\u52a0\u3059\u308b\u958b\u767a\u30c1\u30fc\u30e0\u306e\u901f\u5ea6\u306b\u5408\u308f\u305b\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30bd\u30fc\u30b9\u3092\u62e1\u5f35\u3057\u3001\u6700\u5927\u306e\u52b9\u679c\u3092\u4e0a\u3052\u308b\u305f\u3081\u306e\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u300c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u3001\u6700\u3082\u5b89\u5168\u306a\u65b9\u6cd5\u3067\u3082\u3042\u308b\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u958b\u767a\u30c1\u30fc\u30e0\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30fc\u30e0\u306e\u9593\u306b\u6df1\u3044\u30d1\u30fc\u30c8\u30ca\u30fc\u30b7\u30c3\u30d7\u306e\u6587\u5316\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u3067\u304d\u308c\u3070\u4e21\u8005\u304c\u540c\u3058\u30c1\u30fc\u30e0\u3067\u3042\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3068\u3055\u308c\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u7d99\u7d9a\u7684\u306a\u6539\u5584\u3001\u6e2c\u5b9a\u3001\u691c\u51fa\u3001\u304a\u3088\u3073\u5b89\u5168\u3067\u306a\u3044\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4ea4\u63db\u3092\u76ee\u7684\u3068\u3057\u3066\u304a\u308a\u3001\u4f01\u696d\u5168\u4f53\u3067\u5b89\u5168\u306a\u4ee3\u66ff\u54c1\u3068\u3057\u3066\u305d\u306e\u307e\u307e\u7f6e\u63db\u3048\u53ef\u80fd\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u63a1\u7528\u3059\u308b\u3053\u3068\u3067\u6539\u5584\u3067\u304d\u308b\u7b87\u6240\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u65e2\u5b58\u306e\u958b\u767a\u30c4\u30fc\u30eb\u304c\u5b89\u5168\u3067\u306f\u306a\u3044\u30d3\u30eb\u30c9\u3092\u5831\u544a\u3057\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u5b89\u5168\u3067\u306f\u306a\u3044\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u81ea\u5df1\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u591a\u304f\u306e\u3053\u3068\u3092\u5438\u53ce\u3059\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u6642\u9593\u3092\u304b\u3051\u3066\u6bb5\u968e\u7684\u306b\u69cb\u7bc9\u3057\u3066\u3044\u304f\u3079\u304d\u3067\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306f\u3001\u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u30a2\u30b8\u30e3\u30a4\u30eb\u30bb\u30ad\u30e5\u30a2\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u306f\u3058\u3081\u3068\u3059\u308b\u4ed6\u306e\u5f62\u614b\u3082\u3042\u308a\u307e\u3059\u3002 \u3059\u3079\u3066\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u624b\u6cd5\u304c\u3059\u3079\u3066\u306e\u30d3\u30b8\u30cd\u30b9\u306b\u9069\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30b9\u30c6\u30fc\u30b8 3. \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u958b\u767a\u30c1\u30fc\u30e0\u3067\u5b9f\u884c\u3059\u308b \u2693\ufe0e \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u95a2\u9023\u3059\u308b\u958b\u767a\u30c1\u30fc\u30e0\u3068\u904b\u7528\u30c1\u30fc\u30e0\u306e\u540c\u610f\u3068\u76f4\u63a5\u306e\u95a2\u4e0e\u3092\u5f97\u3066\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u30d3\u30b8\u30cd\u30b9\u3068\u6226\u7565\u7684\u306b\u9023\u643a\u3057\u3001\u3088\u308a\u5b89\u5168\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3088\u308a\u65e9\u304f\u63d0\u4f9b\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u304a\u3051\u308b\u958b\u767a\u306f\u3001\u6614\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3054\u3068\u306e\u5fdc\u6025\u51e6\u7f6e\u3067\u306f\u306a\u304f\u3001\u4f01\u696d\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3092\u5bfe\u8c61\u3068\u3057\u305f\u5168\u4f53\u7684\u306a\u53d6\u308a\u7d44\u307f\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u30b9\u30c6\u30fc\u30b8 4. \u4eca\u5f8c\u767a\u58f2\u3055\u308c\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3084\u65e2\u5b58\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u3079\u3066\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u79fb\u884c\u3059\u308b \u2693\ufe0e \u958b\u767a\u6642\u306b\u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u691c\u51fa\u30c4\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u3053\u308c\u3089\u306e\u8981\u7d20\u3092\u76f4\u63a5\u63a1\u7528\u3057\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306e\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u3042\u308b\u5074\u9762\u304c\u63a1\u7528\u3055\u308c\u305f\u3089\u3001\u7d44\u7e54\u306f\u3001\u7981\u6b62\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u3084\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3092\u691c\u67fb\u3057\u3001\u30d3\u30eb\u30c9\u3084\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3092\u8b66\u544a\u307e\u305f\u306f\u62d2\u5426\u3059\u308b\u7d99\u7d9a\u7684\u7d71\u5408\u30c1\u30a7\u30c3\u30af\u3092\u5b9f\u65bd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u5b89\u5168\u3067\u306a\u3044\u9078\u629e\u80a2\u304c\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u30b3\u30fc\u30c9\u306b\u5165\u308a\u8fbc\u3080\u3053\u3068\u3092\u9632\u304e\u3001\u6280\u8853\u7684\u8ca0\u50b5\u3084\u6b20\u9665\u306e\u3042\u308b\u5b89\u5168\u3067\u306a\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5b89\u5168\u306a\u4ee3\u66ff\u6848\u306b\u30ea\u30f3\u30af\u3057\u3066\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u3059\u3050\u306b\u6b63\u3057\u3044\u7b54\u3048\u3092\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u8b66\u544a\u3092\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u958b\u767a\u30c1\u30fc\u30e0\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u3001\u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u8fc5\u901f\u306b\u63a1\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b9\u30c6\u30fc\u30b8 5. \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u304c OWASP \u30c8\u30c3\u30d7 10 \u3067\u767a\u898b\u3055\u308c\u305f\u554f\u984c\u3092\u8efd\u6e1b\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b \u2693\ufe0e \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u3001OWASP \u30c8\u30c3\u30d7 10 \u306e\u91cd\u8981\u306a\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u8106\u5f31\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u81ea\u52d5\u7684\u306b\u691c\u51fa\u307e\u305f\u306f\u4fee\u6b63\u3059\u308b\u65b9\u6cd5\u3084\u3001\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306e\u9759\u7684\u30b3\u30fc\u30c9\u5206\u6790 IDE \u30d7\u30e9\u30b0\u30a4\u30f3\u3001\u3055\u3089\u306b\u306f\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u5b89\u5168\u3067\u3042\u308b\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u5b89\u5168\u306a\u305d\u306e\u307e\u307e\u7f6e\u63db\u3048\u53ef\u80fd\u306a\u4ee3\u66ff\u54c1\u304c\u30c1\u30fc\u30e0\u306b\u63d0\u4f9b\u3055\u308c\u308c\u3070\u3055\u308c\u308b\u307b\u3069\u826f\u3044\u3067\u3057\u3087\u3046\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30fc\u30e0\u306e\u91cd\u8981\u306a\u4efb\u52d9\u306f\u3001\u3053\u308c\u3089\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u7d99\u7d9a\u7684\u306b\u8a55\u4fa1\u3057\u3001\u6539\u5584\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u6539\u5584\u3055\u308c\u305f\u3089\u3001\u305d\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u6d88\u8cbb\u8005\u3068\u306e\u4f55\u3089\u304b\u306e\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u30c1\u30e3\u30cd\u30eb\u3067\u3001\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u53ef\u80fd\u306a\u9650\u308a\u81ea\u52d5\u7684\u306b\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u5c11\u306a\u304f\u3068\u3082\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u306a\u3069\u3067\u5f37\u8abf\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 \u30b9\u30c6\u30fc\u30b8 6. \u81ea\u793e\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3059\u308b \u2693\ufe0e OWASP \u30c8\u30c3\u30d7 10 \u3060\u3051\u3067\u7d42\u308f\u3089\u305b\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u305d\u308c\u306f\u300110 \u306e\u30ea\u30b9\u30af\u30ab\u30c6\u30b4\u30ea\u30fc\u3057\u304b\u30ab\u30d0\u30fc\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002 \u79c1\u305f\u3061\u306f\u3001\u7d44\u7e54\u304c OWASP \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u691c\u8a3c\u6a19\u6e96 (OWASP ASVS) \u3092\u63a1\u7528\u3057\u3001\u958b\u767a\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30af\u30ec\u30d9\u30eb\u306b\u5fdc\u3058\u3066\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u30ec\u30d9\u30eb 1\u30012\u30013 \u306e\u30c6\u30b9\u30c8\u3092\u6bb5\u968e\u7684\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3053\u3068\u3092\u5f37\u304f\u63a8\u5968\u3057\u307e\u3059\u3002 \u305d\u306e\u5148\u3078 \u2693\ufe0e \u512a\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u6700\u4f4e\u9650\u306e\u3053\u3068\u3057\u304b\u3057\u307e\u305b\u3093\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8106\u5f31\u6027\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u8ab0\u3082\u304c\u7d99\u7d9a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u5b8c\u5168\u6027 \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30af\u30e9\u30a6\u30c9\u3001\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3001\u8105\u5a01\u30e2\u30c7\u30eb\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6982\u5ff5\u3092\u542b\u3093\u3067\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u81ea\u52d5\u5316\u3068\u30b9\u30b1\u30fc\u30eb \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u8907\u96d1\u306a\u4fb5\u5165\u30c6\u30b9\u30c8\u306e\u624b\u9806\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u76f4\u63a5\u5229\u7528\u3067\u304d\u308b\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3084\u7d71\u5408\u30c6\u30b9\u30c8\u306e\u69cb\u7bc9\u306b\u304a\u3051\u308b\u958b\u767a\u30c1\u30fc\u30e0\u306e\u652f\u63f4\u306a\u3069\u3001\u6210\u679c\u7269\u3092\u53ef\u80fd\u306a\u9650\u308a\u81ea\u52d5\u5316\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002 \u6587\u5316 \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u8107\u5f79\u3067\u306f\u306a\u304f\u958b\u767a\u30c1\u30fc\u30e0\u306e\u4e00\u54e1\u3068\u306a\u308b\u3053\u3068\u3067\u3001\u5b89\u5168\u3067\u306a\u3044\u8a2d\u8a08\u3068\u3001\u65e2\u5b58\u30b3\u30fc\u30c9\u306e\u6280\u8853\u7684\u8ca0\u50b5\u3092\u89e3\u6d88\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002 \u958b\u767a\u30c1\u30fc\u30e0\u3092 \"\u6211\u3005 \"\u3068 \"\u5f7c\u3089 \"\u3068\u3057\u3066\u898b\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30fc\u30e0\u306f\u3001\u5931\u6557\u3059\u308b\u904b\u547d\u306b\u3042\u308a\u307e\u3059\u3002 \u7d99\u7d9a\u7684\u6539\u5584 \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u5e38\u306b\u5411\u4e0a\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002 \u6a5f\u80fd\u3057\u3066\u3044\u306a\u3044\u3082\u306e\u304c\u3042\u308c\u3070\u3001\u305d\u308c\u3092\u3084\u3081\u307e\u3059\u3002\u4f55\u304b\u304c\u4e0d\u4fbf\u3067\u3042\u3063\u305f\u308a\u3001\u62e1\u5f35\u6027\u304c\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306b\u52aa\u529b\u3057\u307e\u3059\u3002 \u958b\u767a\u30c1\u30fc\u30e0\u304c\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3082\u306e\u3067\u3001\u5f71\u97ff\u304c\u306a\u3044\u3001\u307e\u305f\u306f\u9650\u5b9a\u7684\u306a\u3082\u306e\u3067\u3042\u308c\u3070\u3001\u4f55\u304b\u9055\u3046\u3053\u3068\u3092\u3057\u307e\u3059\u3002 1970\u5e74\u4ee3\u306b\u30c7\u30b9\u30af\u30c1\u30a7\u30c3\u30af\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3044\u305f\u304b\u3089\u3068\u3044\u3063\u3066\u3001\u305d\u308c\u304c\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u3060\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\u6e2c\u5b9a\u3057\u3001\u8a55\u4fa1\u3057\u3001\u305d\u3057\u3066\u69cb\u7bc9\u307e\u305f\u306f\u6539\u5584\u3057\u3066\u3044\u304d\u307e\u3059\u3002 How to start an AppSec Program with the OWASP Top 10 \u2693\ufe0e Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient. Stage 1. Identify the gaps and goals of your appsec program \u2693\ufe0e Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts. Stage 2. Plan for a paved road secure development lifecycle \u2693\ufe0e Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business. Stage 3. Implement the paved road with your development teams \u2693\ufe0e Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days. Stage 4. Migrate all upcoming and existing applications to the paved road \u2693\ufe0e Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly. Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10 \u2693\ufe0e Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better start using a library that is known safe against injection. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar. Stage 6. Build your program into a mature AppSec program \u2693\ufe0e You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level. Going beyond \u2693\ufe0e All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"OWASP Top 10 \u3092\u4f7f\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u59cb\u3081\u308b\u306b\u306f"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#owasp-top-10","text":"\u3053\u308c\u307e\u3067\u306f OWASP \u30c8\u30c3\u30d7 10 \u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u57fa\u790e\u3068\u306a\u308b\u3088\u3046\u306b\u306f\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u3057\u304b\u3057\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u9053\u3092\u6b69\u307f\u59cb\u3081\u305f\u3070\u304b\u308a\u306e\u591a\u304f\u306e\u7d44\u7e54\u306b\u3068\u3063\u3066\u306f\u3001\u57fa\u790e\u3068\u306a\u308b\u7269\u304c\u4e0d\u53ef\u6b20\u3067\u3059\u3002 OWASP \u30c8\u30c3\u30d7 10 2021 \u306f\u3001\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8\u306a\u3069\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3068\u3057\u3066\u306f\u826f\u3044\u30b9\u30bf\u30fc\u30c8\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3060\u3051\u3067\u306f\u5341\u5206\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"OWASP Top 10 \u3092\u4f7f\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u59cb\u3081\u308b\u306b\u306f"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#1","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u591a\u304f\u306f\u3001\u5730\u9053\u306b\u4e01\u5be7\u306b\u9032\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4e00\u6c17\u306b\u9032\u3081\u3089\u308c\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u53d6\u308a\u7d44\u307f\u306f\u3001\u5931\u6557\u3059\u308b\u904b\u547d\u306b\u3042\u308a\u307e\u3059\u3002 \u79c1\u305f\u3061\u306f\u3001CISO \u3068 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30ea\u30fc\u30c0\u30fc\u306b\u3001 \u30bd\u30d5\u30c8\u30a6\u30a8\u30a2\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fdd\u8a3c\u6210\u719f\u5ea6\u30e2\u30c7\u30eb (OWASP SAMM) \u3092\u4f7f\u7528\u3057\u3066\u30011\uff5e3 \u5e74\u306e\u671f\u9593\u3067\u5f31\u70b9\u3068\u6539\u5584\u70b9\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3092\u5f37\u304f\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 \u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u73fe\u5728\u306e\u72b6\u6cc1\u3092\u8a55\u4fa1\u3057\u3001\u3059\u3050\u306b\u89e3\u6c7a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u30ac\u30d0\u30ca\u30f3\u30b9\u3001\u8a2d\u8a08\u3001\u5b9f\u88c5\u3001\u691c\u8a3c\u3001\u304a\u3088\u3073\u904b\u7528\u306b\u304a\u3051\u308b\u30ae\u30e3\u30c3\u30d7\u3068\u3001\u5f8c\u56de\u3057\u306b\u3057\u3066\u3082\u3088\u3044\u30ae\u30e3\u30c3\u30d7\u3092\u7279\u5b9a\u3057\u300115 \u306e OWASP SAMM \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30d7\u30e9\u30af \u30c6\u30a3\u30b9\u306e\u5b9f\u65bd\u307e\u305f\u306f\u6539\u5584\u3092\u512a\u5148\u3059\u308b\u3053\u3068\u3067\u3059\u3002 OWASP SAMM \u306f\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u4fdd\u8a3c\u306e\u53d6\u308a\u7d44\u307f\u3092\u69cb\u7bc9\u3057\u3001\u6210\u719f\u5ea6\u3092\u6e2c\u5b9a\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002","title":"\u30b9\u30c6\u30fc\u30b81. \u81ea\u793e\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ae\u30e3\u30c3\u30d7\u3068\u76ee\u6a19\u3092\u7279\u5b9a\u3059\u308b"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#2","text":"\u5f93\u6765\u306f\u3044\u308f\u3086\u308b\u300c\u30e6\u30cb\u30b3\u30fc\u30f3\u4f01\u696d\u300d\u306e\u3082\u306e\u3067\u3057\u305f\u304c\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u5e74\u3005\u5897\u52a0\u3059\u308b\u958b\u767a\u30c1\u30fc\u30e0\u306e\u901f\u5ea6\u306b\u5408\u308f\u305b\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30bd\u30fc\u30b9\u3092\u62e1\u5f35\u3057\u3001\u6700\u5927\u306e\u52b9\u679c\u3092\u4e0a\u3052\u308b\u305f\u3081\u306e\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u300c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u3001\u6700\u3082\u5b89\u5168\u306a\u65b9\u6cd5\u3067\u3082\u3042\u308b\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u958b\u767a\u30c1\u30fc\u30e0\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30fc\u30e0\u306e\u9593\u306b\u6df1\u3044\u30d1\u30fc\u30c8\u30ca\u30fc\u30b7\u30c3\u30d7\u306e\u6587\u5316\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u3067\u304d\u308c\u3070\u4e21\u8005\u304c\u540c\u3058\u30c1\u30fc\u30e0\u3067\u3042\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3068\u3055\u308c\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u7d99\u7d9a\u7684\u306a\u6539\u5584\u3001\u6e2c\u5b9a\u3001\u691c\u51fa\u3001\u304a\u3088\u3073\u5b89\u5168\u3067\u306a\u3044\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4ea4\u63db\u3092\u76ee\u7684\u3068\u3057\u3066\u304a\u308a\u3001\u4f01\u696d\u5168\u4f53\u3067\u5b89\u5168\u306a\u4ee3\u66ff\u54c1\u3068\u3057\u3066\u305d\u306e\u307e\u307e\u7f6e\u63db\u3048\u53ef\u80fd\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u63a1\u7528\u3059\u308b\u3053\u3068\u3067\u6539\u5584\u3067\u304d\u308b\u7b87\u6240\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u65e2\u5b58\u306e\u958b\u767a\u30c4\u30fc\u30eb\u304c\u5b89\u5168\u3067\u306f\u306a\u3044\u30d3\u30eb\u30c9\u3092\u5831\u544a\u3057\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u5b89\u5168\u3067\u306f\u306a\u3044\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u81ea\u5df1\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u591a\u304f\u306e\u3053\u3068\u3092\u5438\u53ce\u3059\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u6642\u9593\u3092\u304b\u3051\u3066\u6bb5\u968e\u7684\u306b\u69cb\u7bc9\u3057\u3066\u3044\u304f\u3079\u304d\u3067\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306f\u3001\u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u30a2\u30b8\u30e3\u30a4\u30eb\u30bb\u30ad\u30e5\u30a2\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u306f\u3058\u3081\u3068\u3059\u308b\u4ed6\u306e\u5f62\u614b\u3082\u3042\u308a\u307e\u3059\u3002 \u3059\u3079\u3066\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u624b\u6cd5\u304c\u3059\u3079\u3066\u306e\u30d3\u30b8\u30cd\u30b9\u306b\u9069\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u30b9\u30c6\u30fc\u30b8 2. \u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u30bb\u30ad\u30e5\u30a2\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306e\u8a08\u753b"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#3","text":"\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u95a2\u9023\u3059\u308b\u958b\u767a\u30c1\u30fc\u30e0\u3068\u904b\u7528\u30c1\u30fc\u30e0\u306e\u540c\u610f\u3068\u76f4\u63a5\u306e\u95a2\u4e0e\u3092\u5f97\u3066\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u30d3\u30b8\u30cd\u30b9\u3068\u6226\u7565\u7684\u306b\u9023\u643a\u3057\u3001\u3088\u308a\u5b89\u5168\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3088\u308a\u65e9\u304f\u63d0\u4f9b\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u304a\u3051\u308b\u958b\u767a\u306f\u3001\u6614\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3054\u3068\u306e\u5fdc\u6025\u51e6\u7f6e\u3067\u306f\u306a\u304f\u3001\u4f01\u696d\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3092\u5bfe\u8c61\u3068\u3057\u305f\u5168\u4f53\u7684\u306a\u53d6\u308a\u7d44\u307f\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"\u30b9\u30c6\u30fc\u30b8 3. \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u958b\u767a\u30c1\u30fc\u30e0\u3067\u5b9f\u884c\u3059\u308b"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#4","text":"\u958b\u767a\u6642\u306b\u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u691c\u51fa\u30c4\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u3053\u308c\u3089\u306e\u8981\u7d20\u3092\u76f4\u63a5\u63a1\u7528\u3057\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306e\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002 \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u3042\u308b\u5074\u9762\u304c\u63a1\u7528\u3055\u308c\u305f\u3089\u3001\u7d44\u7e54\u306f\u3001\u7981\u6b62\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u3084\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3092\u691c\u67fb\u3057\u3001\u30d3\u30eb\u30c9\u3084\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3092\u8b66\u544a\u307e\u305f\u306f\u62d2\u5426\u3059\u308b\u7d99\u7d9a\u7684\u7d71\u5408\u30c1\u30a7\u30c3\u30af\u3092\u5b9f\u65bd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u5b89\u5168\u3067\u306a\u3044\u9078\u629e\u80a2\u304c\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u30b3\u30fc\u30c9\u306b\u5165\u308a\u8fbc\u3080\u3053\u3068\u3092\u9632\u304e\u3001\u6280\u8853\u7684\u8ca0\u50b5\u3084\u6b20\u9665\u306e\u3042\u308b\u5b89\u5168\u3067\u306a\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5b89\u5168\u306a\u4ee3\u66ff\u6848\u306b\u30ea\u30f3\u30af\u3057\u3066\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u3059\u3050\u306b\u6b63\u3057\u3044\u7b54\u3048\u3092\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u8b66\u544a\u3092\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u958b\u767a\u30c1\u30fc\u30e0\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u3001\u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u8fc5\u901f\u306b\u63a1\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30b9\u30c6\u30fc\u30b8 4. \u4eca\u5f8c\u767a\u58f2\u3055\u308c\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3084\u65e2\u5b58\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u3079\u3066\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u79fb\u884c\u3059\u308b"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#5-owasp-10","text":"\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u3001OWASP \u30c8\u30c3\u30d7 10 \u306e\u91cd\u8981\u306a\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u8106\u5f31\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u81ea\u52d5\u7684\u306b\u691c\u51fa\u307e\u305f\u306f\u4fee\u6b63\u3059\u308b\u65b9\u6cd5\u3084\u3001\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306e\u9759\u7684\u30b3\u30fc\u30c9\u5206\u6790 IDE \u30d7\u30e9\u30b0\u30a4\u30f3\u3001\u3055\u3089\u306b\u306f\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u5b89\u5168\u3067\u3042\u308b\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u5b89\u5168\u306a\u305d\u306e\u307e\u307e\u7f6e\u63db\u3048\u53ef\u80fd\u306a\u4ee3\u66ff\u54c1\u304c\u30c1\u30fc\u30e0\u306b\u63d0\u4f9b\u3055\u308c\u308c\u3070\u3055\u308c\u308b\u307b\u3069\u826f\u3044\u3067\u3057\u3087\u3046\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30fc\u30e0\u306e\u91cd\u8981\u306a\u4efb\u52d9\u306f\u3001\u3053\u308c\u3089\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u7d99\u7d9a\u7684\u306b\u8a55\u4fa1\u3057\u3001\u6539\u5584\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u6539\u5584\u3055\u308c\u305f\u3089\u3001\u305d\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u6d88\u8cbb\u8005\u3068\u306e\u4f55\u3089\u304b\u306e\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u30c1\u30e3\u30cd\u30eb\u3067\u3001\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u53ef\u80fd\u306a\u9650\u308a\u81ea\u52d5\u7684\u306b\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u5c11\u306a\u304f\u3068\u3082\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u306a\u3069\u3067\u5f37\u8abf\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002","title":"\u30b9\u30c6\u30fc\u30b8 5. \u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30bb\u30d7\u30c8\u304c OWASP \u30c8\u30c3\u30d7 10 \u3067\u767a\u898b\u3055\u308c\u305f\u554f\u984c\u3092\u8efd\u6e1b\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#6","text":"OWASP \u30c8\u30c3\u30d7 10 \u3060\u3051\u3067\u7d42\u308f\u3089\u305b\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u305d\u308c\u306f\u300110 \u306e\u30ea\u30b9\u30af\u30ab\u30c6\u30b4\u30ea\u30fc\u3057\u304b\u30ab\u30d0\u30fc\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002 \u79c1\u305f\u3061\u306f\u3001\u7d44\u7e54\u304c OWASP \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u691c\u8a3c\u6a19\u6e96 (OWASP ASVS) \u3092\u63a1\u7528\u3057\u3001\u958b\u767a\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30af\u30ec\u30d9\u30eb\u306b\u5fdc\u3058\u3066\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u30ec\u30d9\u30eb 1\u30012\u30013 \u306e\u30c6\u30b9\u30c8\u3092\u6bb5\u968e\u7684\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3053\u3068\u3092\u5f37\u304f\u63a8\u5968\u3057\u307e\u3059\u3002","title":"\u30b9\u30c6\u30fc\u30b8 6. \u81ea\u793e\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3059\u308b"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#_1","text":"\u512a\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u6700\u4f4e\u9650\u306e\u3053\u3068\u3057\u304b\u3057\u307e\u305b\u3093\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8106\u5f31\u6027\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u8ab0\u3082\u304c\u7d99\u7d9a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u5b8c\u5168\u6027 \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30af\u30e9\u30a6\u30c9\u3001\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3001\u8105\u5a01\u30e2\u30c7\u30eb\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6982\u5ff5\u3092\u542b\u3093\u3067\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u81ea\u52d5\u5316\u3068\u30b9\u30b1\u30fc\u30eb \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u8907\u96d1\u306a\u4fb5\u5165\u30c6\u30b9\u30c8\u306e\u624b\u9806\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u76f4\u63a5\u5229\u7528\u3067\u304d\u308b\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3084\u7d71\u5408\u30c6\u30b9\u30c8\u306e\u69cb\u7bc9\u306b\u304a\u3051\u308b\u958b\u767a\u30c1\u30fc\u30e0\u306e\u652f\u63f4\u306a\u3069\u3001\u6210\u679c\u7269\u3092\u53ef\u80fd\u306a\u9650\u308a\u81ea\u52d5\u5316\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002 \u6587\u5316 \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u8107\u5f79\u3067\u306f\u306a\u304f\u958b\u767a\u30c1\u30fc\u30e0\u306e\u4e00\u54e1\u3068\u306a\u308b\u3053\u3068\u3067\u3001\u5b89\u5168\u3067\u306a\u3044\u8a2d\u8a08\u3068\u3001\u65e2\u5b58\u30b3\u30fc\u30c9\u306e\u6280\u8853\u7684\u8ca0\u50b5\u3092\u89e3\u6d88\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002 \u958b\u767a\u30c1\u30fc\u30e0\u3092 \"\u6211\u3005 \"\u3068 \"\u5f7c\u3089 \"\u3068\u3057\u3066\u898b\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30fc\u30e0\u306f\u3001\u5931\u6557\u3059\u308b\u904b\u547d\u306b\u3042\u308a\u307e\u3059\u3002 \u7d99\u7d9a\u7684\u6539\u5584 \u6210\u719f\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u5e38\u306b\u5411\u4e0a\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002 \u6a5f\u80fd\u3057\u3066\u3044\u306a\u3044\u3082\u306e\u304c\u3042\u308c\u3070\u3001\u305d\u308c\u3092\u3084\u3081\u307e\u3059\u3002\u4f55\u304b\u304c\u4e0d\u4fbf\u3067\u3042\u3063\u305f\u308a\u3001\u62e1\u5f35\u6027\u304c\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306b\u52aa\u529b\u3057\u307e\u3059\u3002 \u958b\u767a\u30c1\u30fc\u30e0\u304c\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3082\u306e\u3067\u3001\u5f71\u97ff\u304c\u306a\u3044\u3001\u307e\u305f\u306f\u9650\u5b9a\u7684\u306a\u3082\u306e\u3067\u3042\u308c\u3070\u3001\u4f55\u304b\u9055\u3046\u3053\u3068\u3092\u3057\u307e\u3059\u3002 1970\u5e74\u4ee3\u306b\u30c7\u30b9\u30af\u30c1\u30a7\u30c3\u30af\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3044\u305f\u304b\u3089\u3068\u3044\u3063\u3066\u3001\u305d\u308c\u304c\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u3060\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\u6e2c\u5b9a\u3057\u3001\u8a55\u4fa1\u3057\u3001\u305d\u3057\u3066\u69cb\u7bc9\u307e\u305f\u306f\u6539\u5584\u3057\u3066\u3044\u304d\u307e\u3059\u3002","title":"\u305d\u306e\u5148\u3078"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#how-to-start-an-appsec-program-with-the-owasp-top-10","text":"Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient.","title":"How to start an AppSec Program with the OWASP Top 10"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-1-identify-the-gaps-and-goals-of-your-appsec-program","text":"Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts.","title":"Stage 1. Identify the gaps and goals of your appsec program"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-2-plan-for-a-paved-road-secure-development-lifecycle","text":"Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business.","title":"Stage 2. Plan for a paved road secure development lifecycle"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-3-implement-the-paved-road-with-your-development-teams","text":"Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days.","title":"Stage 3. Implement the paved road with your development teams"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-4-migrate-all-upcoming-and-existing-applications-to-the-paved-road","text":"Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly.","title":"Stage 4. Migrate all upcoming and existing applications to the paved road"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-5-test-that-the-paved-road-has-mitigated-the-issues-found-in-the-owasp-top-10","text":"Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better start using a library that is known safe against injection. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar.","title":"Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-6-build-your-program-into-a-mature-appsec-program","text":"You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level.","title":"Stage 6. Build your program into a mature AppSec program"},{"location":"ja/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#going-beyond","text":"All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"Going beyond"},{"location":"ja/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/","text":"OWASP Top 10 \u3092\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3046\u306b\u306f \u2693\ufe0e OWASP Top 10 \u306f\u3001\u4e3b\u306b\u610f\u8b58\u5411\u4e0a\u3092\u76ee\u7684\u3068\u3057\u305f\u6587\u66f8\u3067\u3059\u3002 \u3057\u304b\u3057 2003 \u5e74\u306b\u958b\u59cb\u3055\u308c\u3066\u4ee5\u6765\u3001\u7d44\u7e54\u306f\u4e8b\u5b9f\u4e0a\u306e\u696d\u754c\u306b\u304a\u3051\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3044\u7d9a\u3051\u3066\u3044\u307e\u3059\u3002 OWASP \u30c8\u30c3\u30d7 10 \u3092\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3084\u30c6\u30b9\u30c8\u306e\u57fa\u6e96\u3068\u3057\u3066\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u308c\u304c\u6700\u4f4e\u9650\u306e\u3082\u306e\u3067\u3042\u308a\u3001\u51fa\u767a\u70b9\u306b\u904e\u304e\u306a\u3044\u3053\u3068\u3092\u77e5\u3063\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002 OWASP \u30c8\u30c3\u30d7 10 \u3092\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306e\u96e3\u3057\u3055\u306e 1 \u3064\u306f\u3001OWASP Top 10 \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30ea\u30b9\u30af\u3092\u6587\u66f8\u5316\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308a\u3001\u5fc5\u305a\u3057\u3082\u7c21\u5358\u306b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 \u4f8b\u3048\u3070\u300cA04:2021-\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08\u300d\u306f\u3001\u307b\u3068\u3093\u3069\u306e\u5f62\u5f0f\u306e\u30c6\u30b9\u30c8\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002 \u4ed6\u306e\u4f8b\u3068\u3057\u3066\u306f\u3001\u8a2d\u7f6e\u3001\u4f7f\u7528\u3001\u52b9\u679c\u7684\u306a\u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u30c6\u30b9\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30c6\u30b9\u30c8\u306f\u3001\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc\u3092\u884c\u3044\u52b9\u679c\u7684\u306a\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8981\u6c42\u3057\u306a\u3051\u308c\u3070\u5b9f\u65bd\u3067\u304d\u307e\u305b\u3093\u3002 \u9759\u7684\u306a\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u306f\u3001\u30ed\u30ae\u30f3\u30b0\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3084\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u91cd\u8981\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u9055\u53cd\u306e\u30ed\u30ae\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u4fb5\u5165\u30c6\u30b9\u30c8\u62c5\u5f53\u8005\u306f\u3001\u672c\u756a\u74b0\u5883\u3068\u540c\u3058\u3088\u3046\u306b\u76e3\u8996\u3055\u308c\u308b\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u306a\u3044\u30c6\u30b9\u30c8\u74b0\u5883\u3067\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8d77\u52d5\u3057\u305f\u3053\u3068\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u3057\u304b\u3067\u304d\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001OWASP Top 10 \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u308b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u793a\u3057\u307e\u3059\u3002 \u30e6\u30fc\u30b9\u30b1\u30fc\u30b9 OWASP Top 10 2021 OWASP\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u691c\u8a3c\u6a19\u6e96 (OWASP ASVS) \u610f\u8b58\u5411\u4e0a \u63a8\u5968 \u8a13\u7df4 \u5165\u9580\u30ec\u30d9\u30eb \u5305\u62ec\u7684 \u8a2d\u8a08\u3068\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30bb\u30ad\u30e5\u30a2\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30d4\u30a2\u30ec\u30d3\u30e5\u30fc\u306b\u304a\u3051\u308b\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u7d71\u5408\u30c6\u30b9\u30c8 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u4fb5\u5165\u30c6\u30b9\u30c8 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30c4\u30fc\u30eb\u652f\u63f4 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30bb\u30ad\u30e5\u30a2\u30b5\u30d7\u30e9\u30a4\u30c1\u30a7\u30fc\u30f3 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u304a\u3051\u308b\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3092\u3092\u63a1\u7528\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u308b\u4eba\u306b\u306f\u3001 OWASP Application Security Verification Standard \uff08ASVS\uff09\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 OWASP ASVS \u306f\u3001\u30c4\u30fc\u30eb\u30d9\u30f3\u30c0\u30fc\u306b\u3068\u3063\u3066\u552f\u4e00\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u9078\u629e\u80a2\u3067\u3059\u3002 OWASP \u30c8\u30c3\u30d7 10 \u306b\u304a\u3051\u308b\u30ea\u30b9\u30af\u306e\u6027\u8cea\u4e0a\u3001\u30c4\u30fc\u30eb\u306f OWASP \u30c8\u30c3\u30d7 10 \u3092\u5305\u62ec\u7684\u306b\u691c\u51fa\u3001\u30c6\u30b9\u30c8\u3001\u3042\u308b\u3044\u306f\u4fdd\u8b77\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u300cA04:2021-\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08\u300d\u304c\u3042\u3052\u3089\u308c\u307e\u3059\u3002 OWASP \u306f\u3001\u30c4\u30fc\u30eb\u304c OWASP \u30c8\u30c3\u30d7 10 \u3092\u5b8c\u5168\u306b\u7db2\u7f85\u3057\u3066\u3044\u308b\u3068\u4e3b\u5f35\u3059\u308b\u3053\u3068\u306f\u3001\u5358\u7d14\u306b\u4e8b\u5b9f\u3068\u7570\u306a\u308b\u305f\u3081\u3001\u63a8\u5968\u3057\u307e\u305b\u3093\u3002 How to use the OWASP Top 10 as a standard \u2693\ufe0e The OWASP Top 10 is primarily an awareness document. However, this has not stopped organizations using it as a de facto industry AppSec standard since its inception in 2003. If you want to use the OWASP Top 10 as a coding or testing standard, know that it is the bare minimum and just a starting point. One of the difficulties of using the OWASP Top 10 as a standard is that we document appsec risks, and not necessarily easily testable issues. For example, A04:2021-Insecure Design is beyond the scope of most forms of testing. Another example is testing in place, in use, and effective logging and monitoring can only be done with interviews and requesting a sampling of effective incident responses. A static code analysis tool can look for the absence of logging, but it might be impossible to determine if business logic or access control is logging critical security breaches. Penetration testers may only be able to determine that they have invoked incident response in a test environment, which are rarely monitored in the same way as production. Here are our recommendations for when it is appropriate to use the OWASP Top 10: Use Case OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Yes Training Entry level Comprehensive Design and architecture Occasionally Yes Coding standard Bare minimum Yes Secure Code review Bare minimum Yes Peer review checklist Bare minimum Yes Unit testing Occasionally Yes Integration testing Occasionally Yes Penetration testing Bare minimum Yes Tool support Bare minimum Yes Secure Supply Chain Occasionally Yes We would encourage anyone wanting to adopt an application security standard to use the OWASP Application Security Verification Standard (ASVS), as it\u2019s designed to be verifiable and tested, and can be used in all parts of a secure development lifecycle. The ASVS is the only acceptable choice for tool vendors. Tools cannot comprehensively detect, test, or protect against the OWASP Top 10 due to the nature of several of the OWASP Top 10 risks, with reference to A04:2021-Insecure Design. OWASP discourages any claims of full coverage of the OWASP Top 10, because it\u2019s simply untrue.","title":"OWASP Top 10 \u3092\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3046\u306b\u306f"},{"location":"ja/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#owasp-top-10","text":"OWASP Top 10 \u306f\u3001\u4e3b\u306b\u610f\u8b58\u5411\u4e0a\u3092\u76ee\u7684\u3068\u3057\u305f\u6587\u66f8\u3067\u3059\u3002 \u3057\u304b\u3057 2003 \u5e74\u306b\u958b\u59cb\u3055\u308c\u3066\u4ee5\u6765\u3001\u7d44\u7e54\u306f\u4e8b\u5b9f\u4e0a\u306e\u696d\u754c\u306b\u304a\u3051\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3044\u7d9a\u3051\u3066\u3044\u307e\u3059\u3002 OWASP \u30c8\u30c3\u30d7 10 \u3092\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3084\u30c6\u30b9\u30c8\u306e\u57fa\u6e96\u3068\u3057\u3066\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u308c\u304c\u6700\u4f4e\u9650\u306e\u3082\u306e\u3067\u3042\u308a\u3001\u51fa\u767a\u70b9\u306b\u904e\u304e\u306a\u3044\u3053\u3068\u3092\u77e5\u3063\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002 OWASP \u30c8\u30c3\u30d7 10 \u3092\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306e\u96e3\u3057\u3055\u306e 1 \u3064\u306f\u3001OWASP Top 10 \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30ea\u30b9\u30af\u3092\u6587\u66f8\u5316\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308a\u3001\u5fc5\u305a\u3057\u3082\u7c21\u5358\u306b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 \u4f8b\u3048\u3070\u300cA04:2021-\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08\u300d\u306f\u3001\u307b\u3068\u3093\u3069\u306e\u5f62\u5f0f\u306e\u30c6\u30b9\u30c8\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002 \u4ed6\u306e\u4f8b\u3068\u3057\u3066\u306f\u3001\u8a2d\u7f6e\u3001\u4f7f\u7528\u3001\u52b9\u679c\u7684\u306a\u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u30c6\u30b9\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30c6\u30b9\u30c8\u306f\u3001\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc\u3092\u884c\u3044\u52b9\u679c\u7684\u306a\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8981\u6c42\u3057\u306a\u3051\u308c\u3070\u5b9f\u65bd\u3067\u304d\u307e\u305b\u3093\u3002 \u9759\u7684\u306a\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u306f\u3001\u30ed\u30ae\u30f3\u30b0\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3084\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u91cd\u8981\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u9055\u53cd\u306e\u30ed\u30ae\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u4fb5\u5165\u30c6\u30b9\u30c8\u62c5\u5f53\u8005\u306f\u3001\u672c\u756a\u74b0\u5883\u3068\u540c\u3058\u3088\u3046\u306b\u76e3\u8996\u3055\u308c\u308b\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u306a\u3044\u30c6\u30b9\u30c8\u74b0\u5883\u3067\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8d77\u52d5\u3057\u305f\u3053\u3068\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u3057\u304b\u3067\u304d\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001OWASP Top 10 \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u308b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u793a\u3057\u307e\u3059\u3002 \u30e6\u30fc\u30b9\u30b1\u30fc\u30b9 OWASP Top 10 2021 OWASP\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u691c\u8a3c\u6a19\u6e96 (OWASP ASVS) \u610f\u8b58\u5411\u4e0a \u63a8\u5968 \u8a13\u7df4 \u5165\u9580\u30ec\u30d9\u30eb \u5305\u62ec\u7684 \u8a2d\u8a08\u3068\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30bb\u30ad\u30e5\u30a2\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30d4\u30a2\u30ec\u30d3\u30e5\u30fc\u306b\u304a\u3051\u308b\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u7d71\u5408\u30c6\u30b9\u30c8 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u4fb5\u5165\u30c6\u30b9\u30c8 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30c4\u30fc\u30eb\u652f\u63f4 \u5fc5\u8981\u6700\u4f4e\u9650 \u63a8\u5968 \u30bb\u30ad\u30e5\u30a2\u30b5\u30d7\u30e9\u30a4\u30c1\u30a7\u30fc\u30f3 \u9069\u5207\u3067\u3042\u308b\u5834\u5408\u3082\u3042\u308b \u63a8\u5968 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u304a\u3051\u308b\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3092\u3092\u63a1\u7528\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u308b\u4eba\u306b\u306f\u3001 OWASP Application Security Verification Standard \uff08ASVS\uff09\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 OWASP ASVS \u306f\u3001\u30c4\u30fc\u30eb\u30d9\u30f3\u30c0\u30fc\u306b\u3068\u3063\u3066\u552f\u4e00\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u9078\u629e\u80a2\u3067\u3059\u3002 OWASP \u30c8\u30c3\u30d7 10 \u306b\u304a\u3051\u308b\u30ea\u30b9\u30af\u306e\u6027\u8cea\u4e0a\u3001\u30c4\u30fc\u30eb\u306f OWASP \u30c8\u30c3\u30d7 10 \u3092\u5305\u62ec\u7684\u306b\u691c\u51fa\u3001\u30c6\u30b9\u30c8\u3001\u3042\u308b\u3044\u306f\u4fdd\u8b77\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u300cA04:2021-\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08\u300d\u304c\u3042\u3052\u3089\u308c\u307e\u3059\u3002 OWASP \u306f\u3001\u30c4\u30fc\u30eb\u304c OWASP \u30c8\u30c3\u30d7 10 \u3092\u5b8c\u5168\u306b\u7db2\u7f85\u3057\u3066\u3044\u308b\u3068\u4e3b\u5f35\u3059\u308b\u3053\u3068\u306f\u3001\u5358\u7d14\u306b\u4e8b\u5b9f\u3068\u7570\u306a\u308b\u305f\u3081\u3001\u63a8\u5968\u3057\u307e\u305b\u3093\u3002","title":"OWASP Top 10 \u3092\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3046\u306b\u306f"},{"location":"ja/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#how-to-use-the-owasp-top-10-as-a-standard","text":"The OWASP Top 10 is primarily an awareness document. However, this has not stopped organizations using it as a de facto industry AppSec standard since its inception in 2003. If you want to use the OWASP Top 10 as a coding or testing standard, know that it is the bare minimum and just a starting point. One of the difficulties of using the OWASP Top 10 as a standard is that we document appsec risks, and not necessarily easily testable issues. For example, A04:2021-Insecure Design is beyond the scope of most forms of testing. Another example is testing in place, in use, and effective logging and monitoring can only be done with interviews and requesting a sampling of effective incident responses. A static code analysis tool can look for the absence of logging, but it might be impossible to determine if business logic or access control is logging critical security breaches. Penetration testers may only be able to determine that they have invoked incident response in a test environment, which are rarely monitored in the same way as production. Here are our recommendations for when it is appropriate to use the OWASP Top 10: Use Case OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Yes Training Entry level Comprehensive Design and architecture Occasionally Yes Coding standard Bare minimum Yes Secure Code review Bare minimum Yes Peer review checklist Bare minimum Yes Unit testing Occasionally Yes Integration testing Occasionally Yes Penetration testing Bare minimum Yes Tool support Bare minimum Yes Secure Supply Chain Occasionally Yes We would encourage anyone wanting to adopt an application security standard to use the OWASP Application Security Verification Standard (ASVS), as it\u2019s designed to be verifiable and tested, and can be used in all parts of a secure development lifecycle. The ASVS is the only acceptable choice for tool vendors. Tools cannot comprehensively detect, test, or protect against the OWASP Top 10 due to the nature of several of the OWASP Top 10 risks, with reference to A04:2021-Insecure Design. OWASP discourages any claims of full coverage of the OWASP Top 10, because it\u2019s simply untrue.","title":"How to use the OWASP Top 10 as a standard"},{"location":"ja/A00_2021_Introduction/","text":"Introduction \u2693\ufe0e Welcome to the OWASP Top 10 - 2021 \u2693\ufe0e Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU! What's changed in the Top 10 for 2021 \u2693\ufe0e There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. A01:2021-Broken Access Control moves up from the fifth position; 94% of applications were tested for some form of broken access control. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as Sensitive Data Exposure, which was broad symptom rather than a root cause. The renewed focus here is on failures related to cryptography which often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection, and the 33 CWEs mapped into this category have the second most occurrences in applications. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, it calls for more use of threat modeling, secure design patterns and principles, and reference architectures. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for XML External Entities (XXE) is now part of this category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the industry survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any CVEs mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from CVE/CVSS data mapped to the 10 CWEs in this category. Insecure Deserialization from 2017 is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously Insufficient Logging & Monitoring and is added from the industry survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE/CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the industry survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the industry professionals are telling us this is important, even though it's not illustrated in the data at this time. Methodology \u2693\ufe0e This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from an industry survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use an industry survey to ask people on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10. How the categories are structured \u2693\ufe0e A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause. CWEs are also a mix of symptom and root cause; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design. This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework. How the data is used for selecting categories \u2693\ufe0e In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability, Detectability (also likelihood), and Technical Impact. For 2021, we want to use data for Exploitability and Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact. In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact. With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the NVD data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE. 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and Impact scoring for the other half of the risk equation. Why not just pure statistical data? \u2693\ufe0e The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the industry survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data). Why incidence rate instead of frequency? \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Category Relationships from 2017 \u2693\ufe0e There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities. While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"\u5c0e\u5165"},{"location":"ja/A00_2021_Introduction/#introduction","text":"","title":"Introduction"},{"location":"ja/A00_2021_Introduction/#welcome-to-the-owasp-top-10-2021","text":"Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU!","title":"Welcome to the OWASP Top 10 - 2021"},{"location":"ja/A00_2021_Introduction/#whats-changed-in-the-top-10-for-2021","text":"There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. A01:2021-Broken Access Control moves up from the fifth position; 94% of applications were tested for some form of broken access control. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as Sensitive Data Exposure, which was broad symptom rather than a root cause. The renewed focus here is on failures related to cryptography which often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection, and the 33 CWEs mapped into this category have the second most occurrences in applications. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, it calls for more use of threat modeling, secure design patterns and principles, and reference architectures. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for XML External Entities (XXE) is now part of this category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the industry survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any CVEs mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from CVE/CVSS data mapped to the 10 CWEs in this category. Insecure Deserialization from 2017 is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously Insufficient Logging & Monitoring and is added from the industry survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE/CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the industry survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the industry professionals are telling us this is important, even though it's not illustrated in the data at this time.","title":"What's changed in the Top 10 for 2021"},{"location":"ja/A00_2021_Introduction/#methodology","text":"This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from an industry survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use an industry survey to ask people on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10.","title":"Methodology"},{"location":"ja/A00_2021_Introduction/#how-the-categories-are-structured","text":"A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause. CWEs are also a mix of symptom and root cause; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design. This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework.","title":"How the categories are structured"},{"location":"ja/A00_2021_Introduction/#how-the-data-is-used-for-selecting-categories","text":"In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability, Detectability (also likelihood), and Technical Impact. For 2021, we want to use data for Exploitability and Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact. In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact. With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the NVD data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE. 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and Impact scoring for the other half of the risk equation.","title":"How the data is used for selecting categories"},{"location":"ja/A00_2021_Introduction/#why-not-just-pure-statistical-data","text":"The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the industry survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data).","title":"Why not just pure statistical data?"},{"location":"ja/A00_2021_Introduction/#why-incidence-rate-instead-of-frequency","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results.","title":"Why incidence rate instead of frequency?"},{"location":"ja/A00_2021_Introduction/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order.","title":"What is your data collection and analysis process?"},{"location":"ja/A00_2021_Introduction/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"ja/A00_2021_Introduction/#category-relationships-from-2017","text":"There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities. While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks.","title":"Category Relationships from 2017"},{"location":"ja/A00_2021_Introduction/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"ja/A01_2021-Broken_Access_Control/","text":"A01:2021 \u2013 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013 \u6982\u8981 \u2693\ufe0e \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099\u306f\u30015\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002 94%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u5f62\u3067\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304dCWE\u306f\u3001 CWE-200:\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u52d5\u4f5c\u4e3b\u4f53\u3078\u306e\u60c5\u5831\u9732\u51fa \u3001 CWE-201:\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u901a\u3058\u305f\u60c5\u5831\u9732\u51fa \u3001\u305d\u3057\u3066 CWE-352:\u30af\u30ed\u30b9\u30b5\u30a4\u30c8\u30ea\u30af\u30a8\u30b9\u30c8\u30d5\u30a9\u30fc\u30b8\u30a7\u30ea \u3067\u3059\u3002 \u8aac\u660e \u2693\ufe0e \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306f\u3001\u30e6\u30fc\u30b6\u306b\u5bfe\u3057\u3066\u4e88\u3081\u4e0e\u3048\u3089\u308c\u305f\u6a29\u9650\u304b\u3089\u5916\u308c\u305f\u884c\u52d5\u3092\u3057\u306a\u3044\u3088\u3046\u306b\u30dd\u30ea\u30b7\u30fc\u3092\u9069\u7528\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u30dd\u30ea\u30b7\u30fc\u9069\u7528\u306e\u5931\u6557\u306b\u3088\u308a\u3001\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\u60c5\u5831\u306e\u516c\u958b\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u306e\u5909\u66f4\u307e\u305f\u306f\u7834\u58ca\u3001\u307e\u305f\u306f\u30e6\u30fc\u30b6\u5236\u9650\u304b\u3089\u5916\u308c\u305f\u30d3\u30b8\u30cd\u30b9\u6a5f\u80fd\u306e\u5b9f\u884c\u304c\u5f15\u304d\u8d77\u3053\u3055\u308c\u307e\u3059\u3002\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u8106\u5f31\u6027\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u591a\u304f\u307f\u3089\u308c\u307e\u3059: URL\u3001\u5185\u90e8\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u72b6\u614b\u3001HTML\u30da\u30fc\u30b8\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3084\u30ab\u30b9\u30bf\u30e0API\u653b\u6483\u30c4\u30fc\u30eb\u3092\u5358\u7d14\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u30c1\u30a7\u30c3\u30af\u3092\u8fc2\u56de\u3067\u304d\u3066\u3057\u307e\u3046\u3002 \u4e3b\u30ad\u30fc\u3092\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u8868\u793a\u307e\u305f\u306f\u7de8\u96c6\u3067\u304d\u3066\u3057\u307e\u3046\u3002 \u6a29\u9650\u6607\u683c\u3002\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u306a\u3057\u306b\u30e6\u30fc\u30b6\u3068\u3057\u3066\u884c\u52d5\u3057\u305f\u308a\u3001\u4e00\u822c\u30e6\u30fc\u30b6\u3068\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u6642\u306b\u7ba1\u7406\u8005\u3068\u3057\u3066\u884c\u52d5\u3067\u304d\u3066\u3057\u307e\u3046\u3002 \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u64cd\u4f5c\u3002JSON Web Token\uff08JWT\uff09\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30c8\u30fc\u30af\u30f3\u3084\u6a29\u9650\u6607\u683c\u3059\u308b\u305f\u3081\u306b\u64cd\u4f5c\u3055\u308c\u308bCookie\u3084hidden\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u518d\u751f\u6210\u307e\u305f\u306f\u6539\u3056\u3093\u3067\u304d\u305f\u308a\u3001JWT\u306e\u7121\u52b9\u5316\u3092\u60aa\u7528\u3067\u304d\u308b\u306a\u3069\u3002 CORS\u306e\u8aa4\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u6a29\u9650\u306e\u306a\u3044API\u30a2\u30af\u30bb\u30b9\u304c\u8a31\u53ef\u3055\u308c\u3066\u3057\u307e\u3046\u3002 \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u30e6\u30fc\u30b6\u3092\u8981\u8a8d\u8a3c\u30da\u30fc\u30b8\u3078\u3001\u4e00\u822c\u30e6\u30fc\u30b6\u3092\u8981\u6a29\u9650\u30da\u30fc\u30b8\u3078\u5f37\u5236\u30d6\u30e9\u30a6\u30ba\u3067\u304d\u3066\u3057\u307e\u3046\u3002 POST\u3001PUT\u3001DELETE\u30e1\u30bd\u30c3\u30c9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u306a\u3044API\u3078\u30a2\u30af\u30bb\u30b9\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u653b\u6483\u8005\u304c\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u30c1\u30a7\u30c3\u30af\u3084\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u4fe1\u983c\u3067\u304d\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u30b3\u30fc\u30c9\u307e\u305f\u306f\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9API\u3067\u5b9f\u65bd\u3055\u308c\u308b\u5834\u5408\u306b\u3088\u3063\u3066\u306e\u307f\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u6a5f\u80fd\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 \u516c\u958b\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u9664\u3044\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3092\u539f\u5247\u3068\u3057\u3066\u62d2\u5426\u3059\u308b\u3002 CORS\u306e\u4f7f\u7528\u7b87\u6240\u3092\u6700\u5c0f\u9650\u306b\u6291\u3048\u308b\u306a\u3069\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u4e00\u304b\u6240\u3067\u5b9f\u88c5\u3057\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5168\u4f53\u3067\u305d\u308c\u3092\u518d\u5229\u7528\u3059\u308b\u3002 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30e2\u30c7\u30eb\u306f\u3001\u30e6\u30fc\u30b6\u304c\u3069\u306e\u3088\u3046\u306a\u30ec\u30b3\u30fc\u30c9\u3067\u3082\u4f5c\u6210\u3001\u8aad\u53d6\u3001\u66f4\u65b0\u3001\u307e\u305f\u306f\u524a\u9664\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30ec\u30b3\u30fc\u30c9\u306e\u6240\u6709\u6a29\u304c\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u72ec\u81ea\u306e\u30d3\u30b8\u30cd\u30b9\u4e0a\u306e\u5236\u7d04\u8981\u6c42\u306f\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u8868\u73fe\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 Web\u30b5\u30fc\u30d0\u30fc\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30ea\u30b9\u30c6\u30a3\u30f3\u30b0\u3092\u7121\u52b9\u306b\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\uff08.git\u306a\u3069\uff09\u3084\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30d5\u30a1\u30a4\u30eb\u304cWeb\u306e\u7d4c\u8def\u4e0a\u306b\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u5931\u6557\u3092\u30ed\u30b0\u306b\u8a18\u9332\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7ba1\u7406\u8005\u306b\u8b66\u544a\u3059\u308b\uff08\u7e70\u308a\u8fd4\u3057\u5931\u6557\u3057\u3066\u3044\u308b\u306a\u3069\uff09\u3002 \u30ec\u30fc\u30c8\u5236\u9650\u3059\u308bAPI\u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306f\u81ea\u52d5\u653b\u6483\u30c4\u30fc\u30eb\u306b\u3088\u308b\u88ab\u5bb3\u3092\u6700\u5c0f\u9650\u306b\u6291\u3048\u308b\u305f\u3081\u306e\u624b\u6bb5\u3067\u3042\u308b\u3002 JWT\u30c8\u30fc\u30af\u30f3\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u5f8c\u306b\u306f\u30b5\u30fc\u30d0\u30fc\u4e0a\u3067\u7121\u52b9\u3068\u3055\u308c\u308b\u3079\u304d\u3067\u3042\u308b\u3002 \u958b\u767a\u8005\u3068QA\u30b9\u30bf\u30c3\u30d5\u306f\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306b\u95a2\u3059\u308b\u6a5f\u80fd\u9762\u3067\u306e\u5358\u4f53\u53ca\u3073\u7d50\u5408\u30c6\u30b9\u30c8\u3092\u53d6\u308a\u5165\u308c\u308b\u3079\u304d\u3067\u3059\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308bSQL\u547c\u51fa\u3057\u306b\u672a\u691c\u8a3c\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); \u653b\u6483\u8005\u306f\u3001\u5358\u306b\u30d6\u30e9\u30a6\u30b6\u3067\u30d1\u30e9\u30e1\u30fc\u30bf'acct'\u3092\u4efb\u610f\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u756a\u53f7\u306b\u6539\u5909\u3057\u3066\u9001\u4fe1\u3057\u307e\u3059\u3002\u9069\u5207\u306a\u691c\u8a3c\u304c\u306a\u3044\u5834\u5408\u3001\u653b\u6483\u8005\u306f\u4efb\u610f\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 https://example.com/app/accountInfo?acct=notmyacct \u30b7\u30ca\u30ea\u30aa #2: \u3042\u308b\u653b\u6483\u8005\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u3067URL\u3092\u6307\u5b9a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f\u7ba1\u7406\u8005\u6a29\u9650\u304c\u5fc5\u8981\u3067\u3059\u3002 https://example.com/app/getappInfo https://example.com/app/admin_getappInfo \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u30e6\u30fc\u30b6\u304c\u3053\u308c\u3089\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306a\u3089\u3001\u6b20\u9665\u304c\u3042\u308a\u307e\u3059\u3002 \u7ba1\u7406\u8005\u3067\u306a\u3044\u4eba\u304c\u7ba1\u7406\u8005\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u306a\u3089\u3001\u305d\u308c\u3082\u6b20\u9665\u3067\u3059\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control PortSwigger: Exploiting CORS misconfiguration \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e List of Mapped CWEs \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute A01:2021 \u2013 Broken Access Control \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013 Overview \u2693\ufe0e Moving up from the fifth position, 94% of applications were tested for some form of broken access control. Notable CWEs included are CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , and CWE-352: Cross-Site Request Forgery . Description \u2693\ufe0e Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include: Bypassing access control checks by modifying the URL, internal application state, or the HTML page, or simply using a custom API attack tool. Allowing the primary key to be changed to another user's record, permitting viewing or editing someone else's account. Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user. Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation. CORS misconfiguration allows unauthorized API access. Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user. Accessing API with missing access controls for POST, PUT and DELETE. How to Prevent \u2693\ufe0e Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata. Except for public resources, deny by default. Implement access control mechanisms once and re-use them throughout the application, including minimizing CORS usage. Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record. Unique application business limit requirements should be enforced by domain models. Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots. Log access control failures, alert admins when appropriate (e.g., repeated failures). Rate limit API and controller access to minimize the harm from automated attack tooling. JWT tokens should be invalidated on the server after logout. Developers and QA staff should include functional access control unit and integration tests. Example Attack Scenarios \u2693\ufe0e Scenario #1: The application uses unverified data in a SQL call that is accessing account information: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); An attacker simply modifies the browser's 'acct' parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo If an unauthenticated user can access either page, it's a flaw. If a non-admin can access the admin page, this is a flaw. References \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control PortSwigger: Exploiting CORS misconfiguration List of Mapped CWEs \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"A01 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099"},{"location":"ja/A01_2021-Broken_Access_Control/#a012021","text":"","title":"A01:2021 \u2013 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099"},{"location":"ja/A01_2021-Broken_Access_Control/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013","title":"\u56e0\u5b50"},{"location":"ja/A01_2021-Broken_Access_Control/#_2","text":"\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099\u306f\u30015\u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002 94%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u5f62\u3067\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304dCWE\u306f\u3001 CWE-200:\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u52d5\u4f5c\u4e3b\u4f53\u3078\u306e\u60c5\u5831\u9732\u51fa \u3001 CWE-201:\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u901a\u3058\u305f\u60c5\u5831\u9732\u51fa \u3001\u305d\u3057\u3066 CWE-352:\u30af\u30ed\u30b9\u30b5\u30a4\u30c8\u30ea\u30af\u30a8\u30b9\u30c8\u30d5\u30a9\u30fc\u30b8\u30a7\u30ea \u3067\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A01_2021-Broken_Access_Control/#_3","text":"\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306f\u3001\u30e6\u30fc\u30b6\u306b\u5bfe\u3057\u3066\u4e88\u3081\u4e0e\u3048\u3089\u308c\u305f\u6a29\u9650\u304b\u3089\u5916\u308c\u305f\u884c\u52d5\u3092\u3057\u306a\u3044\u3088\u3046\u306b\u30dd\u30ea\u30b7\u30fc\u3092\u9069\u7528\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u30dd\u30ea\u30b7\u30fc\u9069\u7528\u306e\u5931\u6557\u306b\u3088\u308a\u3001\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\u60c5\u5831\u306e\u516c\u958b\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u306e\u5909\u66f4\u307e\u305f\u306f\u7834\u58ca\u3001\u307e\u305f\u306f\u30e6\u30fc\u30b6\u5236\u9650\u304b\u3089\u5916\u308c\u305f\u30d3\u30b8\u30cd\u30b9\u6a5f\u80fd\u306e\u5b9f\u884c\u304c\u5f15\u304d\u8d77\u3053\u3055\u308c\u307e\u3059\u3002\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u8106\u5f31\u6027\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u591a\u304f\u307f\u3089\u308c\u307e\u3059: URL\u3001\u5185\u90e8\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u72b6\u614b\u3001HTML\u30da\u30fc\u30b8\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3084\u30ab\u30b9\u30bf\u30e0API\u653b\u6483\u30c4\u30fc\u30eb\u3092\u5358\u7d14\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u30c1\u30a7\u30c3\u30af\u3092\u8fc2\u56de\u3067\u304d\u3066\u3057\u307e\u3046\u3002 \u4e3b\u30ad\u30fc\u3092\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u8868\u793a\u307e\u305f\u306f\u7de8\u96c6\u3067\u304d\u3066\u3057\u307e\u3046\u3002 \u6a29\u9650\u6607\u683c\u3002\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u306a\u3057\u306b\u30e6\u30fc\u30b6\u3068\u3057\u3066\u884c\u52d5\u3057\u305f\u308a\u3001\u4e00\u822c\u30e6\u30fc\u30b6\u3068\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u6642\u306b\u7ba1\u7406\u8005\u3068\u3057\u3066\u884c\u52d5\u3067\u304d\u3066\u3057\u307e\u3046\u3002 \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u64cd\u4f5c\u3002JSON Web Token\uff08JWT\uff09\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30c8\u30fc\u30af\u30f3\u3084\u6a29\u9650\u6607\u683c\u3059\u308b\u305f\u3081\u306b\u64cd\u4f5c\u3055\u308c\u308bCookie\u3084hidden\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u518d\u751f\u6210\u307e\u305f\u306f\u6539\u3056\u3093\u3067\u304d\u305f\u308a\u3001JWT\u306e\u7121\u52b9\u5316\u3092\u60aa\u7528\u3067\u304d\u308b\u306a\u3069\u3002 CORS\u306e\u8aa4\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u6a29\u9650\u306e\u306a\u3044API\u30a2\u30af\u30bb\u30b9\u304c\u8a31\u53ef\u3055\u308c\u3066\u3057\u307e\u3046\u3002 \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u30e6\u30fc\u30b6\u3092\u8981\u8a8d\u8a3c\u30da\u30fc\u30b8\u3078\u3001\u4e00\u822c\u30e6\u30fc\u30b6\u3092\u8981\u6a29\u9650\u30da\u30fc\u30b8\u3078\u5f37\u5236\u30d6\u30e9\u30a6\u30ba\u3067\u304d\u3066\u3057\u307e\u3046\u3002 POST\u3001PUT\u3001DELETE\u30e1\u30bd\u30c3\u30c9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u306a\u3044API\u3078\u30a2\u30af\u30bb\u30b9\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u3002","title":"\u8aac\u660e"},{"location":"ja/A01_2021-Broken_Access_Control/#_4","text":"\u653b\u6483\u8005\u304c\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u30c1\u30a7\u30c3\u30af\u3084\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u4fe1\u983c\u3067\u304d\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u30b3\u30fc\u30c9\u307e\u305f\u306f\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9API\u3067\u5b9f\u65bd\u3055\u308c\u308b\u5834\u5408\u306b\u3088\u3063\u3066\u306e\u307f\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u6a5f\u80fd\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 \u516c\u958b\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u9664\u3044\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3092\u539f\u5247\u3068\u3057\u3066\u62d2\u5426\u3059\u308b\u3002 CORS\u306e\u4f7f\u7528\u7b87\u6240\u3092\u6700\u5c0f\u9650\u306b\u6291\u3048\u308b\u306a\u3069\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u4e00\u304b\u6240\u3067\u5b9f\u88c5\u3057\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5168\u4f53\u3067\u305d\u308c\u3092\u518d\u5229\u7528\u3059\u308b\u3002 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30e2\u30c7\u30eb\u306f\u3001\u30e6\u30fc\u30b6\u304c\u3069\u306e\u3088\u3046\u306a\u30ec\u30b3\u30fc\u30c9\u3067\u3082\u4f5c\u6210\u3001\u8aad\u53d6\u3001\u66f4\u65b0\u3001\u307e\u305f\u306f\u524a\u9664\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30ec\u30b3\u30fc\u30c9\u306e\u6240\u6709\u6a29\u304c\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u72ec\u81ea\u306e\u30d3\u30b8\u30cd\u30b9\u4e0a\u306e\u5236\u7d04\u8981\u6c42\u306f\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u8868\u73fe\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 Web\u30b5\u30fc\u30d0\u30fc\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30ea\u30b9\u30c6\u30a3\u30f3\u30b0\u3092\u7121\u52b9\u306b\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\uff08.git\u306a\u3069\uff09\u3084\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30d5\u30a1\u30a4\u30eb\u304cWeb\u306e\u7d4c\u8def\u4e0a\u306b\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u5931\u6557\u3092\u30ed\u30b0\u306b\u8a18\u9332\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7ba1\u7406\u8005\u306b\u8b66\u544a\u3059\u308b\uff08\u7e70\u308a\u8fd4\u3057\u5931\u6557\u3057\u3066\u3044\u308b\u306a\u3069\uff09\u3002 \u30ec\u30fc\u30c8\u5236\u9650\u3059\u308bAPI\u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306f\u81ea\u52d5\u653b\u6483\u30c4\u30fc\u30eb\u306b\u3088\u308b\u88ab\u5bb3\u3092\u6700\u5c0f\u9650\u306b\u6291\u3048\u308b\u305f\u3081\u306e\u624b\u6bb5\u3067\u3042\u308b\u3002 JWT\u30c8\u30fc\u30af\u30f3\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u5f8c\u306b\u306f\u30b5\u30fc\u30d0\u30fc\u4e0a\u3067\u7121\u52b9\u3068\u3055\u308c\u308b\u3079\u304d\u3067\u3042\u308b\u3002 \u958b\u767a\u8005\u3068QA\u30b9\u30bf\u30c3\u30d5\u306f\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306b\u95a2\u3059\u308b\u6a5f\u80fd\u9762\u3067\u306e\u5358\u4f53\u53ca\u3073\u7d50\u5408\u30c6\u30b9\u30c8\u3092\u53d6\u308a\u5165\u308c\u308b\u3079\u304d\u3067\u3059\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A01_2021-Broken_Access_Control/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308bSQL\u547c\u51fa\u3057\u306b\u672a\u691c\u8a3c\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); \u653b\u6483\u8005\u306f\u3001\u5358\u306b\u30d6\u30e9\u30a6\u30b6\u3067\u30d1\u30e9\u30e1\u30fc\u30bf'acct'\u3092\u4efb\u610f\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u756a\u53f7\u306b\u6539\u5909\u3057\u3066\u9001\u4fe1\u3057\u307e\u3059\u3002\u9069\u5207\u306a\u691c\u8a3c\u304c\u306a\u3044\u5834\u5408\u3001\u653b\u6483\u8005\u306f\u4efb\u610f\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 https://example.com/app/accountInfo?acct=notmyacct \u30b7\u30ca\u30ea\u30aa #2: \u3042\u308b\u653b\u6483\u8005\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u3067URL\u3092\u6307\u5b9a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f\u7ba1\u7406\u8005\u6a29\u9650\u304c\u5fc5\u8981\u3067\u3059\u3002 https://example.com/app/getappInfo https://example.com/app/admin_getappInfo \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u30e6\u30fc\u30b6\u304c\u3053\u308c\u3089\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306a\u3089\u3001\u6b20\u9665\u304c\u3042\u308a\u307e\u3059\u3002 \u7ba1\u7406\u8005\u3067\u306a\u3044\u4eba\u304c\u7ba1\u7406\u8005\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u306a\u3089\u3001\u305d\u308c\u3082\u6b20\u9665\u3067\u3059\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A01_2021-Broken_Access_Control/#_6","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control PortSwigger: Exploiting CORS misconfiguration","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A01_2021-Broken_Access_Control/#cwe","text":"","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A01_2021-Broken_Access_Control/#list-of-mapped-cwes","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"List of Mapped CWEs"},{"location":"ja/A01_2021-Broken_Access_Control/#a012021-broken-access-control","text":"","title":"A01:2021 \u2013 Broken Access Control"},{"location":"ja/A01_2021-Broken_Access_Control/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013","title":"Factors"},{"location":"ja/A01_2021-Broken_Access_Control/#overview","text":"Moving up from the fifth position, 94% of applications were tested for some form of broken access control. Notable CWEs included are CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , and CWE-352: Cross-Site Request Forgery .","title":"Overview"},{"location":"ja/A01_2021-Broken_Access_Control/#description","text":"Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include: Bypassing access control checks by modifying the URL, internal application state, or the HTML page, or simply using a custom API attack tool. Allowing the primary key to be changed to another user's record, permitting viewing or editing someone else's account. Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user. Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation. CORS misconfiguration allows unauthorized API access. Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user. Accessing API with missing access controls for POST, PUT and DELETE.","title":"Description"},{"location":"ja/A01_2021-Broken_Access_Control/#how-to-prevent","text":"Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata. Except for public resources, deny by default. Implement access control mechanisms once and re-use them throughout the application, including minimizing CORS usage. Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record. Unique application business limit requirements should be enforced by domain models. Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots. Log access control failures, alert admins when appropriate (e.g., repeated failures). Rate limit API and controller access to minimize the harm from automated attack tooling. JWT tokens should be invalidated on the server after logout. Developers and QA staff should include functional access control unit and integration tests.","title":"How to Prevent"},{"location":"ja/A01_2021-Broken_Access_Control/#example-attack-scenarios","text":"Scenario #1: The application uses unverified data in a SQL call that is accessing account information: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); An attacker simply modifies the browser's 'acct' parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo If an unauthenticated user can access either page, it's a flaw. If a non-admin can access the admin page, this is a flaw.","title":"Example Attack Scenarios"},{"location":"ja/A01_2021-Broken_Access_Control/#references","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control PortSwigger: Exploiting CORS misconfiguration","title":"References"},{"location":"ja/A01_2021-Broken_Access_Control/#list-of-mapped-cwes_1","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"List of Mapped CWEs"},{"location":"ja/A02_2021-Cryptographic_Failures/","text":"A02:2021 \u2013 \u6697\u53f7\u5316\u306e\u5931\u6557 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075 \u6982\u8981 \u2693\ufe0e \u524d\u56de\u304b\u3089\u9806\u4f4d\u3092\u4e00\u3064\u4e0a\u3052\u305f\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u4ee5\u524d\u306f \u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa \u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002 \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u6839\u672c\u7684\u306a\u8981\u56e0\u3088\u308a\u3082\u3001\u6697\u53f7\u5316\u6280\u8853\u306e\u4e0d\u9069\u5207\u306a\u4f7f\u7528\u3001\u307e\u305f\u306f\u6697\u53f7\u5316\u306e\u6b20\u5982\u306b\u95a2\u9023\u3057\u305f\u5e45\u5e83\u3044\u969c\u5bb3\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u969c\u5bb3\u306f\u3001\u6642\u306b\u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u3092\u7d50\u679c\u3068\u3057\u3066\u3082\u305f\u3089\u3057\u307e\u3059\u3002 \u8003\u616e\u3059\u3079\u304dCWE\u306b\u306f\u3001 CWE-259:\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u4f7f\u7528 \u3001 CWE-327:\u4e0d\u9069\u5207\u306a\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3001 CWE-331:\u4e0d\u5341\u5206\u306a\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc \u304c\u3042\u308a\u307e\u3059\u3002 \u89e3\u8aac \u2693\ufe0e \u307e\u305a\u3001\u9001\u4fe1\u3042\u308b\u3044\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u304c\u4fdd\u8b77\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u898b\u6975\u3081\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u756a\u53f7\u3001\u5065\u5eb7\u8a18\u9332\u3001\u500b\u4eba\u30c7\u30fc\u30bf\u3084\u30d3\u30b8\u30cd\u30b9\u4e0a\u306e\u6a5f\u5bc6\u306f\u7279\u5225\u306a\u4fdd\u8b77\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001EU\u306e\u4e00\u822c\u30c7\u30fc\u30bf\u4fdd\u8b77\u898f\u5247(GDPR)\u306e\u3088\u3046\u306a\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u95a2\u9023\u306e\u6cd5\u5f8b\u304c\u9069\u7528\u3055\u308c\u308b\u5834\u5408\u3001\u307e\u305f\u3001PCI\u30c7\u30fc\u30bf\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9(PCI DSS)\u306a\u3069\u91d1\u878d\u306e\u60c5\u5831\u4fdd\u8b77\u306e\u8981\u6c42\u304c\u3042\u308b\u3088\u3046\u306a\u898f\u5b9a\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u7279\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3059\u3079\u3066\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044: \u3069\u3093\u306a\u30c7\u30fc\u30bf\u3067\u3042\u308c\u5e73\u6587\u3067\u9001\u4fe1\u3057\u3066\u3044\u306a\u3044\u304b\u3002\u3053\u308c\u306f\u3001HTTP\u3001SMTP\u3001FTP\u306e\u3088\u3046\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u8a72\u5f53\u3059\u308b\u3002\u5916\u90e8\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3078\u306e\u30c8\u30e9\u30d5\u30a3\u30c3\u30af\u306f\u5371\u967a\u3067\u3042\u308b\u3002\u307e\u305f\u3001\u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b5\u30fc\u3001Web\u30b5\u30fc\u30d0\u30fc\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b7\u30b9\u30c6\u30e0\u306a\u3069\u306e\u5185\u90e8\u306e\u901a\u4fe1\u3082\u3059\u3079\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3002 \u53e4\u3044\u307e\u305f\u306f\u8106\u5f31\u306a\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u521d\u671f\u8a2d\u5b9a\u306e\u307e\u307e\u3001\u307e\u305f\u306f\u53e4\u3044\u30b3\u30fc\u30c9\u3067\u4f7f\u3063\u3066\u3044\u306a\u3044\u304b\u3002 \u521d\u671f\u5024\u306e\u307e\u307e\u306e\u6697\u53f7\u9375\u306e\u4f7f\u7528\u3001\u5f31\u3044\u6697\u53f7\u9375\u3092\u751f\u6210\u307e\u305f\u306f\u518d\u5229\u7528\u3001\u9069\u5207\u306a\u6697\u53f7\u9375\u7ba1\u7406\u307e\u305f\u306f\u9375\u306e\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3057\u3066\u3044\u306a\u3044\u3001\u3053\u308c\u3089\u306e\u8a72\u5f53\u3059\u308b\u7b87\u6240\u306f\u306a\u3044\u304b\u3002 \u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\uff08\u30d6\u30e9\u30a6\u30b6\uff09\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3084\u30d8\u30c3\u30c0\u30fc\u304c\u6b20\u843d\u3057\u3066\u3044\u308b\u306a\u3069\u3001\u6697\u53f7\u5316\u304c\u5f37\u5236\u3055\u308c\u3066\u3044\u306a\u3044\u7b87\u6240\u306f\u306a\u3044\u304b\u3002 \u30a2\u30d7\u30ea\u3001\u30e1\u30fc\u30eb\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306a\u3069\u306e\u30e6\u30fc\u30b6\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u53d7\u4fe1\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u304c\u6b63\u5f53\u306a\u3082\u306e\u304b\u691c\u8a3c\u3057\u3066\u3044\u306a\u3044\u7b87\u6240\u306f\u306a\u3044\u304b\u3002 ASVS Crypto (V7)\u3001Data Protection (V9)\u3001\u304a\u3088\u3073 SSL/TLS (V10) \u3092\u53c2\u7167\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u6700\u4f4e\u9650\u5b9f\u65bd\u3059\u3079\u304d\u3053\u3068\u3092\u4ee5\u4e0b\u306b\u6319\u3052\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u53c2\u8003\u8cc7\u6599\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3054\u3068\u306b\u51e6\u7406\u3059\u308b\u30c7\u30fc\u30bf\u3001\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u3001\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3059\u308b\u3002\u305d\u3057\u3066\u3001\u3069\u306e\u30c7\u30fc\u30bf\u304c\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u95a2\u9023\u306e\u6cd5\u5f8b\u30fb\u898f\u5247\u306e\u8981\u4ef6\u306b\u8a72\u5f53\u3059\u308b\u304b\u3001\u307e\u305f\u3069\u306e\u30c7\u30fc\u30bf\u304c\u30d3\u30b8\u30cd\u30b9\u4e0a\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u304b\u5224\u5b9a\u3059\u308b\u3002 \u524d\u8ff0\u306e\u5206\u985e\u3092\u3082\u3068\u306b\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3092\u5b9f\u88c5\u3059\u308b\u3002 \u5fc5\u8981\u306e\u306a\u3044\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u306a\u3044\u3002\u3067\u304d\u308b\u9650\u308a\u3059\u3050\u306b\u305d\u306e\u3088\u3046\u306a\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u7834\u68c4\u3059\u308b\u304b\u3001PCI DSS\u306b\u6e96\u62e0\u3057\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u307e\u305f\u306f\u30c8\u30e9\u30f3\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\u30c7\u30fc\u30bf\u304c\u6b8b\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u76d7\u307e\u308c\u306a\u3044\u3002 \u4fdd\u5b58\u6642\u306b\u3059\u3079\u3066\u306e\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002 \u6700\u65b0\u306e\u6697\u53f7\u5f37\u5ea6\u306e\u9ad8\u3044\u6a19\u6e96\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u6697\u53f7\u9375\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\u305d\u3057\u3066\u9069\u5207\u306b\u6697\u53f7\u9375\u3092\u7ba1\u7406\u3059\u308b\u3002 \u524d\u65b9\u79d8\u533f\u6027(PFS)\u3092\u6709\u52b9\u306b\u3057\u305fTLS\u3001\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306b\u3088\u308b\u6697\u53f7\u30b9\u30a4\u30fc\u30c8\u306e\u512a\u5148\u5ea6\u6c7a\u5b9a\u3001\u30bb\u30ad\u30e5\u30a2\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3069\u306e\u30bb\u30ad\u30e5\u30a2\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3001\u901a\u4fe1\u7d4c\u8def\u4e0a\u306e\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3059\u308b\u3002HTTP Strict Transport Security (HSTS)\u306e\u3088\u3046\u306a\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3067\u6697\u53f7\u5316\u3092\u5f37\u5236\u3059\u308b\u3002 \u6a5f\u5fae\u306a\u60c5\u5831\u3092\u542b\u3080\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0\u3092\u7121\u52b9\u306b\u3059\u308b\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u3001Argon2\u3001scrypt\u3001bcrypt\u3001PBKDF2\u306e\u3088\u3046\u306a\u30ef\u30fc\u30af\u30d5\u30a1\u30af\u30bf(\u9045\u5ef6\u30d5\u30a1\u30af\u30bf)\u306e\u3042\u308b\u3001\u5f37\u304f\u304b\u3064\u9069\u5fdc\u53ef\u80fd\u306a\u30ec\u30d9\u30eb\u306e\u30bd\u30eb\u30c8\u4ed8\u304d\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u7528\u3044\u308b\u3002 \u8a2d\u5b9a\u3068\u305d\u306e\u8a2d\u5b9a\u5024\u304c\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u3066\u52b9\u679c\u304c\u3042\u308b\u304b\u691c\u8a3c\u3059\u308b\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1 : \u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u81ea\u52d5\u6697\u53f7\u5316\u3092\u4f7f\u7528\u3057\u3001\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u6697\u53f7\u5316\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3055\u308c\u308b\u3068\u304d\u306b\u81ea\u52d5\u7684\u306b\u5fa9\u53f7\u3055\u308c\u308b\u305f\u3081\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u5e73\u6587\u306e\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u53d6\u5f97\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2 : \u3042\u308b\u30b5\u30a4\u30c8\u306f\u3001\u3059\u3079\u3066\u306e\u30da\u30fc\u30b8\u3067TLS\u3092\u4f7f\u3063\u3066\u304a\u3089\u305a\u3001\u30e6\u30fc\u30b6\u306bTLS\u3092\u5f37\u5236\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u305d\u306e\u30b5\u30a4\u30c8\u3067\u306f\u5f31\u3044\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u653b\u6483\u8005\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c8\u30e9\u30d5\u30a3\u30c3\u30af\u3092\u76e3\u8996\u3057\uff08\u4f8b\u3048\u3070\u3001\u6697\u53f7\u5316\u3057\u3066\u3044\u306a\u3044\u7121\u7dda\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\uff09\u3001HTTPS\u901a\u4fe1\u3092HTTP\u901a\u4fe1\u306b\u30c0\u30a6\u30f3\u30b0\u30ec\u30fc\u30c9\u3057\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u76d7\u8074\u3059\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u30af\u30c3\u30ad\u30fc\u3092\u76d7\u307f\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u653b\u6483\u8005\u306f\u3053\u306e\u30af\u30c3\u30ad\u30fc\u3092\u518d\u9001\u3057\u30e6\u30fc\u30b6\u306e(\u8a8d\u8a3c\u3055\u308c\u305f)\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4e57\u3063\u53d6\u308a\u3001\u305d\u306e\u30e6\u30fc\u30b6\u306e\u500b\u4eba\u30c7\u30fc\u30bf\u3092\u95b2\u89a7\u304a\u3088\u3073\u6539\u3056\u3093\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u653b\u6483\u8005\u306f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4e57\u3063\u53d6\u308b\u4ee3\u308f\u308a\u306b\u3001\u3059\u3079\u3066\u306e\u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u4f8b\u3048\u3070\u3001\u5165\u91d1\u306e\u53d7\u53d6\u4eba\uff09\u3092\u6539\u3056\u3093\u3067\u304d\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3 : \u3042\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306f\u3001\u30bd\u30eb\u30c8\u306a\u3057\u306e\u30cf\u30c3\u30b7\u30e5\u307e\u305f\u306f\u5358\u7d14\u306a\u30cf\u30c3\u30b7\u30e5\u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306e\u6b20\u9665\u304c\u3042\u308c\u3070\u3001\u653b\u6483\u8005\u306f\u305d\u308c\u3092\u60aa\u7528\u3057\u3066\u30d1\u30b9\u30ef\u30fc\u30c9\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u4e8b\u524d\u306b\u8a08\u7b97\u3055\u308c\u305f\u30cf\u30c3\u30b7\u30e5\u306e\u30ec\u30a4\u30f3\u30dc\u30fc\u30c6\u30fc\u30d6\u30eb\u3067\u3001\u3059\u3079\u3066\u306e\u30bd\u30eb\u30c8\u306a\u3057\u306e\u30cf\u30c3\u30b7\u30e5\u304c\u89e3\u8aad\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u305f\u3068\u3048\u30bd\u30eb\u30c8\u3042\u308a\u3067\u30cf\u30c3\u30b7\u30e5\u5316\u3055\u308c\u3066\u3044\u3066\u3082\u3001\u5358\u7d14\u307e\u305f\u306f\u9ad8\u901f\u306a\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3067\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u306fGPU\u3067\u89e3\u8aad\u3055\u308c\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography \u5bfe\u5fdc\u3059\u308bCWE\u4e00\u89a7 \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort A02:2021 \u2013 Cryptographic Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075 Overview \u2693\ufe0e Shifting up one position to #2, previously known as Sensitive Data Exposure , which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable CWEs included are CWE-259: Use of Hard-coded Password , CWE-327: Broken or Risky Crypto Algorithm , and CWE-331 Insufficient Entropy . Description \u2693\ufe0e The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, and FTP. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. Are any old or weak cryptographic algorithms used either by default or in older code? Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Is encryption not enforced, e.g., are any user agent (browser) security directives or headers missing? Does the user agent (e.g., app, mail client) not verify if the received server certificate is valid? See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10) How to Prevent \u2693\ufe0e Do the following, at a minimum, and consult the references: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Apply controls as per the classification. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with perfect forward secrecy (PFS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2. Verify independently the effectiveness of configuration and settings. Example Attack Scenarios \u2693\ufe0e Scenario #1 : An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text. Scenario #2 : A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer. Scenario #3 : The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted. References \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography List of Mapped CWEs \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"A02 \u6697\u53f7\u5316\u306e\u5931\u6557"},{"location":"ja/A02_2021-Cryptographic_Failures/#a022021","text":"","title":"A02:2021 \u2013 \u6697\u53f7\u5316\u306e\u5931\u6557"},{"location":"ja/A02_2021-Cryptographic_Failures/#_1","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075","title":"\u56e0\u5b50"},{"location":"ja/A02_2021-Cryptographic_Failures/#_2","text":"\u524d\u56de\u304b\u3089\u9806\u4f4d\u3092\u4e00\u3064\u4e0a\u3052\u305f\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u4ee5\u524d\u306f \u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa \u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002 \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u6839\u672c\u7684\u306a\u8981\u56e0\u3088\u308a\u3082\u3001\u6697\u53f7\u5316\u6280\u8853\u306e\u4e0d\u9069\u5207\u306a\u4f7f\u7528\u3001\u307e\u305f\u306f\u6697\u53f7\u5316\u306e\u6b20\u5982\u306b\u95a2\u9023\u3057\u305f\u5e45\u5e83\u3044\u969c\u5bb3\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u969c\u5bb3\u306f\u3001\u6642\u306b\u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u3092\u7d50\u679c\u3068\u3057\u3066\u3082\u305f\u3089\u3057\u307e\u3059\u3002 \u8003\u616e\u3059\u3079\u304dCWE\u306b\u306f\u3001 CWE-259:\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u4f7f\u7528 \u3001 CWE-327:\u4e0d\u9069\u5207\u306a\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3001 CWE-331:\u4e0d\u5341\u5206\u306a\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc \u304c\u3042\u308a\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A02_2021-Cryptographic_Failures/#_3","text":"\u307e\u305a\u3001\u9001\u4fe1\u3042\u308b\u3044\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u304c\u4fdd\u8b77\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u898b\u6975\u3081\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u756a\u53f7\u3001\u5065\u5eb7\u8a18\u9332\u3001\u500b\u4eba\u30c7\u30fc\u30bf\u3084\u30d3\u30b8\u30cd\u30b9\u4e0a\u306e\u6a5f\u5bc6\u306f\u7279\u5225\u306a\u4fdd\u8b77\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001EU\u306e\u4e00\u822c\u30c7\u30fc\u30bf\u4fdd\u8b77\u898f\u5247(GDPR)\u306e\u3088\u3046\u306a\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u95a2\u9023\u306e\u6cd5\u5f8b\u304c\u9069\u7528\u3055\u308c\u308b\u5834\u5408\u3001\u307e\u305f\u3001PCI\u30c7\u30fc\u30bf\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9(PCI DSS)\u306a\u3069\u91d1\u878d\u306e\u60c5\u5831\u4fdd\u8b77\u306e\u8981\u6c42\u304c\u3042\u308b\u3088\u3046\u306a\u898f\u5b9a\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u7279\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3059\u3079\u3066\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044: \u3069\u3093\u306a\u30c7\u30fc\u30bf\u3067\u3042\u308c\u5e73\u6587\u3067\u9001\u4fe1\u3057\u3066\u3044\u306a\u3044\u304b\u3002\u3053\u308c\u306f\u3001HTTP\u3001SMTP\u3001FTP\u306e\u3088\u3046\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u8a72\u5f53\u3059\u308b\u3002\u5916\u90e8\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3078\u306e\u30c8\u30e9\u30d5\u30a3\u30c3\u30af\u306f\u5371\u967a\u3067\u3042\u308b\u3002\u307e\u305f\u3001\u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b5\u30fc\u3001Web\u30b5\u30fc\u30d0\u30fc\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b7\u30b9\u30c6\u30e0\u306a\u3069\u306e\u5185\u90e8\u306e\u901a\u4fe1\u3082\u3059\u3079\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3002 \u53e4\u3044\u307e\u305f\u306f\u8106\u5f31\u306a\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u521d\u671f\u8a2d\u5b9a\u306e\u307e\u307e\u3001\u307e\u305f\u306f\u53e4\u3044\u30b3\u30fc\u30c9\u3067\u4f7f\u3063\u3066\u3044\u306a\u3044\u304b\u3002 \u521d\u671f\u5024\u306e\u307e\u307e\u306e\u6697\u53f7\u9375\u306e\u4f7f\u7528\u3001\u5f31\u3044\u6697\u53f7\u9375\u3092\u751f\u6210\u307e\u305f\u306f\u518d\u5229\u7528\u3001\u9069\u5207\u306a\u6697\u53f7\u9375\u7ba1\u7406\u307e\u305f\u306f\u9375\u306e\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3057\u3066\u3044\u306a\u3044\u3001\u3053\u308c\u3089\u306e\u8a72\u5f53\u3059\u308b\u7b87\u6240\u306f\u306a\u3044\u304b\u3002 \u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\uff08\u30d6\u30e9\u30a6\u30b6\uff09\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3084\u30d8\u30c3\u30c0\u30fc\u304c\u6b20\u843d\u3057\u3066\u3044\u308b\u306a\u3069\u3001\u6697\u53f7\u5316\u304c\u5f37\u5236\u3055\u308c\u3066\u3044\u306a\u3044\u7b87\u6240\u306f\u306a\u3044\u304b\u3002 \u30a2\u30d7\u30ea\u3001\u30e1\u30fc\u30eb\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306a\u3069\u306e\u30e6\u30fc\u30b6\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u53d7\u4fe1\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u304c\u6b63\u5f53\u306a\u3082\u306e\u304b\u691c\u8a3c\u3057\u3066\u3044\u306a\u3044\u7b87\u6240\u306f\u306a\u3044\u304b\u3002 ASVS Crypto (V7)\u3001Data Protection (V9)\u3001\u304a\u3088\u3073 SSL/TLS (V10) \u3092\u53c2\u7167\u3002","title":"\u89e3\u8aac"},{"location":"ja/A02_2021-Cryptographic_Failures/#_4","text":"\u6700\u4f4e\u9650\u5b9f\u65bd\u3059\u3079\u304d\u3053\u3068\u3092\u4ee5\u4e0b\u306b\u6319\u3052\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u53c2\u8003\u8cc7\u6599\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3054\u3068\u306b\u51e6\u7406\u3059\u308b\u30c7\u30fc\u30bf\u3001\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u3001\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3059\u308b\u3002\u305d\u3057\u3066\u3001\u3069\u306e\u30c7\u30fc\u30bf\u304c\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u95a2\u9023\u306e\u6cd5\u5f8b\u30fb\u898f\u5247\u306e\u8981\u4ef6\u306b\u8a72\u5f53\u3059\u308b\u304b\u3001\u307e\u305f\u3069\u306e\u30c7\u30fc\u30bf\u304c\u30d3\u30b8\u30cd\u30b9\u4e0a\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u304b\u5224\u5b9a\u3059\u308b\u3002 \u524d\u8ff0\u306e\u5206\u985e\u3092\u3082\u3068\u306b\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3092\u5b9f\u88c5\u3059\u308b\u3002 \u5fc5\u8981\u306e\u306a\u3044\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u306a\u3044\u3002\u3067\u304d\u308b\u9650\u308a\u3059\u3050\u306b\u305d\u306e\u3088\u3046\u306a\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u7834\u68c4\u3059\u308b\u304b\u3001PCI DSS\u306b\u6e96\u62e0\u3057\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u307e\u305f\u306f\u30c8\u30e9\u30f3\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\u30c7\u30fc\u30bf\u304c\u6b8b\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u76d7\u307e\u308c\u306a\u3044\u3002 \u4fdd\u5b58\u6642\u306b\u3059\u3079\u3066\u306e\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002 \u6700\u65b0\u306e\u6697\u53f7\u5f37\u5ea6\u306e\u9ad8\u3044\u6a19\u6e96\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u6697\u53f7\u9375\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\u305d\u3057\u3066\u9069\u5207\u306b\u6697\u53f7\u9375\u3092\u7ba1\u7406\u3059\u308b\u3002 \u524d\u65b9\u79d8\u533f\u6027(PFS)\u3092\u6709\u52b9\u306b\u3057\u305fTLS\u3001\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306b\u3088\u308b\u6697\u53f7\u30b9\u30a4\u30fc\u30c8\u306e\u512a\u5148\u5ea6\u6c7a\u5b9a\u3001\u30bb\u30ad\u30e5\u30a2\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3069\u306e\u30bb\u30ad\u30e5\u30a2\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3001\u901a\u4fe1\u7d4c\u8def\u4e0a\u306e\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3059\u308b\u3002HTTP Strict Transport Security (HSTS)\u306e\u3088\u3046\u306a\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3067\u6697\u53f7\u5316\u3092\u5f37\u5236\u3059\u308b\u3002 \u6a5f\u5fae\u306a\u60c5\u5831\u3092\u542b\u3080\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0\u3092\u7121\u52b9\u306b\u3059\u308b\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u3001Argon2\u3001scrypt\u3001bcrypt\u3001PBKDF2\u306e\u3088\u3046\u306a\u30ef\u30fc\u30af\u30d5\u30a1\u30af\u30bf(\u9045\u5ef6\u30d5\u30a1\u30af\u30bf)\u306e\u3042\u308b\u3001\u5f37\u304f\u304b\u3064\u9069\u5fdc\u53ef\u80fd\u306a\u30ec\u30d9\u30eb\u306e\u30bd\u30eb\u30c8\u4ed8\u304d\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u7528\u3044\u308b\u3002 \u8a2d\u5b9a\u3068\u305d\u306e\u8a2d\u5b9a\u5024\u304c\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u3066\u52b9\u679c\u304c\u3042\u308b\u304b\u691c\u8a3c\u3059\u308b\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A02_2021-Cryptographic_Failures/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1 : \u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u81ea\u52d5\u6697\u53f7\u5316\u3092\u4f7f\u7528\u3057\u3001\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u6697\u53f7\u5316\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3055\u308c\u308b\u3068\u304d\u306b\u81ea\u52d5\u7684\u306b\u5fa9\u53f7\u3055\u308c\u308b\u305f\u3081\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u5e73\u6587\u306e\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u53d6\u5f97\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2 : \u3042\u308b\u30b5\u30a4\u30c8\u306f\u3001\u3059\u3079\u3066\u306e\u30da\u30fc\u30b8\u3067TLS\u3092\u4f7f\u3063\u3066\u304a\u3089\u305a\u3001\u30e6\u30fc\u30b6\u306bTLS\u3092\u5f37\u5236\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u305d\u306e\u30b5\u30a4\u30c8\u3067\u306f\u5f31\u3044\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u653b\u6483\u8005\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c8\u30e9\u30d5\u30a3\u30c3\u30af\u3092\u76e3\u8996\u3057\uff08\u4f8b\u3048\u3070\u3001\u6697\u53f7\u5316\u3057\u3066\u3044\u306a\u3044\u7121\u7dda\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\uff09\u3001HTTPS\u901a\u4fe1\u3092HTTP\u901a\u4fe1\u306b\u30c0\u30a6\u30f3\u30b0\u30ec\u30fc\u30c9\u3057\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u76d7\u8074\u3059\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u30af\u30c3\u30ad\u30fc\u3092\u76d7\u307f\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u653b\u6483\u8005\u306f\u3053\u306e\u30af\u30c3\u30ad\u30fc\u3092\u518d\u9001\u3057\u30e6\u30fc\u30b6\u306e(\u8a8d\u8a3c\u3055\u308c\u305f)\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4e57\u3063\u53d6\u308a\u3001\u305d\u306e\u30e6\u30fc\u30b6\u306e\u500b\u4eba\u30c7\u30fc\u30bf\u3092\u95b2\u89a7\u304a\u3088\u3073\u6539\u3056\u3093\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u653b\u6483\u8005\u306f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4e57\u3063\u53d6\u308b\u4ee3\u308f\u308a\u306b\u3001\u3059\u3079\u3066\u306e\u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u4f8b\u3048\u3070\u3001\u5165\u91d1\u306e\u53d7\u53d6\u4eba\uff09\u3092\u6539\u3056\u3093\u3067\u304d\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3 : \u3042\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306f\u3001\u30bd\u30eb\u30c8\u306a\u3057\u306e\u30cf\u30c3\u30b7\u30e5\u307e\u305f\u306f\u5358\u7d14\u306a\u30cf\u30c3\u30b7\u30e5\u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306e\u6b20\u9665\u304c\u3042\u308c\u3070\u3001\u653b\u6483\u8005\u306f\u305d\u308c\u3092\u60aa\u7528\u3057\u3066\u30d1\u30b9\u30ef\u30fc\u30c9\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u4e8b\u524d\u306b\u8a08\u7b97\u3055\u308c\u305f\u30cf\u30c3\u30b7\u30e5\u306e\u30ec\u30a4\u30f3\u30dc\u30fc\u30c6\u30fc\u30d6\u30eb\u3067\u3001\u3059\u3079\u3066\u306e\u30bd\u30eb\u30c8\u306a\u3057\u306e\u30cf\u30c3\u30b7\u30e5\u304c\u89e3\u8aad\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u305f\u3068\u3048\u30bd\u30eb\u30c8\u3042\u308a\u3067\u30cf\u30c3\u30b7\u30e5\u5316\u3055\u308c\u3066\u3044\u3066\u3082\u3001\u5358\u7d14\u307e\u305f\u306f\u9ad8\u901f\u306a\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3067\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u306fGPU\u3067\u89e3\u8aad\u3055\u308c\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A02_2021-Cryptographic_Failures/#_6","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A02_2021-Cryptographic_Failures/#cwe","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"\u5bfe\u5fdc\u3059\u308bCWE\u4e00\u89a7"},{"location":"ja/A02_2021-Cryptographic_Failures/#a022021-cryptographic-failures","text":"","title":"A02:2021 \u2013 Cryptographic Failures"},{"location":"ja/A02_2021-Cryptographic_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075","title":"Factors"},{"location":"ja/A02_2021-Cryptographic_Failures/#overview","text":"Shifting up one position to #2, previously known as Sensitive Data Exposure , which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable CWEs included are CWE-259: Use of Hard-coded Password , CWE-327: Broken or Risky Crypto Algorithm , and CWE-331 Insufficient Entropy .","title":"Overview"},{"location":"ja/A02_2021-Cryptographic_Failures/#description","text":"The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, and FTP. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. Are any old or weak cryptographic algorithms used either by default or in older code? Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Is encryption not enforced, e.g., are any user agent (browser) security directives or headers missing? Does the user agent (e.g., app, mail client) not verify if the received server certificate is valid? See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)","title":"Description"},{"location":"ja/A02_2021-Cryptographic_Failures/#how-to-prevent","text":"Do the following, at a minimum, and consult the references: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Apply controls as per the classification. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with perfect forward secrecy (PFS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2. Verify independently the effectiveness of configuration and settings.","title":"How to Prevent"},{"location":"ja/A02_2021-Cryptographic_Failures/#example-attack-scenarios","text":"Scenario #1 : An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text. Scenario #2 : A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer. Scenario #3 : The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted.","title":"Example Attack Scenarios"},{"location":"ja/A02_2021-Cryptographic_Failures/#references","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"References"},{"location":"ja/A02_2021-Cryptographic_Failures/#list-of-mapped-cwes","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"List of Mapped CWEs"},{"location":"ja/A03_2021-Injection/","text":"A03:2021 \u2013 \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078 \u6982\u8981 \u2693\ufe0e \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306f3\u4f4d\u306b\u4e0b\u304c\u3063\u3066\u3044\u307e\u3059\u3002 94%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304dCWE\u306f\u3001 CWE-79:\u30af\u30ed\u30b9\u30b5\u30a4\u30c8\u30fb\u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0 \u3001 CWE-89:SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 \u3001\u305d\u3057\u3066 CWE-73:\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d1\u30b9\u540d\u306e\u5916\u90e8\u5236\u5fa1 \u3067\u3059\u3002 \u8aac\u660e \u2693\ufe0e \u6b21\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u653b\u6483\u306b\u5bfe\u3057\u3066\u8106\u5f31\u3067\u3059: \u30e6\u30fc\u30b6\u304c\u63d0\u4f9b\u3057\u305f\u30c7\u30fc\u30bf\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u691c\u8a3c\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3001\u307e\u305f\u306f\u30b5\u30cb\u30bf\u30a4\u30ba\u3055\u308c\u306a\u3044\u3002 \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u5fdc\u3058\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u884c\u308f\u308c\u305a\u3001\u52d5\u7684\u30af\u30a8\u30ea\u307e\u305f\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u547c\u51fa\u3057\u304c\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u306b\u76f4\u63a5\u4f7f\u7528\u3055\u308c\u308b\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30fb\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\uff08ORM\uff09\u306e\u691c\u7d22\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u60aa\u610f\u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u304c\u4f7f\u7528\u3055\u308c\u3001\u91cd\u8981\u306a\u30ec\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3067\u62bd\u51fa\u3057\u3066\u3057\u307e\u3046\u3002 \u60aa\u610f\u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u3092\u76f4\u63a5\u307e\u305f\u306f\u9023\u7d50\u3057\u3066\u4f7f\u3046\u3002\u52d5\u7684\u30af\u30a8\u30ea\u3001\u30b3\u30de\u30f3\u30c9\u307e\u305f\u306f\u30b9\u30c8\u30a2\u30c9\u30fb\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306b\u304a\u3044\u3066SQL\u3084\u30b3\u30de\u30f3\u30c9\u304c\u305d\u306e\u3088\u3046\u306a\u69cb\u9020\u3068\u60aa\u610f\u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u3092\u542b\u3080\u3002 \u3088\u308a\u4e00\u822c\u7684\u306a\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u306f\u3001SQL\u3001NoSQL\u3001OS \u30b3\u30de\u30f3\u30c9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30fb\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\uff08ORM\uff09\u3001LDAP\u3001\u304a\u3088\u3073EL\u5f0f\uff08Expression Language\uff09\u307e\u305f\u306fOGNL\u5f0f\uff08Object Graph Navigation Library\uff09\u306e\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3059\u3079\u3066\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u3067\u540c\u3058\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ec\u30d3\u30e5\u30fc\u3059\u308c\u3070\u3001\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8106\u5f31\u3067\u3042\u308b\u304b\u6700\u3082\u52b9\u679c\u7684\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002 \u3059\u3079\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u30d8\u30c3\u30c0\u30fc\u3001URL\u3001Cookie\u3001JSON\u3001SOAP\u3001\u304a\u3088\u3073XML\u30c7\u30fc\u30bf\u5165\u529b\u306e\u5b8c\u5168\u306a\u81ea\u52d5\u30c6\u30b9\u30c8\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002 \u307e\u305f\u3001\u7d44\u7e54\u306f\u9759\u7684\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb (SAST) \u3068\u52d5\u7684\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u30c4\u30fc\u30eb (DAST) \u3092CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u5c0e\u5165\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u65b0\u305f\u306b\u4f5c\u3089\u308c\u3066\u3057\u307e\u3063\u305f\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u6b20\u9665\u3092\u7a3c\u50cd\u74b0\u5883\u306b\u5c55\u958b\u3059\u308b\u524d\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u9632\u6b62\u3059\u308b\u305f\u3081\u306b\u306f\u30b3\u30de\u30f3\u30c9\u3068\u30af\u30a8\u30ea\u304b\u3089\u30c7\u30fc\u30bf\u3092\u5e38\u306b\u5206\u3051\u3066\u304a\u304f\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002 \u63a8\u5968\u3055\u308c\u308b\u9078\u629e\u80a2\u306f\u5b89\u5168\u306aAPI\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3002\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u306e\u4f7f\u7528\u3092\u5b8c\u5168\u306b\u907f\u3051\u308b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\u3001\u307e\u305f\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30fb\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\u30fb\u30c4\u30fc\u30eb\uff08ORM\uff09\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u79fb\u884c\u3059\u308b\u3053\u3068\u3002 \u6ce8\u610f: \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u3001\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u3067\u306f\u3001PL/SQL\u307e\u305f\u306fT-SQL\u306b\u3088\u3063\u3066\u30af\u30a8\u30ea\u3068\u30c7\u30fc\u30bf\u3092\u9023\u7d50\u3057\u305f\u308a\u3001EXECUTE IMMEDIATE\u3084exec()\u3092\u5229\u7528\u3057\u3066\u60aa\u610f\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u30dd\u30b8\u30c6\u30a3\u30d6\u306a\u3001\u8a00\u3044\u63db\u3048\u308b\u3068\u300c\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u300d\u306b\u3088\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u5165\u529b\u691c\u8a3c\u3092\u7528\u3044\u308b\u3002\u7279\u6b8a\u6587\u5b57\u3092\u5fc5\u8981\u3068\u3059\u308b\u591a\u304f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001\u305f\u3068\u3048\u3070\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u30c6\u30ad\u30b9\u30c8\u9818\u57df\u3084API\u306a\u3069\u306b\u304a\u3044\u3066\u306f\u5b8c\u5168\u306a\u9632\u5fa1\u65b9\u6cd5\u3068\u306f\u306a\u3089\u306a\u3044\u3002 \u4e0a\u8a18\u306e\u5bfe\u5fdc\u304c\u56f0\u96e3\u306a\u52d5\u7684\u30af\u30a8\u30ea\u3067\u306f\u3001\u305d\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u56fa\u6709\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u69cb\u6587\u3092\u4f7f\u7528\u3057\u3066\u7279\u6b8a\u6587\u5b57\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b\u3002 \u6ce8\u610f: \u30c6\u30fc\u30d6\u30eb\u540d\u3084\u30ab\u30e9\u30e0\u540d\u306a\u3069\u306eSQL\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u306b\u5bfe\u3057\u3066\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u3067\u304d\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u3001\u30e6\u30fc\u30b6\u6307\u5b9a\u306e\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u540d\u306f\u5371\u967a\u3067\u3042\u308b\u3002\u3053\u308c\u306f\u30ec\u30dd\u30fc\u30c8\u4f5c\u6210\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u5b58\u5728\u3059\u308b\u4e00\u822c\u7684\u306a\u554f\u984c\u3067\u3042\u308b\u3002 \u30af\u30a8\u30ea\u5185\u3067LIMIT\u53e5\u3084\u305d\u306e\u4ed6\u306eSQL\u5236\u5fa1\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u653b\u6483\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u5927\u91cf\u6f0f\u6d29\u3092\u9632\u3050\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1 : \u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4fe1\u983c\u3067\u304d\u306a\u3044\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8106\u5f31\u306aSQL\u547c\u3073\u51fa\u3057\u3092\u4f5c\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; \u30b7\u30ca\u30ea\u30aa #2 : \u540c\u69d8\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u76f2\u4fe1\u3059\u308b\u3068\u3001\u8106\u5f31\u6027\u306e\u3042\u308b\u30af\u30a8\u30ea\u306b\u306a\u308a\u3048\u307e\u3059 (\u4f8b\u3048\u3070\u3001Hibernate\u30af\u30a8\u30ea\u8a00\u8a9e(HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); \u3053\u308c\u3089\u4e21\u65b9\u306e\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\u3001\u653b\u6483\u8005\u306f\u30d6\u30e9\u30a6\u30b6\u3067\u30d1\u30e9\u30e1\u30fc\u30bf'id'\u306e\u5024\u3092' or '1'='1\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070: http://example.com/app/accountView?id=' or '1'='1 \u3053\u308c\u3067\u3001\u4e21\u65b9\u306e\u30af\u30a8\u30ea\u306e\u610f\u5473\u304c\u5909\u3048\u3089\u308c\u3001accounts\u30c6\u30fc\u30d6\u30eb\u306b\u3042\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u5168\u3066\u8fd4\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3055\u3089\u306a\u308b\u653b\u6483\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u306e\u6539\u3056\u3093\u3084\u524a\u9664\u3001\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u547c\u3073\u51fa\u3057\u304c\u53ef\u80fd\u3067\u3059\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection') A03:2021 \u2013 Injection \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078 Overview \u2693\ufe0e Injection slides down to the third position. 94% of the applications were tested for some form of injection. Notable CWEs included are CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path . Description \u2693\ufe0e An application is vulnerable to attack when: User-supplied data is not validated, filtered, or sanitized by the application. Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include the static source (SAST) and dynamic application test (DAST) tools into the CI/CD pipeline to identify introduced injection flaws before production deployment. How to Prevent \u2693\ufe0e Preventing injection requires keeping data separate from commands and queries. The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec(). Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications. For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software. Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection. Example Attack Scenarios \u2693\ufe0e Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call: String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Similarly, an application\u2019s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In both cases, the attacker modifies the \u2018id\u2019 parameter value in their browser to send: \u2018 or \u20181\u2019=\u20191. For example: http://example.com/app/accountView?id=' or '1'='1 This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures. References \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection List of Mapped CWEs \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"A03 \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3"},{"location":"ja/A03_2021-Injection/#a032021","text":"","title":"A03:2021 \u2013 \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3"},{"location":"ja/A03_2021-Injection/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078","title":"\u56e0\u5b50"},{"location":"ja/A03_2021-Injection/#_2","text":"\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306f3\u4f4d\u306b\u4e0b\u304c\u3063\u3066\u3044\u307e\u3059\u3002 94%\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u4f55\u3089\u304b\u306e\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304dCWE\u306f\u3001 CWE-79:\u30af\u30ed\u30b9\u30b5\u30a4\u30c8\u30fb\u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0 \u3001 CWE-89:SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 \u3001\u305d\u3057\u3066 CWE-73:\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d1\u30b9\u540d\u306e\u5916\u90e8\u5236\u5fa1 \u3067\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A03_2021-Injection/#_3","text":"\u6b21\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u653b\u6483\u306b\u5bfe\u3057\u3066\u8106\u5f31\u3067\u3059: \u30e6\u30fc\u30b6\u304c\u63d0\u4f9b\u3057\u305f\u30c7\u30fc\u30bf\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u691c\u8a3c\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3001\u307e\u305f\u306f\u30b5\u30cb\u30bf\u30a4\u30ba\u3055\u308c\u306a\u3044\u3002 \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u5fdc\u3058\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u884c\u308f\u308c\u305a\u3001\u52d5\u7684\u30af\u30a8\u30ea\u307e\u305f\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u547c\u51fa\u3057\u304c\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u306b\u76f4\u63a5\u4f7f\u7528\u3055\u308c\u308b\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30fb\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\uff08ORM\uff09\u306e\u691c\u7d22\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u60aa\u610f\u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u304c\u4f7f\u7528\u3055\u308c\u3001\u91cd\u8981\u306a\u30ec\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3067\u62bd\u51fa\u3057\u3066\u3057\u307e\u3046\u3002 \u60aa\u610f\u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u3092\u76f4\u63a5\u307e\u305f\u306f\u9023\u7d50\u3057\u3066\u4f7f\u3046\u3002\u52d5\u7684\u30af\u30a8\u30ea\u3001\u30b3\u30de\u30f3\u30c9\u307e\u305f\u306f\u30b9\u30c8\u30a2\u30c9\u30fb\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306b\u304a\u3044\u3066SQL\u3084\u30b3\u30de\u30f3\u30c9\u304c\u305d\u306e\u3088\u3046\u306a\u69cb\u9020\u3068\u60aa\u610f\u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u3092\u542b\u3080\u3002 \u3088\u308a\u4e00\u822c\u7684\u306a\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u306f\u3001SQL\u3001NoSQL\u3001OS \u30b3\u30de\u30f3\u30c9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30fb\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\uff08ORM\uff09\u3001LDAP\u3001\u304a\u3088\u3073EL\u5f0f\uff08Expression Language\uff09\u307e\u305f\u306fOGNL\u5f0f\uff08Object Graph Navigation Library\uff09\u306e\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3059\u3079\u3066\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u3067\u540c\u3058\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ec\u30d3\u30e5\u30fc\u3059\u308c\u3070\u3001\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8106\u5f31\u3067\u3042\u308b\u304b\u6700\u3082\u52b9\u679c\u7684\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002 \u3059\u3079\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u30d8\u30c3\u30c0\u30fc\u3001URL\u3001Cookie\u3001JSON\u3001SOAP\u3001\u304a\u3088\u3073XML\u30c7\u30fc\u30bf\u5165\u529b\u306e\u5b8c\u5168\u306a\u81ea\u52d5\u30c6\u30b9\u30c8\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002 \u307e\u305f\u3001\u7d44\u7e54\u306f\u9759\u7684\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb (SAST) \u3068\u52d5\u7684\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u30c4\u30fc\u30eb (DAST) \u3092CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u5c0e\u5165\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u65b0\u305f\u306b\u4f5c\u3089\u308c\u3066\u3057\u307e\u3063\u305f\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u6b20\u9665\u3092\u7a3c\u50cd\u74b0\u5883\u306b\u5c55\u958b\u3059\u308b\u524d\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002","title":"\u8aac\u660e"},{"location":"ja/A03_2021-Injection/#_4","text":"\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u9632\u6b62\u3059\u308b\u305f\u3081\u306b\u306f\u30b3\u30de\u30f3\u30c9\u3068\u30af\u30a8\u30ea\u304b\u3089\u30c7\u30fc\u30bf\u3092\u5e38\u306b\u5206\u3051\u3066\u304a\u304f\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002 \u63a8\u5968\u3055\u308c\u308b\u9078\u629e\u80a2\u306f\u5b89\u5168\u306aAPI\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3002\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u306e\u4f7f\u7528\u3092\u5b8c\u5168\u306b\u907f\u3051\u308b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\u3001\u307e\u305f\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30fb\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\u30fb\u30c4\u30fc\u30eb\uff08ORM\uff09\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u79fb\u884c\u3059\u308b\u3053\u3068\u3002 \u6ce8\u610f: \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u3001\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u3067\u306f\u3001PL/SQL\u307e\u305f\u306fT-SQL\u306b\u3088\u3063\u3066\u30af\u30a8\u30ea\u3068\u30c7\u30fc\u30bf\u3092\u9023\u7d50\u3057\u305f\u308a\u3001EXECUTE IMMEDIATE\u3084exec()\u3092\u5229\u7528\u3057\u3066\u60aa\u610f\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u30dd\u30b8\u30c6\u30a3\u30d6\u306a\u3001\u8a00\u3044\u63db\u3048\u308b\u3068\u300c\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u300d\u306b\u3088\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u5165\u529b\u691c\u8a3c\u3092\u7528\u3044\u308b\u3002\u7279\u6b8a\u6587\u5b57\u3092\u5fc5\u8981\u3068\u3059\u308b\u591a\u304f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001\u305f\u3068\u3048\u3070\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u30c6\u30ad\u30b9\u30c8\u9818\u57df\u3084API\u306a\u3069\u306b\u304a\u3044\u3066\u306f\u5b8c\u5168\u306a\u9632\u5fa1\u65b9\u6cd5\u3068\u306f\u306a\u3089\u306a\u3044\u3002 \u4e0a\u8a18\u306e\u5bfe\u5fdc\u304c\u56f0\u96e3\u306a\u52d5\u7684\u30af\u30a8\u30ea\u3067\u306f\u3001\u305d\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u56fa\u6709\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u69cb\u6587\u3092\u4f7f\u7528\u3057\u3066\u7279\u6b8a\u6587\u5b57\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b\u3002 \u6ce8\u610f: \u30c6\u30fc\u30d6\u30eb\u540d\u3084\u30ab\u30e9\u30e0\u540d\u306a\u3069\u306eSQL\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u306b\u5bfe\u3057\u3066\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u3067\u304d\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u3001\u30e6\u30fc\u30b6\u6307\u5b9a\u306e\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u540d\u306f\u5371\u967a\u3067\u3042\u308b\u3002\u3053\u308c\u306f\u30ec\u30dd\u30fc\u30c8\u4f5c\u6210\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u5b58\u5728\u3059\u308b\u4e00\u822c\u7684\u306a\u554f\u984c\u3067\u3042\u308b\u3002 \u30af\u30a8\u30ea\u5185\u3067LIMIT\u53e5\u3084\u305d\u306e\u4ed6\u306eSQL\u5236\u5fa1\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u653b\u6483\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u5927\u91cf\u6f0f\u6d29\u3092\u9632\u3050\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A03_2021-Injection/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1 : \u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4fe1\u983c\u3067\u304d\u306a\u3044\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8106\u5f31\u306aSQL\u547c\u3073\u51fa\u3057\u3092\u4f5c\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; \u30b7\u30ca\u30ea\u30aa #2 : \u540c\u69d8\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u76f2\u4fe1\u3059\u308b\u3068\u3001\u8106\u5f31\u6027\u306e\u3042\u308b\u30af\u30a8\u30ea\u306b\u306a\u308a\u3048\u307e\u3059 (\u4f8b\u3048\u3070\u3001Hibernate\u30af\u30a8\u30ea\u8a00\u8a9e(HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); \u3053\u308c\u3089\u4e21\u65b9\u306e\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\u3001\u653b\u6483\u8005\u306f\u30d6\u30e9\u30a6\u30b6\u3067\u30d1\u30e9\u30e1\u30fc\u30bf'id'\u306e\u5024\u3092' or '1'='1\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070: http://example.com/app/accountView?id=' or '1'='1 \u3053\u308c\u3067\u3001\u4e21\u65b9\u306e\u30af\u30a8\u30ea\u306e\u610f\u5473\u304c\u5909\u3048\u3089\u308c\u3001accounts\u30c6\u30fc\u30d6\u30eb\u306b\u3042\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u5168\u3066\u8fd4\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3055\u3089\u306a\u308b\u653b\u6483\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u306e\u6539\u3056\u3093\u3084\u524a\u9664\u3001\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u547c\u3073\u51fa\u3057\u304c\u53ef\u80fd\u3067\u3059\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A03_2021-Injection/#_6","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A03_2021-Injection/#cwe","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A03_2021-Injection/#a032021-injection","text":"","title":"A03:2021 \u2013 Injection"},{"location":"ja/A03_2021-Injection/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078","title":"Factors"},{"location":"ja/A03_2021-Injection/#overview","text":"Injection slides down to the third position. 94% of the applications were tested for some form of injection. Notable CWEs included are CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path .","title":"Overview"},{"location":"ja/A03_2021-Injection/#description","text":"An application is vulnerable to attack when: User-supplied data is not validated, filtered, or sanitized by the application. Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include the static source (SAST) and dynamic application test (DAST) tools into the CI/CD pipeline to identify introduced injection flaws before production deployment.","title":"Description"},{"location":"ja/A03_2021-Injection/#how-to-prevent","text":"Preventing injection requires keeping data separate from commands and queries. The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec(). Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications. For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software. Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.","title":"How to Prevent"},{"location":"ja/A03_2021-Injection/#example-attack-scenarios","text":"Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call: String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Similarly, an application\u2019s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In both cases, the attacker modifies the \u2018id\u2019 parameter value in their browser to send: \u2018 or \u20181\u2019=\u20191. For example: http://example.com/app/accountView?id=' or '1'='1 This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures.","title":"Example Attack Scenarios"},{"location":"ja/A03_2021-Injection/#references","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"References"},{"location":"ja/A03_2021-Injection/#list-of-mapped-cwes","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"List of Mapped CWEs"},{"location":"ja/A04_2021-Insecure_Design/","text":"A04:2021 - \u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691 \u6982\u8981 \u2693\ufe0e 2021\u5e74\u306e\u65b0\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u306f\u3001\u8a2d\u8a08\u3084\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6b20\u9665\u306b\u95a2\u3059\u308b\u30ea\u30b9\u30af\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002 \u79c1\u305f\u3061\u306f\u8105\u5a01\u306e\u30e2\u30c7\u30eb\u5316\u3001\u30bb\u30ad\u30e5\u30a2\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u304a\u3088\u3073\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306a\u3069\u3092\u3082\u3063\u3068\u5229\u7528\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d CWE (Common Weakness Enumerations) \u306f\u3001CWE-209: \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29\u3001CWE-256: \u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u8a8d\u8a3c\u60c5\u5831\u306e\u4fdd\u5b58\u3001CWE-501: \u4fe1\u983c\u5883\u754c\u7dda\u306e\u4fb5\u5bb3\u304a\u3088\u3073\u3001CWE-522: \u9069\u5207\u306b\u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb \u306a\u3069\u3067\u3059\u3002 \u8aac\u660e \u2693\ufe0e \u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08\u300d\u3068\u306f\u3001\u69d8\u3005\u306a\u5f31\u70b9\u3092\u8868\u3059\u5e45\u5e83\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u300c\u5b89\u5168\u306a\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u300d\u307e\u305f\u306f\u3001\u300c\u52b9\u679c\u7684\u3067\u306f\u306a\u3044\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u300d\u3068\u8868\u73fe\u3055\u308c\u307e\u3059\u3002 \u300c\u5b89\u5168\u306a\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u306f\u3001\u7ba1\u7406\u7b56\u304c\u6b20\u5982\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d6\u306a\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3059\u3079\u304d\u30b3\u30fc\u30c9\u306b\u3001\u6697\u53f7\u5316\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\u5834\u5408\u304c\u3042\u3052\u3089\u308c\u307e\u3059\u3002 \u300c\u52b9\u679c\u7684\u3067\u306f\u306a\u3044\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u300d\u3068\u306f\u3001\u653b\u6483\u8005\u304c\u8105\u5a01\u3092\u767a\u751f\u3055\u305b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u30c9\u30e1\u30a4\u30f3\uff08\u30d3\u30b8\u30cd\u30b9\uff09\u30ed\u30b8\u30c3\u30af\u306e\u691c\u8a3c\u304c\u4e0d\u5341\u5206\u3067\u3042\u308b\u305f\u3081\u306b\u3001\u30ea\u30b9\u30af\u304c\u9855\u5728\u5316\u3059\u308b\u5834\u5408\u3092\u610f\u5473\u3057\u307e\u3059\u3002 \u4f8b\u3068\u3057\u3066\u3001\u6240\u5f97\u533a\u5206\u306b\u57fa\u3065\u3044\u3066\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u7a0e\u306e\u8efd\u6e1b\u63aa\u7f6e\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u304c\u3001\u3059\u3079\u3066\u306e\u5165\u529b\u304c\u6b63\u3057\u304f\u7f72\u540d\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3057\u3066\u304a\u3089\u305a\u3001\u672c\u6765\u4ed8\u4e0e\u3055\u308c\u308b\u3079\u304d\u3082\u306e\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u5927\u304d\u306a\u8efd\u6e1b\u63aa\u7f6e\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u5834\u5408\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002 \u8981\u4ef6\u3068\u30ea\u30bd\u30fc\u30b9\u30de\u30cd\u30b8\u30e1\u30f3\u30c8 \u2693\ufe0e \u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u8cc7\u7523\u306e\u6a5f\u5bc6\u6027\u3001\u771f\u6b63\u6027\u3001\u5b8c\u5168\u6027\u3001\u53ef\u7528\u6027\u306b\u95a2\u3059\u308b\u4fdd\u8b77\u8981\u4ef6\u304a\u3088\u3073\u3001\u671f\u5f85\u3055\u308c\u308b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d3\u30b8\u30cd\u30b9\u8981\u4ef6\u3092\u53ce\u96c6\u3057\u3001\u4e8b\u696d\u90e8\u9580\u3068\u5354\u8b70\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u516c\u958b\u3055\u308c\u308b\u7a0b\u5ea6\u306b\u5fdc\u3058\u3066\u3001\uff08\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306b\u52a0\u3048\u3066\uff09\u30c6\u30ca\u30f3\u30c8\u3092\u5206\u96e2\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6a5f\u80fd\u7684\u304a\u3088\u3073\u975e\u6a5f\u80fd\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8981\u4ef6\u3092\u542b\u3080\u3001\u6280\u8853\u7684\u306a\u8981\u4ef6\u3092\u307e\u3068\u3081\u307e\u3059\u3002 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6d3b\u52d5\u3092\u542b\u3080\u8a2d\u8a08\u3001\u69cb\u7bc9\u3001\u30c6\u30b9\u30c8\u304a\u3088\u3073\u3001\u904b\u7528\u306e\u3059\u3079\u3066\u3092\u30ab\u30d0\u30fc\u3059\u308b\u4e88\u7b97\u3092\u8a08\u753b\u3057\u3001\u4e8b\u696d\u90e8\u9580\u3068\u5354\u8b70\u3057\u307e\u3059\u3002 \u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u8a2d\u8a08 \u2693\ufe0e \u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u8a2d\u8a08\u300d\u3068\u306f\u3001\u5e38\u306b\u8105\u5a01\u3092\u8a55\u4fa1\u3057\u3001\u65e2\u77e5\u306e\u653b\u6483\u65b9\u6cd5\u3092\u9632\u3050\u305f\u3081\u306b\u30b3\u30fc\u30c9\u3092\u5805\u7262\u306b\u8a2d\u8a08\u3057\u3001\u30c6\u30b9\u30c8\u3059\u308b\u6587\u5316\u3068\u65b9\u6cd5\u8ad6\u306e\u3053\u3068\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u3084\u30a2\u30af\u30bb\u30b9\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306a\u3069\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u5909\u66f4\u3092\u78ba\u8a8d\u3059\u308b\u30bb\u30c3\u30b7\u30e7\u30f3\uff08\u307e\u305f\u306f\u540c\u69d8\u306e\u6d3b\u52d5\uff09\u306b\u8105\u5a01\u306e\u30e2\u30c7\u30eb\u5316\u3092\u7d71\u5408\u3059\u308b\u3079\u304d\u3067\u3059\u3002 \u30e6\u30fc\u30b6\u30b9\u30c8\u30fc\u30ea\u30fc\u306e\u958b\u767a\u306b\u304a\u3044\u3066\u306f\u3001\u6b63\u5e38\u306a\u30d5\u30ed\u30fc\u53ca\u3073\u969c\u5bb3\u306e\u72b6\u614b\u3092\u6c7a\u5b9a\u3057\u3001\u8cac\u4efb\u8005\u304a\u3088\u3073\u3001\u5f71\u97ff\u3092\u53d7\u3051\u308b\u5f53\u4e8b\u8005\u304c\u305d\u308c\u3089\u3092\u5341\u5206\u306b\u7406\u89e3\u3057\u5408\u610f\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6b63\u5e38\u7cfb\u3068\u7570\u5e38\u7cfb\u306e\u30d5\u30ed\u30fc\u306e\u4eee\u8aac\u3068\u6761\u4ef6\u3092\u5206\u6790\u3057\u3001\u305d\u308c\u3089\u304c\u6b63\u78ba\u3067\u3042\u308a\u671f\u5f85\u3055\u308c\u308b\u7269\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u4eee\u8aac\u3092\u691c\u8a3c\u3057\u3001\u9069\u5207\u306a\u52d5\u4f5c\u306b\u5fc5\u8981\u306a\u6761\u4ef6\u3092\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u3092\u6c7a\u5b9a\u3057\u3001\u7d50\u679c\u3092\u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30fc\u30ea\u30fc\u3068\u3057\u3066\u78ba\u5b9f\u306b\u6587\u66f8\u5316\u3057\u307e\u3057\u3087\u3046\u3002 \u5931\u6557\u304b\u3089\u5b66\u3073\u3001\u6539\u5584\u3092\u4fc3\u9032\u3059\u308b\u305f\u3081\u306e\u7a4d\u6975\u7684\u306a\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u3092\u63d0\u4f9b\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u809d\u8981\u3067\u3059\u3002\u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u8a2d\u8a08\u300d\u3068\u306f\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u8ffd\u52a0\u3067\u304d\u308b\u30a2\u30c9\u30aa\u30f3\u3067\u3082\u30c4\u30fc\u30eb\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002 Secure Development Lifecycle \u2693\ufe0e \u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u300d\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001\u30bb\u30ad\u30e5\u30a2\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3001\u4f55\u3089\u304b\u306e\u30bb\u30ad\u30e5\u30a2\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u65b9\u6cd5\u8ad6\u3001\u5b89\u5168\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30c4\u30fc\u30eb\u3001\u304a\u3088\u3073\u8105\u5a01\u306e\u30e2\u30c7\u30eb\u5316\u304c\u5fc5\u8981\u3067\u3059\u3002 \u5168\u3066\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u671f\u9593\u3092\u901a\u3057\u3066\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u958b\u59cb\u6642\u306b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u5c02\u9580\u5bb6\u306b\u58f0\u3092\u304b\u3051\u3066\u304f\u3060\u3055\u3044\u3002 OWASP \u30bd\u30d5\u30c8\u30a6\u30a8\u30a2\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fdd\u8a3c\u6210\u719f\u5ea6\u30e2\u30c7\u30eb(OWASP SAMM) \u3092\u6d3b\u7528\u3057\u3066\u3001\u5b89\u5168\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u306b\u53d6\u308a\u7d44\u307f\u307e\u3057\u3087\u3046\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304a\u3088\u3073\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u95a2\u9023\u306e\u7ba1\u7406\u7b56\u306e\u8a55\u4fa1\u304a\u3088\u3073\u8a2d\u8a08\u3092\u652f\u63f4\u3059\u308b\u305f\u3081\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u5c02\u9580\u5bb6\u3068\u3068\u3082\u306b\u30bb\u30ad\u30e5\u30a2\u306a\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u78ba\u7acb\u3057\u4f7f\u7528\u3059\u308b \u30bb\u30ad\u30e5\u30a2\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u307e\u305f\u306f\u3001\u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u69cb\u7bc9\u3057\u4f7f\u7528\u3059\u308b \u91cd\u8981\u306a\u8a8d\u8a3c\u3001\u30a2\u30af\u30bb\u30b9\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3001\u304a\u3088\u3073\u6697\u53f7\u9375\u306e\u7ba1\u7406\u30d5\u30ed\u30fc\u306b\u8105\u5a01\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b \u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30fc\u30ea\u30fc\u306b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a00\u8a9e\u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u7d44\u307f\u8fbc\u3080 (\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u304b\u3089\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u307e\u3067)\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5404\u5c64\u306b\u59a5\u5f53\u6027\u30c1\u30a7\u30c3\u30af\u3092\u7d71\u5408\u3059\u308b \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304a\u3088\u3073\u7d71\u5408\u30c6\u30b9\u30c8\u3092\u5b9f\u65bd\u3057\u3001\u3059\u3079\u3066\u306e\u91cd\u8981\u306a\u30d5\u30ed\u30fc\u304c\u8105\u5a01\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u8010\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5404\u968e\u5c64\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9 \u3068 \u30df\u30b9\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u307e\u3068\u3081\u308b \u30ea\u30b9\u30af\u7ba1\u7406\u306b\u304a\u3051\u308b\u4fdd\u8b77\u306e\u5fc5\u8981\u6027\u306b\u5fdc\u3058\u3066\u3001\u30b7\u30b9\u30c6\u30e0\u5c64\u3068\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u306e\u968e\u5c64\u3092\u5206\u3051\u308b \u3059\u3079\u3066\u306e\u968e\u5c64\u3067\u30c6\u30ca\u30f3\u30c8\u3092\u5206\u96e2\u3057\u305f\u5805\u7262\u306a\u8a2d\u8a08\u3092\u884c\u3046 \u30e6\u30fc\u30b6\u30fc\u3084\u30b5\u30fc\u30d3\u30b9\u306b\u3088\u308b\u904e\u5270\u306a\u30ea\u30bd\u30fc\u30b9\u6d88\u8cbb\u3092\u5236\u9650\u3059\u308b \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1: \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u56de\u5fa9\u30d5\u30ed\u30fc\u306b\u306f\u300c\u79d8\u5bc6\u306e\u8cea\u554f\u3068\u7b54\u3048\u300d\u304c\u542b\u307e\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u300c\u79d8\u5bc6\u306e\u8cea\u554f\u3068\u7b54\u3048\u300d\u306f\u3001NIST 800-63b\u3001OWASP ASVS\u3001\u304a\u3088\u3073 OWASP Top 10 \u3067\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u300c\u79d8\u5bc6\u306e\u8cea\u554f\u3068\u7b54\u3048\u300d\u306f\u8907\u6570\u306e\u4eba\u304c\u7b54\u3048\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8a3c\u62e0\u3068\u3057\u3066\u4fe1\u983c\u3067\u304d\u306a\u3044\u305f\u3081\u3067\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u524a\u9664\u3057\u3001\u3088\u308a\u5b89\u5168\u306a\u8a2d\u8a08\u306b\u7f6e\u304d\u63db\u3048\u308b\u3079\u304d\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u3042\u308b\u6620\u753b\u9928\u30c1\u30a7\u30fc\u30f3\u3067\u306f\u56e3\u4f53\u4e88\u7d04\u306b\u3088\u308b\u5272\u5f15\u3092\u8a8d\u3081\u3066\u304a\u308a\u3001\u6700\u5927 15 \u540d\u307e\u3067\u306f\u4e88\u7d04\u4fdd\u8a3c\u91d1\u304c\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002 \u653b\u6483\u8005\u306f\u3001\u3053\u306e\u30d5\u30ed\u30fc\u306b\u5bfe\u3059\u308b\u8105\u5a01\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3001\u6570\u56de\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067600\u5e2d\u3068\u3059\u3079\u3066\u306e\u6620\u753b\u9928\u3092\u4e00\u5ea6\u306b\u4e88\u7d04\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u3001\u5927\u898f\u6a21\u306a\u640d\u5931\u3092\u5f15\u304d\u8d77\u3053\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u3042\u308b\u5c0f\u58f2\u30c1\u30a7\u30fc\u30f3\u306e\u96fb\u5b50\u5546\u53d6\u5f15\u30b5\u30a4\u30c8\u3067\u306f\u3001\u30c0\u30d5\u5c4b\u304c\u30aa\u30fc\u30af\u30b7\u30e7\u30f3\u30b5\u30a4\u30c8\u306b\u8ee2\u58f2\u3059\u308b\u305f\u3081\u306b\u9ad8\u7d1a\u30d3\u30c7\u30aa\u30ab\u30fc\u30c9\u3092\u8cfc\u5165\u3059\u308b\u30dc\u30c3\u30c8\u3078\u306e\u5bfe\u7b56\u304c\u306a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u306e\u7d50\u679c\u3001\u30d3\u30c7\u30aa\u30ab\u30fc\u30c9\u30e1\u30fc\u30ab\u30fc\u3084\u5c0f\u58f2\u30c1\u30a7\u30fc\u30f3\u5e97\u306b\u3068\u3063\u3066\u306f\u6700\u60aa\u306e\u8a55\u5224\u3068\u306a\u308a\u3001\u3053\u308c\u3089\u306e\u30ab\u30fc\u30c9\u3092\u307e\u3063\u305f\u304f\u624b\u306b\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u71b1\u72c2\u7684\u306a\u30d5\u30a1\u30f3\u306b\u3068\u3063\u3066\u306f\u4e0d\u5e78\u3092\u3082\u305f\u3089\u3057\u307e\u3059\u3002 \u6ce8\u610f\u6df1\u3044\u30dc\u30c3\u30c8\u5bfe\u7b56\u306e\u8a2d\u8a08\u3084\u3001\u5165\u624b\u53ef\u80fd\u306b\u306a\u3063\u3066\u304b\u3089\u6570\u79d2\u4ee5\u5185\u306b\u8cfc\u5165\u3055\u308c\u305f\u5834\u5408\u306a\u3069\u306e\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u975e\u6b63\u898f\u306e\u8cfc\u5165\u3092\u8b58\u5225\u3057\u3001\u305d\u306e\u3088\u3046\u306a\u53d6\u5f15\u3092\u62d2\u5426\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-73 \u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d1\u30b9\u540d\u306e\u5916\u90e8\u5236\u5fa1 CWE-183 \u8a31\u5bb9\u7bc4\u56f2\u304c\u5e83\u3059\u304e\u308b\u5165\u529b\u5236\u9650 CWE-209 \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 CWE-213 \u4e92\u63db\u6027\u306e\u306a\u3044\u30dd\u30ea\u30b7\u30fc\u306b\u3088\u308b\u6a5f\u5bc6\u60c5\u5831\u306e\u6f0f\u6d29 CWE-235 \u60f3\u5b9a\u3092\u8d85\u3048\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e0d\u9069\u5207\u306a\u51e6\u7406 CWE-256 \u30d1\u30b9\u30ef\u30fc\u30c9\u306a\u3069\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u304c\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-257 \u5fa9\u5143\u53ef\u80fd\u306a\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9 CWE-266 \u4e0d\u6b63\u78ba\u306a\u7279\u6a29\u306e\u5272\u308a\u5f53\u3066 CWE-269 \u4e0d\u9069\u5207\u306a\u7279\u6a29\u7ba1\u7406 CWE-280 \u6a29\u9650\u7ba1\u7406\u306e\u4e0d\u5099 CWE-311 \u91cd\u8981\u306a\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3066\u3044\u306a\u3044\u554f\u984c CWE-312 \u91cd\u8981\u306a\u60c5\u5831\u304c\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-313 \u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30b9\u30af\u306b\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-316 \u30e1\u30e2\u30ea\u4e0a\u306b\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-419 \u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u30d7\u30e9\u30a4\u30de\u30ea\u30fc\u30c1\u30e3\u30cd\u30eb CWE-430 \u8aa4\u3063\u305f\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u914d\u7f6e CWE-434 \u9069\u5207\u3067\u306a\u3044\u30a2\u30c3\u30d7\u30ed\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u5236\u9650 CWE-444 HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u77db\u76fe\u3057\u305f\u89e3\u91c8\uff08HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u30b9\u30de\u30b0\u30ea\u30f3\u30b0\uff09 CWE-451 \u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08UI\uff09\u306b\u3088\u308b\u91cd\u8981\u60c5\u5831\u306e\u8aa4\u8868\u793a CWE-472 \u4e0d\u5909\u3068\u4eee\u5b9a\u3055\u308c\u308b Web \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5916\u90e8\u5236\u5fa1 CWE-501 \u4fe1\u983c\u5883\u754c\u7dda\u306e\u4fb5\u5bb3 CWE-522 \u5341\u5206\u3067\u306a\u3044\u8cc7\u683c\u60c5\u5831\u4fdd\u8b77 CWE-525 \u6a5f\u5bc6\u60c5\u5831\u3092\u542b\u3080Web\u30d6\u30e9\u30a6\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4f7f\u7528 CWE-539 \u6a5f\u5bc6\u60c5\u5831\u3092\u542b\u3080\u30d1\u30fc\u30b7\u30b9\u30c6\u30f3\u30c8\u30af\u30c3\u30ad\u30fc\u306e\u4f7f\u7528 CWE-579 J2EE\u306e\u30d0\u30c3\u30c9\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\uff1a\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u683c\u7d0d\u3055\u308c\u305f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u4e0d\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 CWE-598 GET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30af\u30a8\u30ea\u6587\u5b57\u5217\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 CWE-602 \u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u3067\u5b9f\u65bd CWE-642 \u91cd\u8981\u306a\u72b6\u614b\u30c7\u30fc\u30bf\u306e\u5916\u90e8\u5236\u5fa1 CWE-646 \u5916\u90e8\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u62e1\u5f35\u5b50\u3078\u306e\u4f9d\u5b58 CWE-650 \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306b\u304a\u3051\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u3078\u306e\u904e\u5270\u306a\u4fe1\u983c CWE-653 \u4e0d\u5341\u5206\u306a\u30b3\u30f3\u30d1\u30fc\u30c8\u30e1\u30f3\u30c8\u5316 CWE-656 \u96a0\u307a\u3044\u306b\u3088\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3078\u306e\u4f9d\u5b58 CWE-657 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u8a08\u539f\u5247\u306e\u9055\u53cd CWE-799 \u9069\u5207\u3067\u306a\u3044\u76f8\u4e92\u4f5c\u7528\u306b\u5bfe\u3059\u308b\u983b\u5ea6\u5236\u5fa1 CWE-807 \u4fe1\u983c\u3067\u304d\u306a\u3044\u5165\u529b\u306b\u57fa\u3065\u3044\u305f\u5224\u65ad\u3078\u306e\u4f9d\u5b58 CWE-840 \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306e\u30a8\u30e9\u30fc CWE-841 \u30e6\u30fc\u30b6\u30fc\u306e\u632f\u308b\u821e\u3044\u306b\u57fa\u3065\u3044\u305f\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306b\u4f9d\u5b58\u3057\u305f\u4e0d\u9069\u5207\u306a\u51e6\u7406\u306e\u5b9f\u65bd CWE-927 \u30bb\u30f3\u30b7\u30c6\u30a3\u30d6\u306a\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u306e\u6697\u9ed9\u7684\u30a4\u30f3\u30c6\u30f3\u30c8\u306e\u4f7f\u7528 CWE-1021 \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305fUI\u30ec\u30a4\u30e4\u30fc\u3084\u30d5\u30ec\u30fc\u30e0\u306e\u4e0d\u9069\u5207\u306a\u5236\u9650 CWE-1173 \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4e0d\u9069\u5207\u306a\u4f7f\u7528 A04:2021 \u2013 Insecure Design \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691 Overview \u2693\ufe0e A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. Notable Common Weakness Enumerations (CWEs) include CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials . Description \u2693\ufe0e Insecure design is a broad category representing many different weaknesses, expressed as \u201cmissing or ineffective control design.\u201d Missing insecure design is where a control is absent. For example, imagine code that should be encrypting sensitive data, but there is no method. Ineffective insecure design is where an attacker could realize a threat, but insufficient domain (business) logic validation prevents the action. For example, imagine domain logic that is supposed to process pandemic tax relief based upon income brackets but does not validate that all inputs are correctly signed and provides a much more significant relief benefit than should be granted. Requirements and Resource Management \u2693\ufe0e Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, authenticity, integrity, availability of all data assets, and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities. Secure Design \u2693\ufe0e Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software. Secure Development Lifecycle \u2693\ufe0e Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the OWASP Software Assurance Maturity Model (SAMM) to help structure your secure software development efforts. How to Prevent \u2693\ufe0e Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls Establish and use a library of secure design patterns or paved road ready to use components Use threat modeling for critical authentication, access control, business logic, and key flows Integrate security language and controls into user stories Integrate plausibility checks at each tier of your application (from frontend to backend) Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases and misuse-cases for each tier of your application. Segregate tier layers on the system and network layers depending on the exposure and protection needs Segregate tenants robustly by design throughout all tiers Limit resource consumption by user or service Example Attack Scenarios \u2693\ufe0e Scenario #1: A credential recovery workflow might include \u201cquestions and answers,\u201d which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design. Scenario #2: A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income. Scenario #3: A retail chain\u2019s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions. References \u2693\ufe0e OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling List of Mapped CWEs \u2693\ufe0e CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"A04 \u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08"},{"location":"ja/A04_2021-Insecure_Design/#a042021-","text":"","title":"A04:2021 - \u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08"},{"location":"ja/A04_2021-Insecure_Design/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691","title":"\u56e0\u5b50"},{"location":"ja/A04_2021-Insecure_Design/#_2","text":"2021\u5e74\u306e\u65b0\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u306f\u3001\u8a2d\u8a08\u3084\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6b20\u9665\u306b\u95a2\u3059\u308b\u30ea\u30b9\u30af\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002 \u79c1\u305f\u3061\u306f\u8105\u5a01\u306e\u30e2\u30c7\u30eb\u5316\u3001\u30bb\u30ad\u30e5\u30a2\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u304a\u3088\u3073\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306a\u3069\u3092\u3082\u3063\u3068\u5229\u7528\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d CWE (Common Weakness Enumerations) \u306f\u3001CWE-209: \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29\u3001CWE-256: \u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u8a8d\u8a3c\u60c5\u5831\u306e\u4fdd\u5b58\u3001CWE-501: \u4fe1\u983c\u5883\u754c\u7dda\u306e\u4fb5\u5bb3\u304a\u3088\u3073\u3001CWE-522: \u9069\u5207\u306b\u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb \u306a\u3069\u3067\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A04_2021-Insecure_Design/#_3","text":"\u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u306a\u3044\u4e0d\u5b89\u306a\u8a2d\u8a08\u300d\u3068\u306f\u3001\u69d8\u3005\u306a\u5f31\u70b9\u3092\u8868\u3059\u5e45\u5e83\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u300c\u5b89\u5168\u306a\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u300d\u307e\u305f\u306f\u3001\u300c\u52b9\u679c\u7684\u3067\u306f\u306a\u3044\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u300d\u3068\u8868\u73fe\u3055\u308c\u307e\u3059\u3002 \u300c\u5b89\u5168\u306a\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u306f\u3001\u7ba1\u7406\u7b56\u304c\u6b20\u5982\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d6\u306a\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3059\u3079\u304d\u30b3\u30fc\u30c9\u306b\u3001\u6697\u53f7\u5316\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\u5834\u5408\u304c\u3042\u3052\u3089\u308c\u307e\u3059\u3002 \u300c\u52b9\u679c\u7684\u3067\u306f\u306a\u3044\u8a2d\u8a08\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u300d\u3068\u306f\u3001\u653b\u6483\u8005\u304c\u8105\u5a01\u3092\u767a\u751f\u3055\u305b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u30c9\u30e1\u30a4\u30f3\uff08\u30d3\u30b8\u30cd\u30b9\uff09\u30ed\u30b8\u30c3\u30af\u306e\u691c\u8a3c\u304c\u4e0d\u5341\u5206\u3067\u3042\u308b\u305f\u3081\u306b\u3001\u30ea\u30b9\u30af\u304c\u9855\u5728\u5316\u3059\u308b\u5834\u5408\u3092\u610f\u5473\u3057\u307e\u3059\u3002 \u4f8b\u3068\u3057\u3066\u3001\u6240\u5f97\u533a\u5206\u306b\u57fa\u3065\u3044\u3066\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u7a0e\u306e\u8efd\u6e1b\u63aa\u7f6e\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u304c\u3001\u3059\u3079\u3066\u306e\u5165\u529b\u304c\u6b63\u3057\u304f\u7f72\u540d\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3057\u3066\u304a\u3089\u305a\u3001\u672c\u6765\u4ed8\u4e0e\u3055\u308c\u308b\u3079\u304d\u3082\u306e\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u5927\u304d\u306a\u8efd\u6e1b\u63aa\u7f6e\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u5834\u5408\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002","title":"\u8aac\u660e"},{"location":"ja/A04_2021-Insecure_Design/#_4","text":"\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u8cc7\u7523\u306e\u6a5f\u5bc6\u6027\u3001\u771f\u6b63\u6027\u3001\u5b8c\u5168\u6027\u3001\u53ef\u7528\u6027\u306b\u95a2\u3059\u308b\u4fdd\u8b77\u8981\u4ef6\u304a\u3088\u3073\u3001\u671f\u5f85\u3055\u308c\u308b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d3\u30b8\u30cd\u30b9\u8981\u4ef6\u3092\u53ce\u96c6\u3057\u3001\u4e8b\u696d\u90e8\u9580\u3068\u5354\u8b70\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u516c\u958b\u3055\u308c\u308b\u7a0b\u5ea6\u306b\u5fdc\u3058\u3066\u3001\uff08\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306b\u52a0\u3048\u3066\uff09\u30c6\u30ca\u30f3\u30c8\u3092\u5206\u96e2\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6a5f\u80fd\u7684\u304a\u3088\u3073\u975e\u6a5f\u80fd\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8981\u4ef6\u3092\u542b\u3080\u3001\u6280\u8853\u7684\u306a\u8981\u4ef6\u3092\u307e\u3068\u3081\u307e\u3059\u3002 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6d3b\u52d5\u3092\u542b\u3080\u8a2d\u8a08\u3001\u69cb\u7bc9\u3001\u30c6\u30b9\u30c8\u304a\u3088\u3073\u3001\u904b\u7528\u306e\u3059\u3079\u3066\u3092\u30ab\u30d0\u30fc\u3059\u308b\u4e88\u7b97\u3092\u8a08\u753b\u3057\u3001\u4e8b\u696d\u90e8\u9580\u3068\u5354\u8b70\u3057\u307e\u3059\u3002","title":"\u8981\u4ef6\u3068\u30ea\u30bd\u30fc\u30b9\u30de\u30cd\u30b8\u30e1\u30f3\u30c8"},{"location":"ja/A04_2021-Insecure_Design/#_5","text":"\u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u8a2d\u8a08\u300d\u3068\u306f\u3001\u5e38\u306b\u8105\u5a01\u3092\u8a55\u4fa1\u3057\u3001\u65e2\u77e5\u306e\u653b\u6483\u65b9\u6cd5\u3092\u9632\u3050\u305f\u3081\u306b\u30b3\u30fc\u30c9\u3092\u5805\u7262\u306b\u8a2d\u8a08\u3057\u3001\u30c6\u30b9\u30c8\u3059\u308b\u6587\u5316\u3068\u65b9\u6cd5\u8ad6\u306e\u3053\u3068\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u3084\u30a2\u30af\u30bb\u30b9\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306a\u3069\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u5909\u66f4\u3092\u78ba\u8a8d\u3059\u308b\u30bb\u30c3\u30b7\u30e7\u30f3\uff08\u307e\u305f\u306f\u540c\u69d8\u306e\u6d3b\u52d5\uff09\u306b\u8105\u5a01\u306e\u30e2\u30c7\u30eb\u5316\u3092\u7d71\u5408\u3059\u308b\u3079\u304d\u3067\u3059\u3002 \u30e6\u30fc\u30b6\u30b9\u30c8\u30fc\u30ea\u30fc\u306e\u958b\u767a\u306b\u304a\u3044\u3066\u306f\u3001\u6b63\u5e38\u306a\u30d5\u30ed\u30fc\u53ca\u3073\u969c\u5bb3\u306e\u72b6\u614b\u3092\u6c7a\u5b9a\u3057\u3001\u8cac\u4efb\u8005\u304a\u3088\u3073\u3001\u5f71\u97ff\u3092\u53d7\u3051\u308b\u5f53\u4e8b\u8005\u304c\u305d\u308c\u3089\u3092\u5341\u5206\u306b\u7406\u89e3\u3057\u5408\u610f\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6b63\u5e38\u7cfb\u3068\u7570\u5e38\u7cfb\u306e\u30d5\u30ed\u30fc\u306e\u4eee\u8aac\u3068\u6761\u4ef6\u3092\u5206\u6790\u3057\u3001\u305d\u308c\u3089\u304c\u6b63\u78ba\u3067\u3042\u308a\u671f\u5f85\u3055\u308c\u308b\u7269\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u4eee\u8aac\u3092\u691c\u8a3c\u3057\u3001\u9069\u5207\u306a\u52d5\u4f5c\u306b\u5fc5\u8981\u306a\u6761\u4ef6\u3092\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u3092\u6c7a\u5b9a\u3057\u3001\u7d50\u679c\u3092\u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30fc\u30ea\u30fc\u3068\u3057\u3066\u78ba\u5b9f\u306b\u6587\u66f8\u5316\u3057\u307e\u3057\u3087\u3046\u3002 \u5931\u6557\u304b\u3089\u5b66\u3073\u3001\u6539\u5584\u3092\u4fc3\u9032\u3059\u308b\u305f\u3081\u306e\u7a4d\u6975\u7684\u306a\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u3092\u63d0\u4f9b\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u809d\u8981\u3067\u3059\u3002\u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u8a2d\u8a08\u300d\u3068\u306f\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u8ffd\u52a0\u3067\u304d\u308b\u30a2\u30c9\u30aa\u30f3\u3067\u3082\u30c4\u30fc\u30eb\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u8a2d\u8a08"},{"location":"ja/A04_2021-Insecure_Design/#secure-development-lifecycle","text":"\u300c\u5b89\u5168\u304c\u78ba\u8a8d\u3055\u308c\u305f\u5b89\u5fc3\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u300d\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001\u30bb\u30ad\u30e5\u30a2\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3001\u4f55\u3089\u304b\u306e\u30bb\u30ad\u30e5\u30a2\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3001\u300c\u30da\u30a4\u30d6\u30c9\u30fb\u30ed\u30fc\u30c9\u300d\u65b9\u6cd5\u8ad6\u3001\u5b89\u5168\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30c4\u30fc\u30eb\u3001\u304a\u3088\u3073\u8105\u5a01\u306e\u30e2\u30c7\u30eb\u5316\u304c\u5fc5\u8981\u3067\u3059\u3002 \u5168\u3066\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u671f\u9593\u3092\u901a\u3057\u3066\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u958b\u59cb\u6642\u306b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u5c02\u9580\u5bb6\u306b\u58f0\u3092\u304b\u3051\u3066\u304f\u3060\u3055\u3044\u3002 OWASP \u30bd\u30d5\u30c8\u30a6\u30a8\u30a2\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fdd\u8a3c\u6210\u719f\u5ea6\u30e2\u30c7\u30eb(OWASP SAMM) \u3092\u6d3b\u7528\u3057\u3066\u3001\u5b89\u5168\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u306b\u53d6\u308a\u7d44\u307f\u307e\u3057\u3087\u3046\u3002","title":"Secure Development Lifecycle"},{"location":"ja/A04_2021-Insecure_Design/#_6","text":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304a\u3088\u3073\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u95a2\u9023\u306e\u7ba1\u7406\u7b56\u306e\u8a55\u4fa1\u304a\u3088\u3073\u8a2d\u8a08\u3092\u652f\u63f4\u3059\u308b\u305f\u3081\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u5c02\u9580\u5bb6\u3068\u3068\u3082\u306b\u30bb\u30ad\u30e5\u30a2\u306a\u958b\u767a\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u78ba\u7acb\u3057\u4f7f\u7528\u3059\u308b \u30bb\u30ad\u30e5\u30a2\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u307e\u305f\u306f\u3001\u4fe1\u983c\u6027\u304c\u9ad8\u304f\u5b89\u5168\u6027\u3082\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u69cb\u7bc9\u3057\u4f7f\u7528\u3059\u308b \u91cd\u8981\u306a\u8a8d\u8a3c\u3001\u30a2\u30af\u30bb\u30b9\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3001\u304a\u3088\u3073\u6697\u53f7\u9375\u306e\u7ba1\u7406\u30d5\u30ed\u30fc\u306b\u8105\u5a01\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b \u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30fc\u30ea\u30fc\u306b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a00\u8a9e\u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u7d44\u307f\u8fbc\u3080 (\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u304b\u3089\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u307e\u3067)\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5404\u5c64\u306b\u59a5\u5f53\u6027\u30c1\u30a7\u30c3\u30af\u3092\u7d71\u5408\u3059\u308b \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304a\u3088\u3073\u7d71\u5408\u30c6\u30b9\u30c8\u3092\u5b9f\u65bd\u3057\u3001\u3059\u3079\u3066\u306e\u91cd\u8981\u306a\u30d5\u30ed\u30fc\u304c\u8105\u5a01\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u8010\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5404\u968e\u5c64\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9 \u3068 \u30df\u30b9\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u307e\u3068\u3081\u308b \u30ea\u30b9\u30af\u7ba1\u7406\u306b\u304a\u3051\u308b\u4fdd\u8b77\u306e\u5fc5\u8981\u6027\u306b\u5fdc\u3058\u3066\u3001\u30b7\u30b9\u30c6\u30e0\u5c64\u3068\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u306e\u968e\u5c64\u3092\u5206\u3051\u308b \u3059\u3079\u3066\u306e\u968e\u5c64\u3067\u30c6\u30ca\u30f3\u30c8\u3092\u5206\u96e2\u3057\u305f\u5805\u7262\u306a\u8a2d\u8a08\u3092\u884c\u3046 \u30e6\u30fc\u30b6\u30fc\u3084\u30b5\u30fc\u30d3\u30b9\u306b\u3088\u308b\u904e\u5270\u306a\u30ea\u30bd\u30fc\u30b9\u6d88\u8cbb\u3092\u5236\u9650\u3059\u308b","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A04_2021-Insecure_Design/#_7","text":"\u30b7\u30ca\u30ea\u30aa #1: \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u56de\u5fa9\u30d5\u30ed\u30fc\u306b\u306f\u300c\u79d8\u5bc6\u306e\u8cea\u554f\u3068\u7b54\u3048\u300d\u304c\u542b\u307e\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u300c\u79d8\u5bc6\u306e\u8cea\u554f\u3068\u7b54\u3048\u300d\u306f\u3001NIST 800-63b\u3001OWASP ASVS\u3001\u304a\u3088\u3073 OWASP Top 10 \u3067\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u300c\u79d8\u5bc6\u306e\u8cea\u554f\u3068\u7b54\u3048\u300d\u306f\u8907\u6570\u306e\u4eba\u304c\u7b54\u3048\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8a3c\u62e0\u3068\u3057\u3066\u4fe1\u983c\u3067\u304d\u306a\u3044\u305f\u3081\u3067\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u524a\u9664\u3057\u3001\u3088\u308a\u5b89\u5168\u306a\u8a2d\u8a08\u306b\u7f6e\u304d\u63db\u3048\u308b\u3079\u304d\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u3042\u308b\u6620\u753b\u9928\u30c1\u30a7\u30fc\u30f3\u3067\u306f\u56e3\u4f53\u4e88\u7d04\u306b\u3088\u308b\u5272\u5f15\u3092\u8a8d\u3081\u3066\u304a\u308a\u3001\u6700\u5927 15 \u540d\u307e\u3067\u306f\u4e88\u7d04\u4fdd\u8a3c\u91d1\u304c\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002 \u653b\u6483\u8005\u306f\u3001\u3053\u306e\u30d5\u30ed\u30fc\u306b\u5bfe\u3059\u308b\u8105\u5a01\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3001\u6570\u56de\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067600\u5e2d\u3068\u3059\u3079\u3066\u306e\u6620\u753b\u9928\u3092\u4e00\u5ea6\u306b\u4e88\u7d04\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u3001\u5927\u898f\u6a21\u306a\u640d\u5931\u3092\u5f15\u304d\u8d77\u3053\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u3042\u308b\u5c0f\u58f2\u30c1\u30a7\u30fc\u30f3\u306e\u96fb\u5b50\u5546\u53d6\u5f15\u30b5\u30a4\u30c8\u3067\u306f\u3001\u30c0\u30d5\u5c4b\u304c\u30aa\u30fc\u30af\u30b7\u30e7\u30f3\u30b5\u30a4\u30c8\u306b\u8ee2\u58f2\u3059\u308b\u305f\u3081\u306b\u9ad8\u7d1a\u30d3\u30c7\u30aa\u30ab\u30fc\u30c9\u3092\u8cfc\u5165\u3059\u308b\u30dc\u30c3\u30c8\u3078\u306e\u5bfe\u7b56\u304c\u306a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u306e\u7d50\u679c\u3001\u30d3\u30c7\u30aa\u30ab\u30fc\u30c9\u30e1\u30fc\u30ab\u30fc\u3084\u5c0f\u58f2\u30c1\u30a7\u30fc\u30f3\u5e97\u306b\u3068\u3063\u3066\u306f\u6700\u60aa\u306e\u8a55\u5224\u3068\u306a\u308a\u3001\u3053\u308c\u3089\u306e\u30ab\u30fc\u30c9\u3092\u307e\u3063\u305f\u304f\u624b\u306b\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u71b1\u72c2\u7684\u306a\u30d5\u30a1\u30f3\u306b\u3068\u3063\u3066\u306f\u4e0d\u5e78\u3092\u3082\u305f\u3089\u3057\u307e\u3059\u3002 \u6ce8\u610f\u6df1\u3044\u30dc\u30c3\u30c8\u5bfe\u7b56\u306e\u8a2d\u8a08\u3084\u3001\u5165\u624b\u53ef\u80fd\u306b\u306a\u3063\u3066\u304b\u3089\u6570\u79d2\u4ee5\u5185\u306b\u8cfc\u5165\u3055\u308c\u305f\u5834\u5408\u306a\u3069\u306e\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u975e\u6b63\u898f\u306e\u8cfc\u5165\u3092\u8b58\u5225\u3057\u3001\u305d\u306e\u3088\u3046\u306a\u53d6\u5f15\u3092\u62d2\u5426\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A04_2021-Insecure_Design/#_8","text":"OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A04_2021-Insecure_Design/#cwe","text":"CWE-73 \u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d1\u30b9\u540d\u306e\u5916\u90e8\u5236\u5fa1 CWE-183 \u8a31\u5bb9\u7bc4\u56f2\u304c\u5e83\u3059\u304e\u308b\u5165\u529b\u5236\u9650 CWE-209 \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 CWE-213 \u4e92\u63db\u6027\u306e\u306a\u3044\u30dd\u30ea\u30b7\u30fc\u306b\u3088\u308b\u6a5f\u5bc6\u60c5\u5831\u306e\u6f0f\u6d29 CWE-235 \u60f3\u5b9a\u3092\u8d85\u3048\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e0d\u9069\u5207\u306a\u51e6\u7406 CWE-256 \u30d1\u30b9\u30ef\u30fc\u30c9\u306a\u3069\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u304c\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-257 \u5fa9\u5143\u53ef\u80fd\u306a\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9 CWE-266 \u4e0d\u6b63\u78ba\u306a\u7279\u6a29\u306e\u5272\u308a\u5f53\u3066 CWE-269 \u4e0d\u9069\u5207\u306a\u7279\u6a29\u7ba1\u7406 CWE-280 \u6a29\u9650\u7ba1\u7406\u306e\u4e0d\u5099 CWE-311 \u91cd\u8981\u306a\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3066\u3044\u306a\u3044\u554f\u984c CWE-312 \u91cd\u8981\u306a\u60c5\u5831\u304c\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-313 \u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30b9\u30af\u306b\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-316 \u30e1\u30e2\u30ea\u4e0a\u306b\u5e73\u6587\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-419 \u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u30d7\u30e9\u30a4\u30de\u30ea\u30fc\u30c1\u30e3\u30cd\u30eb CWE-430 \u8aa4\u3063\u305f\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u914d\u7f6e CWE-434 \u9069\u5207\u3067\u306a\u3044\u30a2\u30c3\u30d7\u30ed\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u5236\u9650 CWE-444 HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u77db\u76fe\u3057\u305f\u89e3\u91c8\uff08HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u30b9\u30de\u30b0\u30ea\u30f3\u30b0\uff09 CWE-451 \u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08UI\uff09\u306b\u3088\u308b\u91cd\u8981\u60c5\u5831\u306e\u8aa4\u8868\u793a CWE-472 \u4e0d\u5909\u3068\u4eee\u5b9a\u3055\u308c\u308b Web \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5916\u90e8\u5236\u5fa1 CWE-501 \u4fe1\u983c\u5883\u754c\u7dda\u306e\u4fb5\u5bb3 CWE-522 \u5341\u5206\u3067\u306a\u3044\u8cc7\u683c\u60c5\u5831\u4fdd\u8b77 CWE-525 \u6a5f\u5bc6\u60c5\u5831\u3092\u542b\u3080Web\u30d6\u30e9\u30a6\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4f7f\u7528 CWE-539 \u6a5f\u5bc6\u60c5\u5831\u3092\u542b\u3080\u30d1\u30fc\u30b7\u30b9\u30c6\u30f3\u30c8\u30af\u30c3\u30ad\u30fc\u306e\u4f7f\u7528 CWE-579 J2EE\u306e\u30d0\u30c3\u30c9\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\uff1a\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u683c\u7d0d\u3055\u308c\u305f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u4e0d\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 CWE-598 GET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30af\u30a8\u30ea\u6587\u5b57\u5217\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 CWE-602 \u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u3067\u5b9f\u65bd CWE-642 \u91cd\u8981\u306a\u72b6\u614b\u30c7\u30fc\u30bf\u306e\u5916\u90e8\u5236\u5fa1 CWE-646 \u5916\u90e8\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u62e1\u5f35\u5b50\u3078\u306e\u4f9d\u5b58 CWE-650 \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306b\u304a\u3051\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u3078\u306e\u904e\u5270\u306a\u4fe1\u983c CWE-653 \u4e0d\u5341\u5206\u306a\u30b3\u30f3\u30d1\u30fc\u30c8\u30e1\u30f3\u30c8\u5316 CWE-656 \u96a0\u307a\u3044\u306b\u3088\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3078\u306e\u4f9d\u5b58 CWE-657 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u8a08\u539f\u5247\u306e\u9055\u53cd CWE-799 \u9069\u5207\u3067\u306a\u3044\u76f8\u4e92\u4f5c\u7528\u306b\u5bfe\u3059\u308b\u983b\u5ea6\u5236\u5fa1 CWE-807 \u4fe1\u983c\u3067\u304d\u306a\u3044\u5165\u529b\u306b\u57fa\u3065\u3044\u305f\u5224\u65ad\u3078\u306e\u4f9d\u5b58 CWE-840 \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306e\u30a8\u30e9\u30fc CWE-841 \u30e6\u30fc\u30b6\u30fc\u306e\u632f\u308b\u821e\u3044\u306b\u57fa\u3065\u3044\u305f\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306b\u4f9d\u5b58\u3057\u305f\u4e0d\u9069\u5207\u306a\u51e6\u7406\u306e\u5b9f\u65bd CWE-927 \u30bb\u30f3\u30b7\u30c6\u30a3\u30d6\u306a\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u306e\u6697\u9ed9\u7684\u30a4\u30f3\u30c6\u30f3\u30c8\u306e\u4f7f\u7528 CWE-1021 \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305fUI\u30ec\u30a4\u30e4\u30fc\u3084\u30d5\u30ec\u30fc\u30e0\u306e\u4e0d\u9069\u5207\u306a\u5236\u9650 CWE-1173 \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4e0d\u9069\u5207\u306a\u4f7f\u7528","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A04_2021-Insecure_Design/#a042021-insecure-design","text":"","title":"A04:2021 \u2013 Insecure Design"},{"location":"ja/A04_2021-Insecure_Design/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691","title":"Factors"},{"location":"ja/A04_2021-Insecure_Design/#overview","text":"A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. Notable Common Weakness Enumerations (CWEs) include CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials .","title":"Overview"},{"location":"ja/A04_2021-Insecure_Design/#description","text":"Insecure design is a broad category representing many different weaknesses, expressed as \u201cmissing or ineffective control design.\u201d Missing insecure design is where a control is absent. For example, imagine code that should be encrypting sensitive data, but there is no method. Ineffective insecure design is where an attacker could realize a threat, but insufficient domain (business) logic validation prevents the action. For example, imagine domain logic that is supposed to process pandemic tax relief based upon income brackets but does not validate that all inputs are correctly signed and provides a much more significant relief benefit than should be granted.","title":"Description"},{"location":"ja/A04_2021-Insecure_Design/#requirements-and-resource-management","text":"Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, authenticity, integrity, availability of all data assets, and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.","title":"Requirements and Resource Management"},{"location":"ja/A04_2021-Insecure_Design/#secure-design","text":"Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.","title":"Secure Design"},{"location":"ja/A04_2021-Insecure_Design/#secure-development-lifecycle_1","text":"Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the OWASP Software Assurance Maturity Model (SAMM) to help structure your secure software development efforts.","title":"Secure Development Lifecycle"},{"location":"ja/A04_2021-Insecure_Design/#how-to-prevent","text":"Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls Establish and use a library of secure design patterns or paved road ready to use components Use threat modeling for critical authentication, access control, business logic, and key flows Integrate security language and controls into user stories Integrate plausibility checks at each tier of your application (from frontend to backend) Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases and misuse-cases for each tier of your application. Segregate tier layers on the system and network layers depending on the exposure and protection needs Segregate tenants robustly by design throughout all tiers Limit resource consumption by user or service","title":"How to Prevent"},{"location":"ja/A04_2021-Insecure_Design/#example-attack-scenarios","text":"Scenario #1: A credential recovery workflow might include \u201cquestions and answers,\u201d which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design. Scenario #2: A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income. Scenario #3: A retail chain\u2019s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions.","title":"Example Attack Scenarios"},{"location":"ja/A04_2021-Insecure_Design/#references","text":"OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling","title":"References"},{"location":"ja/A04_2021-Insecure_Design/#list-of-mapped-cwes","text":"CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"List of Mapped CWEs"},{"location":"ja/A05_2021-Security_Misconfiguration/","text":"A05:2021-\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u30df\u30b9 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 20 19.84% 4.51% 89.58% 44.84% 8.12 6.56 208,387 789 \u6982\u8981 \u2693\ufe0e \u524d\u56de\u306e 6 \u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e 90 \uff05\u306b\u306f\u4f55\u3089\u304b\u306e\u8a2d\u5b9a\u30df\u30b9\u304c\u78ba\u8a8d\u3055\u308c\u3001\u5e73\u5747\u767a\u751f\u7387\u306f 4 \uff05\u3067\u3042\u308a\u300120 \u4e07 8 \u5343\u4ee5\u4e0a\u306eCWE\u304c\u767a\u751f\u3057\u3066\u3044\u307e\u3057\u305f\u3002 \u9ad8\u5ea6\u306a\u8a2d\u5b9a\u304c\u53ef\u80fd\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3078\u306e\u79fb\u884c\u304c\u9032\u3080\u4e2d\u3067\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u9806\u4f4d\u304c\u4e0a\u304c\u3063\u305f\u3053\u3068\u306f\u5f53\u7136\u3068\u8a00\u3048\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d CWE (Common Weakness Enumeration) \u306f CWE-16 \u8a2d\u5b9a\u306e\u554f\u984c \u3068 CWE-611 \u5916\u90e8\u306b\u7f6e\u304b\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u547c\u3073\u51fa\u3059 XXE (Xml eXternal Entity) \u554f\u984c \u3067\u3059\u3002 \u8aac\u660e \u2693\ufe0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4e0b\u8a18\u306e\u3088\u3046\u306a\u3089\u3001\u6050\u3089\u304f\u8106\u5f31\u3067\u3059: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b9\u30bf\u30c3\u30af\u306e\u3044\u305a\u308c\u304b\u306e\u90e8\u5206\u306b\u304a\u3051\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5805\u7262\u5316\u306e\u4e0d\u8db3\u3001\u3042\u308b\u3044\u306f\u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u3067\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u4e0d\u9069\u5207\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b \u5fc5\u8981\u306e\u306a\u3044\u6a5f\u80fd\u304c\u6709\u52b9\u3001\u3042\u308b\u3044\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b(\u4f8b\u3048\u3070\u3001\u5fc5\u8981\u306e\u306a\u3044\u30dd\u30fc\u30c8\u3084\u30b5\u30fc\u30d3\u30b9\u3001\u30da\u30fc\u30b8\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u3001\u7279\u6a29) \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u307e\u307e\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044 \u30a8\u30e9\u30fc\u51e6\u7406\u304c\u30e6\u30fc\u30b6\u306b\u5bfe\u3057\u3066\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3084\u305d\u306e\u4ed6\u4f59\u8a08\u306a\u60c5\u5831\u3092\u542b\u3080\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u305b\u308b \u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u3001\u6700\u65b0\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u80fd\u304c\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af(\u4f8b\u3048\u3070\u3001Struts\u3001Spring\u3001 ASP.NET)\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7b49\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u304c\u3001\u5b89\u5168\u306a\u5024\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044 \u30b5\u30fc\u30d0\u304c\u30bb\u30ad\u30e5\u30ea\u30c6\u30a4\u30d8\u30c3\u30c0\u30fc\u3084\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u9001\u3089\u306a\u304b\u3063\u305f\u308a\u3001\u5b89\u5168\u306a\u5024\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3059\u308b \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304c\u53e4\u3044\u304b\u8106\u5f31\u3067\u3042\u308b\u3002( # A06:2021 \u2013 \u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u3092\u53c2\u7167) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3092\u5354\u8abf\u3057\u3066\u7e70\u308a\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u306a\u3051\u308c\u3070\u3001\u30b7\u30b9\u30c6\u30e0\u306f\u3088\u308a\u9ad8\u3044\u30ea\u30b9\u30af\u306b\u3055\u3089\u3055\u308c\u307e\u3059\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u5b89\u5168\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b9f\u65bd\u3059\u3079\u304d\u3067\u3059: \u7e70\u308a\u8fd4\u3057\u5805\u7262\u5316\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u7d20\u65e9\u304f\u304b\u3064\u5bb9\u6613\u306b\u4ed6\u306e\u74b0\u5883\u306b\u5c55\u958b\u3055\u308c\u3001\u6b63\u3057\u304f\u30ed\u30c3\u30af\u30c0\u30a6\u30f3\u3059\u308b\u3053\u3068\u3002 \u958b\u767a\u3084QA\u3001\u672c\u756a\u74b0\u5883\u306f\u5b8c\u5168\u306b\u540c\u3058\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u74b0\u5883\u3067\u5225\u3005\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3002 \u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u81ea\u52d5\u5316\u3057\u3001\u65b0\u3057\u3044\u5b89\u5168\u306a\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u969b\u306b\u306f\u3001\u624b\u9593\u3092\u6700\u5c0f\u9650\u306b\u3059\u308b\u3053\u3068\u3002 \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306f\u6700\u5c0f\u9650\u306e\u3082\u306e\u3068\u3057\u3001\u5fc5\u8981\u306e\u306a\u3044\u6a5f\u80fd\u3084\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u9664\u304f\u3053\u3068\u3002 \u4f7f\u7528\u3057\u306a\u3044\u6a5f\u80fd\u3068\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3001\u524a\u9664\u3082\u3057\u304f\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3044\u3053\u3068\u3002 \u30ec\u30d3\u30e5\u30fc\u3092\u5b9f\u65bd\u3057\u3066\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u95a2\u9023\u306e\u8a18\u9332\u3068\u66f4\u65b0\u306e\u5168\u3066\u306b\u52a0\u3048\u3001\u30d1\u30c3\u30c1\u3092\u7ba1\u7406\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306e\u4e00\u74b0\u3068\u3057\u3066\u30d1\u30c3\u30c1\u306e\u8a2d\u5b9a\u3092\u9069\u5207\u306b\u66f4\u65b0\u3059\u308b\u3053\u3068( # A06:2021 \u2013 \u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u3092\u53c2\u7167)\u3002 \u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306f\u3001\u8a73\u7d30\u306b\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3053\u3068 (\u4f8b\u3048\u3070\u3001S3 \u30d0\u30b1\u30c3\u30c8\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3)\u3002 \u30bb\u30b0\u30e1\u30f3\u30c8\u5316\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u3001\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u30b3\u30f3\u30c6\u30ca\u30ea\u30bc\u30fc\u30b7\u30e7\u30f3\u3001\u30af\u30e9\u30a6\u30c9\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7(ACL)\u3092\u3068\u3082\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3084\u30c6\u30ca\u30f3\u30c8\u9593\u306b\u3001\u52b9\u679c\u7684\u3067\u5b89\u5168\u306a\u4ed5\u5207\u308a\u3092\u3082\u305f\u3089\u3059\u3002 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u9001\u308b\u3053\u3068\u3002\u4f8b\u3068\u3057\u3066\u306f \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0\u30fc \u304c\u6319\u3052\u3089\u308c\u308b\u3002 \u30d7\u30ed\u30bb\u30b9\u3092\u81ea\u52d5\u5316\u3057\u3066\u8a2d\u5b9a\u306e\u6709\u52b9\u6027\u3092\u691c\u8a3c\u3057\u3001\u74b0\u5883\u3059\u3079\u3066\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3067\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u304c\u524a\u9664\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001\u653b\u6483\u8005\u304c\u30b5\u30fc\u30d0\u306b\u4fb5\u5165\u3059\u308b\u969b\u306b\u3088\u304f\u4f7f\u3046\u65e2\u77e5\u306e\u8106\u5f31\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7ba1\u7406\u7528\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u3001\u653b\u6483\u8005\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u3057\u3001\u4e57\u3063\u53d6\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30ea\u30b9\u30c6\u30a3\u30f3\u30b0\u304c\u30b5\u30fc\u30d0\u4e0a\u3067\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u653b\u6483\u8005\u306f\u305d\u308c\u3092\u898b\u3064\u3051\u51fa\u3057\u3001\u3084\u3059\u3084\u3059\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8868\u793a\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u653b\u6483\u8005\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306eJava\u30af\u30e9\u30b9\u3092\u898b\u3064\u3051\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304b\u3089\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3057\u3066\u30b3\u30fc\u30c9\u3092\u898b\u307e\u3059\u3002 \u305d\u3057\u3066\u653b\u6483\u8005\u306f\u3001\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6df1\u523b\u306a\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u4e0a\u306e\u7a74\u3092\u898b\u3064\u3051\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u306e\u8a2d\u5b9a\u304c\u3001\u8a73\u7d30\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8(\u4f8b\u3048\u3070\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9)\u3092\u30e6\u30fc\u30b6\u306b\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u3063\u3066\u6a5f\u5fae\u306a\u60c5\u5831\u3084\u8106\u5f31\u3067\u3042\u308b\u3068\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3044\u3063\u305f\u6f5c\u5728\u7684\u306a\u6b20\u9665\u304c\u3055\u3089\u3055\u308c\u308b\u6050\u308c\u304c\u3042\u308a\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #4: \u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001\u4ed6\u306eCSP(Content Security Policy header)\u30e6\u30fc\u30b6\u306b\u3088\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u516c\u958b\u3055\u308c\u305f\u5171\u6709\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u3046\u306a\u308b\u3068\u3001\u6a5f\u5fae\u306a\u60c5\u5831\u304c\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4fdd\u5b58\u3055\u308c\u3001\u30a2\u30af\u30bb\u30b9\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-2 \u74b0\u5883\u8a2d\u5b9a CWE-11 ASP.NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u30c7\u30d0\u30c3\u30b0\u30d0\u30a4\u30ca\u30ea\u306e\u4f5c\u6210 CWE-13 ASP.NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-15 \u30b7\u30b9\u30c6\u30e0\u3084\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a\u306e\u5916\u90e8\u5236\u5fa1 CWE-16 \u8a2d\u5b9a\u306e\u554f\u984c CWE-260 \u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-315 \u30af\u30c3\u30ad\u30fc\u3078\u306e\u6a5f\u5bc6\u60c5\u5831\u306e\u5e73\u6587\u4fdd\u5b58 CWE-520 .NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u507d\u88c5\u306e\u4f7f\u7528 CWE-526 \u74b0\u5883\u5909\u6570\u306b\u3088\u308b\u6a5f\u5bc6\u60c5\u5831\u306e\u66b4\u9732 CWE-537 \u6a5f\u5bc6\u60c5\u5831\u3092\u542b\u3080 Java \u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8 CWE-541 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u6a5f\u5bc6\u60c5\u5831\u306e\u53d6\u308a\u8fbc\u307f CWE-547 \u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u95a2\u9023\u306e\u5b9a\u6570\u306e\u4f7f\u7528 CWE-611 \u5916\u90e8\u306b\u7f6e\u304b\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u547c\u3073\u51fa\u3059 XXE (Xml eXternal Entity) \u554f\u984c CWE-614 'Secure' \u5c5e\u6027\u306e\u306a\u3044 HTTPS \u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u304a\u3051\u308b\u6a5f\u5bc6\u6027\u306e\u9ad8\u3044\u30af\u30c3\u30ad\u30fc CWE-756 \u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u554f\u984c CWE-776 \u9069\u5207\u3067\u306a\u3044\u518d\u5e30\u7684\u306a\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u53c2\u7167\u5236\u9650 (XML Entity Expansion) \u554f\u984c CWE-942 \u904e\u5270\u306b\u8a31\u53ef\u3055\u308c\u305f\u30af\u30ed\u30b9\u30c9\u30e1\u30a4\u30f3\u30fb\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8 CWE-1004 'HttpOnly' \u30d5\u30e9\u30b0\u306e\u306a\u3044 \u6a5f\u5bc6\u6027\u306e\u9ad8\u3044\u30af\u30c3\u30ad\u30fc CWE-1032 OWASP Top Ten 2017 Category A6 - \u4e0d\u9069\u5207\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u5b9a CWE-1174 ASP.NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u4e0d\u9069\u5207\u306a\u30e2\u30c7\u30eb\u691c\u8a3c A05:2021 \u2013 Security Misconfiguration \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789 Overview \u2693\ufe0e Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference . Description \u2693\ufe0e The application might be vulnerable if the application is: Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). Default accounts and their passwords are still enabled and unchanged. Error handling reveals stack traces or other overly informative error messages to users. For upgraded systems, the latest security features are disabled or not configured securely. The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. The server does not send security headers or directives, or they are not set to secure values. The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components ). Without a concerted, repeatable application security configuration process, systems are at a higher risk. How to Prevent \u2693\ufe0e Secure installation processes should be implemented, including: A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components ). Review cloud storage permissions (e.g., S3 bucket permissions). A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). Sending security directives to clients, e.g., Security Headers. An automated process to verify the effectiveness of the configurations and settings in all environments. Example Attack Scenarios \u2693\ufe0e Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. Scenario #4: A cloud service provider has default sharing permissions open to the Internet by other Content Security Policy header (CSP) users. This allows sensitive data stored within cloud storage to be accessed. References \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration List of Mapped CWEs \u2693\ufe0e CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"A05 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u30df\u30b9"},{"location":"ja/A05_2021-Security_Misconfiguration/#a052021-","text":"","title":"A05:2021-\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u30df\u30b9"},{"location":"ja/A05_2021-Security_Misconfiguration/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 20 19.84% 4.51% 89.58% 44.84% 8.12 6.56 208,387 789","title":"\u56e0\u5b50"},{"location":"ja/A05_2021-Security_Misconfiguration/#_2","text":"\u524d\u56de\u306e 6 \u4f4d\u304b\u3089\u9806\u4f4d\u3092\u4e0a\u3052\u307e\u3057\u305f\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e 90 \uff05\u306b\u306f\u4f55\u3089\u304b\u306e\u8a2d\u5b9a\u30df\u30b9\u304c\u78ba\u8a8d\u3055\u308c\u3001\u5e73\u5747\u767a\u751f\u7387\u306f 4 \uff05\u3067\u3042\u308a\u300120 \u4e07 8 \u5343\u4ee5\u4e0a\u306eCWE\u304c\u767a\u751f\u3057\u3066\u3044\u307e\u3057\u305f\u3002 \u9ad8\u5ea6\u306a\u8a2d\u5b9a\u304c\u53ef\u80fd\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3078\u306e\u79fb\u884c\u304c\u9032\u3080\u4e2d\u3067\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u9806\u4f4d\u304c\u4e0a\u304c\u3063\u305f\u3053\u3068\u306f\u5f53\u7136\u3068\u8a00\u3048\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d CWE (Common Weakness Enumeration) \u306f CWE-16 \u8a2d\u5b9a\u306e\u554f\u984c \u3068 CWE-611 \u5916\u90e8\u306b\u7f6e\u304b\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u547c\u3073\u51fa\u3059 XXE (Xml eXternal Entity) \u554f\u984c \u3067\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A05_2021-Security_Misconfiguration/#_3","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4e0b\u8a18\u306e\u3088\u3046\u306a\u3089\u3001\u6050\u3089\u304f\u8106\u5f31\u3067\u3059: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b9\u30bf\u30c3\u30af\u306e\u3044\u305a\u308c\u304b\u306e\u90e8\u5206\u306b\u304a\u3051\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5805\u7262\u5316\u306e\u4e0d\u8db3\u3001\u3042\u308b\u3044\u306f\u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u3067\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u4e0d\u9069\u5207\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b \u5fc5\u8981\u306e\u306a\u3044\u6a5f\u80fd\u304c\u6709\u52b9\u3001\u3042\u308b\u3044\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b(\u4f8b\u3048\u3070\u3001\u5fc5\u8981\u306e\u306a\u3044\u30dd\u30fc\u30c8\u3084\u30b5\u30fc\u30d3\u30b9\u3001\u30da\u30fc\u30b8\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u3001\u7279\u6a29) \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u307e\u307e\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044 \u30a8\u30e9\u30fc\u51e6\u7406\u304c\u30e6\u30fc\u30b6\u306b\u5bfe\u3057\u3066\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3084\u305d\u306e\u4ed6\u4f59\u8a08\u306a\u60c5\u5831\u3092\u542b\u3080\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u305b\u308b \u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u3001\u6700\u65b0\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u80fd\u304c\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af(\u4f8b\u3048\u3070\u3001Struts\u3001Spring\u3001 ASP.NET)\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7b49\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u304c\u3001\u5b89\u5168\u306a\u5024\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044 \u30b5\u30fc\u30d0\u304c\u30bb\u30ad\u30e5\u30ea\u30c6\u30a4\u30d8\u30c3\u30c0\u30fc\u3084\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u9001\u3089\u306a\u304b\u3063\u305f\u308a\u3001\u5b89\u5168\u306a\u5024\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3059\u308b \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304c\u53e4\u3044\u304b\u8106\u5f31\u3067\u3042\u308b\u3002( # A06:2021 \u2013 \u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u3092\u53c2\u7167) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3092\u5354\u8abf\u3057\u3066\u7e70\u308a\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u306a\u3051\u308c\u3070\u3001\u30b7\u30b9\u30c6\u30e0\u306f\u3088\u308a\u9ad8\u3044\u30ea\u30b9\u30af\u306b\u3055\u3089\u3055\u308c\u307e\u3059\u3002","title":"\u8aac\u660e"},{"location":"ja/A05_2021-Security_Misconfiguration/#_4","text":"\u5b89\u5168\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b9f\u65bd\u3059\u3079\u304d\u3067\u3059: \u7e70\u308a\u8fd4\u3057\u5805\u7262\u5316\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u7d20\u65e9\u304f\u304b\u3064\u5bb9\u6613\u306b\u4ed6\u306e\u74b0\u5883\u306b\u5c55\u958b\u3055\u308c\u3001\u6b63\u3057\u304f\u30ed\u30c3\u30af\u30c0\u30a6\u30f3\u3059\u308b\u3053\u3068\u3002 \u958b\u767a\u3084QA\u3001\u672c\u756a\u74b0\u5883\u306f\u5b8c\u5168\u306b\u540c\u3058\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u74b0\u5883\u3067\u5225\u3005\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3002 \u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u81ea\u52d5\u5316\u3057\u3001\u65b0\u3057\u3044\u5b89\u5168\u306a\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u969b\u306b\u306f\u3001\u624b\u9593\u3092\u6700\u5c0f\u9650\u306b\u3059\u308b\u3053\u3068\u3002 \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306f\u6700\u5c0f\u9650\u306e\u3082\u306e\u3068\u3057\u3001\u5fc5\u8981\u306e\u306a\u3044\u6a5f\u80fd\u3084\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u9664\u304f\u3053\u3068\u3002 \u4f7f\u7528\u3057\u306a\u3044\u6a5f\u80fd\u3068\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3001\u524a\u9664\u3082\u3057\u304f\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3044\u3053\u3068\u3002 \u30ec\u30d3\u30e5\u30fc\u3092\u5b9f\u65bd\u3057\u3066\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u95a2\u9023\u306e\u8a18\u9332\u3068\u66f4\u65b0\u306e\u5168\u3066\u306b\u52a0\u3048\u3001\u30d1\u30c3\u30c1\u3092\u7ba1\u7406\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306e\u4e00\u74b0\u3068\u3057\u3066\u30d1\u30c3\u30c1\u306e\u8a2d\u5b9a\u3092\u9069\u5207\u306b\u66f4\u65b0\u3059\u308b\u3053\u3068( # A06:2021 \u2013 \u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u3092\u53c2\u7167)\u3002 \u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306f\u3001\u8a73\u7d30\u306b\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3053\u3068 (\u4f8b\u3048\u3070\u3001S3 \u30d0\u30b1\u30c3\u30c8\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3)\u3002 \u30bb\u30b0\u30e1\u30f3\u30c8\u5316\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u3001\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u30b3\u30f3\u30c6\u30ca\u30ea\u30bc\u30fc\u30b7\u30e7\u30f3\u3001\u30af\u30e9\u30a6\u30c9\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7(ACL)\u3092\u3068\u3082\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3084\u30c6\u30ca\u30f3\u30c8\u9593\u306b\u3001\u52b9\u679c\u7684\u3067\u5b89\u5168\u306a\u4ed5\u5207\u308a\u3092\u3082\u305f\u3089\u3059\u3002 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u9001\u308b\u3053\u3068\u3002\u4f8b\u3068\u3057\u3066\u306f \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0\u30fc \u304c\u6319\u3052\u3089\u308c\u308b\u3002 \u30d7\u30ed\u30bb\u30b9\u3092\u81ea\u52d5\u5316\u3057\u3066\u8a2d\u5b9a\u306e\u6709\u52b9\u6027\u3092\u691c\u8a3c\u3057\u3001\u74b0\u5883\u3059\u3079\u3066\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A05_2021-Security_Misconfiguration/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3067\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u304c\u524a\u9664\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001\u653b\u6483\u8005\u304c\u30b5\u30fc\u30d0\u306b\u4fb5\u5165\u3059\u308b\u969b\u306b\u3088\u304f\u4f7f\u3046\u65e2\u77e5\u306e\u8106\u5f31\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7ba1\u7406\u7528\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u3001\u653b\u6483\u8005\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u3057\u3001\u4e57\u3063\u53d6\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30ea\u30b9\u30c6\u30a3\u30f3\u30b0\u304c\u30b5\u30fc\u30d0\u4e0a\u3067\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u653b\u6483\u8005\u306f\u305d\u308c\u3092\u898b\u3064\u3051\u51fa\u3057\u3001\u3084\u3059\u3084\u3059\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8868\u793a\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u653b\u6483\u8005\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306eJava\u30af\u30e9\u30b9\u3092\u898b\u3064\u3051\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304b\u3089\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3057\u3066\u30b3\u30fc\u30c9\u3092\u898b\u307e\u3059\u3002 \u305d\u3057\u3066\u653b\u6483\u8005\u306f\u3001\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6df1\u523b\u306a\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u4e0a\u306e\u7a74\u3092\u898b\u3064\u3051\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u306e\u8a2d\u5b9a\u304c\u3001\u8a73\u7d30\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8(\u4f8b\u3048\u3070\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9)\u3092\u30e6\u30fc\u30b6\u306b\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u3063\u3066\u6a5f\u5fae\u306a\u60c5\u5831\u3084\u8106\u5f31\u3067\u3042\u308b\u3068\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3044\u3063\u305f\u6f5c\u5728\u7684\u306a\u6b20\u9665\u304c\u3055\u3089\u3055\u308c\u308b\u6050\u308c\u304c\u3042\u308a\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #4: \u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001\u4ed6\u306eCSP(Content Security Policy header)\u30e6\u30fc\u30b6\u306b\u3088\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u516c\u958b\u3055\u308c\u305f\u5171\u6709\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u3046\u306a\u308b\u3068\u3001\u6a5f\u5fae\u306a\u60c5\u5831\u304c\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4fdd\u5b58\u3055\u308c\u3001\u30a2\u30af\u30bb\u30b9\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A05_2021-Security_Misconfiguration/#_6","text":"OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A05_2021-Security_Misconfiguration/#cwe","text":"CWE-2 \u74b0\u5883\u8a2d\u5b9a CWE-11 ASP.NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u30c7\u30d0\u30c3\u30b0\u30d0\u30a4\u30ca\u30ea\u306e\u4f5c\u6210 CWE-13 ASP.NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-15 \u30b7\u30b9\u30c6\u30e0\u3084\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a\u306e\u5916\u90e8\u5236\u5fa1 CWE-16 \u8a2d\u5b9a\u306e\u554f\u984c CWE-260 \u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u554f\u984c CWE-315 \u30af\u30c3\u30ad\u30fc\u3078\u306e\u6a5f\u5bc6\u60c5\u5831\u306e\u5e73\u6587\u4fdd\u5b58 CWE-520 .NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u507d\u88c5\u306e\u4f7f\u7528 CWE-526 \u74b0\u5883\u5909\u6570\u306b\u3088\u308b\u6a5f\u5bc6\u60c5\u5831\u306e\u66b4\u9732 CWE-537 \u6a5f\u5bc6\u60c5\u5831\u3092\u542b\u3080 Java \u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8 CWE-541 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u6a5f\u5bc6\u60c5\u5831\u306e\u53d6\u308a\u8fbc\u307f CWE-547 \u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u95a2\u9023\u306e\u5b9a\u6570\u306e\u4f7f\u7528 CWE-611 \u5916\u90e8\u306b\u7f6e\u304b\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u547c\u3073\u51fa\u3059 XXE (Xml eXternal Entity) \u554f\u984c CWE-614 'Secure' \u5c5e\u6027\u306e\u306a\u3044 HTTPS \u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u304a\u3051\u308b\u6a5f\u5bc6\u6027\u306e\u9ad8\u3044\u30af\u30c3\u30ad\u30fc CWE-756 \u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u554f\u984c CWE-776 \u9069\u5207\u3067\u306a\u3044\u518d\u5e30\u7684\u306a\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u53c2\u7167\u5236\u9650 (XML Entity Expansion) \u554f\u984c CWE-942 \u904e\u5270\u306b\u8a31\u53ef\u3055\u308c\u305f\u30af\u30ed\u30b9\u30c9\u30e1\u30a4\u30f3\u30fb\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8 CWE-1004 'HttpOnly' \u30d5\u30e9\u30b0\u306e\u306a\u3044 \u6a5f\u5bc6\u6027\u306e\u9ad8\u3044\u30af\u30c3\u30ad\u30fc CWE-1032 OWASP Top Ten 2017 Category A6 - \u4e0d\u9069\u5207\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u5b9a CWE-1174 ASP.NET \u306b\u304a\u3051\u308b\u8a2d\u5b9a\u30df\u30b9: \u4e0d\u9069\u5207\u306a\u30e2\u30c7\u30eb\u691c\u8a3c","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A05_2021-Security_Misconfiguration/#a052021-security-misconfiguration","text":"","title":"A05:2021 \u2013 Security Misconfiguration"},{"location":"ja/A05_2021-Security_Misconfiguration/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789","title":"Factors"},{"location":"ja/A05_2021-Security_Misconfiguration/#overview","text":"Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference .","title":"Overview"},{"location":"ja/A05_2021-Security_Misconfiguration/#description","text":"The application might be vulnerable if the application is: Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). Default accounts and their passwords are still enabled and unchanged. Error handling reveals stack traces or other overly informative error messages to users. For upgraded systems, the latest security features are disabled or not configured securely. The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. The server does not send security headers or directives, or they are not set to secure values. The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components ). Without a concerted, repeatable application security configuration process, systems are at a higher risk.","title":"Description"},{"location":"ja/A05_2021-Security_Misconfiguration/#how-to-prevent","text":"Secure installation processes should be implemented, including: A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components ). Review cloud storage permissions (e.g., S3 bucket permissions). A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). Sending security directives to clients, e.g., Security Headers. An automated process to verify the effectiveness of the configurations and settings in all environments.","title":"How to Prevent"},{"location":"ja/A05_2021-Security_Misconfiguration/#example-attack-scenarios","text":"Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. Scenario #4: A cloud service provider has default sharing permissions open to the Internet by other Content Security Policy header (CSP) users. This allows sensitive data stored within cloud storage to be accessed.","title":"Example Attack Scenarios"},{"location":"ja/A05_2021-Security_Misconfiguration/#references","text":"OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration","title":"References"},{"location":"ja/A05_2021-Security_Misconfiguration/#list-of-mapped-cwes","text":"CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"List of Mapped CWEs"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/","text":"A06:2021 \u2013 \u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 \u6982\u8981 \u2693\ufe0e \u3053\u306e\u9805\u76ee\u306f Top10 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306b\u3088\u308b\u8abf\u67fb\u3067\u306f 2 \u4f4d\u3067\u3057\u305f\u304c\u3001Top10 \u306b\u5165\u308b\u5341\u5206\u306a\u30c7\u30fc\u30bf\u3082\u3042\u308a\u307e\u3057\u305f\u3002 \u8106\u5f31\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u3001\u30c6\u30b9\u30c8\u3084\u30ea\u30b9\u30af\u8a55\u4fa1\u306b\u82e6\u52b4\u3059\u308b\u554f\u984c\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u304a\u308a\u3001\u542b\u307e\u308c\u308bCWE(Common Weakness Enumerations)\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u305fCWE\u304c\u306a\u3044\u552f\u4e00\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3059\u3002 \u3053\u306e\u305f\u3081\u6a19\u6e96\u306e\u653b\u6483\u306e\u96e3\u6613\u5ea6\u304a\u3088\u3073\u3001\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\u306e\u30a6\u30a7\u30a4\u30c8\u306f5.0\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d CWE \u306f CWE-1104 \u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u88fd\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528\u3068\u3001OWASP Top10 2013 A9 \u304a\u3088\u3073 2017 A9 \u3092\u53c2\u7167\u3059\u308b\uff12\u3064\u306e CWE \u3067\u3059\u3002 \u8aac\u660e \u2693\ufe0e \u4ee5\u4e0b\u306b\u8a72\u5f53\u3059\u308b\u5834\u5408\u3001\u8106\u5f31\u3068\u8a00\u3048\u307e\u3059\u3002 \u4f7f\u7528\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u77e5\u3089\u306a\u3044\u5834\u5408\uff08\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u30fb\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306e\u4e21\u65b9\u306b\u3064\u3044\u3066\uff09\u3002 \u3053\u308c\u306b\u306f\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u3082\u542b\u3080\u3002 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304c\u8106\u5f31\u306a\u5834\u5408\u3084\u30b5\u30dd\u30fc\u30c8\u304c\u306a\u3044\u5834\u5408\u3001\u307e\u305f\u4f7f\u7528\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u308b\u5834\u5408\u3002 \u3053\u308c\u306b\u306f\u3001OS\u3084Web\u30b5\u30fc\u30d0\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\uff08DBMS\uff09\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001API\u3001\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30e9\u30f3\u30bf\u30a4\u30e0\u74b0\u5883\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u542b\u3080\u3002 \u8106\u5f31\u6027\u30b9\u30ad\u30e3\u30f3\u3092\u5b9a\u671f\u7684\u306b\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3084\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u95a2\u3059\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u60c5\u5831\u3092\u8cfc\u8aad\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3002 \u57fa\u76e4\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3084\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304a\u3088\u3073\u4f9d\u5b58\u95a2\u4fc2\u3092\u30ea\u30b9\u30af\u306b\u57fa\u3065\u304d\u30bf\u30a4\u30e0\u30ea\u30fc\u306b\u4fee\u6b63\u307e\u305f\u306f\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3057\u306a\u3044\u5834\u5408\u3002 \u30d1\u30c3\u30c1\u9069\u7528\u304c\u5909\u66f4\u7ba1\u7406\u306e\u4e0b\u3001\u6708\u6b21\u3084\u56db\u534a\u671f\u306e\u30bf\u30b9\u30af\u3068\u3055\u308c\u3066\u3044\u308b\u74b0\u5883\u3067\u3088\u304f\u8d77\u3053\u308b\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u5f53\u8a72\u7d44\u7e54\u306f\u3001\u89e3\u6c7a\u6e08\u307f\u306e\u8106\u5f31\u6027\u306b\u3064\u3044\u3066\u3001\u4f55\u65e5\u3082\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u4f55\u30f6\u6708\u3082\u4e0d\u5fc5\u8981\u306a\u5371\u967a\u306b\u3055\u3089\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u8005\u304c\u3001\u66f4\u65b0\u3084\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u307e\u305f\u306f\u30d1\u30c3\u30c1\u306e\u4e92\u63db\u6027\u3092\u30c6\u30b9\u30c8\u3057\u306a\u3044\u5834\u5408\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u30bb\u30ad\u30e5\u30a2\u306b\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3002\uff08A05-2021: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u30df\u30b9 \u53c2\u7167\uff09 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u4ee5\u4e0b\u306b\u793a\u3059\u30d1\u30c3\u30c1\u7ba1\u7406\u30d7\u30ed\u30bb\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u672a\u4f7f\u7528\u306e\u4f9d\u5b58\u95a2\u4fc2\u3001\u4e0d\u8981\u306a\u6a5f\u80fd\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30d5\u30a1\u30a4\u30eb\u3084\u6587\u66f8\u3092\u53d6\u308a\u9664\u304f\u3002 Versions Maven Plugin, OWASP Dependency Check, Retire.js\u306a\u3069\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304a\u3088\u3073\u30b5\u30fc\u30d0\u306e\u4e21\u65b9\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\uff09\u3068\u305d\u306e\u4f9d\u5b58\u95a2\u4fc2\u306e\u68da\u5378\u3057\u3092\u7d99\u7d9a\u7684\u306b\u884c\u3046\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8106\u5f31\u6027\u306b\u3064\u3044\u3066CVE(Common Vulnerability and Exposures)\u3084NVD(National Vulnerability Database)\u306a\u3069\u306e\u60c5\u5831\u30bd\u30fc\u30b9\u3092\u7d99\u7d9a\u7684\u306b\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u69cb\u6210\u5206\u6790\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u3092\u81ea\u52d5\u5316\u3059\u308b\u3002 \u4f7f\u7528\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u95a2\u3059\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u96fb\u5b50\u30e1\u30fc\u30eb\u30a2\u30e9\u30fc\u30c8\u306b\u767b\u9332\u3059\u308b\u3002 \u5b89\u5168\u306a\u30ea\u30f3\u30af\u3092\u4ecb\u3057\u3001\u516c\u5f0f\u30bd\u30fc\u30b9\u304b\u3089\u306e\u307f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 \u5909\u66f4\u3055\u308c\u305f\u60aa\u610f\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u53ef\u80fd\u6027\u3092\u6e1b\u3089\u3059\u305f\u3081\u3001\u7f72\u540d\u4ed8\u304d\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u9078\u3076\u3088\u3046\u306b\u3059\u308b\u3002 (A08-2021: \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408 \u53c2\u7167) \u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u3001\u3082\u3057\u304f\u306f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d1\u30c3\u30c1\u304c\u4f5c\u3089\u308c\u3066\u3044\u306a\u3044\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u76e3\u8996\u3059\u308b\u3002 \u30d1\u30c3\u30c1\u9069\u7528\u304c\u4e0d\u53ef\u80fd\u306a\u5834\u5408\u306f\u3001\u767a\u898b\u3055\u308c\u305f\u554f\u984c\u3092\u76e3\u8996\u3001\u691c\u77e5\u307e\u305f\u306f\u4fdd\u8b77\u3059\u308b\u305f\u3081\u306b\u3001\u4eee\u60f3\u30d1\u30c3\u30c1\u306e\u9069\u7528\u3092\u691c\u8a0e\u3059\u308b\u3002 \u3044\u304b\u306a\u308b\u7d44\u7e54\u3082\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u307e\u305f\u306f\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa\u306e\u5b58\u7d9a\u671f\u9593\u306f\u3001\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3068\u30c8\u30ea\u30a2\u30fc\u30b8\u3092\u884c\u3044\u66f4\u65b0\u307e\u305f\u306f\u8a2d\u5b9a\u5909\u66f4\u3092\u884c\u3046\u7d99\u7d9a\u7684\u306a\u8a08\u753b\u304c\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1: \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u901a\u5e38\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u81ea\u4f53\u3068\u540c\u3058\u6a29\u9650\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u3069\u3093\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u5b58\u5728\u3059\u308b\u6b20\u9665\u3082\u3001\u6df1\u523b\u306a\u5f71\u97ff\u3092\u53ca\u307c\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u6b20\u9665\u306f\u3001\u5076\u767a\u7684\uff08\u4f8b\uff1a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30a8\u30e9\u30fc\uff09\u307e\u305f\u306f\u610f\u56f3\u7684\uff08\u4f8b\uff1a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d0\u30c3\u30af\u30c9\u30a2\uff09\u4e21\u65b9\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u767a\u898b\u6e08\u307f\u306e\u60aa\u7528\u53ef\u80fd\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8106\u5f31\u6027\u306e\u4f8b\uff1a Apache Struts 2\u306b\u304a\u3044\u3066\u30ea\u30e2\u30fc\u30c8\u3067\u4efb\u610f\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u8106\u5f31\u6027CVE-2017-5638\u306f\u3001\u91cd\u5927\u306a\u4fb5\u5bb3\u3092\u3082\u305f\u3089\u3057\u3066\u3044\u307e\u3059\u3002 Internet of things (IoT)\u306f\u3001\u983b\u7e41\u306a\u30d1\u30c3\u30c1\u9069\u7528\u304c\u56f0\u96e3\u3082\u3057\u304f\u306f\u4e0d\u53ef\u80fd\u3067\u3059\u304c\u3001\u4e00\u65b9\u3067\u30d1\u30c3\u30c1\u9069\u7528\u306e\u91cd\u8981\u6027\u306f\u307e\u3059\u307e\u3059\u9ad8\u307e\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u4f8b\uff1a\u533b\u7642\u6a5f\u5668\uff09 \u653b\u6483\u8005\u3092\u52a9\u3051\u308b\u3088\u3046\u306a\u30c4\u30fc\u30eb\u304c\u3042\u308a\u3001\u30d1\u30c3\u30c1\u304c\u672a\u9069\u7528\u306a\u30b7\u30b9\u30c6\u30e0\u3084\u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a\u30df\u30b9\u3092\u81ea\u52d5\u7684\u306b\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001Shodan IoT search engine\u306f\u30012014\u5e744\u6708\u306b\u30d1\u30c3\u30c1\u304c\u9069\u7528\u3055\u308c\u305fHeartbleed\u306e\u8106\u5f31\u6027\u306a\u3069\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u554f\u984c\u306e\u3042\u308b\u6a5f\u5668\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-937 OWASP Top 10 2013 A9: \u65e2\u77e5\u306e\u8106\u5f31\u6027\u306e\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528 CWE-1035 2017 Top 10 A9: \u65e2\u77e5\u306e\u8106\u5f31\u6027\u306e\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528 CWE-1104 \u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u88fd\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528 A06:2021 \u2013 Vulnerable and Outdated Components \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 Overview \u2693\ufe0e It was #2 from the Top 10 community survey but also had enough data to make the Top 10 via data. Vulnerable Components are a known issue that we struggle to test and assess risk and is the only category to not have any Common Weakness Enumerations (CWEs) mapped to the included CWEs, so a default exploits/impact weight of 5.0 is used. Notable CWEs included are CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017. Description \u2693\ufe0e You are likely vulnerable: If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities. If software developers do not test the compatibility of updated, upgraded, or patched libraries. If you do not secure the components\u2019 configurations (see A05:2021-Security Misconfiguration). How to Prevent \u2693\ufe0e There should be a patch management process in place to: Remove unused dependencies, unnecessary features, components, files, and documentation. Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use. Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures). Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue. Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio. Example Attack Scenarios \u2693\ufe0e Scenario #1: Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are: CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches. While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices). There are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014. References \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf List of Mapped CWEs \u2693\ufe0e CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"A06 \u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#a062021","text":"","title":"A06:2021 \u2013 \u8106\u5f31\u3067\u53e4\u304f\u306a\u3063\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"\u56e0\u5b50"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#_2","text":"\u3053\u306e\u9805\u76ee\u306f Top10 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306b\u3088\u308b\u8abf\u67fb\u3067\u306f 2 \u4f4d\u3067\u3057\u305f\u304c\u3001Top10 \u306b\u5165\u308b\u5341\u5206\u306a\u30c7\u30fc\u30bf\u3082\u3042\u308a\u307e\u3057\u305f\u3002 \u8106\u5f31\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u3001\u30c6\u30b9\u30c8\u3084\u30ea\u30b9\u30af\u8a55\u4fa1\u306b\u82e6\u52b4\u3059\u308b\u554f\u984c\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u304a\u308a\u3001\u542b\u307e\u308c\u308bCWE(Common Weakness Enumerations)\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u305fCWE\u304c\u306a\u3044\u552f\u4e00\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3059\u3002 \u3053\u306e\u305f\u3081\u6a19\u6e96\u306e\u653b\u6483\u306e\u96e3\u6613\u5ea6\u304a\u3088\u3073\u3001\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\u306e\u30a6\u30a7\u30a4\u30c8\u306f5.0\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d CWE \u306f CWE-1104 \u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u88fd\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528\u3068\u3001OWASP Top10 2013 A9 \u304a\u3088\u3073 2017 A9 \u3092\u53c2\u7167\u3059\u308b\uff12\u3064\u306e CWE \u3067\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#_3","text":"\u4ee5\u4e0b\u306b\u8a72\u5f53\u3059\u308b\u5834\u5408\u3001\u8106\u5f31\u3068\u8a00\u3048\u307e\u3059\u3002 \u4f7f\u7528\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u77e5\u3089\u306a\u3044\u5834\u5408\uff08\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u30fb\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306e\u4e21\u65b9\u306b\u3064\u3044\u3066\uff09\u3002 \u3053\u308c\u306b\u306f\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u3082\u542b\u3080\u3002 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304c\u8106\u5f31\u306a\u5834\u5408\u3084\u30b5\u30dd\u30fc\u30c8\u304c\u306a\u3044\u5834\u5408\u3001\u307e\u305f\u4f7f\u7528\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u308b\u5834\u5408\u3002 \u3053\u308c\u306b\u306f\u3001OS\u3084Web\u30b5\u30fc\u30d0\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\uff08DBMS\uff09\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001API\u3001\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30e9\u30f3\u30bf\u30a4\u30e0\u74b0\u5883\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u542b\u3080\u3002 \u8106\u5f31\u6027\u30b9\u30ad\u30e3\u30f3\u3092\u5b9a\u671f\u7684\u306b\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3084\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u95a2\u3059\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u60c5\u5831\u3092\u8cfc\u8aad\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3002 \u57fa\u76e4\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3084\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304a\u3088\u3073\u4f9d\u5b58\u95a2\u4fc2\u3092\u30ea\u30b9\u30af\u306b\u57fa\u3065\u304d\u30bf\u30a4\u30e0\u30ea\u30fc\u306b\u4fee\u6b63\u307e\u305f\u306f\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3057\u306a\u3044\u5834\u5408\u3002 \u30d1\u30c3\u30c1\u9069\u7528\u304c\u5909\u66f4\u7ba1\u7406\u306e\u4e0b\u3001\u6708\u6b21\u3084\u56db\u534a\u671f\u306e\u30bf\u30b9\u30af\u3068\u3055\u308c\u3066\u3044\u308b\u74b0\u5883\u3067\u3088\u304f\u8d77\u3053\u308b\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u5f53\u8a72\u7d44\u7e54\u306f\u3001\u89e3\u6c7a\u6e08\u307f\u306e\u8106\u5f31\u6027\u306b\u3064\u3044\u3066\u3001\u4f55\u65e5\u3082\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u4f55\u30f6\u6708\u3082\u4e0d\u5fc5\u8981\u306a\u5371\u967a\u306b\u3055\u3089\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u8005\u304c\u3001\u66f4\u65b0\u3084\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u307e\u305f\u306f\u30d1\u30c3\u30c1\u306e\u4e92\u63db\u6027\u3092\u30c6\u30b9\u30c8\u3057\u306a\u3044\u5834\u5408\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u30bb\u30ad\u30e5\u30a2\u306b\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3002\uff08A05-2021: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u30df\u30b9 \u53c2\u7167\uff09","title":"\u8aac\u660e"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#_4","text":"\u4ee5\u4e0b\u306b\u793a\u3059\u30d1\u30c3\u30c1\u7ba1\u7406\u30d7\u30ed\u30bb\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u672a\u4f7f\u7528\u306e\u4f9d\u5b58\u95a2\u4fc2\u3001\u4e0d\u8981\u306a\u6a5f\u80fd\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30d5\u30a1\u30a4\u30eb\u3084\u6587\u66f8\u3092\u53d6\u308a\u9664\u304f\u3002 Versions Maven Plugin, OWASP Dependency Check, Retire.js\u306a\u3069\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304a\u3088\u3073\u30b5\u30fc\u30d0\u306e\u4e21\u65b9\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\uff09\u3068\u305d\u306e\u4f9d\u5b58\u95a2\u4fc2\u306e\u68da\u5378\u3057\u3092\u7d99\u7d9a\u7684\u306b\u884c\u3046\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8106\u5f31\u6027\u306b\u3064\u3044\u3066CVE(Common Vulnerability and Exposures)\u3084NVD(National Vulnerability Database)\u306a\u3069\u306e\u60c5\u5831\u30bd\u30fc\u30b9\u3092\u7d99\u7d9a\u7684\u306b\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u69cb\u6210\u5206\u6790\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u3092\u81ea\u52d5\u5316\u3059\u308b\u3002 \u4f7f\u7528\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u95a2\u3059\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u96fb\u5b50\u30e1\u30fc\u30eb\u30a2\u30e9\u30fc\u30c8\u306b\u767b\u9332\u3059\u308b\u3002 \u5b89\u5168\u306a\u30ea\u30f3\u30af\u3092\u4ecb\u3057\u3001\u516c\u5f0f\u30bd\u30fc\u30b9\u304b\u3089\u306e\u307f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 \u5909\u66f4\u3055\u308c\u305f\u60aa\u610f\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u53ef\u80fd\u6027\u3092\u6e1b\u3089\u3059\u305f\u3081\u3001\u7f72\u540d\u4ed8\u304d\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u9078\u3076\u3088\u3046\u306b\u3059\u308b\u3002 (A08-2021: \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408 \u53c2\u7167) \u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u3001\u3082\u3057\u304f\u306f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d1\u30c3\u30c1\u304c\u4f5c\u3089\u308c\u3066\u3044\u306a\u3044\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u76e3\u8996\u3059\u308b\u3002 \u30d1\u30c3\u30c1\u9069\u7528\u304c\u4e0d\u53ef\u80fd\u306a\u5834\u5408\u306f\u3001\u767a\u898b\u3055\u308c\u305f\u554f\u984c\u3092\u76e3\u8996\u3001\u691c\u77e5\u307e\u305f\u306f\u4fdd\u8b77\u3059\u308b\u305f\u3081\u306b\u3001\u4eee\u60f3\u30d1\u30c3\u30c1\u306e\u9069\u7528\u3092\u691c\u8a0e\u3059\u308b\u3002 \u3044\u304b\u306a\u308b\u7d44\u7e54\u3082\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u307e\u305f\u306f\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa\u306e\u5b58\u7d9a\u671f\u9593\u306f\u3001\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3068\u30c8\u30ea\u30a2\u30fc\u30b8\u3092\u884c\u3044\u66f4\u65b0\u307e\u305f\u306f\u8a2d\u5b9a\u5909\u66f4\u3092\u884c\u3046\u7d99\u7d9a\u7684\u306a\u8a08\u753b\u304c\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1: \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u901a\u5e38\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u81ea\u4f53\u3068\u540c\u3058\u6a29\u9650\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u3069\u3093\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u5b58\u5728\u3059\u308b\u6b20\u9665\u3082\u3001\u6df1\u523b\u306a\u5f71\u97ff\u3092\u53ca\u307c\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u6b20\u9665\u306f\u3001\u5076\u767a\u7684\uff08\u4f8b\uff1a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30a8\u30e9\u30fc\uff09\u307e\u305f\u306f\u610f\u56f3\u7684\uff08\u4f8b\uff1a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d0\u30c3\u30af\u30c9\u30a2\uff09\u4e21\u65b9\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u767a\u898b\u6e08\u307f\u306e\u60aa\u7528\u53ef\u80fd\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8106\u5f31\u6027\u306e\u4f8b\uff1a Apache Struts 2\u306b\u304a\u3044\u3066\u30ea\u30e2\u30fc\u30c8\u3067\u4efb\u610f\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u8106\u5f31\u6027CVE-2017-5638\u306f\u3001\u91cd\u5927\u306a\u4fb5\u5bb3\u3092\u3082\u305f\u3089\u3057\u3066\u3044\u307e\u3059\u3002 Internet of things (IoT)\u306f\u3001\u983b\u7e41\u306a\u30d1\u30c3\u30c1\u9069\u7528\u304c\u56f0\u96e3\u3082\u3057\u304f\u306f\u4e0d\u53ef\u80fd\u3067\u3059\u304c\u3001\u4e00\u65b9\u3067\u30d1\u30c3\u30c1\u9069\u7528\u306e\u91cd\u8981\u6027\u306f\u307e\u3059\u307e\u3059\u9ad8\u307e\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u4f8b\uff1a\u533b\u7642\u6a5f\u5668\uff09 \u653b\u6483\u8005\u3092\u52a9\u3051\u308b\u3088\u3046\u306a\u30c4\u30fc\u30eb\u304c\u3042\u308a\u3001\u30d1\u30c3\u30c1\u304c\u672a\u9069\u7528\u306a\u30b7\u30b9\u30c6\u30e0\u3084\u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a\u30df\u30b9\u3092\u81ea\u52d5\u7684\u306b\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001Shodan IoT search engine\u306f\u30012014\u5e744\u6708\u306b\u30d1\u30c3\u30c1\u304c\u9069\u7528\u3055\u308c\u305fHeartbleed\u306e\u8106\u5f31\u6027\u306a\u3069\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u554f\u984c\u306e\u3042\u308b\u6a5f\u5668\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#_6","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#cwe","text":"CWE-937 OWASP Top 10 2013 A9: \u65e2\u77e5\u306e\u8106\u5f31\u6027\u306e\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528 CWE-1035 2017 Top 10 A9: \u65e2\u77e5\u306e\u8106\u5f31\u6027\u306e\u3042\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528 CWE-1104 \u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u88fd\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f7f\u7528","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#a062021-vulnerable-and-outdated-components","text":"","title":"A06:2021 \u2013 Vulnerable and Outdated Components"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"Factors"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#overview","text":"It was #2 from the Top 10 community survey but also had enough data to make the Top 10 via data. Vulnerable Components are a known issue that we struggle to test and assess risk and is the only category to not have any Common Weakness Enumerations (CWEs) mapped to the included CWEs, so a default exploits/impact weight of 5.0 is used. Notable CWEs included are CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017.","title":"Overview"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#description","text":"You are likely vulnerable: If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities. If software developers do not test the compatibility of updated, upgraded, or patched libraries. If you do not secure the components\u2019 configurations (see A05:2021-Security Misconfiguration).","title":"Description"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#how-to-prevent","text":"There should be a patch management process in place to: Remove unused dependencies, unnecessary features, components, files, and documentation. Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use. Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures). Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue. Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio.","title":"How to Prevent"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#example-attack-scenarios","text":"Scenario #1: Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are: CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches. While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices). There are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014.","title":"Example Attack Scenarios"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#references","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"References"},{"location":"ja/A06_2021-Vulnerable_and_Outdated_Components/#list-of-mapped-cwes","text":"CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"List of Mapped CWEs"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/","text":"A07:2021 \u2013 \u8b58\u5225\u3068\u8a8d\u8a3c\u306e\u5931\u6557 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897 \u6982\u8981 \u2693\ufe0e \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u3053\u308c\u307e\u3067\u306e\u7248\u3067\u306f \u8a8d\u8a3c\u306e\u4e0d\u5099 \u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u524d\u56de\u306f\u7b2c2\u4f4d\u3067\u3057\u305f\u304c\u4eca\u56de\u306f\u7b2c7\u4f4d\u306b\u9806\u4f4d\u3092\u843d\u3068\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u3053\u306e\u7248\u3067\u306f\u8b58\u5225\u306e\u5931\u6557\u306b\u95a2\u3059\u308b\u3044\u304f\u3064\u304b\u306eCWE\u3092\u542b\u3081\u3066\u3044\u307e\u3059\u3002\u8003\u616e\u3059\u3079\u304dCWE\u306b\u306f\u3001 CWE-297:\u30db\u30b9\u30c8\u306e\u4e0d\u4e00\u81f4\u306b\u3088\u308b\u8a3c\u660e\u66f8\u306e\u4e0d\u9069\u5207\u306a\u691c\u8a3c \u3001 CWE-287:\u4e0d\u9069\u5207\u306a\u8a8d\u8a3c \u3001 CWE-384:\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u56fa\u5b9a\u5316 \u304c\u3042\u308a\u307e\u3059\u3002 \u89e3\u8aac \u2693\ufe0e \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u78ba\u8a8d\u3001\u8a8d\u8a3c\u305d\u3057\u3066\u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\u306f\u3001\u8a8d\u8a3c\u95a2\u9023\u306e\u653b\u6483\u5bfe\u7b56\u3068\u3057\u3066\u6975\u3081\u3066\u91cd\u8981\u3067\u3059\u3002 \u3082\u3057\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u6b21\u306b\u5217\u6319\u3059\u308b\u3088\u3046\u306a\u554f\u984c\u304c\u3042\u308c\u3070\u3001\u8a8d\u8a3c\u306b\u554f\u984c\u304c\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\uff08\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u30fb\u30b9\u30bf\u30c3\u30d5\u30a3\u30f3\u30b0\u653b\u6483\uff09\u306e\u3088\u3046\u306a\u81ea\u52d5\u5316\u3055\u308c\u305f\u653b\u6483\u304c\u51fa\u6765\u3066\u3057\u307e\u3046\u3002\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3068\u306f\u3001\u653b\u6483\u8005\u304c\u6b63\u5f53\u306a\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5165\u624b\u3057\u3066\u884c\u3046\u653b\u6483\u624b\u6cd5\u306e\u3053\u3068\u3067\u3059\u3002 \u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\uff08\u7dcf\u5f53\u305f\u308a\u653b\u6483\uff09\u306a\u3069\u306e\u81ea\u52d5\u5316\u3055\u308c\u305f\u653b\u6483\u304c\u51fa\u6765\u3066\u3057\u307e\u3046\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u826f\u304f\u4f7f\u308f\u308c\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u5229\u7528\u3067\u304d\u3066\u3057\u307e\u3046\u3002\u305f\u3068\u3048\u3070\u300cPassword1\u300d\u3084\u300cadmin/admin\u300d\u306a\u3069\u3067\u3059\u3002 \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u5fa9\u65e7\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5fd8\u308c\u305f\u5834\u5408\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u5f31\u3044\u3001\u3042\u308b\u3044\u306f\u52b9\u679c\u304c\u306a\u3044\u3002\u305f\u3068\u3048\u3070\u300c\u79d8\u5bc6\u306e\u8cea\u554f\u300d\u306e\u3088\u3046\u306a\u3084\u308a\u65b9\u306f\u5b89\u5168\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u306b\u3001\u30d7\u30ec\u30fc\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u307e\u307e\u3067\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3001\u307e\u305f\u306f\u6697\u53f7\u5316\u3057\u3066\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3002\u3042\u308b\u3044\u306f\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u3066\u4fdd\u5b58\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u8106\u5f31\u306a\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002\uff08OWASP Top 10 2017 A3:\u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u3000\u3082\u53c2\u7167\uff09 \u591a\u8981\u7d20\u8a8d\u8a3c\u3092\u63a1\u7528\u3057\u3066\u3044\u306a\u3044\u3002\u3042\u308b\u3044\u306f\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3057\u3066\u3044\u308b\u3002 \u30bb\u30c3\u30b7\u30e7\u30f3ID\u304cURL\u306e\u4e00\u90e8\u3068\u3057\u3066\u9732\u51fa\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\uff08URL\u30ea\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u306a\u3069\u306b\u6ce8\u610f\uff09 \u30ed\u30b0\u30a4\u30f3\u5f8c\u306b\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092\u5909\u66f4\u3057\u3066\u3044\u306a\u3044\u3002\uff08\u30bb\u30c3\u30b7\u30e7\u30f3\u56fa\u5b9a\u653b\u6483\u306b\u6ce8\u610f\uff09 \u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092\u6b63\u3057\u304f\u7121\u52b9\u5316\u3057\u3066\u3044\u306a\u3044\u3002\u305f\u3068\u3048\u3070\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u969b\u3084\u4e00\u5b9a\u671f\u9593\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7121\u3044\u5834\u5408\u306b\u3082\u3001\u30e6\u30fc\u30b6\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3\u3084\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\uff08\u30b7\u30f3\u30b0\u30eb\u30b5\u30a4\u30f3\u30aa\u30f3\u306e\u30c8\u30fc\u30af\u30f3\u306a\u3069\u304c\u591a\u3044\uff09\u304c\u3001\u7121\u52b9\u5316\u3055\u308c\u306a\u3044\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u591a\u8981\u7d20\u8a8d\u8a3c\u3092\u53ef\u80fd\u306a\u9650\u308a\u5b9f\u88c5\u3059\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3001\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\u3001\u76d7\u7528\u3057\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u518d\u5229\u7528\u306a\u3069\u591a\u304f\u306e\u81ea\u52d5\u5316\u3055\u308c\u305f\u653b\u6483\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u307e\u307e\u30d7\u30ed\u30b0\u30e9\u30e0\uff08\u30b5\u30fc\u30d3\u30b9\uff09\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u306a\u3044\u3002\u7279\u306b\u7ba1\u7406\u8005\u30e6\u30fc\u30b6\u30fc\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306e\u307e\u307e\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u306e\u306f\u8a00\u8a9e\u9053\u65ad\u3067\u3059\u3002 \u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u3002\u305f\u3068\u3048\u3070\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u65b0\u898f\u8a2d\u5b9a\u3084\u66f4\u65b0\u6642\u306b\u306f\u3001\u300c\u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3000\u30c8\u30c3\u30d710,000\u300d\u306a\u3069\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u691c\u8a3c\u3059\u308b\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u300c\u9577\u3055\u300d\u3084\u300c\u8907\u96d1\u3055\u300d\u305d\u3057\u3066\u300c\u5b9a\u671f\u7684\u306a\u5909\u66f4\u300d\u306a\u3069\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u306b\u3064\u3044\u3066\u306f\u3001NIST\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\uff08800-63b \u30bb\u30af\u30b7\u30e7\u30f35.1.1:\u8a18\u61b6\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\uff09\u3084\u3001\u8fd1\u4ee3\u7684\u3067\u6839\u62e0\u306b\u57fa\u3065\u304f\u30dd\u30ea\u30b7\u30fc\u306b\u6cbf\u3046\u3088\u3046\u306b\u3059\u308b\u3002 \u65b0\u898f\u767b\u9332\u306e\u5834\u5408\u3001\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u30ea\u30ab\u30d0\u30ea\u30fc\u306e\u5834\u5408\u3001\u307e\u305fAPI\u7d4c\u7531\u306e\u5834\u5408\u306a\u3069\u3001\u3069\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u30a2\u30ab\u30a6\u30f3\u30c8\u5217\u6319\u653b\u6483\u306b\u5bfe\u3057\u3066\u5f37\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\u8a8d\u8a3c\u306e\u969b\u306b\u306f\u3069\u306e\u3088\u3046\u306a\u7d50\u679c\u3067\u3042\u308c\uff08\u6210\u529f\u3067\u3082\u5931\u6557\u3067\u3082\uff09\u540c\u3058\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f7f\u3046\u3088\u3046\u306b\u3059\u308b\u3002 \u30ed\u30b0\u30a4\u30f3\u8a66\u884c\u56de\u6570\u306b\u5236\u9650\u3092\u8a2d\u3051\u308b\u304b\u3001\u30ed\u30b0\u30a4\u30f3\u306b\u7e70\u308a\u8fd4\u3057\u5931\u6557\u3059\u308b\u3088\u3046\u306a\u3089\u5f90\u3005\u306b\u51e6\u7406\u3092\u9045\u5ef6\u3055\u305b\u308b\u3002\u30ed\u30b0\u30a4\u30f3\u306e\u5931\u6557\u306f\u3059\u3079\u3066\u30ed\u30b0\u306b\u8a18\u9332\u3059\u308b\u3002\u305d\u3057\u3066\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3084\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\u306a\u3069\u306e\u653b\u6483\u3092\u691c\u77e5\u3057\u305f\u969b\u306b\u306f\u7ba1\u7406\u8005\u306b\u901a\u77e5\u3059\u308b\u3002 \u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\u306f\u30b5\u30fc\u30d0\u5074\u3067\u884c\u3044\u3001\u5b89\u5168\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u306a\u3069\u306b\u5185\u8535\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\u30ed\u30b0\u30a4\u30f3\u6bce\u306b\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u306e\u9ad8\u3044\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092\u767a\u884c\u3059\u308b\u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\u6a5f\u69cb\u3092\u5229\u7528\u3059\u308b\u3002\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306fURL\u306b\u542b\u307e\u308c\u308b\u3079\u304d\u3067\u306f\u306a\u304f\u3001\u5b89\u5168\u306b\u4fdd\u7ba1\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u969b\u3001\u4e00\u5b9a\u671f\u9593\u30a2\u30af\u30bb\u30b9\u304c\u7121\u3044\u5834\u5408\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3092\u7d4c\u904e\u3057\u305f\u5834\u5408\u306b\u306f\u7121\u52b9\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1: \u65e2\u77e5\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u306f\u3088\u304f\u3042\u308b\u653b\u6483\u624b\u6cd5\u3067\u3059\u3002\u3082\u3057\u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u9023\u7d9a\u653b\u6483\u3084\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3078\u306e\u9632\u5fa1\u304c\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u3059\u308b\u3068\u3001\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u795e\u8a17\u6240\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u6709\u52b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u8a8d\u8a3c\u3092\u72d9\u3046\u653b\u6483\u306e\u591a\u304f\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u552f\u4e00\u306e\u8a8d\u8a3c\u8981\u7d20\u3068\u3057\u3066\u4f7f\u3044\u7d9a\u3051\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059\u3002\u300c\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5b9a\u671f\u7684\u306a\u5909\u66f4\u300d\u3084\u300c\u8907\u96d1\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8981\u6c42\u300d\u306f\u3001\u4ee5\u524d\u306f\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3068\u8003\u3048\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u304b\u3048\u3063\u3066\u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3042\u3061\u3053\u3061\u306e\u30b5\u30a4\u30c8\u3067\u4f7f\u3044\u307e\u308f\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002NIST 800-63\u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306b\u5f93\u3063\u3066\u3001\u3053\u306e\u3088\u3046\u306a\u6614\u306a\u304c\u3089\u306e\u6163\u7fd2\u306f\u3082\u3046\u8f9e\u3081\u306b\u3057\u307e\u3057\u3087\u3046\u3001\u305d\u3057\u3066\u591a\u8981\u7d20\u8a8d\u8a3c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u304c\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u3082\u3057\u304b\u3057\u305f\u3089\u30e6\u30fc\u30b6\u30fc\u306f\u516c\u5171\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30e6\u30fc\u30b6\u30fc\u304c\u300c\u30ed\u30b0\u30a2\u30a6\u30c8\u300d\u3092\u30af\u30ea\u30c3\u30af\u305b\u305a\u306b\u3001\u8868\u793a\u3057\u3066\u3044\u308b\u30d6\u30e9\u30a6\u30b6\u306e\u30bf\u30d6\u3092\u9589\u3058\u3066\u3069\u3053\u304b\u3078\u884c\u3063\u3066\u3057\u307e\u3063\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\u30bb\u30c3\u30b7\u30e7\u30f3\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u3068\u3001\u653b\u6483\u8005\u306f\uff11\u6642\u9593\u5f8c\u306b\u305d\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u5148\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u306a\u308a\u3059\u307e\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity, Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-255 \u8a3c\u660e\u66f8\u30fb\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u7ba1\u7406 CWE-259 \u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u4f7f\u7528 CWE-287 \u4e0d\u9069\u5207\u306a\u8a8d\u8a3c CWE-288 \u4ee3\u66ff\u30d1\u30b9\u307e\u305f\u306f\u30c1\u30e3\u30cd\u30eb\u3092\u4f7f\u7528\u3057\u305f\u8a8d\u8a3c\u56de\u907f CWE-290 \u30b9\u30d7\u30fc\u30d5\u30a3\u30f3\u30b0\u306b\u3088\u308b\u8a8d\u8a3c\u56de\u907f CWE-294 Capture-replay \u306b\u3088\u308b\u8a8d\u8a3c\u56de\u907f CWE-295 \u4e0d\u6b63\u306a\u8a3c\u660e\u66f8\u691c\u8a3c CWE-297 \u30db\u30b9\u30c8\u306e\u4e0d\u4e00\u81f4\u306b\u3088\u308b\u8a3c\u660e\u66f8\u306e\u4e0d\u9069\u5207\u306a\u691c\u8a3c CWE-300 \u4e2d\u9593\u8005\u306e\u554f\u984c CWE-302 \u8a8d\u8a3c\u56de\u907f\u306e\u8106\u5f31\u6027 CWE-304 \u8a8d\u8a3c\u306b\u304a\u3051\u308b\u91cd\u8981\u306a\u30b9\u30c6\u30c3\u30d7\u306e\u6b20\u843d CWE-306 \u91cd\u8981\u306a\u6a5f\u80fd\u306b\u5bfe\u3059\u308b\u8a8d\u8a3c\u306e\u6b20\u5982 CWE-307 \u904e\u5ea6\u306a\u8a8d\u8a3c\u8a66\u884c\u306e\u4e0d\u9069\u5207\u306a\u5236\u9650 CWE-346 \u540c\u4e00\u751f\u6210\u5143\u30dd\u30ea\u30b7\u30fc\u9055\u53cd CWE-384 \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u56fa\u5b9a\u5316 CWE-521 \u8106\u5f31\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8981\u6c42 CWE-613 \u4e0d\u9069\u5207\u306a\u30bb\u30c3\u30b7\u30e7\u30f3\u671f\u9650 CWE-620 \u672a\u691c\u8a3c\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4 CWE-640 \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5fd8\u308c\u305f\u5834\u5408\u306e\u8106\u5f31\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30ab\u30d0\u30ea\u306e\u4ed5\u7d44\u307f CWE-798 \u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u8a8d\u8a3c\u60c5\u5831\u306e\u4f7f\u7528 CWE-940 \u901a\u4fe1\u30c1\u30e3\u30cd\u30eb\u30bd\u30fc\u30b9\u306e\u4e0d\u9069\u5207\u306a\u691c\u8a3c CWE-1216 \u30ed\u30c3\u30af\u30a2\u30a6\u30c8\u6a5f\u69cb\u306e\u4e0d\u5099 A07:2021 \u2013 Identification and Authentication Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897 Overview \u2693\ufe0e Previously known as Broken Authentication , this category slid down from the second position and now includes CWEs related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation . Description \u2693\ufe0e Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin. \" Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords (see A3:2017-Sensitive Data Exposure). Has missing or ineffective multi-factor authentication. Exposes Session IDs in the URL (e.g., URL rewriting). Do not rotate Session IDs after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity. How to Prevent \u2693\ufe0e Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with NIST 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts. Example Attack Scenarios \u2693\ufe0e Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated. References \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity, Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets List of Mapped CWEs \u2693\ufe0e CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"A07 \u8b58\u5225\u3068\u8a8d\u8a3c\u306e\u5931\u6557"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#a072021","text":"","title":"A07:2021 \u2013 \u8b58\u5225\u3068\u8a8d\u8a3c\u306e\u5931\u6557"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897","title":"\u56e0\u5b50"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#_2","text":"\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u3053\u308c\u307e\u3067\u306e\u7248\u3067\u306f \u8a8d\u8a3c\u306e\u4e0d\u5099 \u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u524d\u56de\u306f\u7b2c2\u4f4d\u3067\u3057\u305f\u304c\u4eca\u56de\u306f\u7b2c7\u4f4d\u306b\u9806\u4f4d\u3092\u843d\u3068\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u3053\u306e\u7248\u3067\u306f\u8b58\u5225\u306e\u5931\u6557\u306b\u95a2\u3059\u308b\u3044\u304f\u3064\u304b\u306eCWE\u3092\u542b\u3081\u3066\u3044\u307e\u3059\u3002\u8003\u616e\u3059\u3079\u304dCWE\u306b\u306f\u3001 CWE-297:\u30db\u30b9\u30c8\u306e\u4e0d\u4e00\u81f4\u306b\u3088\u308b\u8a3c\u660e\u66f8\u306e\u4e0d\u9069\u5207\u306a\u691c\u8a3c \u3001 CWE-287:\u4e0d\u9069\u5207\u306a\u8a8d\u8a3c \u3001 CWE-384:\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u56fa\u5b9a\u5316 \u304c\u3042\u308a\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#_3","text":"\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u78ba\u8a8d\u3001\u8a8d\u8a3c\u305d\u3057\u3066\u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\u306f\u3001\u8a8d\u8a3c\u95a2\u9023\u306e\u653b\u6483\u5bfe\u7b56\u3068\u3057\u3066\u6975\u3081\u3066\u91cd\u8981\u3067\u3059\u3002 \u3082\u3057\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u6b21\u306b\u5217\u6319\u3059\u308b\u3088\u3046\u306a\u554f\u984c\u304c\u3042\u308c\u3070\u3001\u8a8d\u8a3c\u306b\u554f\u984c\u304c\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\uff08\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u30fb\u30b9\u30bf\u30c3\u30d5\u30a3\u30f3\u30b0\u653b\u6483\uff09\u306e\u3088\u3046\u306a\u81ea\u52d5\u5316\u3055\u308c\u305f\u653b\u6483\u304c\u51fa\u6765\u3066\u3057\u307e\u3046\u3002\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3068\u306f\u3001\u653b\u6483\u8005\u304c\u6b63\u5f53\u306a\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5165\u624b\u3057\u3066\u884c\u3046\u653b\u6483\u624b\u6cd5\u306e\u3053\u3068\u3067\u3059\u3002 \u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\uff08\u7dcf\u5f53\u305f\u308a\u653b\u6483\uff09\u306a\u3069\u306e\u81ea\u52d5\u5316\u3055\u308c\u305f\u653b\u6483\u304c\u51fa\u6765\u3066\u3057\u307e\u3046\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u826f\u304f\u4f7f\u308f\u308c\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u5229\u7528\u3067\u304d\u3066\u3057\u307e\u3046\u3002\u305f\u3068\u3048\u3070\u300cPassword1\u300d\u3084\u300cadmin/admin\u300d\u306a\u3069\u3067\u3059\u3002 \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u5fa9\u65e7\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5fd8\u308c\u305f\u5834\u5408\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u5f31\u3044\u3001\u3042\u308b\u3044\u306f\u52b9\u679c\u304c\u306a\u3044\u3002\u305f\u3068\u3048\u3070\u300c\u79d8\u5bc6\u306e\u8cea\u554f\u300d\u306e\u3088\u3046\u306a\u3084\u308a\u65b9\u306f\u5b89\u5168\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u306b\u3001\u30d7\u30ec\u30fc\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u307e\u307e\u3067\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3001\u307e\u305f\u306f\u6697\u53f7\u5316\u3057\u3066\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3002\u3042\u308b\u3044\u306f\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u3066\u4fdd\u5b58\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u8106\u5f31\u306a\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002\uff08OWASP Top 10 2017 A3:\u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u3000\u3082\u53c2\u7167\uff09 \u591a\u8981\u7d20\u8a8d\u8a3c\u3092\u63a1\u7528\u3057\u3066\u3044\u306a\u3044\u3002\u3042\u308b\u3044\u306f\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3057\u3066\u3044\u308b\u3002 \u30bb\u30c3\u30b7\u30e7\u30f3ID\u304cURL\u306e\u4e00\u90e8\u3068\u3057\u3066\u9732\u51fa\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\uff08URL\u30ea\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u306a\u3069\u306b\u6ce8\u610f\uff09 \u30ed\u30b0\u30a4\u30f3\u5f8c\u306b\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092\u5909\u66f4\u3057\u3066\u3044\u306a\u3044\u3002\uff08\u30bb\u30c3\u30b7\u30e7\u30f3\u56fa\u5b9a\u653b\u6483\u306b\u6ce8\u610f\uff09 \u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092\u6b63\u3057\u304f\u7121\u52b9\u5316\u3057\u3066\u3044\u306a\u3044\u3002\u305f\u3068\u3048\u3070\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u969b\u3084\u4e00\u5b9a\u671f\u9593\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7121\u3044\u5834\u5408\u306b\u3082\u3001\u30e6\u30fc\u30b6\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3\u3084\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\uff08\u30b7\u30f3\u30b0\u30eb\u30b5\u30a4\u30f3\u30aa\u30f3\u306e\u30c8\u30fc\u30af\u30f3\u306a\u3069\u304c\u591a\u3044\uff09\u304c\u3001\u7121\u52b9\u5316\u3055\u308c\u306a\u3044\u3002","title":"\u89e3\u8aac"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#_4","text":"\u591a\u8981\u7d20\u8a8d\u8a3c\u3092\u53ef\u80fd\u306a\u9650\u308a\u5b9f\u88c5\u3059\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3001\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\u3001\u76d7\u7528\u3057\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u518d\u5229\u7528\u306a\u3069\u591a\u304f\u306e\u81ea\u52d5\u5316\u3055\u308c\u305f\u653b\u6483\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u307e\u307e\u30d7\u30ed\u30b0\u30e9\u30e0\uff08\u30b5\u30fc\u30d3\u30b9\uff09\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u306a\u3044\u3002\u7279\u306b\u7ba1\u7406\u8005\u30e6\u30fc\u30b6\u30fc\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306e\u307e\u307e\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u306e\u306f\u8a00\u8a9e\u9053\u65ad\u3067\u3059\u3002 \u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u3002\u305f\u3068\u3048\u3070\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u65b0\u898f\u8a2d\u5b9a\u3084\u66f4\u65b0\u6642\u306b\u306f\u3001\u300c\u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3000\u30c8\u30c3\u30d710,000\u300d\u306a\u3069\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u691c\u8a3c\u3059\u308b\u3002 \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u300c\u9577\u3055\u300d\u3084\u300c\u8907\u96d1\u3055\u300d\u305d\u3057\u3066\u300c\u5b9a\u671f\u7684\u306a\u5909\u66f4\u300d\u306a\u3069\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u306b\u3064\u3044\u3066\u306f\u3001NIST\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\uff08800-63b \u30bb\u30af\u30b7\u30e7\u30f35.1.1:\u8a18\u61b6\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\uff09\u3084\u3001\u8fd1\u4ee3\u7684\u3067\u6839\u62e0\u306b\u57fa\u3065\u304f\u30dd\u30ea\u30b7\u30fc\u306b\u6cbf\u3046\u3088\u3046\u306b\u3059\u308b\u3002 \u65b0\u898f\u767b\u9332\u306e\u5834\u5408\u3001\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u30ea\u30ab\u30d0\u30ea\u30fc\u306e\u5834\u5408\u3001\u307e\u305fAPI\u7d4c\u7531\u306e\u5834\u5408\u306a\u3069\u3001\u3069\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u30a2\u30ab\u30a6\u30f3\u30c8\u5217\u6319\u653b\u6483\u306b\u5bfe\u3057\u3066\u5f37\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\u8a8d\u8a3c\u306e\u969b\u306b\u306f\u3069\u306e\u3088\u3046\u306a\u7d50\u679c\u3067\u3042\u308c\uff08\u6210\u529f\u3067\u3082\u5931\u6557\u3067\u3082\uff09\u540c\u3058\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f7f\u3046\u3088\u3046\u306b\u3059\u308b\u3002 \u30ed\u30b0\u30a4\u30f3\u8a66\u884c\u56de\u6570\u306b\u5236\u9650\u3092\u8a2d\u3051\u308b\u304b\u3001\u30ed\u30b0\u30a4\u30f3\u306b\u7e70\u308a\u8fd4\u3057\u5931\u6557\u3059\u308b\u3088\u3046\u306a\u3089\u5f90\u3005\u306b\u51e6\u7406\u3092\u9045\u5ef6\u3055\u305b\u308b\u3002\u30ed\u30b0\u30a4\u30f3\u306e\u5931\u6557\u306f\u3059\u3079\u3066\u30ed\u30b0\u306b\u8a18\u9332\u3059\u308b\u3002\u305d\u3057\u3066\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3084\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\u306a\u3069\u306e\u653b\u6483\u3092\u691c\u77e5\u3057\u305f\u969b\u306b\u306f\u7ba1\u7406\u8005\u306b\u901a\u77e5\u3059\u308b\u3002 \u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\u306f\u30b5\u30fc\u30d0\u5074\u3067\u884c\u3044\u3001\u5b89\u5168\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u306a\u3069\u306b\u5185\u8535\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\u30ed\u30b0\u30a4\u30f3\u6bce\u306b\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u306e\u9ad8\u3044\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092\u767a\u884c\u3059\u308b\u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\u6a5f\u69cb\u3092\u5229\u7528\u3059\u308b\u3002\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306fURL\u306b\u542b\u307e\u308c\u308b\u3079\u304d\u3067\u306f\u306a\u304f\u3001\u5b89\u5168\u306b\u4fdd\u7ba1\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u969b\u3001\u4e00\u5b9a\u671f\u9593\u30a2\u30af\u30bb\u30b9\u304c\u7121\u3044\u5834\u5408\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3092\u7d4c\u904e\u3057\u305f\u5834\u5408\u306b\u306f\u7121\u52b9\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1: \u65e2\u77e5\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u306f\u3088\u304f\u3042\u308b\u653b\u6483\u624b\u6cd5\u3067\u3059\u3002\u3082\u3057\u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u9023\u7d9a\u653b\u6483\u3084\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30b9\u30c8\u653b\u6483\u3078\u306e\u9632\u5fa1\u304c\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u3059\u308b\u3068\u3001\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u795e\u8a17\u6240\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u6709\u52b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u8a8d\u8a3c\u3092\u72d9\u3046\u653b\u6483\u306e\u591a\u304f\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u552f\u4e00\u306e\u8a8d\u8a3c\u8981\u7d20\u3068\u3057\u3066\u4f7f\u3044\u7d9a\u3051\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059\u3002\u300c\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5b9a\u671f\u7684\u306a\u5909\u66f4\u300d\u3084\u300c\u8907\u96d1\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8981\u6c42\u300d\u306f\u3001\u4ee5\u524d\u306f\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3068\u8003\u3048\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u304b\u3048\u3063\u3066\u5f31\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3042\u3061\u3053\u3061\u306e\u30b5\u30a4\u30c8\u3067\u4f7f\u3044\u307e\u308f\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002NIST 800-63\u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306b\u5f93\u3063\u3066\u3001\u3053\u306e\u3088\u3046\u306a\u6614\u306a\u304c\u3089\u306e\u6163\u7fd2\u306f\u3082\u3046\u8f9e\u3081\u306b\u3057\u307e\u3057\u3087\u3046\u3001\u305d\u3057\u3066\u591a\u8981\u7d20\u8a8d\u8a3c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u304c\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u3082\u3057\u304b\u3057\u305f\u3089\u30e6\u30fc\u30b6\u30fc\u306f\u516c\u5171\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30e6\u30fc\u30b6\u30fc\u304c\u300c\u30ed\u30b0\u30a2\u30a6\u30c8\u300d\u3092\u30af\u30ea\u30c3\u30af\u305b\u305a\u306b\u3001\u8868\u793a\u3057\u3066\u3044\u308b\u30d6\u30e9\u30a6\u30b6\u306e\u30bf\u30d6\u3092\u9589\u3058\u3066\u3069\u3053\u304b\u3078\u884c\u3063\u3066\u3057\u307e\u3063\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\u30bb\u30c3\u30b7\u30e7\u30f3\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u3068\u3001\u653b\u6483\u8005\u306f\uff11\u6642\u9593\u5f8c\u306b\u305d\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u5148\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u306a\u308a\u3059\u307e\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#_6","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity, Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#cwe","text":"CWE-255 \u8a3c\u660e\u66f8\u30fb\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u7ba1\u7406 CWE-259 \u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u4f7f\u7528 CWE-287 \u4e0d\u9069\u5207\u306a\u8a8d\u8a3c CWE-288 \u4ee3\u66ff\u30d1\u30b9\u307e\u305f\u306f\u30c1\u30e3\u30cd\u30eb\u3092\u4f7f\u7528\u3057\u305f\u8a8d\u8a3c\u56de\u907f CWE-290 \u30b9\u30d7\u30fc\u30d5\u30a3\u30f3\u30b0\u306b\u3088\u308b\u8a8d\u8a3c\u56de\u907f CWE-294 Capture-replay \u306b\u3088\u308b\u8a8d\u8a3c\u56de\u907f CWE-295 \u4e0d\u6b63\u306a\u8a3c\u660e\u66f8\u691c\u8a3c CWE-297 \u30db\u30b9\u30c8\u306e\u4e0d\u4e00\u81f4\u306b\u3088\u308b\u8a3c\u660e\u66f8\u306e\u4e0d\u9069\u5207\u306a\u691c\u8a3c CWE-300 \u4e2d\u9593\u8005\u306e\u554f\u984c CWE-302 \u8a8d\u8a3c\u56de\u907f\u306e\u8106\u5f31\u6027 CWE-304 \u8a8d\u8a3c\u306b\u304a\u3051\u308b\u91cd\u8981\u306a\u30b9\u30c6\u30c3\u30d7\u306e\u6b20\u843d CWE-306 \u91cd\u8981\u306a\u6a5f\u80fd\u306b\u5bfe\u3059\u308b\u8a8d\u8a3c\u306e\u6b20\u5982 CWE-307 \u904e\u5ea6\u306a\u8a8d\u8a3c\u8a66\u884c\u306e\u4e0d\u9069\u5207\u306a\u5236\u9650 CWE-346 \u540c\u4e00\u751f\u6210\u5143\u30dd\u30ea\u30b7\u30fc\u9055\u53cd CWE-384 \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u56fa\u5b9a\u5316 CWE-521 \u8106\u5f31\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8981\u6c42 CWE-613 \u4e0d\u9069\u5207\u306a\u30bb\u30c3\u30b7\u30e7\u30f3\u671f\u9650 CWE-620 \u672a\u691c\u8a3c\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4 CWE-640 \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5fd8\u308c\u305f\u5834\u5408\u306e\u8106\u5f31\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30ab\u30d0\u30ea\u306e\u4ed5\u7d44\u307f CWE-798 \u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u8a8d\u8a3c\u60c5\u5831\u306e\u4f7f\u7528 CWE-940 \u901a\u4fe1\u30c1\u30e3\u30cd\u30eb\u30bd\u30fc\u30b9\u306e\u4e0d\u9069\u5207\u306a\u691c\u8a3c CWE-1216 \u30ed\u30c3\u30af\u30a2\u30a6\u30c8\u6a5f\u69cb\u306e\u4e0d\u5099","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#a072021-identification-and-authentication-failures","text":"","title":"A07:2021 \u2013 Identification and Authentication Failures"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897","title":"Factors"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#overview","text":"Previously known as Broken Authentication , this category slid down from the second position and now includes CWEs related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation .","title":"Overview"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#description","text":"Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin. \" Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords (see A3:2017-Sensitive Data Exposure). Has missing or ineffective multi-factor authentication. Exposes Session IDs in the URL (e.g., URL rewriting). Do not rotate Session IDs after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.","title":"Description"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#how-to-prevent","text":"Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with NIST 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts.","title":"How to Prevent"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#example-attack-scenarios","text":"Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated.","title":"Example Attack Scenarios"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#references","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity, Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"References"},{"location":"ja/A07_2021-Identification_and_Authentication_Failures/#list-of-mapped-cwes","text":"CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"List of Mapped CWEs"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/","text":"A08:2021 \u2013 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152 \u6982\u8981 \u2693\ufe0e \u3053\u308c\u306f2021\u5e74\u306b\u65b0\u8a2d\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u66f4\u65b0\u3001\u91cd\u8981\u306a\u30c7\u30fc\u30bf\u3092\u3001CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u304a\u3044\u3066\u6574\u5408\u6027\u3092\u691c\u8a3c\u305b\u305a\u306b\u898b\u8fbc\u307f\u3067\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u308b\u554f\u984c\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u3044\u307e\u3059\u3002 \u5171\u901a\u8106\u5f31\u6027\u8b58\u5225\u5b50/\u5171\u901a\u8106\u5f31\u6027\u8a55\u4fa1\u30b7\u30b9\u30c6\u30e0 (CVE/CVSS) \u306e\u30c7\u30fc\u30bf\u304b\u3089\u6700\u3082\u91cd\u5927\u306a\u5f71\u97ff\u3092\u53d7\u3051\u305f\u3082\u306e\u306e1\u3064\u3067\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d\u5171\u901a\u8106\u5f31\u6027\u8b58\u5225\u5b50 (CWEs) \u306f\u3001 CWE-829: \u4fe1\u983c\u3067\u304d\u306a\u3044\u5236\u5fa1\u9818\u57df\u304b\u3089\u306e\u6a5f\u80fd\u306e\u7d44\u307f\u8fbc\u307f \u3001 CWE-494: \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b8c\u5168\u6027\u691c\u8a3c\u4e0d\u5099 \u3001\u305d\u3057\u3066 CWE-502: \u4fe1\u983c\u3067\u304d\u306a\u3044\u30c7\u30fc\u30bf\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3 \u3067\u3059\u3002 \u8aac\u660e \u2693\ufe0e \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408\u306f\u3001\u30b3\u30fc\u30c9\u3084\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u304c\u6574\u5408\u6027\u9055\u53cd\u304b\u3089\u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u95a2\u9023\u3057\u3066\u3044\u307e\u3059\u3002 \u4f8b\u3068\u3057\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4fe1\u983c\u3055\u308c\u3066\u3044\u306a\u3044\u30bd\u30fc\u30b9\u306b\u7531\u6765\u3059\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u30c7\u30ea\u30d0\u30ea\u30fc\u30cd\u30c3\u30c8\u30ef\u30fc\u30af (CDNs) \u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u5834\u5408\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002 \u5b89\u5168\u3067\u306a\u3044CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3082\u3001\u6a29\u9650\u306e\u306a\u3044\u30a2\u30af\u30bb\u30b9\u3084\u60aa\u610f\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u306e\u3063\u3068\u308a\u306e\u53ef\u80fd\u6027\u3092\u9ad8\u3081\u307e\u3059\u3002 \u4eca\u3067\u306f\u591a\u304f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u81ea\u52d5\u66f4\u65b0\u306e\u6a5f\u80fd\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u3053\u3067\u3001\u5341\u5206\u306a\u6574\u5408\u6027\u306e\u691c\u8a3c\u3092\u884c\u3046\u3053\u3068\u306a\u304f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u3001\u4fe1\u983c\u6e08\u307f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u9069\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u653b\u6483\u8005\u306f\u81ea\u524d\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3001\u5168\u3066\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5bfe\u8c61\u306b\u5bfe\u3057\u3066\u914d\u4fe1\u3092\u884c\u3046\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u4ed6\u306e\u4f8b\u3068\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30c7\u30fc\u30bf\u304c\u653b\u6483\u8005\u304c\u76ee\u3067\u898b\u3066\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u69cb\u9020\u3068\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u307e\u305f\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u3088\u3046\u306a\u5834\u5408\u306f\u3001\u5b89\u5168\u3067\u306a\u3044\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u8106\u5f31\u3067\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u7f72\u540d\u3042\u308b\u3044\u306f\u985e\u4f3c\u306e\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u7528\u3044\u3066\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3084\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3055\u308c\u305f\u30bd\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002 npm\u3084Maven\u306a\u3069\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u4f9d\u5b58\u95a2\u4fc2\u304c\u4fe1\u983c\u3055\u308c\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u65e2\u77e5\u306e\u8106\u5f31\u6027\u3092\u542b\u307e\u306a\u3044\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306b\u3001OWASP Dependency Check\u3084OWASP CycloneDX\u3068\u3044\u3063\u305f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b5\u30d7\u30e9\u30a4\u30c1\u30a7\u30fc\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c4\u30fc\u30eb\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u60aa\u610f\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3084\u8a2d\u5b9a\u304c\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u7d44\u307f\u8fbc\u307e\u308c\u308b\u6a5f\u4f1a\u3092\u6700\u5c0f\u5316\u3059\u308b\u305f\u3081\u306b\u3001\u30b3\u30fc\u30c9\u3084\u8a2d\u5b9a\u306e\u5909\u66f4\u306b\u5bfe\u3059\u308b\u30ec\u30d3\u30e5\u30fc\u30d7\u30ed\u30bb\u30b9\u304c\u78ba\u7acb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u304c\u9069\u5207\u306b\u5206\u96e2\u3055\u308c\u3001\u8a2d\u5b9a\u3055\u308c\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3001\u307e\u305f\u3001\u30d3\u30eb\u30c9\u3084\u30c7\u30d7\u30ed\u30a4\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u81f3\u308b\u30b3\u30fc\u30c9\u30d5\u30ed\u30fc\u306e\u6574\u5408\u6027\u304c\u78ba\u4fdd\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u6539\u3056\u3093\u3084\u518d\u751f\u6210\u3092\u691c\u51fa\u3059\u308b\u4f55\u3089\u304b\u306e\u6574\u5408\u6027\u78ba\u8a8d\u3084\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u3092\u884c\u3046\u3053\u3068\u306a\u3057\u306b\u3001\u4fe1\u983c\u3055\u308c\u3066\u3044\u306a\u3044\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u672a\u7f72\u540d\u3082\u3057\u304f\u306f\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u305b\u3093\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1 \u7f72\u540d\u306e\u306a\u3044\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8: \u591a\u304f\u306e\u30db\u30fc\u30e0\u30eb\u30fc\u30bf\u30fc\u3001\u30bb\u30c3\u30c8\u30c8\u30c3\u30d7\u30dc\u30c3\u30af\u30b9\u3001\u30c7\u30d0\u30a4\u30b9\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u7b49\u306f\u3001\u7f72\u540d\u6e08\u307f\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306b\u3088\u308b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u691c\u8a3c\u3092\u884c\u3044\u307e\u305b\u3093\u3002 \u672a\u7f72\u540d\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306f\u3001\u653b\u6483\u8005\u306b\u3068\u3063\u3066\u62e1\u5927\u3057\u3064\u3064\u3042\u308b\u6a19\u7684\u3067\u3042\u308a\u3001\u60aa\u5316\u306e\u4e00\u9014\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002 \u591a\u304f\u306e\u5834\u5408\u306b\u304a\u3044\u3066\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3066\u4fee\u6b63\u3092\u884c\u3063\u305f\u4e0a\u3067\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u4f7f\u7528\u3055\u308c\u306a\u304f\u306a\u308b\u306e\u3092\u5f85\u3064\u307b\u304b\u306a\u3044\u3053\u3068\u304b\u3089\u3001\u3053\u308c\u306f\u975e\u5e38\u306b\u5927\u304d\u306a\u61f8\u5ff5\u4e8b\u9805\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2 SolarWinds\u3067\u306e\u60aa\u610f\u306e\u3042\u308b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 : \u6700\u8fd1\u306e\u6ce8\u76ee\u3059\u3079\u304d\u653b\u6483\u304cSolarWinds Orion\u3067\u306e\u653b\u6483\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3068\u4f75\u305b\u3066\u3001\u56fd\u5bb6\u306f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u6a5f\u69cb\u3092\u653b\u6483\u3059\u308b\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u958b\u767a\u3057\u305f\u4f01\u696d\u306f\u3001\u5b89\u5168\u306a\u30d3\u30eb\u30c9\u3068\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u6574\u5408\u30d7\u30ed\u30bb\u30b9\u3092\u5099\u3048\u3066\u3044\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u305d\u308c\u3089\u306f\u7834\u58ca\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u3063\u305f\u305f\u3081\u306b\u3001\u305d\u306e\u4f01\u696d\u306f\u3001\u6570\u30f6\u6708\u306b\u308f\u305f\u3063\u3066\u3001\u9ad8\u5ea6\u306b\u6a19\u7684\u5316\u3055\u308c\u305f\u60aa\u610f\u306e\u3042\u308b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u309218,000\u3092\u8d85\u3048\u308b\u7d44\u7e54\u306b\u914d\u4fe1\u3057\u3001\u305d\u306e\u3046\u3061100\u307b\u3069\u306e\u7d44\u7e54\u304c\u5f71\u97ff\u3092\u53d7\u3051\u307e\u3057\u305f\u3002 \u3053\u306e\u4e00\u4ef6\u306f\u3001\u3053\u306e\u985e\u306e\u4fb5\u5bb3\u3068\u3057\u3066\u306f\u3001\u6b74\u53f2\u4e0a\u6700\u3082\u5e83\u7bc4\u56f2\u306b\u5f71\u97ff\u304c\u5e83\u304c\u308a\u3001\u307e\u305f\u6700\u3082\u91cd\u5927\u3067\u3042\u3063\u305f\u3082\u306e\u306e\u4e00\u3064\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3 \u5b89\u5168\u3067\u306a\u3044\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3: React\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3001\u4e00\u9023\u306eSpring Boot\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 \u95a2\u6570\u578b\u8a00\u8a9e\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306f\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3053\u3046\u3068\u3057\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306f\u3001\u547c\u3073\u51fa\u3057\u306e\u524d\u5f8c\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u72b6\u614b\u3092\u6e21\u3059\u3001\u3068\u8a00\u3046\u89e3\u6c7a\u7b56\u3092\u601d\u3044\u3064\u304d\u307e\u3059\u3002 \u653b\u6483\u8005\u306f (base64\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059) \"rO0\" \u3068\u3044\u3046Java\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306b\u6c17\u3065\u304d\u3001Java Serial Killer\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u4e0a\u3067\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e [OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes A08:2021 \u2013 Software and Data Integrity Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152 Overview \u2693\ufe0e A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data . Description \u2693\ufe0e Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization. How to Prevent \u2693\ufe0e Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data Example Attack Scenarios \u2693\ufe0e Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server. References \u2693\ufe0e [OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent List of Mapped CWEs \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"A08 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#a082021","text":"","title":"A08:2021 \u2013 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152","title":"\u56e0\u5b50"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#_2","text":"\u3053\u308c\u306f2021\u5e74\u306b\u65b0\u8a2d\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u66f4\u65b0\u3001\u91cd\u8981\u306a\u30c7\u30fc\u30bf\u3092\u3001CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u304a\u3044\u3066\u6574\u5408\u6027\u3092\u691c\u8a3c\u305b\u305a\u306b\u898b\u8fbc\u307f\u3067\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u308b\u554f\u984c\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u3044\u307e\u3059\u3002 \u5171\u901a\u8106\u5f31\u6027\u8b58\u5225\u5b50/\u5171\u901a\u8106\u5f31\u6027\u8a55\u4fa1\u30b7\u30b9\u30c6\u30e0 (CVE/CVSS) \u306e\u30c7\u30fc\u30bf\u304b\u3089\u6700\u3082\u91cd\u5927\u306a\u5f71\u97ff\u3092\u53d7\u3051\u305f\u3082\u306e\u306e1\u3064\u3067\u3059\u3002 \u6ce8\u76ee\u3059\u3079\u304d\u5171\u901a\u8106\u5f31\u6027\u8b58\u5225\u5b50 (CWEs) \u306f\u3001 CWE-829: \u4fe1\u983c\u3067\u304d\u306a\u3044\u5236\u5fa1\u9818\u57df\u304b\u3089\u306e\u6a5f\u80fd\u306e\u7d44\u307f\u8fbc\u307f \u3001 CWE-494: \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b8c\u5168\u6027\u691c\u8a3c\u4e0d\u5099 \u3001\u305d\u3057\u3066 CWE-502: \u4fe1\u983c\u3067\u304d\u306a\u3044\u30c7\u30fc\u30bf\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3 \u3067\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#_3","text":"\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u306e\u4e0d\u5177\u5408\u306f\u3001\u30b3\u30fc\u30c9\u3084\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u304c\u6574\u5408\u6027\u9055\u53cd\u304b\u3089\u4fdd\u8b77\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u95a2\u9023\u3057\u3066\u3044\u307e\u3059\u3002 \u4f8b\u3068\u3057\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4fe1\u983c\u3055\u308c\u3066\u3044\u306a\u3044\u30bd\u30fc\u30b9\u306b\u7531\u6765\u3059\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u30c7\u30ea\u30d0\u30ea\u30fc\u30cd\u30c3\u30c8\u30ef\u30fc\u30af (CDNs) \u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u5834\u5408\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002 \u5b89\u5168\u3067\u306a\u3044CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3082\u3001\u6a29\u9650\u306e\u306a\u3044\u30a2\u30af\u30bb\u30b9\u3084\u60aa\u610f\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u306e\u3063\u3068\u308a\u306e\u53ef\u80fd\u6027\u3092\u9ad8\u3081\u307e\u3059\u3002 \u4eca\u3067\u306f\u591a\u304f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u81ea\u52d5\u66f4\u65b0\u306e\u6a5f\u80fd\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u3053\u3067\u3001\u5341\u5206\u306a\u6574\u5408\u6027\u306e\u691c\u8a3c\u3092\u884c\u3046\u3053\u3068\u306a\u304f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u3001\u4fe1\u983c\u6e08\u307f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u9069\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u653b\u6483\u8005\u306f\u81ea\u524d\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3001\u5168\u3066\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5bfe\u8c61\u306b\u5bfe\u3057\u3066\u914d\u4fe1\u3092\u884c\u3046\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u4ed6\u306e\u4f8b\u3068\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30c7\u30fc\u30bf\u304c\u653b\u6483\u8005\u304c\u76ee\u3067\u898b\u3066\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u69cb\u9020\u3068\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u307e\u305f\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u3088\u3046\u306a\u5834\u5408\u306f\u3001\u5b89\u5168\u3067\u306a\u3044\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u8106\u5f31\u3067\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002","title":"\u8aac\u660e"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#_4","text":"\u7f72\u540d\u3042\u308b\u3044\u306f\u985e\u4f3c\u306e\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u7528\u3044\u3066\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3084\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3055\u308c\u305f\u30bd\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002 npm\u3084Maven\u306a\u3069\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u4f9d\u5b58\u95a2\u4fc2\u304c\u4fe1\u983c\u3055\u308c\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u65e2\u77e5\u306e\u8106\u5f31\u6027\u3092\u542b\u307e\u306a\u3044\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306b\u3001OWASP Dependency Check\u3084OWASP CycloneDX\u3068\u3044\u3063\u305f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b5\u30d7\u30e9\u30a4\u30c1\u30a7\u30fc\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c4\u30fc\u30eb\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u60aa\u610f\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3084\u8a2d\u5b9a\u304c\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u7d44\u307f\u8fbc\u307e\u308c\u308b\u6a5f\u4f1a\u3092\u6700\u5c0f\u5316\u3059\u308b\u305f\u3081\u306b\u3001\u30b3\u30fc\u30c9\u3084\u8a2d\u5b9a\u306e\u5909\u66f4\u306b\u5bfe\u3059\u308b\u30ec\u30d3\u30e5\u30fc\u30d7\u30ed\u30bb\u30b9\u304c\u78ba\u7acb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u304c\u9069\u5207\u306b\u5206\u96e2\u3055\u308c\u3001\u8a2d\u5b9a\u3055\u308c\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3001\u307e\u305f\u3001\u30d3\u30eb\u30c9\u3084\u30c7\u30d7\u30ed\u30a4\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u81f3\u308b\u30b3\u30fc\u30c9\u30d5\u30ed\u30fc\u306e\u6574\u5408\u6027\u304c\u78ba\u4fdd\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u6539\u3056\u3093\u3084\u518d\u751f\u6210\u3092\u691c\u51fa\u3059\u308b\u4f55\u3089\u304b\u306e\u6574\u5408\u6027\u78ba\u8a8d\u3084\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u3092\u884c\u3046\u3053\u3068\u306a\u3057\u306b\u3001\u4fe1\u983c\u3055\u308c\u3066\u3044\u306a\u3044\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u672a\u7f72\u540d\u3082\u3057\u304f\u306f\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u305b\u3093\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1 \u7f72\u540d\u306e\u306a\u3044\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8: \u591a\u304f\u306e\u30db\u30fc\u30e0\u30eb\u30fc\u30bf\u30fc\u3001\u30bb\u30c3\u30c8\u30c8\u30c3\u30d7\u30dc\u30c3\u30af\u30b9\u3001\u30c7\u30d0\u30a4\u30b9\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u7b49\u306f\u3001\u7f72\u540d\u6e08\u307f\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306b\u3088\u308b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u691c\u8a3c\u3092\u884c\u3044\u307e\u305b\u3093\u3002 \u672a\u7f72\u540d\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306f\u3001\u653b\u6483\u8005\u306b\u3068\u3063\u3066\u62e1\u5927\u3057\u3064\u3064\u3042\u308b\u6a19\u7684\u3067\u3042\u308a\u3001\u60aa\u5316\u306e\u4e00\u9014\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002 \u591a\u304f\u306e\u5834\u5408\u306b\u304a\u3044\u3066\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3066\u4fee\u6b63\u3092\u884c\u3063\u305f\u4e0a\u3067\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u4f7f\u7528\u3055\u308c\u306a\u304f\u306a\u308b\u306e\u3092\u5f85\u3064\u307b\u304b\u306a\u3044\u3053\u3068\u304b\u3089\u3001\u3053\u308c\u306f\u975e\u5e38\u306b\u5927\u304d\u306a\u61f8\u5ff5\u4e8b\u9805\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2 SolarWinds\u3067\u306e\u60aa\u610f\u306e\u3042\u308b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 : \u6700\u8fd1\u306e\u6ce8\u76ee\u3059\u3079\u304d\u653b\u6483\u304cSolarWinds Orion\u3067\u306e\u653b\u6483\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3068\u4f75\u305b\u3066\u3001\u56fd\u5bb6\u306f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u6a5f\u69cb\u3092\u653b\u6483\u3059\u308b\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u958b\u767a\u3057\u305f\u4f01\u696d\u306f\u3001\u5b89\u5168\u306a\u30d3\u30eb\u30c9\u3068\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u6574\u5408\u30d7\u30ed\u30bb\u30b9\u3092\u5099\u3048\u3066\u3044\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u305d\u308c\u3089\u306f\u7834\u58ca\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u3063\u305f\u305f\u3081\u306b\u3001\u305d\u306e\u4f01\u696d\u306f\u3001\u6570\u30f6\u6708\u306b\u308f\u305f\u3063\u3066\u3001\u9ad8\u5ea6\u306b\u6a19\u7684\u5316\u3055\u308c\u305f\u60aa\u610f\u306e\u3042\u308b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u309218,000\u3092\u8d85\u3048\u308b\u7d44\u7e54\u306b\u914d\u4fe1\u3057\u3001\u305d\u306e\u3046\u3061100\u307b\u3069\u306e\u7d44\u7e54\u304c\u5f71\u97ff\u3092\u53d7\u3051\u307e\u3057\u305f\u3002 \u3053\u306e\u4e00\u4ef6\u306f\u3001\u3053\u306e\u985e\u306e\u4fb5\u5bb3\u3068\u3057\u3066\u306f\u3001\u6b74\u53f2\u4e0a\u6700\u3082\u5e83\u7bc4\u56f2\u306b\u5f71\u97ff\u304c\u5e83\u304c\u308a\u3001\u307e\u305f\u6700\u3082\u91cd\u5927\u3067\u3042\u3063\u305f\u3082\u306e\u306e\u4e00\u3064\u3067\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3 \u5b89\u5168\u3067\u306a\u3044\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3: React\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3001\u4e00\u9023\u306eSpring Boot\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 \u95a2\u6570\u578b\u8a00\u8a9e\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306f\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3053\u3046\u3068\u3057\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306f\u3001\u547c\u3073\u51fa\u3057\u306e\u524d\u5f8c\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u72b6\u614b\u3092\u6e21\u3059\u3001\u3068\u8a00\u3046\u89e3\u6c7a\u7b56\u3092\u601d\u3044\u3064\u304d\u307e\u3059\u3002 \u653b\u6483\u8005\u306f (base64\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059) \"rO0\" \u3068\u3044\u3046Java\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306b\u6c17\u3065\u304d\u3001Java Serial Killer\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u4e0a\u3067\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#_6","text":"[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#cwe","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#a082021-software-and-data-integrity-failures","text":"","title":"A08:2021 \u2013 Software and Data Integrity Failures"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152","title":"Factors"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#overview","text":"A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data .","title":"Overview"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#description","text":"Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization.","title":"Description"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#how-to-prevent","text":"Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data","title":"How to Prevent"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#example-attack-scenarios","text":"Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server.","title":"Example Attack Scenarios"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#references","text":"[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent","title":"References"},{"location":"ja/A08_2021-Software_and_Data_Integrity_Failures/#list-of-mapped-cwes","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"List of Mapped CWEs"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/","text":"A09:2021 \u2013 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ed\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u5931\u6557 \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242 \u6982\u8981 \u2693\ufe0e \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306f\u3001OWASP Top10 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306b\u3088\u308b\u8abf\u67fb\u306b\u3066\u7b2c3\u4f4d\u3067\u3001OWASP \u30c8\u30c3\u30d7 10 2017 \u306e\u7b2c 10 \u4f4d\u304b\u3089\u308f\u305a\u304b\u306b\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002 \u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306f\u30c6\u30b9\u30c8\u304c\u96e3\u3057\u304f\u3001\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc\u3084\u30da\u30cd\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3067\u653b\u6483\u304c\u691c\u51fa\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306e CVE/CVSS \u30c7\u30fc\u30bf\u306f\u3042\u307e\u308a\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4fb5\u5bb3\u3092\u691c\u77e5\u3057\u3066\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u306f\u91cd\u8981\u3067\u3059\u3002 \u3068\u306f\u3044\u3048\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u5931\u6557\u304c\u8d77\u304d\u308b\u3068\u3001\u8aac\u660e\u8cac\u4efb\u3001\u53ef\u8996\u5316\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30a2\u30e9\u30fc\u30c8\u3001\u30d5\u30a9\u30ec\u30f3\u30b8\u30c3\u30af\u306a\u3069\u306b\u5f71\u97ff\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001 CWE-778 \u30ed\u30ae\u30f3\u30b0\u306e\u4e0d\u8db3 \u3060\u3051\u3067\u306a\u304f\u3001 CWE-117 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u4e0d\u9069\u5207\u306a\u51fa\u529b \u3001 CWE-223 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u9023\u3059\u308b\u60c5\u5831\u306e\u7701\u7565 \u3001 CWE-532 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 \u306a\u3069\u3082\u542b\u307e\u308c\u307e\u3059\u3002 \u8aac\u660e \u2693\ufe0e OWASP Top 10 2021 \u306b\u8a71\u3092\u623b\u3059\u3068\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u9055\u53cd\u306e\u691c\u51fa\u3001\u30a8\u30b9\u30ab\u30ec\u30fc\u30b7\u30e7\u30f3\u3001\u304a\u3088\u3073\u5bfe\u5fdc\u3092\u652f\u63f4\u3059\u308b\u3082\u306e\u3067\u3059\u3002 \u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u304c\u306a\u3051\u308c\u3070\u3001\u4fb5\u5bb3\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30ed\u30ae\u30f3\u30b0\u3084\u691c\u77e5\u3001\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3001\u9069\u6642\u306e\u5bfe\u5fdc\u304c\u5341\u5206\u306b\u884c\u308f\u308c\u306a\u3044\u3068\u3044\u3046\u72b6\u6cc1\u306f\u3001\u3044\u3064\u3067\u3082\u767a\u751f\u3057\u307e\u3059: \u30ed\u30b0\u30a4\u30f3\u3001\u5931\u6557\u3057\u305f\u30ed\u30b0\u30a4\u30f3\u3001\u91cd\u8981\u306a\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306a\u3069\u306e\u76e3\u67fb\u53ef\u80fd\u306a\u30a4\u30d9\u30f3\u30c8\u304c\u30ed\u30b0\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u3002 \u8b66\u544a\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3082\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u751f\u6210\u3055\u308c\u306a\u3044\u3001\u307e\u305f\u306f\u4e0d\u5341\u5206\u3001\u4e0d\u660e\u78ba\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068API\u306e\u30ed\u30b0\u304c\u3001\u7591\u308f\u3057\u3044\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u3092\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3044\u306a\u3044\u3002 \u30ed\u30b0\u304c\u30ed\u30fc\u30ab\u30eb\u306b\u306e\u307f\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002 \u30a2\u30e9\u30fc\u30c8\u306e\u9069\u5207\u306a\u3057\u304d\u3044\u5024\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30a8\u30b9\u30ab\u30ec\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30bb\u30b9\u304c\u6574\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u3001\u307e\u305f\u306f\u6709\u52b9\u3067\u306f\u306a\u3044\u3002 \u30da\u30cd\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3084DAST(dynamic application security testing)\u30c4\u30fc\u30eb\uff08OWASP ZAP\u306a\u3069\uff09\u306b\u3088\u308b\u30b9\u30ad\u30e3\u30f3\u304c\u30a2\u30e9\u30fc\u30c8\u3092\u3042\u3052\u306a\u3044\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3001\u6e96\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u653b\u6483\u3092\u691c\u77e5\u3001\u30a8\u30b9\u30ab\u30ec\u30fc\u30c8\u3001\u307e\u305f\u306f\u30a2\u30e9\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002 \u30e6\u30fc\u30b6\u307e\u305f\u306f\u653b\u6483\u8005\u304c\u30ed\u30b0\u3084\u30a2\u30e9\u30fc\u30c8\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u95b2\u89a7\u3067\u304d\u308b\u3068\u3001\u60c5\u5831\u306e\u6f0f\u3048\u3044\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059 ( A01:2021-\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099 \u3092\u53c2\u7167). \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u4fdd\u5b58\u307e\u305f\u306f\u51e6\u7406\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306e\u30ea\u30b9\u30af\u306b\u5fdc\u3058\u3066\u5bfe\u5fdc\u3059\u308b\uff1a \u30ed\u30b0\u30a4\u30f3\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u5931\u6557\u3001\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306e\u5165\u529b\u691c\u8a3c\u306e\u5931\u6557\u3092\u5168\u3066\u30ed\u30b0\u3068\u3057\u3066\u8a18\u9332\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002 \u30ed\u30b0\u306f\u3001\u4e0d\u5be9\u306a\u30a2\u30ab\u30a6\u30f3\u30c8\u3084\u60aa\u610f\u306e\u3042\u308b\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306b\u5341\u5206\u306a\u30e6\u30fc\u30b6\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6301\u3061\u3001 \u5f8c\u65e5\u3001\u30d5\u30a9\u30ec\u30f3\u30b8\u30c3\u30af\u5206\u6790\u3092\u884c\u3046\u306e\u306b\u5341\u5206\u306a\u671f\u9593\u5206\u4fdd\u6301\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002 \u7d71\u5408\u30ed\u30b0\u7ba1\u7406\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u7c21\u5358\u306b\u4f7f\u7528\u3067\u304d\u308b\u5f62\u5f0f\u3067\u30ed\u30b0\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002 \u4fa1\u5024\u306e\u9ad8\u3044\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306b\u304a\u3044\u3066\u3001\u76e3\u67fb\u8a3c\u8de1\u304c\u53d6\u5f97\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002 \u305d\u306e\u969b\u3001\u8ffd\u8a18\u578b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u306e\u3088\u3046\u306a\u3001\u5b8c\u5168\u6027\u3092\u4fdd\u3064\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u7528\u3044\u3066\u3001\u6539\u3056\u3093\u3084\u524a\u9664\u3092\u9632\u6b62\u3059\u308b\u3002 DevSecOps \u30c1\u30fc\u30e0\u304c\u7591\u308f\u3057\u3044\u6d3b\u52d5\u3092\u30bf\u30a4\u30e0\u30ea\u30fc\u306b\u691c\u77e5\u3057\u3066\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u52b9\u679c\u7684\u306a\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3068\u30a2\u30e9\u30fc\u30c8\u3092\u78ba\u7acb\u3059\u308b\u3002 NIST(National Institute of Standards and Technology) 800-61 rev 2\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u964d\uff09\u306e\u3088\u3046\u306a\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u5bfe\u5fdc\u304a\u3088\u3073\u5fa9\u65e7\u8a08\u753b\u3092\u7b56\u5b9a\u307e\u305f\u306f\u63a1\u7528\u3059\u308b\u3002 OWASP AppSensor\u3001OWASP ModSecurity Core Rule Set\u3092\u4f7f\u7528\u3057\u305fModSecurity\u306a\u3069\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3001 \u30ab\u30b9\u30bf\u30e0\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3068\u30a2\u30e9\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u305f\u30ed\u30b0\u76f8\u95a2\u5206\u6790\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\uff08Elasticsearch, Logstash, Kibana (ELK) \uff09\u306a\u3069\u3001\u5546\u7528\u304a\u3088\u3073\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4fdd\u8b77\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u3042\u308a\u307e\u3059\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u30b7\u30ca\u30ea\u30aa #1: \u3042\u308b\u5150\u7ae5\u533b\u7642\u30d7\u30e9\u30f3\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u904b\u55b6\u8005\u306f\u3001\u76e3\u8996\u3068\u30ed\u30b0\u306e\u4e0d\u8db3\u306e\u305f\u3081\u306b\u4fb5\u5bb3\u3092\u691c\u77e5\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u653b\u6483\u8005\u304c 350 \u4e07\u4eba\u4ee5\u4e0a\u306e\u5b50\u3069\u3082\u305f\u3061\u306e\u6570\u5343\u3082\u306e\u6a5f\u5bc6\u6027\u306e\u9ad8\u3044\u5065\u5eb7\u8a18\u9332\u306b\u30a2\u30af\u30bb\u30b9\u3057\u5909\u66f4\u3057\u305f\u3068\u3044\u3046\u9023\u7d61\u304c\u3001\u5916\u90e8\u306e\u95a2\u4fc2\u8005\u304b\u3089\u533b\u7642\u6a5f\u95a2\u306b\u3042\u308a\u307e\u3057\u305f\u3002 \u4e8b\u6545\u5f8c\u306e\u30ec\u30d3\u30e5\u30fc\u3067\u306f\u3001\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u958b\u767a\u8005\u304c\u91cd\u8981\u306a\u8106\u5f31\u6027\u306b\u5bfe\u51e6\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u5224\u660e\u3057\u307e\u3057\u305f\u3002 \u30b7\u30b9\u30c6\u30e0\u306e\u30ed\u30ae\u30f3\u30b0\u3084\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u30c7\u30fc\u30bf\u4fb5\u5bb3\u306f 2013 \u5e74\u304b\u3089 7 \u5e74\u4ee5\u4e0a\u306b\u308f\u305f\u3063\u3066\u9032\u884c\u3057\u3066\u3044\u305f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u3042\u308b\u30a4\u30f3\u30c9\u306e\u5927\u624b\u822a\u7a7a\u4f1a\u793e\u3067\u3001\u30d1\u30b9\u30dd\u30fc\u30c8\u3084\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306a\u3069\u6570\u767e\u4e07\u4eba\u306e\u4e57\u5ba2\u306e 10 \u5e74\u5206\u4ee5\u4e0a\u306e\u500b\u4eba\u60c5\u5831\u3092\u542b\u3080\u30c7\u30fc\u30bf\u304c\u6d41\u51fa\u3057\u307e\u3057\u305f\u3002 \u3053\u306e\u30c7\u30fc\u30bf\u6d41\u51fa\u306f\u3001\u7b2c\u4e09\u8005\u306e\u30af\u30e9\u30a6\u30c9\u30db\u30b9\u30c6\u30a3\u30f3\u30b0\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3067\u767a\u751f\u3057\u3001\u3057\u3070\u3089\u304f\u3057\u3066\u304b\u3089\u822a\u7a7a\u4f1a\u793e\u306b\u901a\u77e5\u3055\u308c\u307e\u3057\u305f\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u3042\u308b\u6b27\u5dde\u306e\u5927\u624b\u822a\u7a7a\u4f1a\u793e\u304c\u3001GDPR\u306e\u5831\u544a\u5bfe\u8c61\u3068\u306a\u308b\u4fb5\u5bb3\u3092\u53d7\u3051\u307e\u3057\u305f\u3002 \u3053\u306e\u9055\u53cd\u306f\u3001\u6c7a\u6e08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u304c\u653b\u6483\u8005\u306b\u60aa\u7528\u3055\u308c\u300140\u4e07\u4ef6\u4ee5\u4e0a\u306e\u9867\u5ba2\u306e\u6c7a\u6e08\u8a18\u9332\u304c\u53ce\u96c6\u3055\u308c\u305f\u3053\u3068\u304c\u539f\u56e0\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u822a\u7a7a\u4f1a\u793e\u306f\u3001\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u898f\u5236\u6a5f\u95a2\u304b\u30892,000\u4e07\u30dd\u30f3\u30c9\u306e\u7f70\u91d1\u3092\u79d1\u305b\u3089\u308c\u307e\u3057\u305f\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-117 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u4e0d\u9069\u5207\u306a\u51fa\u529b CWE-223 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u9023\u3059\u308b\u60c5\u5831\u306e\u7701\u7565 CWE-532 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 CWE-778 \u30ed\u30ae\u30f3\u30b0\u306e\u4e0d\u8db3 A09:2021 \u2013 Security Logging and Monitoring Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242 Overview \u2693\ufe0e Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File . Description \u2693\ufe0e Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ). How to Prevent \u2693\ufe0e Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting. Example Attack Scenarios \u2693\ufe0e Scenario #1: A childrens' health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator. References \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events List of Mapped CWEs \u2693\ufe0e CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"A09 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ed\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u5931\u6557"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#a092021","text":"","title":"A09:2021 \u2013 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ed\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u5931\u6557"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242","title":"\u56e0\u5b50"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#_2","text":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306f\u3001OWASP Top10 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306b\u3088\u308b\u8abf\u67fb\u306b\u3066\u7b2c3\u4f4d\u3067\u3001OWASP \u30c8\u30c3\u30d7 10 2017 \u306e\u7b2c 10 \u4f4d\u304b\u3089\u308f\u305a\u304b\u306b\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002 \u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306f\u30c6\u30b9\u30c8\u304c\u96e3\u3057\u304f\u3001\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc\u3084\u30da\u30cd\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3067\u653b\u6483\u304c\u691c\u51fa\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306e CVE/CVSS \u30c7\u30fc\u30bf\u306f\u3042\u307e\u308a\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4fb5\u5bb3\u3092\u691c\u77e5\u3057\u3066\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u306f\u91cd\u8981\u3067\u3059\u3002 \u3068\u306f\u3044\u3048\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3067\u5931\u6557\u304c\u8d77\u304d\u308b\u3068\u3001\u8aac\u660e\u8cac\u4efb\u3001\u53ef\u8996\u5316\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u30a2\u30e9\u30fc\u30c8\u3001\u30d5\u30a9\u30ec\u30f3\u30b8\u30c3\u30af\u306a\u3069\u306b\u5f71\u97ff\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001 CWE-778 \u30ed\u30ae\u30f3\u30b0\u306e\u4e0d\u8db3 \u3060\u3051\u3067\u306a\u304f\u3001 CWE-117 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u4e0d\u9069\u5207\u306a\u51fa\u529b \u3001 CWE-223 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u9023\u3059\u308b\u60c5\u5831\u306e\u7701\u7565 \u3001 CWE-532 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 \u306a\u3069\u3082\u542b\u307e\u308c\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#_3","text":"OWASP Top 10 2021 \u306b\u8a71\u3092\u623b\u3059\u3068\u3001\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u9055\u53cd\u306e\u691c\u51fa\u3001\u30a8\u30b9\u30ab\u30ec\u30fc\u30b7\u30e7\u30f3\u3001\u304a\u3088\u3073\u5bfe\u5fdc\u3092\u652f\u63f4\u3059\u308b\u3082\u306e\u3067\u3059\u3002 \u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u304c\u306a\u3051\u308c\u3070\u3001\u4fb5\u5bb3\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30ed\u30ae\u30f3\u30b0\u3084\u691c\u77e5\u3001\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3001\u9069\u6642\u306e\u5bfe\u5fdc\u304c\u5341\u5206\u306b\u884c\u308f\u308c\u306a\u3044\u3068\u3044\u3046\u72b6\u6cc1\u306f\u3001\u3044\u3064\u3067\u3082\u767a\u751f\u3057\u307e\u3059: \u30ed\u30b0\u30a4\u30f3\u3001\u5931\u6557\u3057\u305f\u30ed\u30b0\u30a4\u30f3\u3001\u91cd\u8981\u306a\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306a\u3069\u306e\u76e3\u67fb\u53ef\u80fd\u306a\u30a4\u30d9\u30f3\u30c8\u304c\u30ed\u30b0\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u3002 \u8b66\u544a\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3082\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u751f\u6210\u3055\u308c\u306a\u3044\u3001\u307e\u305f\u306f\u4e0d\u5341\u5206\u3001\u4e0d\u660e\u78ba\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068API\u306e\u30ed\u30b0\u304c\u3001\u7591\u308f\u3057\u3044\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u3092\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3044\u306a\u3044\u3002 \u30ed\u30b0\u304c\u30ed\u30fc\u30ab\u30eb\u306b\u306e\u307f\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002 \u30a2\u30e9\u30fc\u30c8\u306e\u9069\u5207\u306a\u3057\u304d\u3044\u5024\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30a8\u30b9\u30ab\u30ec\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30bb\u30b9\u304c\u6574\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u3001\u307e\u305f\u306f\u6709\u52b9\u3067\u306f\u306a\u3044\u3002 \u30da\u30cd\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3084DAST(dynamic application security testing)\u30c4\u30fc\u30eb\uff08OWASP ZAP\u306a\u3069\uff09\u306b\u3088\u308b\u30b9\u30ad\u30e3\u30f3\u304c\u30a2\u30e9\u30fc\u30c8\u3092\u3042\u3052\u306a\u3044\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3001\u6e96\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u653b\u6483\u3092\u691c\u77e5\u3001\u30a8\u30b9\u30ab\u30ec\u30fc\u30c8\u3001\u307e\u305f\u306f\u30a2\u30e9\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002 \u30e6\u30fc\u30b6\u307e\u305f\u306f\u653b\u6483\u8005\u304c\u30ed\u30b0\u3084\u30a2\u30e9\u30fc\u30c8\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u95b2\u89a7\u3067\u304d\u308b\u3068\u3001\u60c5\u5831\u306e\u6f0f\u3048\u3044\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059 ( A01:2021-\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u4e0d\u5099 \u3092\u53c2\u7167).","title":"\u8aac\u660e"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#_4","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u4fdd\u5b58\u307e\u305f\u306f\u51e6\u7406\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306e\u30ea\u30b9\u30af\u306b\u5fdc\u3058\u3066\u5bfe\u5fdc\u3059\u308b\uff1a \u30ed\u30b0\u30a4\u30f3\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u306e\u5931\u6557\u3001\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306e\u5165\u529b\u691c\u8a3c\u306e\u5931\u6557\u3092\u5168\u3066\u30ed\u30b0\u3068\u3057\u3066\u8a18\u9332\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002 \u30ed\u30b0\u306f\u3001\u4e0d\u5be9\u306a\u30a2\u30ab\u30a6\u30f3\u30c8\u3084\u60aa\u610f\u306e\u3042\u308b\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306b\u5341\u5206\u306a\u30e6\u30fc\u30b6\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6301\u3061\u3001 \u5f8c\u65e5\u3001\u30d5\u30a9\u30ec\u30f3\u30b8\u30c3\u30af\u5206\u6790\u3092\u884c\u3046\u306e\u306b\u5341\u5206\u306a\u671f\u9593\u5206\u4fdd\u6301\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002 \u7d71\u5408\u30ed\u30b0\u7ba1\u7406\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u7c21\u5358\u306b\u4f7f\u7528\u3067\u304d\u308b\u5f62\u5f0f\u3067\u30ed\u30b0\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002 \u4fa1\u5024\u306e\u9ad8\u3044\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306b\u304a\u3044\u3066\u3001\u76e3\u67fb\u8a3c\u8de1\u304c\u53d6\u5f97\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002 \u305d\u306e\u969b\u3001\u8ffd\u8a18\u578b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u306e\u3088\u3046\u306a\u3001\u5b8c\u5168\u6027\u3092\u4fdd\u3064\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u7528\u3044\u3066\u3001\u6539\u3056\u3093\u3084\u524a\u9664\u3092\u9632\u6b62\u3059\u308b\u3002 DevSecOps \u30c1\u30fc\u30e0\u304c\u7591\u308f\u3057\u3044\u6d3b\u52d5\u3092\u30bf\u30a4\u30e0\u30ea\u30fc\u306b\u691c\u77e5\u3057\u3066\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u52b9\u679c\u7684\u306a\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3068\u30a2\u30e9\u30fc\u30c8\u3092\u78ba\u7acb\u3059\u308b\u3002 NIST(National Institute of Standards and Technology) 800-61 rev 2\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u964d\uff09\u306e\u3088\u3046\u306a\u3001\u30a4\u30f3\u30b7\u30c7\u30f3\u30c8\u5bfe\u5fdc\u304a\u3088\u3073\u5fa9\u65e7\u8a08\u753b\u3092\u7b56\u5b9a\u307e\u305f\u306f\u63a1\u7528\u3059\u308b\u3002 OWASP AppSensor\u3001OWASP ModSecurity Core Rule Set\u3092\u4f7f\u7528\u3057\u305fModSecurity\u306a\u3069\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3001 \u30ab\u30b9\u30bf\u30e0\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3068\u30a2\u30e9\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u305f\u30ed\u30b0\u76f8\u95a2\u5206\u6790\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\uff08Elasticsearch, Logstash, Kibana (ELK) \uff09\u306a\u3069\u3001\u5546\u7528\u304a\u3088\u3073\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4fdd\u8b77\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#_5","text":"\u30b7\u30ca\u30ea\u30aa #1: \u3042\u308b\u5150\u7ae5\u533b\u7642\u30d7\u30e9\u30f3\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u904b\u55b6\u8005\u306f\u3001\u76e3\u8996\u3068\u30ed\u30b0\u306e\u4e0d\u8db3\u306e\u305f\u3081\u306b\u4fb5\u5bb3\u3092\u691c\u77e5\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u653b\u6483\u8005\u304c 350 \u4e07\u4eba\u4ee5\u4e0a\u306e\u5b50\u3069\u3082\u305f\u3061\u306e\u6570\u5343\u3082\u306e\u6a5f\u5bc6\u6027\u306e\u9ad8\u3044\u5065\u5eb7\u8a18\u9332\u306b\u30a2\u30af\u30bb\u30b9\u3057\u5909\u66f4\u3057\u305f\u3068\u3044\u3046\u9023\u7d61\u304c\u3001\u5916\u90e8\u306e\u95a2\u4fc2\u8005\u304b\u3089\u533b\u7642\u6a5f\u95a2\u306b\u3042\u308a\u307e\u3057\u305f\u3002 \u4e8b\u6545\u5f8c\u306e\u30ec\u30d3\u30e5\u30fc\u3067\u306f\u3001\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u958b\u767a\u8005\u304c\u91cd\u8981\u306a\u8106\u5f31\u6027\u306b\u5bfe\u51e6\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u5224\u660e\u3057\u307e\u3057\u305f\u3002 \u30b7\u30b9\u30c6\u30e0\u306e\u30ed\u30ae\u30f3\u30b0\u3084\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u30c7\u30fc\u30bf\u4fb5\u5bb3\u306f 2013 \u5e74\u304b\u3089 7 \u5e74\u4ee5\u4e0a\u306b\u308f\u305f\u3063\u3066\u9032\u884c\u3057\u3066\u3044\u305f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u3042\u308b\u30a4\u30f3\u30c9\u306e\u5927\u624b\u822a\u7a7a\u4f1a\u793e\u3067\u3001\u30d1\u30b9\u30dd\u30fc\u30c8\u3084\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306a\u3069\u6570\u767e\u4e07\u4eba\u306e\u4e57\u5ba2\u306e 10 \u5e74\u5206\u4ee5\u4e0a\u306e\u500b\u4eba\u60c5\u5831\u3092\u542b\u3080\u30c7\u30fc\u30bf\u304c\u6d41\u51fa\u3057\u307e\u3057\u305f\u3002 \u3053\u306e\u30c7\u30fc\u30bf\u6d41\u51fa\u306f\u3001\u7b2c\u4e09\u8005\u306e\u30af\u30e9\u30a6\u30c9\u30db\u30b9\u30c6\u30a3\u30f3\u30b0\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3067\u767a\u751f\u3057\u3001\u3057\u3070\u3089\u304f\u3057\u3066\u304b\u3089\u822a\u7a7a\u4f1a\u793e\u306b\u901a\u77e5\u3055\u308c\u307e\u3057\u305f\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u3042\u308b\u6b27\u5dde\u306e\u5927\u624b\u822a\u7a7a\u4f1a\u793e\u304c\u3001GDPR\u306e\u5831\u544a\u5bfe\u8c61\u3068\u306a\u308b\u4fb5\u5bb3\u3092\u53d7\u3051\u307e\u3057\u305f\u3002 \u3053\u306e\u9055\u53cd\u306f\u3001\u6c7a\u6e08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u304c\u653b\u6483\u8005\u306b\u60aa\u7528\u3055\u308c\u300140\u4e07\u4ef6\u4ee5\u4e0a\u306e\u9867\u5ba2\u306e\u6c7a\u6e08\u8a18\u9332\u304c\u53ce\u96c6\u3055\u308c\u305f\u3053\u3068\u304c\u539f\u56e0\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u822a\u7a7a\u4f1a\u793e\u306f\u3001\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u898f\u5236\u6a5f\u95a2\u304b\u30892,000\u4e07\u30dd\u30f3\u30c9\u306e\u7f70\u91d1\u3092\u79d1\u305b\u3089\u308c\u307e\u3057\u305f\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#_6","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#cwe","text":"CWE-117 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u4e0d\u9069\u5207\u306a\u51fa\u529b CWE-223 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u95a2\u9023\u3059\u308b\u60c5\u5831\u306e\u7701\u7565 CWE-532 \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u60c5\u5831\u6f0f\u6d29 CWE-778 \u30ed\u30ae\u30f3\u30b0\u306e\u4e0d\u8db3","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#a092021-security-logging-and-monitoring-failures","text":"","title":"A09:2021 \u2013 Security Logging and Monitoring Failures"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242","title":"Factors"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#overview","text":"Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File .","title":"Overview"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#description","text":"Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ).","title":"Description"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#how-to-prevent","text":"Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting.","title":"How to Prevent"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#example-attack-scenarios","text":"Scenario #1: A childrens' health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator.","title":"Example Attack Scenarios"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#references","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging ) Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"References"},{"location":"ja/A09_2021-Security_Logging_and_Monitoring_Failures/#list-of-mapped-cwes","text":"CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"List of Mapped CWEs"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/","text":"A10:2021 - \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30ea\u30af\u30a8\u30b9\u30c8\u30d5\u30a9\u30fc\u30b8\u30a7\u30ea (SSRF) \u2693\ufe0e \u56e0\u5b50 \u2693\ufe0e \u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385 \u6982\u8981 \u2693\ufe0e \u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u696d\u754c\u306e\u8abf\u67fb\uff08\u7b2c1\u4f4d\uff09\u304b\u3089\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8abf\u67fb\u30c7\u30fc\u30bf\u304b\u3089\u308f\u304b\u308b\u3053\u3068\u306f\u3001\u3088\u304f\u3042\u308b\u30c6\u30b9\u30c8\u3088\u308a\u5e83\u7bc4\u306a\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u554f\u984c\u306e\u767a\u751f\u7387\u306f\u6bd4\u8f03\u7684\u4f4e\u3044\u3082\u306e\u306e\u3001\u554f\u984c\u304c\u8d77\u304d\u305f\u5834\u5408\u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30a4\u30c8\u3068\u30a4\u30f3\u30d1\u30af\u30c8\u306f\u5e73\u5747\u4ee5\u4e0a\u306e\u3082\u306e\u3068\u306a\u308a\u5f97\u307e\u3059\u3002 \u3053\u306eSSRF\u306e\u3088\u3046\u306a\u65b0\u3057\u3044\u9805\u76ee\u306f\u3001\u6ce8\u610f\u3068\u8a8d\u8b58\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u5358\u4e00\u307e\u305f\u306f\u5c0f\u3055\u306aCWE\u306e\u96c6\u5408\u3067\u3042\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u6ce8\u76ee\u3092\u96c6\u3081\u308b\u3053\u3068\u3067\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3066\u3088\u308a\u5927\u304d\u306a\u30ab\u30c6\u30b4\u30ea\u306b\u96c6\u7d04\u3055\u308c\u308b\u3088\u3046\u671f\u5f85\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u8aac\u660e \u2693\ufe0e SSRF\u306e\u6b20\u9665\u306f\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4e0a\u304b\u3089\u30ea\u30e2\u30fc\u30c8\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\u969b\u306b\u3001\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305fURL\u3092\u691c\u8a3c\u305b\u305a\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u767a\u751f\u3057\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3084VPN\u3042\u308b\u3044\u306f\u305d\u306e\u4ed6\u306e\u7a2e\u985e\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30afACL\u306b\u3088\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4fdd\u8b77\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u3001SSRF\u306b\u3088\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u610f\u56f3\u3057\u306a\u3044\u5b9b\u5148\u3078\u7d30\u5de5\u3055\u308c\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5f37\u5236\u7684\u306b\u767a\u884c\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30e2\u30c0\u30f3\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067URL\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u73cd\u3057\u3044\u72b6\u6cc1\u3067\u306f\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002 \u305d\u306e\u305f\u3081SSRF\u306e\u767a\u751f\u304c\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002 \u307e\u305fSSRF\u306e\u6df1\u523b\u5ea6\u3082\u3001\u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u3084\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u8907\u96d1\u6027\u3092\u80cc\u666f\u3068\u3057\u3066\u3001\u6bb5\u3005\u3068\u5927\u304d\u304f\u306a\u308a\u3064\u3064\u3042\u308a\u307e\u3059\u3002 \u9632\u6b62\u65b9\u6cd5 \u2693\ufe0e \u958b\u767a\u8005\u306f\u4ee5\u4e0b\u306e\u591a\u5c64\u9632\u5fa1\u306e\u5236\u5fa1\u306e\u4e00\u90e8\u306a\u3044\u3057\u5168\u3066\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001SSRF\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u304b\u3089 \u2693\ufe0e SSRF\u306e\u5f71\u97ff\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u30ea\u30e2\u30fc\u30c8\u306e\u30ea\u30bd\u30fc\u30b9\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u6a5f\u80fd\u3092\u5206\u96e2\u3055\u308c\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\u3002 \u5fc5\u9808\u306e\u30a4\u30f3\u30c8\u30e9\u30cd\u30c3\u30c8\u901a\u4fe1\u3092\u9664\u304d\u5168\u3066\u306e\u901a\u4fe1\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\u3088\u3046\u3001\u300c\u30c7\u30d5\u30a9\u30eb\u30c8\u62d2\u5426\u300d\u306e\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u30dd\u30ea\u30b7\u30fc\u307e\u305f\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3092\u5f37\u5236\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5c64\u304b\u3089: \u2693\ufe0e \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63d0\u4f9b\u3057\u305f\u5168\u3066\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u30b5\u30cb\u30bf\u30a4\u30ba\u3057\u3001\u691c\u8a3c\u3057\u307e\u3059\u3002 \u660e\u78ba\u306a\u8a31\u53ef\u30ea\u30b9\u30c8\u7528\u3044\u3066URL\u30b9\u30ad\u30fc\u30e0\u3001\u30dd\u30fc\u30c8\u3001\u5b9b\u5148\u3092\u5f37\u5236\u3057\u307e\u3059\u3002 \u751f\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u9001\u4fe1\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002 HTTP\u306e\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3092\u7121\u52b9\u5316\u3057\u307e\u3059\u3002 DNS\u30ea\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3084\"time of check, time of use\" (TOCTOU) \u7af6\u5408\u72b6\u614b\u3068\u3044\u3063\u305f\u653b\u6483\u3092\u9632\u3050\u305f\u3081\u306b\u3001URL\u306e\u6574\u5408\u6027\u306b\u6ce8\u610f\u3057\u307e\u3059\u3002 \u62d2\u5426\u30ea\u30b9\u30c8\u3084\u6b63\u898f\u8868\u73fe\u3092\u7528\u3044\u3066\u306eSSRF\u5bfe\u7b56\u3092\u5b9f\u88c5\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u653b\u6483\u8005\u306f\u62d2\u5426\u30ea\u30b9\u30c8\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\u3001\u30c4\u30fc\u30eb\u3001\u305d\u3057\u3066\u6280\u8853\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u3002 \u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b \u2693\ufe0e \u653b\u6483\u8005\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3084\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3001\u3082\u3057\u304f\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30afACL\u306b\u3088\u3063\u3066\u4fdd\u8b77\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u653b\u6483\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059: \u30b7\u30ca\u30ea\u30aa #1: \u5185\u90e8\u30b5\u30fc\u30d0\u30fc\u3078\u306e\u30dd\u30fc\u30c8\u30b9\u30ad\u30e3\u30f3\u3002\u30bb\u30b0\u30e1\u30f3\u30c8\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5834\u5408\u3001\u653b\u6483\u8005\u306f\u5185\u90e8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u6a19\u7684\u3068\u3057\u3066\u3001SSRF\u30da\u30a4\u30ed\u30fc\u30c9\u306e\u63a5\u7d9a\u7d50\u679c\u3082\u3057\u304f\u306f\u63a5\u7d9a\u3084\u62d2\u5426\u3055\u308c\u308b\u307e\u3067\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u3082\u3068\u306b\u5185\u90e8\u30b5\u30fc\u30d0\u30fc\u306e\u30dd\u30fc\u30c8\u304c\u30aa\u30fc\u30d7\u30f3\u304b\u30af\u30ed\u30fc\u30ba\u304b\u3092\u8abf\u3079\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u3002\u653b\u6483\u8005\u306f\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001 \u306e\u3088\u3046\u306a\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u5185\u90e8\u30b5\u30fc\u30d0\u30fc\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u30b9\u30c8\u30ec\u30fc\u30b8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3002\u591a\u304f\u306e\u30af\u30e9\u30a6\u30c9\u30d7\u30ed\u30d0\u30a4\u30c0\u306f http://169.254.169.254/ \u306e\u3088\u3046\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u653b\u6483\u8005\u306f\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #4: \u5185\u90e8\u30b5\u30fc\u30d3\u30b9\u306e\u4e57\u3063\u53d6\u308a - \u653b\u6483\u8005\u306f\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u5b9f\u884c (RCE) \u3084\u30b5\u30fc\u30d3\u30b9\u62d2\u5426 (DoS) \u306e\u3088\u3046\u306a\u3055\u3089\u306a\u308b\u653b\u6483\u3092\u884c\u3046\u305f\u3081\u306b\u5185\u90e8\u30b5\u30fc\u30d3\u30b9\u3092\u60aa\u7528\u3057\u307e\u3059\u3002 \u53c2\u8003\u8cc7\u6599 \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! \u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8 \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF) A10:2021 \u2013 Server-Side Request Forgery (SSRF) \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385 Overview \u2693\ufe0e This category is added from the industry survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of CWEs for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition. Description \u2693\ufe0e SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network ACL. As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures. How to Prevent \u2693\ufe0e Developers can prevent SSRF by implementing some or all the following defense in depth controls: From Network layer \u2693\ufe0e Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic From Application layer: \u2693\ufe0e Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists. Example Attack Scenarios \u2693\ufe0e Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers. If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure. Attackers can access local files such as or internal services to gain sensitive information. Scenario #3: Access metadata storage of cloud services. Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS). References \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! List of Mapped CWEs \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10 \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30ea\u30af\u30a8\u30b9\u30c8\u30d5\u30a9\u30fc\u30b8\u30a7\u30ea (SSRF)"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#a102021-ssrf","text":"","title":"A10:2021 - \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30ea\u30af\u30a8\u30b9\u30c8\u30d5\u30a9\u30fc\u30b8\u30a7\u30ea (SSRF)"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_1","text":"\u5bfe\u5fdc\u3059\u308b CWE \u6570 \u6700\u5927\u767a\u751f\u7387 \u5e73\u5747\u767a\u751f\u7387 \u6700\u5927\u7db2\u7f85\u7387 \u5e73\u5747\u7db2\u7f85\u7387 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306e\u96e3\u6613\u5ea6\uff09 \u52a0\u91cd\u5e73\u5747\uff08\u653b\u6483\u306b\u3088\u308b\u5f71\u97ff\uff09 \u7dcf\u767a\u751f\u6570 CVE \u5408\u8a08\u4ef6\u6570 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385","title":"\u56e0\u5b50"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_2","text":"\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u696d\u754c\u306e\u8abf\u67fb\uff08\u7b2c1\u4f4d\uff09\u304b\u3089\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8abf\u67fb\u30c7\u30fc\u30bf\u304b\u3089\u308f\u304b\u308b\u3053\u3068\u306f\u3001\u3088\u304f\u3042\u308b\u30c6\u30b9\u30c8\u3088\u308a\u5e83\u7bc4\u306a\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u554f\u984c\u306e\u767a\u751f\u7387\u306f\u6bd4\u8f03\u7684\u4f4e\u3044\u3082\u306e\u306e\u3001\u554f\u984c\u304c\u8d77\u304d\u305f\u5834\u5408\u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30a4\u30c8\u3068\u30a4\u30f3\u30d1\u30af\u30c8\u306f\u5e73\u5747\u4ee5\u4e0a\u306e\u3082\u306e\u3068\u306a\u308a\u5f97\u307e\u3059\u3002 \u3053\u306eSSRF\u306e\u3088\u3046\u306a\u65b0\u3057\u3044\u9805\u76ee\u306f\u3001\u6ce8\u610f\u3068\u8a8d\u8b58\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u5358\u4e00\u307e\u305f\u306f\u5c0f\u3055\u306aCWE\u306e\u96c6\u5408\u3067\u3042\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u6ce8\u76ee\u3092\u96c6\u3081\u308b\u3053\u3068\u3067\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3066\u3088\u308a\u5927\u304d\u306a\u30ab\u30c6\u30b4\u30ea\u306b\u96c6\u7d04\u3055\u308c\u308b\u3088\u3046\u671f\u5f85\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_3","text":"SSRF\u306e\u6b20\u9665\u306f\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4e0a\u304b\u3089\u30ea\u30e2\u30fc\u30c8\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\u969b\u306b\u3001\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305fURL\u3092\u691c\u8a3c\u305b\u305a\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u767a\u751f\u3057\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3084VPN\u3042\u308b\u3044\u306f\u305d\u306e\u4ed6\u306e\u7a2e\u985e\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30afACL\u306b\u3088\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4fdd\u8b77\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u3001SSRF\u306b\u3088\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u610f\u56f3\u3057\u306a\u3044\u5b9b\u5148\u3078\u7d30\u5de5\u3055\u308c\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5f37\u5236\u7684\u306b\u767a\u884c\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30e2\u30c0\u30f3\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067URL\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u73cd\u3057\u3044\u72b6\u6cc1\u3067\u306f\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002 \u305d\u306e\u305f\u3081SSRF\u306e\u767a\u751f\u304c\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002 \u307e\u305fSSRF\u306e\u6df1\u523b\u5ea6\u3082\u3001\u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u3084\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u8907\u96d1\u6027\u3092\u80cc\u666f\u3068\u3057\u3066\u3001\u6bb5\u3005\u3068\u5927\u304d\u304f\u306a\u308a\u3064\u3064\u3042\u308a\u307e\u3059\u3002","title":"\u8aac\u660e"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_4","text":"\u958b\u767a\u8005\u306f\u4ee5\u4e0b\u306e\u591a\u5c64\u9632\u5fa1\u306e\u5236\u5fa1\u306e\u4e00\u90e8\u306a\u3044\u3057\u5168\u3066\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001SSRF\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u9632\u6b62\u65b9\u6cd5"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_5","text":"SSRF\u306e\u5f71\u97ff\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u30ea\u30e2\u30fc\u30c8\u306e\u30ea\u30bd\u30fc\u30b9\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u6a5f\u80fd\u3092\u5206\u96e2\u3055\u308c\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\u3002 \u5fc5\u9808\u306e\u30a4\u30f3\u30c8\u30e9\u30cd\u30c3\u30c8\u901a\u4fe1\u3092\u9664\u304d\u5168\u3066\u306e\u901a\u4fe1\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\u3088\u3046\u3001\u300c\u30c7\u30d5\u30a9\u30eb\u30c8\u62d2\u5426\u300d\u306e\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u30dd\u30ea\u30b7\u30fc\u307e\u305f\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3092\u5f37\u5236\u3057\u307e\u3059\u3002","title":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u304b\u3089"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_6","text":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63d0\u4f9b\u3057\u305f\u5168\u3066\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u30b5\u30cb\u30bf\u30a4\u30ba\u3057\u3001\u691c\u8a3c\u3057\u307e\u3059\u3002 \u660e\u78ba\u306a\u8a31\u53ef\u30ea\u30b9\u30c8\u7528\u3044\u3066URL\u30b9\u30ad\u30fc\u30e0\u3001\u30dd\u30fc\u30c8\u3001\u5b9b\u5148\u3092\u5f37\u5236\u3057\u307e\u3059\u3002 \u751f\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u9001\u4fe1\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002 HTTP\u306e\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3092\u7121\u52b9\u5316\u3057\u307e\u3059\u3002 DNS\u30ea\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3084\"time of check, time of use\" (TOCTOU) \u7af6\u5408\u72b6\u614b\u3068\u3044\u3063\u305f\u653b\u6483\u3092\u9632\u3050\u305f\u3081\u306b\u3001URL\u306e\u6574\u5408\u6027\u306b\u6ce8\u610f\u3057\u307e\u3059\u3002 \u62d2\u5426\u30ea\u30b9\u30c8\u3084\u6b63\u898f\u8868\u73fe\u3092\u7528\u3044\u3066\u306eSSRF\u5bfe\u7b56\u3092\u5b9f\u88c5\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u653b\u6483\u8005\u306f\u62d2\u5426\u30ea\u30b9\u30c8\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\u3001\u30c4\u30fc\u30eb\u3001\u305d\u3057\u3066\u6280\u8853\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u3002","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5c64\u304b\u3089:"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_7","text":"\u653b\u6483\u8005\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3084\u30d5\u30a1\u30a4\u30a2\u30a6\u30a9\u30fc\u30eb\u3001\u3082\u3057\u304f\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30afACL\u306b\u3088\u3063\u3066\u4fdd\u8b77\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u653b\u6483\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059: \u30b7\u30ca\u30ea\u30aa #1: \u5185\u90e8\u30b5\u30fc\u30d0\u30fc\u3078\u306e\u30dd\u30fc\u30c8\u30b9\u30ad\u30e3\u30f3\u3002\u30bb\u30b0\u30e1\u30f3\u30c8\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5834\u5408\u3001\u653b\u6483\u8005\u306f\u5185\u90e8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u6a19\u7684\u3068\u3057\u3066\u3001SSRF\u30da\u30a4\u30ed\u30fc\u30c9\u306e\u63a5\u7d9a\u7d50\u679c\u3082\u3057\u304f\u306f\u63a5\u7d9a\u3084\u62d2\u5426\u3055\u308c\u308b\u307e\u3067\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u3082\u3068\u306b\u5185\u90e8\u30b5\u30fc\u30d0\u30fc\u306e\u30dd\u30fc\u30c8\u304c\u30aa\u30fc\u30d7\u30f3\u304b\u30af\u30ed\u30fc\u30ba\u304b\u3092\u8abf\u3079\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #2: \u6a5f\u5fae\u306a\u60c5\u5831\u306e\u9732\u51fa\u3002\u653b\u6483\u8005\u306f\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001 \u306e\u3088\u3046\u306a\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u5185\u90e8\u30b5\u30fc\u30d0\u30fc\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #3: \u30af\u30e9\u30a6\u30c9\u30b5\u30fc\u30d3\u30b9\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u30b9\u30c8\u30ec\u30fc\u30b8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3002\u591a\u304f\u306e\u30af\u30e9\u30a6\u30c9\u30d7\u30ed\u30d0\u30a4\u30c0\u306f http://169.254.169.254/ \u306e\u3088\u3046\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u653b\u6483\u8005\u306f\u6a5f\u5fae\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002 \u30b7\u30ca\u30ea\u30aa #4: \u5185\u90e8\u30b5\u30fc\u30d3\u30b9\u306e\u4e57\u3063\u53d6\u308a - \u653b\u6483\u8005\u306f\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u5b9f\u884c (RCE) \u3084\u30b5\u30fc\u30d3\u30b9\u62d2\u5426 (DoS) \u306e\u3088\u3046\u306a\u3055\u3089\u306a\u308b\u653b\u6483\u3092\u884c\u3046\u305f\u3081\u306b\u5185\u90e8\u30b5\u30fc\u30d3\u30b9\u3092\u60aa\u7528\u3057\u307e\u3059\u3002","title":"\u653b\u6483\u30b7\u30ca\u30ea\u30aa\u306e\u4f8b"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#_8","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"\u53c2\u8003\u8cc7\u6599"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#cwe","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"\u5bfe\u5fdc\u3059\u308b CWE \u306e\u30ea\u30b9\u30c8"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#a102021-server-side-request-forgery-ssrf","text":"","title":"A10:2021 \u2013 Server-Side Request Forgery (SSRF)"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385","title":"Factors"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#overview","text":"This category is added from the industry survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of CWEs for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition.","title":"Overview"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#description","text":"SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network ACL. As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.","title":"Description"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#how-to-prevent","text":"Developers can prevent SSRF by implementing some or all the following defense in depth controls:","title":"How to Prevent"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#from-network-layer","text":"Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic","title":"From Network layer"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#from-application-layer","text":"Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists.","title":"From Application layer:"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#example-attack-scenarios","text":"Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers. If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure. Attackers can access local files such as or internal services to gain sensitive information. Scenario #3: Access metadata storage of cloud services. Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS).","title":"Example Attack Scenarios"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#references","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"References"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_(SSRF)/#list-of-mapped-cwes","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"List of Mapped CWEs"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/","text":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF) \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Vis\u00e3o Geral \u2693\ufe0e Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura. Descri\u00e7\u00e3o \u2693\ufe0e As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas. Como Previnir \u2693\ufe0e Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade: Para a Camada de Rede \u2693\ufe0e Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ). Para a Camada de Aplica\u00e7\u00e3o: \u2693\ufe0e Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o. Medidas Adicionais a Considerar: \u2693\ufe0e N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas. Cen\u00e1rio de exemplo de um ataque \u2693\ufe0e Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS). Refer\u00eancias \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista de CWEs mapeadas \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)    ![icon](assets/TOP_10_Icons_Final_SSRF.png)"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#a102021-falsificacao-de-solicitacao-do-lado-do-servidor-ssrf","text":"","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#fatores","text":"CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fatores"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#visao-geral","text":"Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura.","title":"Vis\u00e3o Geral"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#descricao","text":"As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas.","title":"Descri\u00e7\u00e3o"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#como-previnir","text":"Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade:","title":"Como Previnir"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-rede","text":"Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ).","title":"Para a Camada de Rede"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-aplicacao","text":"Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o.","title":"Para a Camada de Aplica\u00e7\u00e3o:"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#medidas-adicionais-a-considerar","text":"N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas.","title":"Medidas Adicionais a Considerar:"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#cenario-de-exemplo-de-um-ataque","text":"Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS).","title":"Cen\u00e1rio de exemplo de um ataque"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#referencias","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Refer\u00eancias"},{"location":"ja/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#lista-de-cwes-mapeadas","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista de CWEs mapeadas"},{"location":"ja/A11_2021-Next_Steps/","text":"A11:2021 \u2013 Next Steps \u2693\ufe0e OWASP\u30c8\u30c3\u30d710\u306f\u3001\u5efa\u3066\u4ed8\u3051\u4e0a\u3001\u6700\u3082\u91cd\u8981\u306a10\u306e\u30ea\u30b9\u30af\u306b\u9650\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002OWASP\u30c8\u30c3\u30d710\u306b\u63b2\u8f09\u3059\u308b\u304b\u3069\u3046\u304b\u3001\u9577\u6642\u9593\u306e\u691c\u8a0e\u3092\u8981\u3057\u305f\u300c\u304e\u308a\u304e\u308a\u5883\u754c\u7dda\u300d\u306e\u30ea\u30b9\u30af\u3067\u3001\u6700\u7d42\u7684\u306b\u306f\u63b2\u8f09\u3055\u308c\u306a\u304b\u3063\u305f\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u3055\u307e\u3056\u307e\u306a\u65b9\u6cd5\u3067\u89e3\u91c8\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u4ed6\u306e\u30ea\u30b9\u30af\u306e\u65b9\u304c\u3088\u308a\u5927\u304d\u306a\u5f71\u97ff\u304c\u3042\u3063\u305f\u304b\u3089\u3067\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6210\u719f\u3055\u305b\u308b\u3079\u304f\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u4f01\u696d\u3084\u3001\u9069\u7528\u7bc4\u56f2\u3092\u5e83\u3052\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30f3\u30b5\u30eb\u30bf\u30f3\u30c8\u4f1a\u793e\u3042\u308b\u3044\u306f\u88fd\u54c1\u30c4\u30fc\u30eb\u30d9\u30f3\u30c0\u30fc\u306f\u3001\u4ee5\u4e0b\u306e4\u3064\u306e\u554f\u984c\u306b\u3064\u3044\u3066\u306f\u3001\u8b58\u5225\u3057\u305f\u308a\u4fee\u6b63\u3057\u305f\u308a\u3059\u308b\u52aa\u529b\u3092\u50be\u3051\u308b\u4fa1\u5024\u304c\u3042\u308a\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u306b\u304b\u304b\u308f\u308b\u554f\u984c \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 38 49.46% 2.22% 60.85% 23.42% 101736 7564 Description. \u30b3\u30fc\u30c9\u54c1\u8cea\u306e\u554f\u984c\u306b\u306f\u3001\u65e2\u77e5\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4e0a\u306e\u6b20\u9665\u3084\u30d1\u30bf\u30fc\u30f3\u3001\u5909\u6570\u306e\u591a\u76ee\u7684\u518d\u5229\u7528\u3001\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3067\u306e\u6a5f\u5bc6\u60c5\u5831\u306e\u9732\u51fa\u3001\u4e00\u3064\u9055\u3044\u306e\u30a8\u30e9\u30fc\u3001TOCTOU\uff08time of check/time of use\uff09\u30ec\u30fc\u30b9\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3(\u7af6\u5408\u72b6\u614b)\u3001\u7b26\u53f7\u306a\u3057\u307e\u305f\u306f\u7b26\u53f7\u3042\u308a\u306e\u5909\u63db\u30a8\u30e9\u30fc\u3001free\u5f8c\u306e\u9818\u57df\u306e\u4f7f\u7528\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u7279\u5fb4\u306f\u3001\u901a\u5e38\u3001\u53b3\u3057\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u30d5\u30e9\u30b0\u3001\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u3001Linter IDE\u30d7\u30e9\u30b0\u30a4\u30f3\u306a\u3069\u3067\u7279\u5b9a\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002 \u30e2\u30c0\u30f3\u306a\u958b\u767a\u73fe\u4ee3\u306e\u8a00\u8a9e\u306f\u3001\u8a2d\u8a08\u4e0a\u3001\u305f\u3068\u3048\u3070Rust\u306e\u30e1\u30e2\u30ea\u6240\u6709\u6a29\u3068\u501f\u7528\u306e\u6982\u5ff5\u3001Rust\u306e\u30b9\u30ec\u30c3\u30c9\u8a2d\u8a08\u3001Go\u306e\u53b3\u683c\u306a\u578b\u4ed8\u3051\u3068\u5883\u754c\u30c1\u30a7\u30c3\u30af\u306e\u3088\u3046\u306b\u3001\u3053\u308c\u3089\u306e\u554f\u984c\u306e\u591a\u304f\u3092\u6392\u9664\u3057\u3066\u3044\u307e\u3059\u3002 How to prevent . \u5229\u7528\u3057\u3066\u3044\u308b\u30a8\u30c7\u30a3\u30bf\u3084\u8a00\u8a9e\u306e\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u306b\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3059\u308b\u3002Rust\u3084Go\u306a\u3069\u3001\u30d0\u30b0\u30af\u30e9\u30b9\u3092\u6392\u9664\u3057\u305f\u8a00\u8a9e\u3084\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f7f\u7528\u3084\u79fb\u884c\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u691c\u8a0e\u3059\u308b\u3002 Example attack scenarios . \u653b\u6483\u8005\u306f\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u9759\u7684\u306b\u5171\u6709\u3055\u308c\u305f\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u30ec\u30fc\u30b9\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u60aa\u7528\u3057\u3066\u3001\u6a5f\u5bc6\u60c5\u5831\u3092\u53d6\u5f97\u307e\u305f\u306f\u66f4\u65b0\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 References . TBA \u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u653b\u6483(DoS) \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 8 17.54% 4.89% 79.58% 33.26% 66985 973 Description . \u5341\u5206\u306a\u30ea\u30bd\u30fc\u30b9\u304c\u3042\u308c\u3070\u3001\u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u306f\u5e38\u306b\u53ef\u80fd\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u8a2d\u8a08\u3084\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u624b\u6cd5\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u653b\u6483\u306e\u88ab\u5bb3\u306e\u5927\u304d\u3055\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30ea\u30f3\u30af\u3072\u3068\u3064\u3042\u308c\u3070\u8ab0\u3067\u3082\u5927\u5bb9\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u308a\u3001\u3042\u3089\u3086\u308b\u30da\u30fc\u30b8\u3067\u8a08\u7b97\u91cf\u306e\u591a\u3044\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u306e\u6319\u52d5\u306f\u3001\u5c11\u306a\u3044\u52b4\u529b\u3067\u3082\u6210\u7acb\u3057\u307e\u3059\u3002 How to prevent . \u30b3\u30fc\u30c9\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u3092\u3001CPU\u3001I/O\u3001\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306b\u3064\u3044\u3066\u5b9f\u65bd\u3057\u3001\u518d\u8a2d\u8a08\u3001\u6700\u9069\u5316\u3001\u307e\u305f\u306f\u30b3\u30b9\u30c8\u306e\u9ad8\u3044\u64cd\u4f5c\u306b\u3064\u3044\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u884c\u3046\u3002\u5de8\u5927\u306a\u30d5\u30a1\u30a4\u30eb\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u306f\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3057\u3001\u8a31\u53ef\u3055\u308c\u305f\u500b\u4eba\u306e\u307f\u304c\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3088\u3046\u5236\u5fa1\u3057\u305f\u308a\u3001\u30a8\u30c3\u30b8\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u30b5\u30fc\u30d3\u30b9\u3092\u691c\u8a0e\u3059\u308b\u3002 Example attack scenarios . \u653b\u6483\u8005\u306f\u3001\u3042\u308b\u64cd\u4f5c\u304c\u5b8c\u4e86\u3059\u308b\u306e\u306b5\uff5e10\u79d2\u304b\u304b\u308b\u3068\u5224\u65ad\u3057\u305f\u3068\u3057\u307e\u3059\u30024\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u540c\u6642\u306b\u5b9f\u884c\u3059\u308b\u3068\u30b5\u30fc\u30d0\u30fc\u304c\u5fdc\u7b54\u3057\u306a\u304f\u306a\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3068\u3001\u653b\u6483\u8005\u306f1000\u500b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3092\u30aa\u30d5\u30e9\u30a4\u30f3\u306b\u3057\u307e\u3059\u3002 References . TBA Memory Management Errors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 14 7.03% 1.16% 56.06% 31.74% 26576 16184 Description . Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001Java\u3001.NET\u3001node.js\uff08JavaScript\u307e\u305f\u306fTypeScript\uff09\u306a\u3069\u306e\u30e1\u30e2\u30ea\u7ba1\u7406\u306e\u3067\u304d\u308b\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u8a00\u8a9e\u306f\u3001\u30d0\u30c3\u30d5\u30a1\u3084\u30d2\u30fc\u30d7\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3001free\u5f8c\u30e1\u30e2\u30ea\u30fc\u306e\u5229\u7528\u3001\u6574\u6570\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306a\u3069\u3001\u30e1\u30e2\u30ea\u7ba1\u7406\u306e\u554f\u984c\u3092\u62b1\u3048\u308b\u30b7\u30b9\u30c6\u30e0\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8a00\u8a9e\u304c\u540d\u76ee\u4e0a\u300c\u30e1\u30e2\u30ea\u30bb\u30fc\u30d5\u300d\u3060\u3068\u3057\u3066\u3082\u3001\u5b9f\u969b\u306e\u57fa\u76e4\u306f\u305d\u3046\u3067\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u8a3c\u62e0\u3092\u793a\u3059\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u74b0\u5883\u304b\u3089\u306e\u8131\u51fa\u306f\u3001\u679a\u6319\u306b\u3044\u3068\u307e\u304c\u3042\u308a\u307e\u305b\u3093\u3002 How to prevent . \u6700\u8fd1\u306eAPI\u306e\u591a\u304f\u306f\u3001Rust\u3084Go\u306a\u3069\u306e\u30e1\u30e2\u30ea\u30bb\u30fc\u30d5\u306a\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002Rust\u306e\u5834\u5408\u3001\u30e1\u30e2\u30ea\u30bb\u30fc\u30d5\u306f\u8a00\u8a9e\u306e\u91cd\u8981\u306a\u6a5f\u80fd\u3067\u3059\u3002\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u306f\u3001\u53b3\u5bc6\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u30d5\u30e9\u30b0\u3001\u5f37\u529b\u306a\u578b\u4ed8\u3051\u3001\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u3001\u30d5\u30a1\u30ba\u30c6\u30b9\u30c8\u306a\u3069\u3092\u4f7f\u7528\u3059\u308b\u306a\u3089\u3001\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3001\u30e1\u30e2\u30ea\u3001\u914d\u5217\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30f3\u306a\u3069\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002 Example attack scenarios . Buffer and heap overflows have been a mainstay of References . TBA Security Control Failures \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 2 11.35% 9.64% 76.60% 45.23% 44911 329 Description . How to prevent . Example attack scenarios . References . TBA A11:2021 \u2013 Next Steps \u2693\ufe0e By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate. Code Quality issues \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 38 49.46% 2.22% 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References . TBA Denial of Service \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 8 17.54% 4.89% 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References . TBA Memory Management Errors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 14 7.03% 1.16% 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of References . TBA Security Control Failures \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 2 11.35% 9.64% 76.60% 45.23% 44911 329 Description . How to prevent . Example attack scenarios . References . TBA","title":"Next Steps"},{"location":"ja/A11_2021-Next_Steps/#a112021-next-steps","text":"OWASP\u30c8\u30c3\u30d710\u306f\u3001\u5efa\u3066\u4ed8\u3051\u4e0a\u3001\u6700\u3082\u91cd\u8981\u306a10\u306e\u30ea\u30b9\u30af\u306b\u9650\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002OWASP\u30c8\u30c3\u30d710\u306b\u63b2\u8f09\u3059\u308b\u304b\u3069\u3046\u304b\u3001\u9577\u6642\u9593\u306e\u691c\u8a0e\u3092\u8981\u3057\u305f\u300c\u304e\u308a\u304e\u308a\u5883\u754c\u7dda\u300d\u306e\u30ea\u30b9\u30af\u3067\u3001\u6700\u7d42\u7684\u306b\u306f\u63b2\u8f09\u3055\u308c\u306a\u304b\u3063\u305f\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u3055\u307e\u3056\u307e\u306a\u65b9\u6cd5\u3067\u89e3\u91c8\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u4ed6\u306e\u30ea\u30b9\u30af\u306e\u65b9\u304c\u3088\u308a\u5927\u304d\u306a\u5f71\u97ff\u304c\u3042\u3063\u305f\u304b\u3089\u3067\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6210\u719f\u3055\u305b\u308b\u3079\u304f\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u4f01\u696d\u3084\u3001\u9069\u7528\u7bc4\u56f2\u3092\u5e83\u3052\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30f3\u30b5\u30eb\u30bf\u30f3\u30c8\u4f1a\u793e\u3042\u308b\u3044\u306f\u88fd\u54c1\u30c4\u30fc\u30eb\u30d9\u30f3\u30c0\u30fc\u306f\u3001\u4ee5\u4e0b\u306e4\u3064\u306e\u554f\u984c\u306b\u3064\u3044\u3066\u306f\u3001\u8b58\u5225\u3057\u305f\u308a\u4fee\u6b63\u3057\u305f\u308a\u3059\u308b\u52aa\u529b\u3092\u50be\u3051\u308b\u4fa1\u5024\u304c\u3042\u308a\u307e\u3059\u3002","title":"A11:2021 \u2013 Next Steps"},{"location":"ja/A11_2021-Next_Steps/#_1","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 38 49.46% 2.22% 60.85% 23.42% 101736 7564 Description. \u30b3\u30fc\u30c9\u54c1\u8cea\u306e\u554f\u984c\u306b\u306f\u3001\u65e2\u77e5\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4e0a\u306e\u6b20\u9665\u3084\u30d1\u30bf\u30fc\u30f3\u3001\u5909\u6570\u306e\u591a\u76ee\u7684\u518d\u5229\u7528\u3001\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3067\u306e\u6a5f\u5bc6\u60c5\u5831\u306e\u9732\u51fa\u3001\u4e00\u3064\u9055\u3044\u306e\u30a8\u30e9\u30fc\u3001TOCTOU\uff08time of check/time of use\uff09\u30ec\u30fc\u30b9\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3(\u7af6\u5408\u72b6\u614b)\u3001\u7b26\u53f7\u306a\u3057\u307e\u305f\u306f\u7b26\u53f7\u3042\u308a\u306e\u5909\u63db\u30a8\u30e9\u30fc\u3001free\u5f8c\u306e\u9818\u57df\u306e\u4f7f\u7528\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u7279\u5fb4\u306f\u3001\u901a\u5e38\u3001\u53b3\u3057\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u30d5\u30e9\u30b0\u3001\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u3001Linter IDE\u30d7\u30e9\u30b0\u30a4\u30f3\u306a\u3069\u3067\u7279\u5b9a\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002 \u30e2\u30c0\u30f3\u306a\u958b\u767a\u73fe\u4ee3\u306e\u8a00\u8a9e\u306f\u3001\u8a2d\u8a08\u4e0a\u3001\u305f\u3068\u3048\u3070Rust\u306e\u30e1\u30e2\u30ea\u6240\u6709\u6a29\u3068\u501f\u7528\u306e\u6982\u5ff5\u3001Rust\u306e\u30b9\u30ec\u30c3\u30c9\u8a2d\u8a08\u3001Go\u306e\u53b3\u683c\u306a\u578b\u4ed8\u3051\u3068\u5883\u754c\u30c1\u30a7\u30c3\u30af\u306e\u3088\u3046\u306b\u3001\u3053\u308c\u3089\u306e\u554f\u984c\u306e\u591a\u304f\u3092\u6392\u9664\u3057\u3066\u3044\u307e\u3059\u3002 How to prevent . \u5229\u7528\u3057\u3066\u3044\u308b\u30a8\u30c7\u30a3\u30bf\u3084\u8a00\u8a9e\u306e\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u306b\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u30c4\u30fc\u30eb\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3059\u308b\u3002Rust\u3084Go\u306a\u3069\u3001\u30d0\u30b0\u30af\u30e9\u30b9\u3092\u6392\u9664\u3057\u305f\u8a00\u8a9e\u3084\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f7f\u7528\u3084\u79fb\u884c\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u691c\u8a0e\u3059\u308b\u3002 Example attack scenarios . \u653b\u6483\u8005\u306f\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u9759\u7684\u306b\u5171\u6709\u3055\u308c\u305f\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u30ec\u30fc\u30b9\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u60aa\u7528\u3057\u3066\u3001\u6a5f\u5bc6\u60c5\u5831\u3092\u53d6\u5f97\u307e\u305f\u306f\u66f4\u65b0\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 References . TBA","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u306b\u304b\u304b\u308f\u308b\u554f\u984c"},{"location":"ja/A11_2021-Next_Steps/#dos","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 8 17.54% 4.89% 79.58% 33.26% 66985 973 Description . \u5341\u5206\u306a\u30ea\u30bd\u30fc\u30b9\u304c\u3042\u308c\u3070\u3001\u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u306f\u5e38\u306b\u53ef\u80fd\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u8a2d\u8a08\u3084\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u624b\u6cd5\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u653b\u6483\u306e\u88ab\u5bb3\u306e\u5927\u304d\u3055\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30ea\u30f3\u30af\u3072\u3068\u3064\u3042\u308c\u3070\u8ab0\u3067\u3082\u5927\u5bb9\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u308a\u3001\u3042\u3089\u3086\u308b\u30da\u30fc\u30b8\u3067\u8a08\u7b97\u91cf\u306e\u591a\u3044\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u306e\u6319\u52d5\u306f\u3001\u5c11\u306a\u3044\u52b4\u529b\u3067\u3082\u6210\u7acb\u3057\u307e\u3059\u3002 How to prevent . \u30b3\u30fc\u30c9\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u3092\u3001CPU\u3001I/O\u3001\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306b\u3064\u3044\u3066\u5b9f\u65bd\u3057\u3001\u518d\u8a2d\u8a08\u3001\u6700\u9069\u5316\u3001\u307e\u305f\u306f\u30b3\u30b9\u30c8\u306e\u9ad8\u3044\u64cd\u4f5c\u306b\u3064\u3044\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u884c\u3046\u3002\u5de8\u5927\u306a\u30d5\u30a1\u30a4\u30eb\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u306f\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3057\u3001\u8a31\u53ef\u3055\u308c\u305f\u500b\u4eba\u306e\u307f\u304c\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3088\u3046\u5236\u5fa1\u3057\u305f\u308a\u3001\u30a8\u30c3\u30b8\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u30b5\u30fc\u30d3\u30b9\u3092\u691c\u8a0e\u3059\u308b\u3002 Example attack scenarios . \u653b\u6483\u8005\u306f\u3001\u3042\u308b\u64cd\u4f5c\u304c\u5b8c\u4e86\u3059\u308b\u306e\u306b5\uff5e10\u79d2\u304b\u304b\u308b\u3068\u5224\u65ad\u3057\u305f\u3068\u3057\u307e\u3059\u30024\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u540c\u6642\u306b\u5b9f\u884c\u3059\u308b\u3068\u30b5\u30fc\u30d0\u30fc\u304c\u5fdc\u7b54\u3057\u306a\u304f\u306a\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3068\u3001\u653b\u6483\u8005\u306f1000\u500b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3092\u30aa\u30d5\u30e9\u30a4\u30f3\u306b\u3057\u307e\u3059\u3002 References . TBA","title":"\u30b5\u30fc\u30d3\u30b9\u62d2\u5426\u653b\u6483(DoS)"},{"location":"ja/A11_2021-Next_Steps/#memory-management-errors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 14 7.03% 1.16% 56.06% 31.74% 26576 16184 Description . Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001Java\u3001.NET\u3001node.js\uff08JavaScript\u307e\u305f\u306fTypeScript\uff09\u306a\u3069\u306e\u30e1\u30e2\u30ea\u7ba1\u7406\u306e\u3067\u304d\u308b\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u8a00\u8a9e\u306f\u3001\u30d0\u30c3\u30d5\u30a1\u3084\u30d2\u30fc\u30d7\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3001free\u5f8c\u30e1\u30e2\u30ea\u30fc\u306e\u5229\u7528\u3001\u6574\u6570\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306a\u3069\u3001\u30e1\u30e2\u30ea\u7ba1\u7406\u306e\u554f\u984c\u3092\u62b1\u3048\u308b\u30b7\u30b9\u30c6\u30e0\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8a00\u8a9e\u304c\u540d\u76ee\u4e0a\u300c\u30e1\u30e2\u30ea\u30bb\u30fc\u30d5\u300d\u3060\u3068\u3057\u3066\u3082\u3001\u5b9f\u969b\u306e\u57fa\u76e4\u306f\u305d\u3046\u3067\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u8a3c\u62e0\u3092\u793a\u3059\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u74b0\u5883\u304b\u3089\u306e\u8131\u51fa\u306f\u3001\u679a\u6319\u306b\u3044\u3068\u307e\u304c\u3042\u308a\u307e\u305b\u3093\u3002 How to prevent . \u6700\u8fd1\u306eAPI\u306e\u591a\u304f\u306f\u3001Rust\u3084Go\u306a\u3069\u306e\u30e1\u30e2\u30ea\u30bb\u30fc\u30d5\u306a\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002Rust\u306e\u5834\u5408\u3001\u30e1\u30e2\u30ea\u30bb\u30fc\u30d5\u306f\u8a00\u8a9e\u306e\u91cd\u8981\u306a\u6a5f\u80fd\u3067\u3059\u3002\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u306f\u3001\u53b3\u5bc6\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u30d5\u30e9\u30b0\u3001\u5f37\u529b\u306a\u578b\u4ed8\u3051\u3001\u9759\u7684\u30b3\u30fc\u30c9\u89e3\u6790\u3001\u30d5\u30a1\u30ba\u30c6\u30b9\u30c8\u306a\u3069\u3092\u4f7f\u7528\u3059\u308b\u306a\u3089\u3001\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3001\u30e1\u30e2\u30ea\u3001\u914d\u5217\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30f3\u306a\u3069\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002 Example attack scenarios . Buffer and heap overflows have been a mainstay of References . TBA","title":"Memory Management Errors"},{"location":"ja/A11_2021-Next_Steps/#security-control-failures","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 2 11.35% 9.64% 76.60% 45.23% 44911 329 Description . How to prevent . Example attack scenarios . References . TBA","title":"Security Control Failures"},{"location":"ja/A11_2021-Next_Steps/#a112021-next-steps_1","text":"By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate.","title":"A11:2021 \u2013 Next Steps"},{"location":"ja/A11_2021-Next_Steps/#code-quality-issues","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 38 49.46% 2.22% 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References . TBA","title":"Code Quality issues"},{"location":"ja/A11_2021-Next_Steps/#denial-of-service","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 8 17.54% 4.89% 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References . TBA","title":"Denial of Service"},{"location":"ja/A11_2021-Next_Steps/#memory-management-errors_1","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 14 7.03% 1.16% 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of References . TBA","title":"Memory Management Errors"},{"location":"ja/A11_2021-Next_Steps/#security-control-failures_1","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 2 11.35% 9.64% 76.60% 45.23% 44911 329 Description . How to prevent . Example attack scenarios . References . TBA","title":"Security Control Failures"},{"location":"ja/ar/assets/readme/","text":"","title":"Readme"},{"location":"fr/","text":"Introduction \u2693\ufe0e Bienvenue \u00e0 l'OWASP Top 10 - 2021 \u2693\ufe0e Bienvenue pour cette nouvelle \u00e9dition de l'OWASP Top 10 ! L'OWASP Top 10 2021 apporte de nombreux changements, avec notamment une nouvelle interface et une nouvelle infographie, disponible sur un format d'une page qu'il est possible de se procurer depuis notre page d'accueil. Un tr\u00e8s grand merci \u00e0 l'ensemble des personnes qui ont contribu\u00e9 de leur temps et leurs donn\u00e9es pour cette it\u00e9ration. Sans vous, cette mouture n'aurait pas vu le jour. MERCI . Les changements du Top 10 pour 2021 \u2693\ufe0e Il y a trois nouvelles cat\u00e9gories, quatre cat\u00e9gories avec un changement de nom et de p\u00e9rim\u00e8tre, ainsi que des consolidations dans ce Top 10 2021. Nous avons chang\u00e9 les noms si n\u00e9cessaire pour se concentrer sur la cause plut\u00f4t que le sympt\u00f4me. A01:2021-Contr\u00f4les d'acc\u00e8s d\u00e9faillants passe de la cinqui\u00e8me position \u00e0 celle de cat\u00e9gorie pr\u00e9sentant le risque de s\u00e9curit\u00e9 le plus s\u00e9rieux pour une application web ; les donn\u00e9es partag\u00e9es indiquent, qu'en moyenne, 3,81% des applications test\u00e9es avaient une ou plusieurs Common Weakness Enumeration (CWEs) avec plus de 318k occurrences de CWEs de cette cat\u00e9gorie. Les 34 CWEs associ\u00e9es ont eu plus d'occurrences dans les applications audit\u00e9es que n'importe quelle autre cat\u00e9gorie. A02:2021-D\u00e9faillances cryptographiques gagne une position et prend la deuxi\u00e8me place, pr\u00e9c\u00e9demment connue sous le nom de A3:2017-Exposition de donn\u00e9es sensibles , qui \u00e9tait un sympt\u00f4me large plut\u00f4t qu'une cause principale. L'accent est mis sur des d\u00e9faillances li\u00e9es \u00e0 la cryptographie, ce qui \u00e9tait le cas implicitement auparavant. Cette cat\u00e9gorie entra\u00eene souvent une exposition de donn\u00e9es sensibles ou une compromission de syst\u00e8me. A03:2021-Injection glisse \u00e0 la troisi\u00e8me position. 94% des applications ont \u00e9t\u00e9 test\u00e9es sur des vuln\u00e9rabilit\u00e9s de ce type, avec une incidence maximale de 19% et une incidence moyenne de 3,37%. Les 33 CWEs associ\u00e9es \u00e0 cette cat\u00e9gorie ont eu le deuxi\u00e8me plus grand nombre d'occurrences. Cross-Site Scripting fait d\u00e9sormais partie de cette cat\u00e9gorie dans cette \u00e9dition. A04:2021-Conception non s\u00e9curis\u00e9e est une nouvelle cat\u00e9gorie, avec un accent sur les d\u00e9fauts de conception. Si nous voulons ajouter des contr\u00f4les en amont, nous avons besoin de mod\u00e8les de menaces, de mod\u00e8les et principes de conception s\u00e9curis\u00e9s, et d'architectures de r\u00e9f\u00e9rence. Une conception non s\u00e9curis\u00e9e ne peut pas \u00eatre corrig\u00e9 par une impl\u00e9mentation parfaite car, par d\u00e9finition, les contr\u00f4les de s\u00e9curit\u00e9 n\u00e9cessaires pour se d\u00e9fendre contre certaines attaques n'ont jamais \u00e9t\u00e9 cr\u00e9\u00e9s. A05:2021-Mauvaise configuration de s\u00e9curit\u00e9 gagne une place ; 90% des applications ont \u00e9t\u00e9 test\u00e9es sur des vuln\u00e9rabilit\u00e9s de ce type, avec une incidence moyenne de 4,5% et plus de 208k occurrences des CWEs associ\u00e9es. Avec des logiciels de plus en plus param\u00e9trables, il n'est pas surprenant de voir cette cat\u00e9gorie prendre de l'ampleur. L'ancienne cat\u00e9gorie A4:2017-XML Entit\u00e9s externes (XXE) est incluse dans celle-ci. A06:2021-Composants vuln\u00e9rables et obsol\u00e8tes \u00e9tait pr\u00e9c\u00e9demment nomm\u00e9e Utilisation de Composants avec des Vuln\u00e9rabilit\u00e9s Connues . Elle se place deuxi\u00e8me de l'enqu\u00eate aupr\u00e8s de la communaut\u00e9 du Top 10, mais pouvait \u00e9galement entrer dans le Top 10 via l'analyse de donn\u00e9es. Cette cat\u00e9gorie progresse depuis sa neuvi\u00e8me place en 2017, elle est un probl\u00e8me connu dont nous avons du mal \u00e0 tester et \u00e0 mesurer les risques. Il s'agit de la seule cat\u00e9gorie \u00e0 n'avoir aucunes Common Vulnerability and Exposures (CVEs) associ\u00e9es aux CWEs concern\u00e9es, en cons\u00e9quence les coefficients d'impact et de poids ont \u00e9t\u00e9 renseign\u00e9s \u00e0 5.0 par d\u00e9faut. A07:2021-Identification et authentification de mauvaise qualit\u00e9 \u00e9tait pr\u00e9c\u00e9demment Authentification de mauvaise qualit\u00e9 , elle perd la deuxi\u00e8me place. Elle inclut d\u00e9sormais des CWEs \u00e9galement li\u00e9es aux \u00e9checs d'identification. Cette cat\u00e9gorie est toujours pr\u00e9sente dans le Top 10, mais la mise \u00e0 disposition croissante de frameworks standardis\u00e9s semble aider. A08:2021-Manque d'int\u00e9grit\u00e9 des donn\u00e9es et du logiciel est une nouvelle cat\u00e9gorie, se concentrant sur la formulation d'hypoth\u00e8ses sur les mises \u00e0 jour logicielles, les donn\u00e9es critiques et les pipelines CI/CD sans v\u00e9rifier leur int\u00e9grit\u00e9. L'un des impacts les plus \u00e9lev\u00e9s \u00e0 partir des donn\u00e9es de Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) associ\u00e9es aux 10 CWEs de cette cat\u00e9gorie. A8:2017-D\u00e9s\u00e9rialisation non s\u00e9curis\u00e9e , list\u00e9e en 2017, est d\u00e9sormais partie int\u00e9grante de cette cat\u00e9gorie. A09:2021-Carence des syst\u00e8mes de contr\u00f4le et de journalisation , pr\u00e9c\u00e9demment A10:2017-Supervision et Journalisation Insuffisantes , est ajout\u00e9e de l'enqu\u00eate aupr\u00e8s de l'industrie (3\u00e8me), pr\u00e9c\u00e9demment \u00e0 la dixi\u00e8me place. Cette cat\u00e9gorie a \u00e9t\u00e9 \u00e9tendue pour inclure plus de types de d\u00e9faillances, est difficile \u00e0 tester et est d\u00e8s lors mal repr\u00e9sent\u00e9e dans les donn\u00e9es CVE/CVSS. Toutefois, des incidents dans cette cat\u00e9gorie peuvent impacter directement la visibilit\u00e9, la lev\u00e9e d'alertes et l'analyse forensique. A10:2021-Falsification de requ\u00eate c\u00f4t\u00e9 serveur provient de l'enqu\u00eate aupr\u00e8s de la communaut\u00e9 Top 10 (1\u00e8re). Les donn\u00e9es montrent une incidence faible, avec un taux de couverture des tests sup\u00e9rieur \u00e0 la moyenne, accompagn\u00e9 de notes de potentiel d'exploitabilit\u00e9 et d'impact sup\u00e9rieur \u00e0 la moyenne. Cette cat\u00e9gorie est un exemple o\u00f9 les membres de la communaut\u00e9 s\u00e9curit\u00e9 nous indiquent que cette cat\u00e9gorie est importante, m\u00eame si cela ne transpara\u00eet pas encore dans les donn\u00e9es. M\u00e9thodologie \u2693\ufe0e Cette version du Top 10 est bien plus bas\u00e9e sur des donn\u00e9es que les pr\u00e9c\u00e9dentes, mais elle n'est pas pour autant aveugl\u00e9e par celles-ci. Parmi les dix cat\u00e9gories, huit proviennent des donn\u00e9es fournies et les deux derni\u00e8res proviennent d'une enqu\u00eate \u00e0 haut niveau aupr\u00e8s de la communaut\u00e9. Nous faisons ceci pour une raison fondamentale, observer les donn\u00e9es consiste \u00e0 observer le pass\u00e9. Les chercheurs en s\u00e9curit\u00e9 s'investissent pour trouver de nouvelles vuln\u00e9rabilit\u00e9s et de nouveaux moyens pour les d\u00e9tecter. Un temps certain est n\u00e9cessaire pour int\u00e9grer ces tests au sein des outils et des processus. Au moment o\u00f9 nous pouvons tester ces vuln\u00e9rabilit\u00e9s \u00e0 l'\u00e9chelle, des ann\u00e9es se sont bien souvent \u00e9coul\u00e9es. Pour \u00e9quilibrer cette approche, nous avons utilis\u00e9 une enqu\u00eate communautaire pour demander aux experts en s\u00e9curit\u00e9 applicative et en d\u00e9veloppement, en premi\u00e8re ligne, ce qu'ils constatent comme failles essentielles, que les donn\u00e9es pourraient ne pas encore montrer. Nous avons adopt\u00e9 quelques changements importants pour continuer \u00e0 faire m\u00fbrir le Top 10. Comment les cat\u00e9gories sont structur\u00e9es \u2693\ufe0e Quelques cat\u00e9gories ont chang\u00e9 depuis la pr\u00e9c\u00e9dente \u00e9dition de l'OWASP Top Ten. Voici ici un bref r\u00e9sum\u00e9 des changements. Les pr\u00e9c\u00e9dentes collectes de donn\u00e9es \u00e9taient concentr\u00e9s sur un sous ensemble d'approximativement 30 CWEs accompagn\u00e9es d'un champ demandant des d\u00e9couvertes compl\u00e9mentaires. Nous avons appris que les organisations se concentraient sur les seules 30 CWEs et n'ajoutaient que rarement d'autres CWEs qu'elles rencontraient. Dans cette \u00e9dition, nous nous sommes content\u00e9s de demander des donn\u00e9es, sans aucune restriction sur les CWEs. Nous avons demand\u00e9 le nombre d'applications test\u00e9es pour une ann\u00e9e donn\u00e9e (\u00e0 partir de 2017), et le nombre d'applications avec au moins une instance d'une CWE trouv\u00e9e lors des tests. Ce format nous permet de d\u00e9terminer la pr\u00e9valence de chaque CWE au sein des applications. Nous ignorons la fr\u00e9quence pour nos besoins ; bien que cela pourrait \u00eatre n\u00e9cessaire dans d'autres situations, cela cache la pr\u00e9valence au sein du panel. Qu'une application ait quatre instances d'une CWE ou 4 000 ne fait pas partie du calcul du Top 10. Nous sommes pass\u00e9s d'approximativement 30 CWEs \u00e0 pr\u00e8s de 400 CWEs \u00e0 analyser dans le jeu de donn\u00e9es. Nous pr\u00e9voyons d'ajouter des analyses compl\u00e9mentaires dans le futur. Cette augmentation significative dans le nombre de CWEs n\u00e9cessite des changements dans la fa\u00e7on dont les cat\u00e9gories sont structur\u00e9es. Nous avons pass\u00e9 plusieurs mois \u00e0 regrouper et cat\u00e9goriser les CWEs. Nous aurions pu continuer encore pendant des mois. Nous avons d\u00fb nous arr\u00eater \u00e0 un moment donn\u00e9. Il existe \u00e0 la fois des CWEs de type cause racine et sympt\u00f4me , o\u00f9 les types cause racine sont de la forme \"D\u00e9faillances cryptographiques\" et \"Mauvaise configuration\", en contraste avec les types sympt\u00f4me tels que \"Exposition de donn\u00e9es sensibles\" et \"D\u00e9ni de service\". Nous avons d\u00e9cid\u00e9 de nous concentrer sur les types cause racine autant que possible car ils sont plus logiques pour fournir des conseils d'identification et de rem\u00e9diation. Se concentrer sur la cause racine plut\u00f4t que le sympt\u00f4me n'est pas un concept nouveau ; le Top 10 a \u00e9t\u00e9 un m\u00e9lange de sympt\u00f4mes et de causes racines . Les CWEs le sont \u00e9galement ; nous faisons ce choix d\u00e9lib\u00e9r\u00e9ment et lan\u00e7ons un appel \u00e0 ce sujet. Il y a une moyenne de 19,6 CWEs par cat\u00e9gorie dans cette \u00e9dition, avec un minimum d'1 CWE pour A10:2021-Falsification de requ\u00eate c\u00f4t\u00e9 serveur et un maximum de 40 CWEs pour A04:2021-Conception non s\u00e9curis\u00e9e . Cette nouvelle organisation de cat\u00e9gories apporte des avantages pour les formations, les soci\u00e9t\u00e9s peuvent se concentrer sur les CWEs les plus pertinentes pour un langage ou un framework. Comment les donn\u00e9es ont \u00e9t\u00e9 utilis\u00e9es pour s\u00e9lectionner les cat\u00e9gories \u2693\ufe0e En 2017, nous avons s\u00e9lectionn\u00e9 les cat\u00e9gories \u00e0 partir du taux d'incidence pour d\u00e9terminer la probabilit\u00e9, puis les avons class\u00e9es via des discussions en \u00e9quipe bas\u00e9es sur des d\u00e9cennies d'exp\u00e9rience sur des crit\u00e8res d' Exploitabilit\u00e9 , D\u00e9tectabilit\u00e9 (\u00e9galement probabilit\u00e9 ) et Impact technique . Pour 2021, nous souhaitons, si possible, utiliser des donn\u00e9es pour Exploitabilit\u00e9 et Impact (technique) . Nous avons t\u00e9l\u00e9charg\u00e9 OWASP Dependency Check et extrait les scores CVSS d'exploitabilit\u00e9 et d'impact agr\u00e9g\u00e9s par CWE connexes. Cela a n\u00e9cessit\u00e9 un temps de recherche significatif, car toutes les CVEs ont un score CVSSv2, mais celui-ci poss\u00e8de des d\u00e9fauts que CVSSv3 devrait corriger. Apr\u00e8s un certain temps, toutes les CVEs re\u00e7oivent \u00e9galement un score CVSSv3. De plus, les plages de notation et les formules ont \u00e9t\u00e9 mises-\u00e0-jour entre CVSSv2 et CVSSv3. En CVSSv2, Exploitabilit\u00e9 et Impact (technique) peuvent atteindre 10, mais la formule les ram\u00e8ne \u00e0 60 % pour Exploitabilit\u00e9 et 40 % pour Impact . En CVSSv3, le maximum th\u00e9orique est limit\u00e9 \u00e0 6,0 pour Exploitabilit\u00e9 et 4,0 pour Impact . Avec la pond\u00e9ration prise en compte, le score d'impact a augment\u00e9, de pr\u00e8s d'un point et demi en moyenne dans CVSSv3, et l'exploitabilit\u00e9 a baiss\u00e9 de pr\u00e8s d'un demi-point en moyenne. Il y a 125 000 enregistrements d'une CVE associ\u00e9e \u00e0 une CWE dans les donn\u00e9es de la National Vunerability Database (NVD) extraites d'OWASP Dependency Check, et il y a 241 CWE uniques associ\u00e9es \u00e0 une CVE. 62 000 enregistrements ont un score CVSSv3, ce qui repr\u00e9sente environ la moiti\u00e9 des donn\u00e9es. Pour le Top Ten 2021, nous avons calcul\u00e9 les scores moyens d' exploitabilit\u00e9 et d' impact de la mani\u00e8re suivante. Nous avons regroup\u00e9 toutes les CVEs avec des scores CVSS par CWE et pond\u00e9r\u00e9 \u00e0 la fois exploitabilit\u00e9 et impact not\u00e9s par le pourcentage de la population qui disposait d'un score CVSSv3, plus la population restante de scores CVSSv2 pour obtenir une moyenne globale. Nous avons associ\u00e9 ces moyennes aux CWEs de l'ensemble de donn\u00e9es \u00e0 utiliser comme notes d' Exploitabilit\u00e9 et d' Impact (technique) pour l'autre moiti\u00e9 de l'\u00e9quation de risque. Pourquoi ne pas se reposer uniquement sur des donn\u00e9es statistiques ? \u2693\ufe0e Les r\u00e9sultats obtenus \u00e0 partir des donn\u00e9es sont principalement limit\u00e9s \u00e0 ce que nous pouvons tester de mani\u00e8re automatis\u00e9e. Parlez \u00e0 un professionnel chevronn\u00e9 de la s\u00e9curit\u00e9, il vous parlera de ce qu'il trouve et des tendances qu'il observe qui ne sont pas encore dans les donn\u00e9es. Il faut du temps aux gens pour d\u00e9velopper des m\u00e9thodologies de test pour certains types de vuln\u00e9rabilit\u00e9s, puis plus de temps pour que ces tests soient automatis\u00e9s et ex\u00e9cut\u00e9s sur un grand nombre d'applications. Tout ce que nous trouvons sont des vestiges du pass\u00e9 qui pourraient manquer les tendances de l'ann\u00e9e \u00e9coul\u00e9e, qui ne sont pas pr\u00e9sentes dans les donn\u00e9es. Par cons\u00e9quent, nous ne s\u00e9lectionnons que huit cat\u00e9gories sur dix \u00e0 partir des donn\u00e9es, car elles sont incompl\u00e8tes. Les deux autres cat\u00e9gories proviennent de l'enqu\u00eate communautaire Top 10. Cela permet aux praticiens en premi\u00e8re ligne de voter pour ce qu'ils consid\u00e8rent comme les risques les plus \u00e9lev\u00e9s qui pourraient ne pas \u00eatre repr\u00e9sent\u00e9s par les donn\u00e9es (et qui pourraient ne jamais \u00eatre exprim\u00e9s par les donn\u00e9es). Pourquoi le taux d'incidence au lieu de la fr\u00e9quence ? \u2693\ufe0e Il y a trois sources principales de donn\u00e9es. Nous les identifions comme \u00e9tant l'outillage assist\u00e9 par l'homme (OaH), l'homme assist\u00e9 par l'outil (HaO) et l'outillage brut. L'outillage et l'OaH sont des g\u00e9n\u00e9rateurs de recherche \u00e0 haute fr\u00e9quence. Les outils cherchent des vuln\u00e9rabilit\u00e9s sp\u00e9cifiques, tentent inlassablement de trouver chaque instance de cette vuln\u00e9rabilit\u00e9 et g\u00e9n\u00e8rent un nombre \u00e9lev\u00e9 de d\u00e9couvertes pour certains types de vuln\u00e9rabilit\u00e9. Prenez Cross-Site Scripting , qui est g\u00e9n\u00e9ralement l'une de ces deux variantes : il s'agit soit d'une erreur mineure et isol\u00e9e, soit d'un probl\u00e8me syst\u00e9mique. Lorsqu'il s'agit d'un probl\u00e8me syst\u00e9mique, le nombre de constations peut se chiffrer par milliers pour une seule application. Cette fr\u00e9quence \u00e9lev\u00e9e noie la plupart des autres vuln\u00e9rabilit\u00e9s trouv\u00e9es dans les rapports ou les donn\u00e9es. L'HaO, d'autre part, trouvera une gamme plus large de types de vuln\u00e9rabilit\u00e9s mais \u00e0 une fr\u00e9quence beaucoup plus faible en raison de contraintes de temps. Lorsque les humains testent une application et d\u00e9tectent une vuln\u00e9rabilit\u00e9 comme Cross-Site Scripting , ils trouveront g\u00e9n\u00e9ralement trois ou quatre instances et s'arr\u00eateront. Ils peuvent d\u00e9terminer une d\u00e9couverte syst\u00e9mique et la r\u00e9diger avec une recommandation \u00e0 corriger \u00e0 l'\u00e9chelle de l'application. Il n'y a pas de besoin (ou de temps) de trouver chaque instance. Supposons que nous prenions ces deux ensembles de donn\u00e9es distincts et essayions de les fusionner en se basant sur la fr\u00e9quence. Dans ce cas, les donn\u00e9es d'outillage et d'OaH noieront les donn\u00e9es HaO plus pr\u00e9cises (mais plus larges) et expliquent en grande partie pourquoi une cat\u00e9gorie comme Cross-Site Scripting a \u00e9t\u00e9 si bien class\u00e9e dans de nombreuses listes alors que l'impact est g\u00e9n\u00e9ralement faible \u00e0 mod\u00e9r\u00e9. C'est \u00e0 cause du volume consid\u00e9rable de r\u00e9sultats. Le Cross-Site Scripting est \u00e9galement assez facile \u00e0 tester, il y a donc beaucoup plus de tests pour cela. En 2017, nous avons introduit le taux d'incidence pour jeter un nouveau regard sur les donn\u00e9es et fusionner proprement les donn\u00e9es d'outillage et d'OaH avec les donn\u00e9es d'HaO. Le taux d'incidence demande quel pourcentage de la population d'applications avait au moins une instance d'un type de vuln\u00e9rabilit\u00e9. Peu nous importe si c'\u00e9tait ponctuel ou syst\u00e9mique. Ce n'est pas pertinent pour nos fins ; nous avons seulement besoin de savoir combien d'applications ont eu au moins une instance, ce qui permet de fournir une vue plus claire des r\u00e9sultats des tests sur plusieurs types de tests sans noyer les donn\u00e9es dans des r\u00e9sultats \u00e0 haute fr\u00e9quence. Cela correspond \u00e0 une vue li\u00e9e au risque, car un attaquant n'a besoin que d'une seule instance pour attaquer une application avec succ\u00e8s via la cat\u00e9gorie. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Thank you to our sponsor \u2693\ufe0e The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Page d'accueil"},{"location":"fr/#introduction","text":"","title":"Introduction"},{"location":"fr/#bienvenue-a-lowasp-top-10-2021","text":"Bienvenue pour cette nouvelle \u00e9dition de l'OWASP Top 10 ! L'OWASP Top 10 2021 apporte de nombreux changements, avec notamment une nouvelle interface et une nouvelle infographie, disponible sur un format d'une page qu'il est possible de se procurer depuis notre page d'accueil. Un tr\u00e8s grand merci \u00e0 l'ensemble des personnes qui ont contribu\u00e9 de leur temps et leurs donn\u00e9es pour cette it\u00e9ration. Sans vous, cette mouture n'aurait pas vu le jour. MERCI .","title":"Bienvenue \u00e0 l'OWASP Top 10 - 2021"},{"location":"fr/#les-changements-du-top-10-pour-2021","text":"Il y a trois nouvelles cat\u00e9gories, quatre cat\u00e9gories avec un changement de nom et de p\u00e9rim\u00e8tre, ainsi que des consolidations dans ce Top 10 2021. Nous avons chang\u00e9 les noms si n\u00e9cessaire pour se concentrer sur la cause plut\u00f4t que le sympt\u00f4me. A01:2021-Contr\u00f4les d'acc\u00e8s d\u00e9faillants passe de la cinqui\u00e8me position \u00e0 celle de cat\u00e9gorie pr\u00e9sentant le risque de s\u00e9curit\u00e9 le plus s\u00e9rieux pour une application web ; les donn\u00e9es partag\u00e9es indiquent, qu'en moyenne, 3,81% des applications test\u00e9es avaient une ou plusieurs Common Weakness Enumeration (CWEs) avec plus de 318k occurrences de CWEs de cette cat\u00e9gorie. Les 34 CWEs associ\u00e9es ont eu plus d'occurrences dans les applications audit\u00e9es que n'importe quelle autre cat\u00e9gorie. A02:2021-D\u00e9faillances cryptographiques gagne une position et prend la deuxi\u00e8me place, pr\u00e9c\u00e9demment connue sous le nom de A3:2017-Exposition de donn\u00e9es sensibles , qui \u00e9tait un sympt\u00f4me large plut\u00f4t qu'une cause principale. L'accent est mis sur des d\u00e9faillances li\u00e9es \u00e0 la cryptographie, ce qui \u00e9tait le cas implicitement auparavant. Cette cat\u00e9gorie entra\u00eene souvent une exposition de donn\u00e9es sensibles ou une compromission de syst\u00e8me. A03:2021-Injection glisse \u00e0 la troisi\u00e8me position. 94% des applications ont \u00e9t\u00e9 test\u00e9es sur des vuln\u00e9rabilit\u00e9s de ce type, avec une incidence maximale de 19% et une incidence moyenne de 3,37%. Les 33 CWEs associ\u00e9es \u00e0 cette cat\u00e9gorie ont eu le deuxi\u00e8me plus grand nombre d'occurrences. Cross-Site Scripting fait d\u00e9sormais partie de cette cat\u00e9gorie dans cette \u00e9dition. A04:2021-Conception non s\u00e9curis\u00e9e est une nouvelle cat\u00e9gorie, avec un accent sur les d\u00e9fauts de conception. Si nous voulons ajouter des contr\u00f4les en amont, nous avons besoin de mod\u00e8les de menaces, de mod\u00e8les et principes de conception s\u00e9curis\u00e9s, et d'architectures de r\u00e9f\u00e9rence. Une conception non s\u00e9curis\u00e9e ne peut pas \u00eatre corrig\u00e9 par une impl\u00e9mentation parfaite car, par d\u00e9finition, les contr\u00f4les de s\u00e9curit\u00e9 n\u00e9cessaires pour se d\u00e9fendre contre certaines attaques n'ont jamais \u00e9t\u00e9 cr\u00e9\u00e9s. A05:2021-Mauvaise configuration de s\u00e9curit\u00e9 gagne une place ; 90% des applications ont \u00e9t\u00e9 test\u00e9es sur des vuln\u00e9rabilit\u00e9s de ce type, avec une incidence moyenne de 4,5% et plus de 208k occurrences des CWEs associ\u00e9es. Avec des logiciels de plus en plus param\u00e9trables, il n'est pas surprenant de voir cette cat\u00e9gorie prendre de l'ampleur. L'ancienne cat\u00e9gorie A4:2017-XML Entit\u00e9s externes (XXE) est incluse dans celle-ci. A06:2021-Composants vuln\u00e9rables et obsol\u00e8tes \u00e9tait pr\u00e9c\u00e9demment nomm\u00e9e Utilisation de Composants avec des Vuln\u00e9rabilit\u00e9s Connues . Elle se place deuxi\u00e8me de l'enqu\u00eate aupr\u00e8s de la communaut\u00e9 du Top 10, mais pouvait \u00e9galement entrer dans le Top 10 via l'analyse de donn\u00e9es. Cette cat\u00e9gorie progresse depuis sa neuvi\u00e8me place en 2017, elle est un probl\u00e8me connu dont nous avons du mal \u00e0 tester et \u00e0 mesurer les risques. Il s'agit de la seule cat\u00e9gorie \u00e0 n'avoir aucunes Common Vulnerability and Exposures (CVEs) associ\u00e9es aux CWEs concern\u00e9es, en cons\u00e9quence les coefficients d'impact et de poids ont \u00e9t\u00e9 renseign\u00e9s \u00e0 5.0 par d\u00e9faut. A07:2021-Identification et authentification de mauvaise qualit\u00e9 \u00e9tait pr\u00e9c\u00e9demment Authentification de mauvaise qualit\u00e9 , elle perd la deuxi\u00e8me place. Elle inclut d\u00e9sormais des CWEs \u00e9galement li\u00e9es aux \u00e9checs d'identification. Cette cat\u00e9gorie est toujours pr\u00e9sente dans le Top 10, mais la mise \u00e0 disposition croissante de frameworks standardis\u00e9s semble aider. A08:2021-Manque d'int\u00e9grit\u00e9 des donn\u00e9es et du logiciel est une nouvelle cat\u00e9gorie, se concentrant sur la formulation d'hypoth\u00e8ses sur les mises \u00e0 jour logicielles, les donn\u00e9es critiques et les pipelines CI/CD sans v\u00e9rifier leur int\u00e9grit\u00e9. L'un des impacts les plus \u00e9lev\u00e9s \u00e0 partir des donn\u00e9es de Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) associ\u00e9es aux 10 CWEs de cette cat\u00e9gorie. A8:2017-D\u00e9s\u00e9rialisation non s\u00e9curis\u00e9e , list\u00e9e en 2017, est d\u00e9sormais partie int\u00e9grante de cette cat\u00e9gorie. A09:2021-Carence des syst\u00e8mes de contr\u00f4le et de journalisation , pr\u00e9c\u00e9demment A10:2017-Supervision et Journalisation Insuffisantes , est ajout\u00e9e de l'enqu\u00eate aupr\u00e8s de l'industrie (3\u00e8me), pr\u00e9c\u00e9demment \u00e0 la dixi\u00e8me place. Cette cat\u00e9gorie a \u00e9t\u00e9 \u00e9tendue pour inclure plus de types de d\u00e9faillances, est difficile \u00e0 tester et est d\u00e8s lors mal repr\u00e9sent\u00e9e dans les donn\u00e9es CVE/CVSS. Toutefois, des incidents dans cette cat\u00e9gorie peuvent impacter directement la visibilit\u00e9, la lev\u00e9e d'alertes et l'analyse forensique. A10:2021-Falsification de requ\u00eate c\u00f4t\u00e9 serveur provient de l'enqu\u00eate aupr\u00e8s de la communaut\u00e9 Top 10 (1\u00e8re). Les donn\u00e9es montrent une incidence faible, avec un taux de couverture des tests sup\u00e9rieur \u00e0 la moyenne, accompagn\u00e9 de notes de potentiel d'exploitabilit\u00e9 et d'impact sup\u00e9rieur \u00e0 la moyenne. Cette cat\u00e9gorie est un exemple o\u00f9 les membres de la communaut\u00e9 s\u00e9curit\u00e9 nous indiquent que cette cat\u00e9gorie est importante, m\u00eame si cela ne transpara\u00eet pas encore dans les donn\u00e9es.","title":"Les changements du Top 10 pour 2021"},{"location":"fr/#methodologie","text":"Cette version du Top 10 est bien plus bas\u00e9e sur des donn\u00e9es que les pr\u00e9c\u00e9dentes, mais elle n'est pas pour autant aveugl\u00e9e par celles-ci. Parmi les dix cat\u00e9gories, huit proviennent des donn\u00e9es fournies et les deux derni\u00e8res proviennent d'une enqu\u00eate \u00e0 haut niveau aupr\u00e8s de la communaut\u00e9. Nous faisons ceci pour une raison fondamentale, observer les donn\u00e9es consiste \u00e0 observer le pass\u00e9. Les chercheurs en s\u00e9curit\u00e9 s'investissent pour trouver de nouvelles vuln\u00e9rabilit\u00e9s et de nouveaux moyens pour les d\u00e9tecter. Un temps certain est n\u00e9cessaire pour int\u00e9grer ces tests au sein des outils et des processus. Au moment o\u00f9 nous pouvons tester ces vuln\u00e9rabilit\u00e9s \u00e0 l'\u00e9chelle, des ann\u00e9es se sont bien souvent \u00e9coul\u00e9es. Pour \u00e9quilibrer cette approche, nous avons utilis\u00e9 une enqu\u00eate communautaire pour demander aux experts en s\u00e9curit\u00e9 applicative et en d\u00e9veloppement, en premi\u00e8re ligne, ce qu'ils constatent comme failles essentielles, que les donn\u00e9es pourraient ne pas encore montrer. Nous avons adopt\u00e9 quelques changements importants pour continuer \u00e0 faire m\u00fbrir le Top 10.","title":"M\u00e9thodologie"},{"location":"fr/#comment-les-categories-sont-structurees","text":"Quelques cat\u00e9gories ont chang\u00e9 depuis la pr\u00e9c\u00e9dente \u00e9dition de l'OWASP Top Ten. Voici ici un bref r\u00e9sum\u00e9 des changements. Les pr\u00e9c\u00e9dentes collectes de donn\u00e9es \u00e9taient concentr\u00e9s sur un sous ensemble d'approximativement 30 CWEs accompagn\u00e9es d'un champ demandant des d\u00e9couvertes compl\u00e9mentaires. Nous avons appris que les organisations se concentraient sur les seules 30 CWEs et n'ajoutaient que rarement d'autres CWEs qu'elles rencontraient. Dans cette \u00e9dition, nous nous sommes content\u00e9s de demander des donn\u00e9es, sans aucune restriction sur les CWEs. Nous avons demand\u00e9 le nombre d'applications test\u00e9es pour une ann\u00e9e donn\u00e9e (\u00e0 partir de 2017), et le nombre d'applications avec au moins une instance d'une CWE trouv\u00e9e lors des tests. Ce format nous permet de d\u00e9terminer la pr\u00e9valence de chaque CWE au sein des applications. Nous ignorons la fr\u00e9quence pour nos besoins ; bien que cela pourrait \u00eatre n\u00e9cessaire dans d'autres situations, cela cache la pr\u00e9valence au sein du panel. Qu'une application ait quatre instances d'une CWE ou 4 000 ne fait pas partie du calcul du Top 10. Nous sommes pass\u00e9s d'approximativement 30 CWEs \u00e0 pr\u00e8s de 400 CWEs \u00e0 analyser dans le jeu de donn\u00e9es. Nous pr\u00e9voyons d'ajouter des analyses compl\u00e9mentaires dans le futur. Cette augmentation significative dans le nombre de CWEs n\u00e9cessite des changements dans la fa\u00e7on dont les cat\u00e9gories sont structur\u00e9es. Nous avons pass\u00e9 plusieurs mois \u00e0 regrouper et cat\u00e9goriser les CWEs. Nous aurions pu continuer encore pendant des mois. Nous avons d\u00fb nous arr\u00eater \u00e0 un moment donn\u00e9. Il existe \u00e0 la fois des CWEs de type cause racine et sympt\u00f4me , o\u00f9 les types cause racine sont de la forme \"D\u00e9faillances cryptographiques\" et \"Mauvaise configuration\", en contraste avec les types sympt\u00f4me tels que \"Exposition de donn\u00e9es sensibles\" et \"D\u00e9ni de service\". Nous avons d\u00e9cid\u00e9 de nous concentrer sur les types cause racine autant que possible car ils sont plus logiques pour fournir des conseils d'identification et de rem\u00e9diation. Se concentrer sur la cause racine plut\u00f4t que le sympt\u00f4me n'est pas un concept nouveau ; le Top 10 a \u00e9t\u00e9 un m\u00e9lange de sympt\u00f4mes et de causes racines . Les CWEs le sont \u00e9galement ; nous faisons ce choix d\u00e9lib\u00e9r\u00e9ment et lan\u00e7ons un appel \u00e0 ce sujet. Il y a une moyenne de 19,6 CWEs par cat\u00e9gorie dans cette \u00e9dition, avec un minimum d'1 CWE pour A10:2021-Falsification de requ\u00eate c\u00f4t\u00e9 serveur et un maximum de 40 CWEs pour A04:2021-Conception non s\u00e9curis\u00e9e . Cette nouvelle organisation de cat\u00e9gories apporte des avantages pour les formations, les soci\u00e9t\u00e9s peuvent se concentrer sur les CWEs les plus pertinentes pour un langage ou un framework.","title":"Comment les cat\u00e9gories sont structur\u00e9es"},{"location":"fr/#comment-les-donnees-ont-ete-utilisees-pour-selectionner-les-categories","text":"En 2017, nous avons s\u00e9lectionn\u00e9 les cat\u00e9gories \u00e0 partir du taux d'incidence pour d\u00e9terminer la probabilit\u00e9, puis les avons class\u00e9es via des discussions en \u00e9quipe bas\u00e9es sur des d\u00e9cennies d'exp\u00e9rience sur des crit\u00e8res d' Exploitabilit\u00e9 , D\u00e9tectabilit\u00e9 (\u00e9galement probabilit\u00e9 ) et Impact technique . Pour 2021, nous souhaitons, si possible, utiliser des donn\u00e9es pour Exploitabilit\u00e9 et Impact (technique) . Nous avons t\u00e9l\u00e9charg\u00e9 OWASP Dependency Check et extrait les scores CVSS d'exploitabilit\u00e9 et d'impact agr\u00e9g\u00e9s par CWE connexes. Cela a n\u00e9cessit\u00e9 un temps de recherche significatif, car toutes les CVEs ont un score CVSSv2, mais celui-ci poss\u00e8de des d\u00e9fauts que CVSSv3 devrait corriger. Apr\u00e8s un certain temps, toutes les CVEs re\u00e7oivent \u00e9galement un score CVSSv3. De plus, les plages de notation et les formules ont \u00e9t\u00e9 mises-\u00e0-jour entre CVSSv2 et CVSSv3. En CVSSv2, Exploitabilit\u00e9 et Impact (technique) peuvent atteindre 10, mais la formule les ram\u00e8ne \u00e0 60 % pour Exploitabilit\u00e9 et 40 % pour Impact . En CVSSv3, le maximum th\u00e9orique est limit\u00e9 \u00e0 6,0 pour Exploitabilit\u00e9 et 4,0 pour Impact . Avec la pond\u00e9ration prise en compte, le score d'impact a augment\u00e9, de pr\u00e8s d'un point et demi en moyenne dans CVSSv3, et l'exploitabilit\u00e9 a baiss\u00e9 de pr\u00e8s d'un demi-point en moyenne. Il y a 125 000 enregistrements d'une CVE associ\u00e9e \u00e0 une CWE dans les donn\u00e9es de la National Vunerability Database (NVD) extraites d'OWASP Dependency Check, et il y a 241 CWE uniques associ\u00e9es \u00e0 une CVE. 62 000 enregistrements ont un score CVSSv3, ce qui repr\u00e9sente environ la moiti\u00e9 des donn\u00e9es. Pour le Top Ten 2021, nous avons calcul\u00e9 les scores moyens d' exploitabilit\u00e9 et d' impact de la mani\u00e8re suivante. Nous avons regroup\u00e9 toutes les CVEs avec des scores CVSS par CWE et pond\u00e9r\u00e9 \u00e0 la fois exploitabilit\u00e9 et impact not\u00e9s par le pourcentage de la population qui disposait d'un score CVSSv3, plus la population restante de scores CVSSv2 pour obtenir une moyenne globale. Nous avons associ\u00e9 ces moyennes aux CWEs de l'ensemble de donn\u00e9es \u00e0 utiliser comme notes d' Exploitabilit\u00e9 et d' Impact (technique) pour l'autre moiti\u00e9 de l'\u00e9quation de risque.","title":"Comment les donn\u00e9es ont \u00e9t\u00e9 utilis\u00e9es pour s\u00e9lectionner les cat\u00e9gories"},{"location":"fr/#pourquoi-ne-pas-se-reposer-uniquement-sur-des-donnees-statistiques","text":"Les r\u00e9sultats obtenus \u00e0 partir des donn\u00e9es sont principalement limit\u00e9s \u00e0 ce que nous pouvons tester de mani\u00e8re automatis\u00e9e. Parlez \u00e0 un professionnel chevronn\u00e9 de la s\u00e9curit\u00e9, il vous parlera de ce qu'il trouve et des tendances qu'il observe qui ne sont pas encore dans les donn\u00e9es. Il faut du temps aux gens pour d\u00e9velopper des m\u00e9thodologies de test pour certains types de vuln\u00e9rabilit\u00e9s, puis plus de temps pour que ces tests soient automatis\u00e9s et ex\u00e9cut\u00e9s sur un grand nombre d'applications. Tout ce que nous trouvons sont des vestiges du pass\u00e9 qui pourraient manquer les tendances de l'ann\u00e9e \u00e9coul\u00e9e, qui ne sont pas pr\u00e9sentes dans les donn\u00e9es. Par cons\u00e9quent, nous ne s\u00e9lectionnons que huit cat\u00e9gories sur dix \u00e0 partir des donn\u00e9es, car elles sont incompl\u00e8tes. Les deux autres cat\u00e9gories proviennent de l'enqu\u00eate communautaire Top 10. Cela permet aux praticiens en premi\u00e8re ligne de voter pour ce qu'ils consid\u00e8rent comme les risques les plus \u00e9lev\u00e9s qui pourraient ne pas \u00eatre repr\u00e9sent\u00e9s par les donn\u00e9es (et qui pourraient ne jamais \u00eatre exprim\u00e9s par les donn\u00e9es).","title":"Pourquoi ne pas se reposer uniquement sur des donn\u00e9es statistiques ?"},{"location":"fr/#pourquoi-le-taux-dincidence-au-lieu-de-la-frequence","text":"Il y a trois sources principales de donn\u00e9es. Nous les identifions comme \u00e9tant l'outillage assist\u00e9 par l'homme (OaH), l'homme assist\u00e9 par l'outil (HaO) et l'outillage brut. L'outillage et l'OaH sont des g\u00e9n\u00e9rateurs de recherche \u00e0 haute fr\u00e9quence. Les outils cherchent des vuln\u00e9rabilit\u00e9s sp\u00e9cifiques, tentent inlassablement de trouver chaque instance de cette vuln\u00e9rabilit\u00e9 et g\u00e9n\u00e8rent un nombre \u00e9lev\u00e9 de d\u00e9couvertes pour certains types de vuln\u00e9rabilit\u00e9. Prenez Cross-Site Scripting , qui est g\u00e9n\u00e9ralement l'une de ces deux variantes : il s'agit soit d'une erreur mineure et isol\u00e9e, soit d'un probl\u00e8me syst\u00e9mique. Lorsqu'il s'agit d'un probl\u00e8me syst\u00e9mique, le nombre de constations peut se chiffrer par milliers pour une seule application. Cette fr\u00e9quence \u00e9lev\u00e9e noie la plupart des autres vuln\u00e9rabilit\u00e9s trouv\u00e9es dans les rapports ou les donn\u00e9es. L'HaO, d'autre part, trouvera une gamme plus large de types de vuln\u00e9rabilit\u00e9s mais \u00e0 une fr\u00e9quence beaucoup plus faible en raison de contraintes de temps. Lorsque les humains testent une application et d\u00e9tectent une vuln\u00e9rabilit\u00e9 comme Cross-Site Scripting , ils trouveront g\u00e9n\u00e9ralement trois ou quatre instances et s'arr\u00eateront. Ils peuvent d\u00e9terminer une d\u00e9couverte syst\u00e9mique et la r\u00e9diger avec une recommandation \u00e0 corriger \u00e0 l'\u00e9chelle de l'application. Il n'y a pas de besoin (ou de temps) de trouver chaque instance. Supposons que nous prenions ces deux ensembles de donn\u00e9es distincts et essayions de les fusionner en se basant sur la fr\u00e9quence. Dans ce cas, les donn\u00e9es d'outillage et d'OaH noieront les donn\u00e9es HaO plus pr\u00e9cises (mais plus larges) et expliquent en grande partie pourquoi une cat\u00e9gorie comme Cross-Site Scripting a \u00e9t\u00e9 si bien class\u00e9e dans de nombreuses listes alors que l'impact est g\u00e9n\u00e9ralement faible \u00e0 mod\u00e9r\u00e9. C'est \u00e0 cause du volume consid\u00e9rable de r\u00e9sultats. Le Cross-Site Scripting est \u00e9galement assez facile \u00e0 tester, il y a donc beaucoup plus de tests pour cela. En 2017, nous avons introduit le taux d'incidence pour jeter un nouveau regard sur les donn\u00e9es et fusionner proprement les donn\u00e9es d'outillage et d'OaH avec les donn\u00e9es d'HaO. Le taux d'incidence demande quel pourcentage de la population d'applications avait au moins une instance d'un type de vuln\u00e9rabilit\u00e9. Peu nous importe si c'\u00e9tait ponctuel ou syst\u00e9mique. Ce n'est pas pertinent pour nos fins ; nous avons seulement besoin de savoir combien d'applications ont eu au moins une instance, ce qui permet de fournir une vue plus claire des r\u00e9sultats des tests sur plusieurs types de tests sans noyer les donn\u00e9es dans des r\u00e9sultats \u00e0 haute fr\u00e9quence. Cela correspond \u00e0 une vue li\u00e9e au risque, car un attaquant n'a besoin que d'une seule instance pour attaquer une application avec succ\u00e8s via la cat\u00e9gorie.","title":"Pourquoi le taux d'incidence au lieu de la fr\u00e9quence ?"},{"location":"fr/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order.","title":"What is your data collection and analysis process?"},{"location":"fr/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"fr/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"fr/#thank-you-to-our-sponsor","text":"The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Thank you to our sponsor"},{"location":"fr/0x00-notice/","text":"Release \u2693\ufe0e Released 24th September 2021 Lead Authors \u2693\ufe0e Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet ) Contributors \u2693\ufe0e Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination How you can help \u2693\ufe0e At this stage, we are asking for Data scientists - please peer review our analysis Web designers - we need to make a mobile friendly version Translators - please review the English text to make sure it's translatable ASVS, Testing Guide, and Code Review Guide leadership - please use our data and help us link our documents and standards together Log issues and pull requests \u2693\ufe0e Please log any corrections or issues: https://github.com/OWASP/Top10/issues","title":"Notice"},{"location":"fr/0x00-notice/#release","text":"Released 24th September 2021","title":"Release"},{"location":"fr/0x00-notice/#lead-authors","text":"Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet )","title":"Lead Authors"},{"location":"fr/0x00-notice/#contributors","text":"Orange Tsai @orange_8361 , Author of A10-2021: Server Side Request Forgery Jim Manico @manicode and Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination","title":"Contributors"},{"location":"fr/0x00-notice/#how-you-can-help","text":"At this stage, we are asking for Data scientists - please peer review our analysis Web designers - we need to make a mobile friendly version Translators - please review the English text to make sure it's translatable ASVS, Testing Guide, and Code Review Guide leadership - please use our data and help us link our documents and standards together","title":"How you can help"},{"location":"fr/0x00-notice/#log-issues-and-pull-requests","text":"Please log any corrections or issues: https://github.com/OWASP/Top10/issues","title":"Log issues and pull requests"},{"location":"fr/A00-about-owasp/","text":"About OWASP \u2693\ufe0e The Open Web Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications and APIs that can be trusted. At OWASP, you'll find free and open: Application security tools and standards Cutting edge research Standard security controls and libraries Complete books on application security testing, secure code development, and secure code review Presentations and videos Cheat sheets on many common topics Chapters meetings Events, training, and conferences . Google Groups Learn more at: https://www.owasp.org . All OWASP tools, documents, videos, presentations, and chapters are free and open to anyone interested in improving application security. We advocate approaching application security as a people, process, and technology problem, because the most effective approaches to application security require improvements in these areas. OWASP is a new kind of organization. Our freedom from commercial pressures allows us to provide unbiased, practical, and cost-effective information about application security. OWASP is not affiliated with any technology company, although we support the informed use of commercial security technology. OWASP produces many types of materials in a collaborative, transparent, and open way. The OWASP Foundation is the non-profit entity that ensures the project's long-term success. Almost everyone associated with OWASP is a volunteer, including the OWASP board, chapter leaders, project leaders, and project members. We support innovative security research with grants and infrastructure. Come join us! Copyright and License \u2693\ufe0e Copyright \u00a9 2003-2021 The OWASP\u2122 Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"\u00c0 propos de l'OWASP"},{"location":"fr/A00-about-owasp/#about-owasp","text":"The Open Web Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications and APIs that can be trusted. At OWASP, you'll find free and open: Application security tools and standards Cutting edge research Standard security controls and libraries Complete books on application security testing, secure code development, and secure code review Presentations and videos Cheat sheets on many common topics Chapters meetings Events, training, and conferences . Google Groups Learn more at: https://www.owasp.org . All OWASP tools, documents, videos, presentations, and chapters are free and open to anyone interested in improving application security. We advocate approaching application security as a people, process, and technology problem, because the most effective approaches to application security require improvements in these areas. OWASP is a new kind of organization. Our freedom from commercial pressures allows us to provide unbiased, practical, and cost-effective information about application security. OWASP is not affiliated with any technology company, although we support the informed use of commercial security technology. OWASP produces many types of materials in a collaborative, transparent, and open way. The OWASP Foundation is the non-profit entity that ensures the project's long-term success. Almost everyone associated with OWASP is a volunteer, including the OWASP board, chapter leaders, project leaders, and project members. We support innovative security research with grants and infrastructure. Come join us!","title":"About OWASP"},{"location":"fr/A00-about-owasp/#copyright-and-license","text":"Copyright \u00a9 2003-2021 The OWASP\u2122 Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"Copyright and License"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/","text":"How to start an AppSec Program with the OWASP Top 10 \u2693\ufe0e Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient. Stage 1. Identify the gaps and goals of your appsec program \u2693\ufe0e Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts. Stage 2. Plan for a paved road secure development lifecycle \u2693\ufe0e Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business. Stage 3. Implement the paved road with your development teams \u2693\ufe0e Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days. Stage 4. Migrate all upcoming and existing applications to the paved road \u2693\ufe0e Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly. Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10 \u2693\ufe0e Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better start using a library that is known safe against injection. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar. Stage 6. Build your program into a mature AppSec program \u2693\ufe0e You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level. Going beyond \u2693\ufe0e All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"Comment d\u00e9marrer un programme AppSec avec le Top 10 OWASP"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#how-to-start-an-appsec-program-with-the-owasp-top-10","text":"Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient.","title":"How to start an AppSec Program with the OWASP Top 10"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-1-identify-the-gaps-and-goals-of-your-appsec-program","text":"Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts.","title":"Stage 1. Identify the gaps and goals of your appsec program"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-2-plan-for-a-paved-road-secure-development-lifecycle","text":"Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business.","title":"Stage 2. Plan for a paved road secure development lifecycle"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-3-implement-the-paved-road-with-your-development-teams","text":"Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days.","title":"Stage 3. Implement the paved road with your development teams"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-4-migrate-all-upcoming-and-existing-applications-to-the-paved-road","text":"Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly.","title":"Stage 4. Migrate all upcoming and existing applications to the paved road"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-5-test-that-the-paved-road-has-mitigated-the-issues-found-in-the-owasp-top-10","text":"Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better start using a library that is known safe against injection. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar.","title":"Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-6-build-your-program-into-a-mature-appsec-program","text":"You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level.","title":"Stage 6. Build your program into a mature AppSec program"},{"location":"fr/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#going-beyond","text":"All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"Going beyond"},{"location":"fr/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/","text":"How to use the OWASP Top 10 as a standard \u2693\ufe0e The OWASP Top 10 is primarily an awareness document. However, this has not stopped organizations using it as a de facto industry AppSec standard since its inception in 2003. If you want to use the OWASP Top 10 as a coding or testing standard, know that it is the bare minimum and just a starting point. One of the difficulties of using the OWASP Top 10 as a standard is that we document appsec risks, and not necessarily easily testable issues. For example, A04:2021-Insecure Design is beyond the scope of most forms of testing. Another example is testing in place, in use, and effective logging and monitoring can only be done with interviews and requesting a sampling of effective incident responses. A static code analysis tool can look for the absence of logging, but it might be impossible to determine if business logic or access control is logging critical security breaches. Penetration testers may only be able to determine that they have invoked incident response in a test environment, which are rarely monitored in the same way as production. Here are our recommendations for when it is appropriate to use the OWASP Top 10: Use Case OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Yes Training Entry level Comprehensive Design and architecture Occasionally Yes Coding standard Bare minimum Yes Secure Code review Bare minimum Yes Peer review checklist Bare minimum Yes Unit testing Occasionally Yes Integration testing Occasionally Yes Penetration testing Bare minimum Yes Tool support Bare minimum Yes Secure Supply Chain Occasionally Yes We would encourage anyone wanting to adopt an application security standard to use the OWASP Application Security Verification Standard ( ASVS ), as it\u2019s designed to be verifiable and tested, and can be used in all parts of a secure development lifecycle. The ASVS is the only acceptable choice for tool vendors. Tools cannot comprehensively detect, test, or protect against the OWASP Top 10 due to the nature of several of the OWASP Top 10 risks, with reference to A04:2021-Insecure Design. OWASP discourages any claims of full coverage of the OWASP Top 10, because it\u2019s simply untrue.","title":"Comment utiliser le Top 10 OWASP comme standard"},{"location":"fr/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#how-to-use-the-owasp-top-10-as-a-standard","text":"The OWASP Top 10 is primarily an awareness document. However, this has not stopped organizations using it as a de facto industry AppSec standard since its inception in 2003. If you want to use the OWASP Top 10 as a coding or testing standard, know that it is the bare minimum and just a starting point. One of the difficulties of using the OWASP Top 10 as a standard is that we document appsec risks, and not necessarily easily testable issues. For example, A04:2021-Insecure Design is beyond the scope of most forms of testing. Another example is testing in place, in use, and effective logging and monitoring can only be done with interviews and requesting a sampling of effective incident responses. A static code analysis tool can look for the absence of logging, but it might be impossible to determine if business logic or access control is logging critical security breaches. Penetration testers may only be able to determine that they have invoked incident response in a test environment, which are rarely monitored in the same way as production. Here are our recommendations for when it is appropriate to use the OWASP Top 10: Use Case OWASP Top 10 2021 OWASP Application Security Verification Standard Awareness Yes Training Entry level Comprehensive Design and architecture Occasionally Yes Coding standard Bare minimum Yes Secure Code review Bare minimum Yes Peer review checklist Bare minimum Yes Unit testing Occasionally Yes Integration testing Occasionally Yes Penetration testing Bare minimum Yes Tool support Bare minimum Yes Secure Supply Chain Occasionally Yes We would encourage anyone wanting to adopt an application security standard to use the OWASP Application Security Verification Standard ( ASVS ), as it\u2019s designed to be verifiable and tested, and can be used in all parts of a secure development lifecycle. The ASVS is the only acceptable choice for tool vendors. Tools cannot comprehensively detect, test, or protect against the OWASP Top 10 due to the nature of several of the OWASP Top 10 risks, with reference to A04:2021-Insecure Design. OWASP discourages any claims of full coverage of the OWASP Top 10, because it\u2019s simply untrue.","title":"How to use the OWASP Top 10 as a standard"},{"location":"fr/A00_2021_Introduction/","text":"Introduction \u2693\ufe0e Welcome to the OWASP Top 10 - 2021 \u2693\ufe0e Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU! What's changed in the Top 10 for 2021 \u2693\ufe0e There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time. Methodology \u2693\ufe0e This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use a community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10. How the categories are structured \u2693\ufe0e A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework. How the data is used for selecting categories \u2693\ufe0e In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation. Why not just pure statistical data? \u2693\ufe0e The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data). Why incidence rate instead of frequency? \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Thank you to our sponsor \u2693\ufe0e The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Introduction"},{"location":"fr/A00_2021_Introduction/#introduction","text":"","title":"Introduction"},{"location":"fr/A00_2021_Introduction/#welcome-to-the-owasp-top-10-2021","text":"Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU!","title":"Welcome to the OWASP Top 10 - 2021"},{"location":"fr/A00_2021_Introduction/#whats-changed-in-the-top-10-for-2021","text":"There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time.","title":"What's changed in the Top 10 for 2021"},{"location":"fr/A00_2021_Introduction/#methodology","text":"This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use a community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10.","title":"Methodology"},{"location":"fr/A00_2021_Introduction/#how-the-categories-are-structured","text":"A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework.","title":"How the categories are structured"},{"location":"fr/A00_2021_Introduction/#how-the-data-is-used-for-selecting-categories","text":"In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation.","title":"How the data is used for selecting categories"},{"location":"fr/A00_2021_Introduction/#why-not-just-pure-statistical-data","text":"The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data).","title":"Why not just pure statistical data?"},{"location":"fr/A00_2021_Introduction/#why-incidence-rate-instead-of-frequency","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category.","title":"Why incidence rate instead of frequency?"},{"location":"fr/A00_2021_Introduction/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order.","title":"What is your data collection and analysis process?"},{"location":"fr/A00_2021_Introduction/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"fr/A00_2021_Introduction/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"fr/A00_2021_Introduction/#thank-you-to-our-sponsor","text":"The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Thank you to our sponsor"},{"location":"fr/A01_2021-Broken_Access_Control/","text":"A01:2021 \u2013 Contr\u00f4les d'acc\u00e8s d\u00e9faillants \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013 Overview \u2693\ufe0e Moving up from the fifth position, 94% of applications were tested for some form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included are CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , and CWE-352: Cross-Site Request Forgery . Description \u2693\ufe0e Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include: Violation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone. Bypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests. Permitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references) Accessing API with missing access controls for POST, PUT and DELETE. Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user. Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation. CORS misconfiguration allows API access from unauthorized/untrusted origins. Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user. How to Prevent \u2693\ufe0e Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata. Except for public resources, deny by default. Implement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage. Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record. Unique application business limit requirements should be enforced by domain models. Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots. Log access control failures, alert admins when appropriate (e.g., repeated failures). Rate limit API and controller access to minimize the harm from automated attack tooling. Stateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highy recommended to follow the OAuth standards to revoke access. Developers and QA staff should include functional access control unit and integration tests. Example Attack Scenarios \u2693\ufe0e Scenario #1: The application uses unverified data in a SQL call that is accessing account information: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); An attacker simply modifies the browser's 'acct' parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo If an unauthenticated user can access either page, it's a flaw. If a non-admin can access the admin page, this is a flaw. References \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access List of Mapped CWEs \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"A01 Contr\u00f4les d'acc\u00e8s d\u00e9faillants"},{"location":"fr/A01_2021-Broken_Access_Control/#a012021-controles-dacces-defaillants","text":"","title":"A01:2021 \u2013 Contr\u00f4les d'acc\u00e8s d\u00e9faillants"},{"location":"fr/A01_2021-Broken_Access_Control/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013","title":"Factors"},{"location":"fr/A01_2021-Broken_Access_Control/#overview","text":"Moving up from the fifth position, 94% of applications were tested for some form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included are CWE-200: Exposure of Sensitive Information to an Unauthorized Actor , CWE-201: Exposure of Sensitive Information Through Sent Data , and CWE-352: Cross-Site Request Forgery .","title":"Overview"},{"location":"fr/A01_2021-Broken_Access_Control/#description","text":"Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include: Violation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone. Bypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests. Permitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references) Accessing API with missing access controls for POST, PUT and DELETE. Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user. Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation. CORS misconfiguration allows API access from unauthorized/untrusted origins. Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user.","title":"Description"},{"location":"fr/A01_2021-Broken_Access_Control/#how-to-prevent","text":"Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata. Except for public resources, deny by default. Implement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage. Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record. Unique application business limit requirements should be enforced by domain models. Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots. Log access control failures, alert admins when appropriate (e.g., repeated failures). Rate limit API and controller access to minimize the harm from automated attack tooling. Stateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highy recommended to follow the OAuth standards to revoke access. Developers and QA staff should include functional access control unit and integration tests.","title":"How to Prevent"},{"location":"fr/A01_2021-Broken_Access_Control/#example-attack-scenarios","text":"Scenario #1: The application uses unverified data in a SQL call that is accessing account information: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); An attacker simply modifies the browser's 'acct' parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account. https://example.com/app/accountInfo?acct=notmyacct Scenario #2: An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo If an unauthenticated user can access either page, it's a flaw. If a non-admin can access the admin page, this is a flaw.","title":"Example Attack Scenarios"},{"location":"fr/A01_2021-Broken_Access_Control/#references","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access","title":"References"},{"location":"fr/A01_2021-Broken_Access_Control/#list-of-mapped-cwes","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"List of Mapped CWEs"},{"location":"fr/A02_2021-Cryptographic_Failures/","text":"A02:2021 \u2013 Cryptographic Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075 Overview \u2693\ufe0e Shifting up one position to #2, previously known as Sensitive Data Exposure , which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included are CWE-259: Use of Hard-coded Password , CWE-327: Broken or Risky Crypto Algorithm , and CWE-331 Insufficient Entropy . Description \u2693\ufe0e The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. Are any old or weak cryptographic algorithms or protocols used either by default or in older code? Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories? Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing? Is the received server certificate and the trust chain properly validated? Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate? Are passwords being used as cryptographic keys in absence of a password base key derivation function? Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability? Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed? Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use? Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks? See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10) How to Prevent \u2693\ufe0e Do the following, at a minimum, and consult the references: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Apply required security controls as per the data classification. Do not use legacy protocols such as FTP and SMTP for transporting sensitive data. Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2. Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key. Always use authenticated encryption instead of just encryption. Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function. Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security. Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 . Verify independently the effectiveness of configuration and settings. Example Attack Scenarios \u2693\ufe0e Scenario #1 : An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text. Scenario #2 : A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer. Scenario #3 : The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted. References \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography List of Mapped CWEs \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"A02 D\u00e9faillances cryptographiques"},{"location":"fr/A02_2021-Cryptographic_Failures/#a022021-cryptographic-failures","text":"","title":"A02:2021 \u2013 Cryptographic Failures"},{"location":"fr/A02_2021-Cryptographic_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075","title":"Factors"},{"location":"fr/A02_2021-Cryptographic_Failures/#overview","text":"Shifting up one position to #2, previously known as Sensitive Data Exposure , which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included are CWE-259: Use of Hard-coded Password , CWE-327: Broken or Risky Crypto Algorithm , and CWE-331 Insufficient Entropy .","title":"Overview"},{"location":"fr/A02_2021-Cryptographic_Failures/#description","text":"The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. Are any old or weak cryptographic algorithms or protocols used either by default or in older code? Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories? Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing? Is the received server certificate and the trust chain properly validated? Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate? Are passwords being used as cryptographic keys in absence of a password base key derivation function? Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability? Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed? Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use? Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks? See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)","title":"Description"},{"location":"fr/A02_2021-Cryptographic_Failures/#how-to-prevent","text":"Do the following, at a minimum, and consult the references: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Apply required security controls as per the data classification. Do not use legacy protocols such as FTP and SMTP for transporting sensitive data. Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2. Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key. Always use authenticated encryption instead of just encryption. Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function. Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security. Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 . Verify independently the effectiveness of configuration and settings.","title":"How to Prevent"},{"location":"fr/A02_2021-Cryptographic_Failures/#example-attack-scenarios","text":"Scenario #1 : An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text. Scenario #2 : A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer. Scenario #3 : The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted.","title":"Example Attack Scenarios"},{"location":"fr/A02_2021-Cryptographic_Failures/#references","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"References"},{"location":"fr/A02_2021-Cryptographic_Failures/#list-of-mapped-cwes","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"List of Mapped CWEs"},{"location":"fr/A03_2021-Injection/","text":"A03:2021 \u2013 Injection \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078 Overview \u2693\ufe0e Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurances. Notable Common Weakness Enumerations (CWEs) included are CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path . Description \u2693\ufe0e An application is vulnerable to attack when: User-supplied data is not validated, filtered, or sanitized by the application. Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include static (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD pipeline to identify introduced injection flaws before production deployment. How to Prevent \u2693\ufe0e Preventing injection requires keeping data separate from commands and queries: The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec(). Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications. For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software. Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection. Example Attack Scenarios \u2693\ufe0e Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Similarly, an application\u2019s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In both cases, the attacker modifies the \u2018id\u2019 parameter value in their browser to send: \u2018 or \u20181\u2019=\u20191. For example: http://example.com/app/accountView?id=' or '1'='1 This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures. References \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection List of Mapped CWEs \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"A03 Injection"},{"location":"fr/A03_2021-Injection/#a032021-injection","text":"","title":"A03:2021 \u2013 Injection"},{"location":"fr/A03_2021-Injection/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078","title":"Factors"},{"location":"fr/A03_2021-Injection/#overview","text":"Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurances. Notable Common Weakness Enumerations (CWEs) included are CWE-79: Cross-site Scripting , CWE-89: SQL Injection , and CWE-73: External Control of File Name or Path .","title":"Overview"},{"location":"fr/A03_2021-Injection/#description","text":"An application is vulnerable to attack when: User-supplied data is not validated, filtered, or sanitized by the application. Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include static (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD pipeline to identify introduced injection flaws before production deployment.","title":"Description"},{"location":"fr/A03_2021-Injection/#how-to-prevent","text":"Preventing injection requires keeping data separate from commands and queries: The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec(). Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications. For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software. Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.","title":"How to Prevent"},{"location":"fr/A03_2021-Injection/#example-attack-scenarios","text":"Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Scenario #2: Similarly, an application\u2019s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); In both cases, the attacker modifies the \u2018id\u2019 parameter value in their browser to send: \u2018 or \u20181\u2019=\u20191. For example: http://example.com/app/accountView?id=' or '1'='1 This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures.","title":"Example Attack Scenarios"},{"location":"fr/A03_2021-Injection/#references","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"References"},{"location":"fr/A03_2021-Injection/#list-of-mapped-cwes","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"List of Mapped CWEs"},{"location":"fr/A04_2021-Insecure_Design/","text":"A04:2021 \u2013 Insecure Design \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691 Overview \u2693\ufe0e A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) include CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials . Description \u2693\ufe0e Insecure design is a broad category representing different weaknesses, expressed as \u201cmissing or ineffective control design.\u201d Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required. Requirements and Resource Management \u2693\ufe0e Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities. Secure Design \u2693\ufe0e Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software. Secure Development Lifecycle \u2693\ufe0e Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the OWASP Software Assurance Maturity Model (SAMM) to help structure your secure software development efforts. How to Prevent \u2693\ufe0e Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls Establish and use a library of secure design patterns or paved road ready to use components Use threat modeling for critical authentication, access control, business logic, and key flows Integrate security language and controls into user stories Integrate plausibility checks at each tier of your application (from frontend to backend) Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases and misuse-cases for each tier of your application. Segregate tier layers on the system and network layers depending on the exposure and protection needs Segregate tenants robustly by design throughout all tiers Limit resource consumption by user or service Example Attack Scenarios \u2693\ufe0e Scenario #1: A credential recovery workflow might include \u201cquestions and answers,\u201d which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design. Scenario #2: A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income. Scenario #3: A retail chain\u2019s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions. References \u2693\ufe0e OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling List of Mapped CWEs \u2693\ufe0e CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"A04 Conception non s\u00e9curis\u00e9e"},{"location":"fr/A04_2021-Insecure_Design/#a042021-insecure-design","text":"","title":"A04:2021 \u2013 Insecure Design"},{"location":"fr/A04_2021-Insecure_Design/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691","title":"Factors"},{"location":"fr/A04_2021-Insecure_Design/#overview","text":"A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) include CWE-209: Generation of Error Message Containing Sensitive Information , CWE-256: Unprotected Storage of Credentials , CWE-501: Trust Boundary Violation , and CWE-522: Insufficiently Protected Credentials .","title":"Overview"},{"location":"fr/A04_2021-Insecure_Design/#description","text":"Insecure design is a broad category representing different weaknesses, expressed as \u201cmissing or ineffective control design.\u201d Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.","title":"Description"},{"location":"fr/A04_2021-Insecure_Design/#requirements-and-resource-management","text":"Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.","title":"Requirements and Resource Management"},{"location":"fr/A04_2021-Insecure_Design/#secure-design","text":"Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.","title":"Secure Design"},{"location":"fr/A04_2021-Insecure_Design/#secure-development-lifecycle","text":"Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the OWASP Software Assurance Maturity Model (SAMM) to help structure your secure software development efforts.","title":"Secure Development Lifecycle"},{"location":"fr/A04_2021-Insecure_Design/#how-to-prevent","text":"Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls Establish and use a library of secure design patterns or paved road ready to use components Use threat modeling for critical authentication, access control, business logic, and key flows Integrate security language and controls into user stories Integrate plausibility checks at each tier of your application (from frontend to backend) Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases and misuse-cases for each tier of your application. Segregate tier layers on the system and network layers depending on the exposure and protection needs Segregate tenants robustly by design throughout all tiers Limit resource consumption by user or service","title":"How to Prevent"},{"location":"fr/A04_2021-Insecure_Design/#example-attack-scenarios","text":"Scenario #1: A credential recovery workflow might include \u201cquestions and answers,\u201d which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design. Scenario #2: A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income. Scenario #3: A retail chain\u2019s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions.","title":"Example Attack Scenarios"},{"location":"fr/A04_2021-Insecure_Design/#references","text":"OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling","title":"References"},{"location":"fr/A04_2021-Insecure_Design/#list-of-mapped-cwes","text":"CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"List of Mapped CWEs"},{"location":"fr/A05_2021-Security_Misconfiguration/","text":"A05:2021 \u2013 Security Misconfiguration \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789 Overview \u2693\ufe0e Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference . Description \u2693\ufe0e The application might be vulnerable if the application is: Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). Default accounts and their passwords are still enabled and unchanged. Error handling reveals stack traces or other overly informative error messages to users. For upgraded systems, the latest security features are disabled or not configured securely. The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. The server does not send security headers or directives, or they are not set to secure values. The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components ). Without a concerted, repeatable application security configuration process, systems are at a higher risk. How to Prevent \u2693\ufe0e Secure installation processes should be implemented, including: A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components ). Review cloud storage permissions (e.g., S3 bucket permissions). A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). Sending security directives to clients, e.g., Security Headers. An automated process to verify the effectiveness of the configurations and settings in all environments. Example Attack Scenarios \u2693\ufe0e Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. Scenario #4: A cloud service provider (CSP) has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed. References \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V14 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration List of Mapped CWEs \u2693\ufe0e CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"A05 Mauvaise configuration de s\u00e9curit\u00e9"},{"location":"fr/A05_2021-Security_Misconfiguration/#a052021-security-misconfiguration","text":"","title":"A05:2021 \u2013 Security Misconfiguration"},{"location":"fr/A05_2021-Security_Misconfiguration/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789","title":"Factors"},{"location":"fr/A05_2021-Security_Misconfiguration/#overview","text":"Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference .","title":"Overview"},{"location":"fr/A05_2021-Security_Misconfiguration/#description","text":"The application might be vulnerable if the application is: Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). Default accounts and their passwords are still enabled and unchanged. Error handling reveals stack traces or other overly informative error messages to users. For upgraded systems, the latest security features are disabled or not configured securely. The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. The server does not send security headers or directives, or they are not set to secure values. The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components ). Without a concerted, repeatable application security configuration process, systems are at a higher risk.","title":"Description"},{"location":"fr/A05_2021-Security_Misconfiguration/#how-to-prevent","text":"Secure installation processes should be implemented, including: A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components ). Review cloud storage permissions (e.g., S3 bucket permissions). A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). Sending security directives to clients, e.g., Security Headers. An automated process to verify the effectiveness of the configurations and settings in all environments.","title":"How to Prevent"},{"location":"fr/A05_2021-Security_Misconfiguration/#example-attack-scenarios","text":"Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. Scenario #4: A cloud service provider (CSP) has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed.","title":"Example Attack Scenarios"},{"location":"fr/A05_2021-Security_Misconfiguration/#references","text":"OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V14 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration","title":"References"},{"location":"fr/A05_2021-Security_Misconfiguration/#list-of-mapped-cwes","text":"CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"List of Mapped CWEs"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/","text":"A06:2021 \u2013 Vulnerable and Outdated Components \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 Overview \u2693\ufe0e It was #2 from the Top 10 community survey but also had enough data to make the Top 10 via data. Vulnerable Components are a known issue that we struggle to test and assess risk and is the only category to not have any Common Weakness Enumerations (CWEs) mapped to the included CWEs, so a default exploits/impact weight of 5.0 is used. Notable CWEs included are CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017. Description \u2693\ufe0e You are likely vulnerable: If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities. If software developers do not test the compatibility of updated, upgraded, or patched libraries. If you do not secure the components\u2019 configurations (see A05:2021-Security Misconfiguration). How to Prevent \u2693\ufe0e There should be a patch management process in place to: Remove unused dependencies, unnecessary features, components, files, and documentation. Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use. Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures). Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue. Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio. Example Attack Scenarios \u2693\ufe0e Scenario #1: Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are: CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches. While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices). There are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014. References \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf List of Mapped CWEs \u2693\ufe0e CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"A06 Composants vuln\u00e9rables et obsol\u00e8tes"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#a062021-vulnerable-and-outdated-components","text":"","title":"A06:2021 \u2013 Vulnerable and Outdated Components"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"Factors"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#overview","text":"It was #2 from the Top 10 community survey but also had enough data to make the Top 10 via data. Vulnerable Components are a known issue that we struggle to test and assess risk and is the only category to not have any Common Weakness Enumerations (CWEs) mapped to the included CWEs, so a default exploits/impact weight of 5.0 is used. Notable CWEs included are CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017.","title":"Overview"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#description","text":"You are likely vulnerable: If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities. If software developers do not test the compatibility of updated, upgraded, or patched libraries. If you do not secure the components\u2019 configurations (see A05:2021-Security Misconfiguration).","title":"Description"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#how-to-prevent","text":"There should be a patch management process in place to: Remove unused dependencies, unnecessary features, components, files, and documentation. Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use. Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures). Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue. Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio.","title":"How to Prevent"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#example-attack-scenarios","text":"Scenario #1: Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are: CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches. While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices). There are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014.","title":"Example Attack Scenarios"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#references","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"References"},{"location":"fr/A06_2021-Vulnerable_and_Outdated_Components/#list-of-mapped-cwes","text":"CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"List of Mapped CWEs"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/","text":"A07:2021 \u2013 Identification and Authentication Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897 Overview \u2693\ufe0e Previously known as Broken Authentication , this category slid down from the second position and now includes Common Weakness Enumerations (CWEs) related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation . Description \u2693\ufe0e Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin\". Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures ). Has missing or ineffective multi-factor authentication. Exposes session identifier in the URL. Reuse session identifier after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity. How to Prevent \u2693\ufe0e Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts. Example Attack Scenarios \u2693\ufe0e Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated. References \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets List of Mapped CWEs \u2693\ufe0e CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"A07 Identification et authentification de mauvaise qualit\u00e9"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#a072021-identification-and-authentication-failures","text":"","title":"A07:2021 \u2013 Identification and Authentication Failures"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897","title":"Factors"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#overview","text":"Previously known as Broken Authentication , this category slid down from the second position and now includes Common Weakness Enumerations (CWEs) related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation .","title":"Overview"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#description","text":"Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin\". Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures ). Has missing or ineffective multi-factor authentication. Exposes session identifier in the URL. Reuse session identifier after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.","title":"Description"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#how-to-prevent","text":"Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts.","title":"How to Prevent"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#example-attack-scenarios","text":"Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated.","title":"Example Attack Scenarios"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#references","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"References"},{"location":"fr/A07_2021-Identification_and_Authentication_Failures/#list-of-mapped-cwes","text":"CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"List of Mapped CWEs"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/","text":"A08:2021 \u2013 Software and Data Integrity Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152 Overview \u2693\ufe0e A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data . Description \u2693\ufe0e Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization. How to Prevent \u2693\ufe0e Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data Example Attack Scenarios \u2693\ufe0e Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server. References \u2693\ufe0e [OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent List of Mapped CWEs \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"A08 Manque d'int\u00e9grit\u00e9 des donn\u00e9es et du logiciel"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#a082021-software-and-data-integrity-failures","text":"","title":"A08:2021 \u2013 Software and Data Integrity Failures"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152","title":"Factors"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#overview","text":"A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data .","title":"Overview"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#description","text":"Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization.","title":"Description"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#how-to-prevent","text":"Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data","title":"How to Prevent"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#example-attack-scenarios","text":"Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server.","title":"Example Attack Scenarios"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#references","text":"[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent","title":"References"},{"location":"fr/A08_2021-Software_and_Data_Integrity_Failures/#list-of-mapped-cwes","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"List of Mapped CWEs"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/","text":"A09:2021 \u2013 Security Logging and Monitoring Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242 Overview \u2693\ufe0e Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File . Description \u2693\ufe0e Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ). How to Prevent \u2693\ufe0e Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting. Example Attack Scenarios \u2693\ufe0e Scenario #1: A children's health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator. References \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events List of Mapped CWEs \u2693\ufe0e CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"A09 Carence des syst\u00e8mes de contr\u00f4le et de journalisation"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#a092021-security-logging-and-monitoring-failures","text":"","title":"A09:2021 \u2013 Security Logging and Monitoring Failures"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242","title":"Factors"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#overview","text":"Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File .","title":"Overview"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#description","text":"Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ).","title":"Description"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#how-to-prevent","text":"Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting.","title":"How to Prevent"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#example-attack-scenarios","text":"Scenario #1: A children's health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator.","title":"Example Attack Scenarios"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#references","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"References"},{"location":"fr/A09_2021-Security_Logging_and_Monitoring_Failures/#list-of-mapped-cwes","text":"CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"List of Mapped CWEs"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/","text":"A10:2021 \u2013 Server-Side Request Forgery (SSRF) \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Overview \u2693\ufe0e This category is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of Common Weakness Enumerations (CWEs) for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition. Description \u2693\ufe0e SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures. How to Prevent \u2693\ufe0e Developers can prevent SSRF by implementing some or all the following defense in depth controls: From Network layer \u2693\ufe0e Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic. Hints: ~ Establish an ownership and a lifecycle for firewall rules based on applications. ~ Log all accepted and blocked network flows on firewalls (see A09:2021-Security Logging and Monitoring Failures ). From Application layer: \u2693\ufe0e Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists. Additional Measures to consider: \u2693\ufe0e Don't deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost) For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs Example Attack Scenarios \u2693\ufe0e Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers \u2013 If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure \u2013 Attackers can access local files such as or internal services to gain sensitive information such as file:///etc/passwd</span> and http://localhost:28017/ . Scenario #3: Access metadata storage of cloud services \u2013 Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS). References \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! List of Mapped CWEs \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10 Falsification de requ\u00eate c\u00f4t\u00e9 serveur (SSRF)"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#a102021-server-side-request-forgery-ssrf","text":"","title":"A10:2021 \u2013 Server-Side Request Forgery (SSRF)"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Factors"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#overview","text":"This category is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of Common Weakness Enumerations (CWEs) for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition.","title":"Overview"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#description","text":"SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.","title":"Description"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#how-to-prevent","text":"Developers can prevent SSRF by implementing some or all the following defense in depth controls:","title":"How to Prevent"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#from-network-layer","text":"Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic. Hints: ~ Establish an ownership and a lifecycle for firewall rules based on applications. ~ Log all accepted and blocked network flows on firewalls (see A09:2021-Security Logging and Monitoring Failures ).","title":"From Network layer"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#from-application-layer","text":"Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists.","title":"From Application layer:"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#additional-measures-to-consider","text":"Don't deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost) For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs","title":"Additional Measures to consider:"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#example-attack-scenarios","text":"Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers \u2013 If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure \u2013 Attackers can access local files such as or internal services to gain sensitive information such as file:///etc/passwd</span> and http://localhost:28017/ . Scenario #3: Access metadata storage of cloud services \u2013 Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS).","title":"Example Attack Scenarios"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#references","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"References"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#list-of-mapped-cwes","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"List of Mapped CWEs"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/","text":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF) \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Vis\u00e3o Geral \u2693\ufe0e Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura. Descri\u00e7\u00e3o \u2693\ufe0e As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas. Como Previnir \u2693\ufe0e Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade: Para a Camada de Rede \u2693\ufe0e Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ). Para a Camada de Aplica\u00e7\u00e3o: \u2693\ufe0e Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o. Medidas Adicionais a Considerar: \u2693\ufe0e N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas. Cen\u00e1rio de exemplo de um ataque \u2693\ufe0e Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS). Refer\u00eancias \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista de CWEs mapeadas \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)    ![icon](assets/TOP_10_Icons_Final_SSRF.png)"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#a102021-falsificacao-de-solicitacao-do-lado-do-servidor-ssrf","text":"","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#fatores","text":"CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fatores"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#visao-geral","text":"Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura.","title":"Vis\u00e3o Geral"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#descricao","text":"As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas.","title":"Descri\u00e7\u00e3o"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#como-previnir","text":"Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade:","title":"Como Previnir"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-rede","text":"Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ).","title":"Para a Camada de Rede"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-aplicacao","text":"Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o.","title":"Para a Camada de Aplica\u00e7\u00e3o:"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#medidas-adicionais-a-considerar","text":"N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas.","title":"Medidas Adicionais a Considerar:"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#cenario-de-exemplo-de-um-ataque","text":"Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS).","title":"Cen\u00e1rio de exemplo de um ataque"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#referencias","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Refer\u00eancias"},{"location":"fr/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#lista-de-cwes-mapeadas","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista de CWEs mapeadas"},{"location":"fr/A11_2021-Next_Steps/","text":"A11:2021 \u2013 Next Steps \u2693\ufe0e By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate. Code Quality issues \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References OWASP Code Review Guide Google Code Review Guide Denial of Service \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service Memory Management Errors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of attackers over the years. The attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function\u2019s return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker\u2019s data. References OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"\u00c9tapes suivantes"},{"location":"fr/A11_2021-Next_Steps/#a112021-next-steps","text":"By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate.","title":"A11:2021 \u2013 Next Steps"},{"location":"fr/A11_2021-Next_Steps/#code-quality-issues","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References OWASP Code Review Guide Google Code Review Guide","title":"Code Quality issues"},{"location":"fr/A11_2021-Next_Steps/#denial-of-service","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service","title":"Denial of Service"},{"location":"fr/A11_2021-Next_Steps/#memory-management-errors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of attackers over the years. The attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function\u2019s return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker\u2019s data. References OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"Memory Management Errors"},{"location":"fr/ar/assets/readme/","text":"","title":"Readme"},{"location":"pt_BR/","text":"Introdu\u00e7\u00e3o \u2693\ufe0e Bem-vindo ao OWASP Top 10 - 2021 \u2693\ufe0e Bem-vindo \u00e0 \u00faltima edi\u00e7\u00e3o do OWASP Top 10! O OWASP Top 10 2021 \u00e9 totalmente novo, com um novo design gr\u00e1fico e um infogr\u00e1fico dispon\u00edvel que voc\u00ea pode imprimir ou obter em nossa p\u00e1gina inicial. Um grande obrigado a todos que contribu\u00edram com seu tempo e dados para esta itera\u00e7\u00e3o. Sem voc\u00ea, esta parcela n\u00e3o aconteceria. OBRIGADO . O que mudou no Top 10 para 2021 \u2693\ufe0e Existem tr\u00eas novas categorias, quatro categorias com altera\u00e7\u00f5es em nomenclaturas e escopo, e alguma consolida\u00e7\u00e3o no Top 10 para 2021. A01:2021-Quebra de Controle de Acesso sobe da quinta posi\u00e7\u00e3o; 94% das aplica\u00e7\u00e3o foram testados para alguma forma de controle de acesso quebrado. O 34 CWEs mapeados para Quebra de Controle de Acesso tiveram mais ocorr\u00eancias em aplica\u00e7\u00f5es do que qualquer outra categoria. A02:2021-Falhas Criptogr\u00e1ficas sobe uma posi\u00e7\u00e3o para #2, anteriormente conhecido como Exposi\u00e7\u00e3o de Dados Sens\u00edveis , que era um sintoma amplo em vez de uma causa raiz. O foco renovado aqui est\u00e1 nas falhas relacionadas \u00e0 criptografia, que muitas vezes leva \u00e0 exposi\u00e7\u00e3o de dados confidenciais ou sistema comprometido. A03:2021-Inje\u00e7\u00e3o foi rebaixado para terceira posi\u00e7\u00e3o. 94% das aplica\u00e7\u00f5es foram testadas para alguma forma de inje\u00e7\u00e3o com uma taxa de incid\u00eancia m\u00e1xima de 19%, uma taxa de incid\u00eancia m\u00e9dia de 3,37% e os 33 CWEs mapeados nesta categoria t\u00eam o segundo maior n\u00famero de ocorr\u00eancias em aplica\u00e7\u00f5es, com 274k ocorr\u00eancias. Cross-site Scripting (Scripts Inter-site) agora faz parte desta categoria nesta edi\u00e7\u00e3o. A04:2021-Design Inseguro \u00e9 uma nova categoria para 2021, com foco em riscos relacionados a falhas de projeto. Se quisermos genuinamente \"mover para a esquerda (shift left)\" como setor, precisamos de mais modelagem de amea\u00e7as, padr\u00f5es e princ\u00edpios de design seguros e arquiteturas de refer\u00eancia. Um design inseguro n\u00e3o pode ser corrigido por uma implementa\u00e7\u00e3o perfeita, pois, por defini\u00e7\u00e3o, os controles de seguran\u00e7a necess\u00e1rios nunca foram criados para a defesa contra ataques espec\u00edficos. A05:2021-Configura\u00e7\u00e3o Insegura subiu para sexta posi\u00e7\u00e3o em compara\u00e7\u00e3o a edi\u00e7\u00e3o anterior. 90% dos aplicativos foram testados para alguma conforma de configura\u00e7\u00e3o insegura, com uma taxa de incid\u00eancia m\u00e9dia de 4,5% e mais de 208 mil ocorr\u00eancias de CWEs mapeados para esta categoria de risco. Com mais mudan\u00e7as em software altamente configur\u00e1vel, n\u00e3o \u00e9 surpreendente ver essa categoria subir. A06:2021-Componente Desatualizado e Vulner\u00e1vel foi anteriormente intitulado \"Usar componente com vulnerabilidade conhecida\" e \u00e9 o n\u00famero 2 na pesquisa da comunidade Top 10, mas tamb\u00e9m tinha dados suficientes para chegar ao Top 10 por meio de an\u00e1lise de dados. Esta categoria subiu da 9\u00aa posi\u00e7\u00e3o em 2017 e \u00e9 um problema conhecido que temos dificuldade em testar e avaliar o risco. \u00c9 a \u00fanica categoria a n\u00e3o ter nenhuma Vulnerabilidade e Exposi\u00e7\u00f5es Comuns (CVEs) mapeada para os CWEs inclu\u00eddos, portanto, uma explora\u00e7\u00e3o padr\u00e3o e pesos de impacto de 5,0 s\u00e3o considerados em suas pontua\u00e7\u00f5es. A07:2021-Falha de Identifica\u00e7\u00e3o e Autentica\u00e7\u00e3o era conhecida anteriormente como Falha de Autentica\u00e7\u00e3o e caiu da terceira posi\u00e7\u00e3o para essa, e foram inclu\u00eddas as CWEs que mais se relacionam com as falhas na identifica\u00e7\u00e3o. Essa categoria ainda \u00e9 parte integrante do Top 10, mas a maior disponibilidade de estruturas (frameworks) padronizadas parece estar ajudando a reduzir. A08:2021-Falha na Integridade de Dados e Software \u00e9 uma nova categoria em 2021, focadas em fazer premissas relacionadas a atualiza\u00e7\u00e3o de software, dados cr\u00edticos, e linhas de CI/CD que n\u00e3o verificam a integridade. Um dos maiores pesos dos dados nessa categoria s\u00e3o CVE/CVSS mapeados para os 10 CWEs nesta categoria. A categoria A8:2017-Desserializa\u00e7\u00e3o Insegura agora faz parte dessa categoria. A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a anteriormente chamado de A10:2017-Registro e Monitoramentos Insuficientes e foi adicionado pela pesquisa da comunidade de Top 10, ficando em terceiro lugar, passando da 10\u00b0 posi\u00e7\u00e3o anterior. Essa categoria foi expandida para incluir um maior n\u00famero de falhas, sendo um desafio para testar e n\u00e3o est\u00e1 bem representada nos dados de CVE/CVSS. No entanto falhas nessa categoria podem impactar diretamente a visibilidade, o alerta de incidente e a per\u00edcia. A10:2021-Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor foi adicionada a partir da pesquisa da comunidade, sendo a primeira da classifica\u00e7\u00e3o. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia, junto com classifica\u00e7\u00f5es acima da m\u00e9dia para potencial de explora\u00e7\u00e3o e impacto. Esta categoria representa o cen\u00e1rio em que os membros da comunidade de seguran\u00e7a est\u00e3o nos dizendo que isso \u00e9 importante, embora n\u00e3o esteja ilustrado nos dados neste momento. Metodologia \u2693\ufe0e Esta edi\u00e7\u00e3o do Top 10 \u00e9 mais baseada em dados do que nunca, mas n\u00e3o cegamente baseada em dados. Selecionamos oito das dez categorias de dados fornecidos e duas categorias da pesquisa da comunidade Top 10 em um alto n\u00edvel. Fazemos isso por uma raz\u00e3o fundamental: olhar para os dados de contribui\u00e7\u00e3o \u00e9 olhar para o passado. Os pesquisadores do seguran\u00e7a de aplica\u00e7\u00e3o levam tempo para encontrar novas vulnerabilidades e novas maneiras de test\u00e1-las. Leva tempo para integrar esses testes em ferramentas e processos. No momento em que podemos testar com seguran\u00e7a uma fraqueza em escala, provavelmente j\u00e1 se passaram anos. Para equilibrar essa vis\u00e3o, usamos uma pesquisa da comunidade para perguntar a especialistas em seguran\u00e7a e desenvolvimento de aplicativos na linha de frente o que eles veem como fraquezas essenciais que os dados podem n\u00e3o mostrar ainda. Existem algumas mudan\u00e7as cr\u00edticas que adotamos para continuar a amadurecer o Top 10. Como as categorias s\u00e3o estruturadas \u2693\ufe0e Os esfor\u00e7os anteriores de coleta de dados concentraram-se em um subconjunto prescrito de aproximadamente 30 CWEs com um campo solicitando descobertas adicionais. Aprendemos que as organiza\u00e7\u00f5es se concentrariam principalmente nesses 30 CWEs e raramente acrescentariam outros CWEs que vissem. Nesta itera\u00e7\u00e3o, n\u00f3s abrimos e apenas pedimos os dados, sem restri\u00e7\u00e3o de CWEs. Pedimos o n\u00famero de aplicativos testados para um determinado ano (come\u00e7ando em 2017) e o n\u00famero de aplicativos com pelo menos uma inst\u00e2ncia de um CWE encontrado em teste. Esse formato nos permite rastrear a preval\u00eancia de cada CWE na popula\u00e7\u00e3o de aplicativos. Ignoramos a frequ\u00eancia para nossos prop\u00f3sitos; embora possa ser necess\u00e1rio para outras situa\u00e7\u00f5es, ele apenas oculta a preval\u00eancia real na popula\u00e7\u00e3o de aplica\u00e7\u00e3o. Se um aplicativo tem quatro inst\u00e2ncias de um CWE ou 4.000 inst\u00e2ncias n\u00e3o faz parte do c\u00e1lculo para os 10 principais. Passamos de aproximadamente 30 CWEs para quase 400 CWEs para analisar no conjunto de dados. Planejamos fazer an\u00e1lises de dados adicionais como um suplemento no futuro. Este aumento significativo no n\u00famero de CWEs exige mudan\u00e7as na forma como as categorias s\u00e3o estruturadas. Passamos v\u00e1rios meses agrupando e categorizando os CWEs e poder\u00edamos ter continuado por mais tempo. Tivemos que parar em algum ponto. Existem os tipos de causa raiz e sintoma dos CWEs, em que os tipos de causa raiz s\u00e3o como \"Falha criptogr\u00e1fica\" e \"Configura\u00e7\u00e3o incorreta\" em contraste com os tipos sintoma como \"Exposi\u00e7\u00e3o de dados confidenciais\" e \"Nega\u00e7\u00e3o de servi\u00e7o\". Decidimos nos concentrar na causa raiz sempre que poss\u00edvel, pois \u00e9 mais l\u00f3gico para fornecer orienta\u00e7\u00e3o de identifica\u00e7\u00e3o e corre\u00e7\u00e3o. Focar na causa raiz em vez do sintoma n\u00e3o \u00e9 um conceito novo; o Top 10 foi uma mistura de sintoma e causa raiz . Os CWEs tamb\u00e9m s\u00e3o uma mistura de sintoma e causa raiz ; estamos simplesmente sendo mais deliberados sobre isso e convocando-o. H\u00e1 uma m\u00e9dia de 19,6 CWEs por categoria nesta parcela, com os limites inferiores e superiores em 1 CWE para A10: 2021-Server-Side Request Forgery (SSRF) a 40 CWEs em A04: 2021-Design inseguro . Essa estrutura de categorias atualizada oferece benef\u00edcios adicionais de treinamento, pois as empresas podem se concentrar em CWEs que fa\u00e7am sentido para uma linguagem/estrutura. Como os dados s\u00e3o usados para selecionar categorias \u2693\ufe0e Em 2017, selecionamos categorias por taxa de incid\u00eancia para determinar a probabilidade e, em seguida, as classificamos em discuss\u00f5es de equipe com base em d\u00e9cadas de experi\u00eancia em Explorabilidade , Detectabilidade (tamb\u00e9m probabilidade ) e Impacto t\u00e9cnico . Para 2021, queremos usar os dados para Explorabilidade e Impacto (t\u00e9cnico) , se poss\u00edvel. Baixamos o OWASP Dependency Check e extra\u00edmos a pontua\u00e7\u00e3o de explora\u00e7\u00e3o do CVSS e as pontua\u00e7\u00f5es de impacto agrupadas por CWEs relacionados. Foi necess\u00e1rio um pouco de pesquisa e esfor\u00e7o, pois todos os CVEs t\u00eam pontua\u00e7\u00f5es CVSSv2, mas h\u00e1 falhas no CVSSv2 que o CVSSv3 deve corrigir. Ap\u00f3s um determinado momento, todos os CVEs tamb\u00e9m recebem uma pontua\u00e7\u00e3o CVSSv3. Al\u00e9m disso, os intervalos de pontua\u00e7\u00e3o e f\u00f3rmulas foram atualizados entre CVSSv2 e CVSSv3. Em CVSSv2, Explora\u00e7\u00e3o e Impacto (T\u00e9cnico) podem ser at\u00e9 10,0, mas a f\u00f3rmula os derrubaria para 60% para Explora\u00e7\u00e3o e 40% para Impacto . No CVSSv3, o m\u00e1ximo te\u00f3rico foi limitado a 6,0 para Explora\u00e7\u00e3o e 4,0 para Impacto . Com a pondera\u00e7\u00e3o considerada, a pontua\u00e7\u00e3o de impacto aumentou, quase um ponto e meio em m\u00e9dia no CVSSv3, e a explorabilidade caiu quase meio ponto abaixo em m\u00e9dia. Existem 125k registros de um CVE mapeado para um CWE nos dados do National Vulnerability Database (NVD) extra\u00eddos do OWASP Dependency Check, e h\u00e1 241 CWEs exclusivos mapeados para um CVE. 62k dos CWEs t\u00eam uma pontua\u00e7\u00e3o CVSSv3, que \u00e9 aproximadamente metade da popula\u00e7\u00e3o do conjunto de dados. Para os dez primeiros 2021, calculamos as pontua\u00e7\u00f5es m\u00e9dias de explora\u00e7\u00e3o e impacto da seguinte maneira. Agrupamos todos os CVEs com pontua\u00e7\u00f5es CVSS por CWE e ponderamos explora\u00e7\u00e3o e impacto marcados pela porcentagem da popula\u00e7\u00e3o que tinha CVSSv3 + a popula\u00e7\u00e3o restante de pontua\u00e7\u00f5es CVSSv2 para obter uma m\u00e9dia geral. Mapeamos essas m\u00e9dias para os CWEs no conjunto de dados para usar como pontua\u00e7\u00e3o Explora\u00e7\u00e3o e Impacto (T\u00e9cnico) para a outra metade da equa\u00e7\u00e3o de risco. Por que n\u00e3o apenas dados puramente estat\u00edsticos? \u2693\ufe0e Os resultados nos dados s\u00e3o limitados principalmente ao que podemos testar de maneira automatizada. Fale com um profissional experiente da seguran\u00e7a de aplica\u00e7\u00f5es, e ele lhe contar\u00e1 sobre as coisas que encontrou e as tend\u00eancias que viu e que ainda n\u00e3o constaram dos dados. Leva tempo para as pessoas desenvolverem metodologias de teste para certos tipos de vulnerabilidade e mais tempo para que esses testes sejam automatizados e executados em uma grande quantidade de aplicativos. Tudo o que encontramos \u00e9 uma retrospectiva e pode estar faltando tend\u00eancias do ano passado, que n\u00e3o est\u00e3o presentes nos dados. Portanto, escolhemos apenas oito das dez categorias dos dados porque est\u00e3o incompletos. As outras duas categorias s\u00e3o da pesquisa da comunidade Top 10. Ele permite que os profissionais nas linhas de frente votem naquilo que consideram os maiores riscos que podem n\u00e3o estar nos dados (e podem nunca ser expressos nos dados). Por que taxa de incid\u00eancia em vez de frequ\u00eancia? \u2693\ufe0e Existem tr\u00eas fontes principais de dados. N\u00f3s os identificamos como Ferramentas Assistidas por Humanos (HaT), Humanos Assistidos por Ferramentas (TaH) e Ferramentas. Ferramentas e HaT s\u00e3o geradores de alta-frequ\u00eancia. As ferramentas procurar\u00e3o vulnerabilidades espec\u00edficas e tentar\u00e3o incansavelmente encontrar todas as inst\u00e2ncias dessa vulnerabilidade, gerando contagens de descobertas altas para alguns tipos de vulnerabilidade. Observe o Cross-Site Scripting, que normalmente \u00e9 um de dois tipos: \u00e9 um erro menor e isolado ou um problema sist\u00eamico. Quando \u00e9 um problema sist\u00eamico, a contagem de descobertas pode chegar \u00e0 casa dos milhares para um \u00fanico aplicativo. Essa alta frequ\u00eancia abafa a maioria das outras vulnerabilidades encontradas em relat\u00f3rios ou dados. TaH, por outro lado, encontrar\u00e1 uma gama mais ampla de tipos de vulnerabilidade, mas em uma frequ\u00eancia muito menor devido a restri\u00e7\u00f5es de tempo. Quando os humanos testam um aplicativo e veem algo como Cross-Site Scripting, eles normalmente encontram tr\u00eas ou quatro inst\u00e2ncias e param. Eles podem determinar um achado sist\u00eamico e escrev\u00ea-lo com uma recomenda\u00e7\u00e3o para corrigir em uma escala de aplicativo. N\u00e3o h\u00e1 necessidade (ou tempo) para encontrar todas as inst\u00e2ncias. Suponha que pegemos esses dois conjuntos de dados distintos e tentemos mescl\u00e1-los na frequ\u00eancia. Nesse caso, os dados de Ferramentas e HaT ir\u00e3o afogar os dados TaH mais precisos (mas amplos) e \u00e9 uma boa parte do motivo pelo qual algo como Cross-Site Scripting foi t\u00e3o bem classificado em muitas listas quando o impacto \u00e9 geralmente de baixo a moderado. \u00c9 por causa do grande volume de descobertas. (Cross-Site Scripting tamb\u00e9m \u00e9 razoavelmente f\u00e1cil de testar, portanto, h\u00e1 muitos outros testes para ele tamb\u00e9m). Em 2017, introduzimos o uso da taxa de incid\u00eancia para dar uma nova olhada nos dados e mesclar os dados de Ferramentas e HaT com os dados TaH. A taxa de incid\u00eancia pergunta qual porcentagem da popula\u00e7\u00e3o do aplicativo tinha pelo menos uma inst\u00e2ncia de um tipo de vulnerabilidade. N\u00e3o nos importamos se foi pontual ou sist\u00eamico. Isso \u00e9 irrelevante para nossos prop\u00f3sitos; s\u00f3 precisamos saber quantos aplicativos tiveram pelo menos uma inst\u00e2ncia, o que ajuda a fornecer uma vis\u00e3o mais clara dos resultados de teste em v\u00e1rios tipos de teste, sem afogar os dados em resultados de alta frequ\u00eancia. Isso corresponde a uma vis\u00e3o relacionada ao risco, pois um invasor precisa de apenas uma inst\u00e2ncia para atacar um aplicativo com \u00eaxito por meio da categoria. Qual \u00e9 o processo de coleta e an\u00e1lise de dados? \u2693\ufe0e Formalizamos o processo de coleta de dados OWASP Top 10 no Open Security Summit em 2017. No OWASP Top 10 l\u00edderes e a comunidade passaram dois dias trabalhando na formaliza\u00e7\u00e3o de um processo transparente de coleta de dados. A edi\u00e7\u00e3o de 2021 \u00e9 a segunda vez que usamos essa metodologia. Publicamos uma chamada de dados atrav\u00e9s dos canais de m\u00eddia social dispon\u00edveis para n\u00f3s. Na p\u00e1gina do Projeto OWASP, listamos os elementos de dados e a estrutura que estamos procurando e como envi\u00e1-los. No projeto GitHub, temos arquivos de exemplo que servem como modelos. Trabalhamos com as organiza\u00e7\u00f5es conforme necess\u00e1rio para ajudar a descobrir a estrutura e o mapeamento para os CWEs. Obtemos dados de organiza\u00e7\u00f5es que est\u00e3o no neg\u00f3cio de ferramentas de teste, programas de recompen\u00e7as de erros (Bug Bounty) e organiza\u00e7\u00f5es que contribuem com dados de teste internos. Assim que tivermos os dados, n\u00f3s os carregamos juntos e executamos uma an\u00e1lise fundamental do que os CWEs mapeiam para as categorias de risco. H\u00e1 sobreposi\u00e7\u00e3o entre alguns CWEs e outros est\u00e3o intimamente relacionados (por exemplo, vulnerabilidades criptogr\u00e1ficas). Quaisquer decis\u00f5es relacionadas aos dados brutos enviados s\u00e3o documentadas e publicadas para serem abertas e transparentes com a forma como normalizamos os dados. Examinamos as oito categorias com as taxas de incid\u00eancia mais altas para inclus\u00e3o no Top 10. Tamb\u00e9m olhamos os resultados da pesquisa da comunidade Top 10 para ver quais j\u00e1 podem estar presentes nos dados. Os dois primeiros votos que ainda n\u00e3o est\u00e3o presentes nos dados ser\u00e3o selecionados para os outros dois lugares no Top 10. Uma vez que todos os dez foram selecionados, aplicamos fatores generalizados para explorabilidade e impacto; para ajudar a classificar os Top 10 2021 em uma ordem baseada no risco. Fatores dos Dados \u2693\ufe0e Existem fatores nos dados listados para cada uma das 10 principais categorias, eis o que eles significam: - CWEs mapeados: o n\u00famero de CWEs mapeados para uma categoria pela equipe dos 10 principais. - Taxa de incid\u00eancia: a taxa de incid\u00eancia \u00e9 a porcentagem de aplicativos vulner\u00e1veis a esse CWE da popula\u00e7\u00e3o testada por essa organiza\u00e7\u00e3o naquele ano. - (Teste) Cobertura: a porcentagem de aplicativos testados por todas as organiza\u00e7\u00f5es para um determinado CWE. - Peso de explora\u00e7\u00e3o: a sub-pontua\u00e7\u00e3o do Explora\u00e7\u00e3o das pontua\u00e7\u00f5es CVSSv2 e CVSSv3 atribu\u00eddas aos CVEs mapeados para CWEs, normalizados e colocados em uma escala de 10 pontos. - Impacto ponderado: a sub-pontua\u00e7\u00e3o de impacto das pontua\u00e7\u00f5es CVSSv2 e CVSSv3 atribu\u00eddas aos CVEs mapeados para CWEs, normalizados e colocados em uma escala de 10 pontos. - Total de ocorr\u00eancias: n\u00famero total de aplicativos encontrados com os CWEs mapeados para uma categoria. - Total de CVEs: n\u00famero total de CVEs no banco de dados NVD que foram mapeados para os CWEs mapeados para uma categoria. Parab\u00e9ns aos fornecedores de dados \u2693\ufe0e As organiza\u00e7\u00f5es a seguir (junto com alguns doadores an\u00f4nimos) gentilmente doaram dados para mais de 500.000 aplicativos para tornar este o maior e mais abrangente conjunto de dados de seguran\u00e7a de aplicativos. Sem voc\u00eas, isso n\u00e3o seria poss\u00edvel. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Obrigado aos nossos patrocinadores \u2693\ufe0e A equipe OWASP Top 10 2021 agradece o apoio financeiro do Secure Code Warrior e Just Eat.","title":"In\u00edcio"},{"location":"pt_BR/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"pt_BR/#bem-vindo-ao-owasp-top-10-2021","text":"Bem-vindo \u00e0 \u00faltima edi\u00e7\u00e3o do OWASP Top 10! O OWASP Top 10 2021 \u00e9 totalmente novo, com um novo design gr\u00e1fico e um infogr\u00e1fico dispon\u00edvel que voc\u00ea pode imprimir ou obter em nossa p\u00e1gina inicial. Um grande obrigado a todos que contribu\u00edram com seu tempo e dados para esta itera\u00e7\u00e3o. Sem voc\u00ea, esta parcela n\u00e3o aconteceria. OBRIGADO .","title":"Bem-vindo ao OWASP Top 10 - 2021"},{"location":"pt_BR/#o-que-mudou-no-top-10-para-2021","text":"Existem tr\u00eas novas categorias, quatro categorias com altera\u00e7\u00f5es em nomenclaturas e escopo, e alguma consolida\u00e7\u00e3o no Top 10 para 2021. A01:2021-Quebra de Controle de Acesso sobe da quinta posi\u00e7\u00e3o; 94% das aplica\u00e7\u00e3o foram testados para alguma forma de controle de acesso quebrado. O 34 CWEs mapeados para Quebra de Controle de Acesso tiveram mais ocorr\u00eancias em aplica\u00e7\u00f5es do que qualquer outra categoria. A02:2021-Falhas Criptogr\u00e1ficas sobe uma posi\u00e7\u00e3o para #2, anteriormente conhecido como Exposi\u00e7\u00e3o de Dados Sens\u00edveis , que era um sintoma amplo em vez de uma causa raiz. O foco renovado aqui est\u00e1 nas falhas relacionadas \u00e0 criptografia, que muitas vezes leva \u00e0 exposi\u00e7\u00e3o de dados confidenciais ou sistema comprometido. A03:2021-Inje\u00e7\u00e3o foi rebaixado para terceira posi\u00e7\u00e3o. 94% das aplica\u00e7\u00f5es foram testadas para alguma forma de inje\u00e7\u00e3o com uma taxa de incid\u00eancia m\u00e1xima de 19%, uma taxa de incid\u00eancia m\u00e9dia de 3,37% e os 33 CWEs mapeados nesta categoria t\u00eam o segundo maior n\u00famero de ocorr\u00eancias em aplica\u00e7\u00f5es, com 274k ocorr\u00eancias. Cross-site Scripting (Scripts Inter-site) agora faz parte desta categoria nesta edi\u00e7\u00e3o. A04:2021-Design Inseguro \u00e9 uma nova categoria para 2021, com foco em riscos relacionados a falhas de projeto. Se quisermos genuinamente \"mover para a esquerda (shift left)\" como setor, precisamos de mais modelagem de amea\u00e7as, padr\u00f5es e princ\u00edpios de design seguros e arquiteturas de refer\u00eancia. Um design inseguro n\u00e3o pode ser corrigido por uma implementa\u00e7\u00e3o perfeita, pois, por defini\u00e7\u00e3o, os controles de seguran\u00e7a necess\u00e1rios nunca foram criados para a defesa contra ataques espec\u00edficos. A05:2021-Configura\u00e7\u00e3o Insegura subiu para sexta posi\u00e7\u00e3o em compara\u00e7\u00e3o a edi\u00e7\u00e3o anterior. 90% dos aplicativos foram testados para alguma conforma de configura\u00e7\u00e3o insegura, com uma taxa de incid\u00eancia m\u00e9dia de 4,5% e mais de 208 mil ocorr\u00eancias de CWEs mapeados para esta categoria de risco. Com mais mudan\u00e7as em software altamente configur\u00e1vel, n\u00e3o \u00e9 surpreendente ver essa categoria subir. A06:2021-Componente Desatualizado e Vulner\u00e1vel foi anteriormente intitulado \"Usar componente com vulnerabilidade conhecida\" e \u00e9 o n\u00famero 2 na pesquisa da comunidade Top 10, mas tamb\u00e9m tinha dados suficientes para chegar ao Top 10 por meio de an\u00e1lise de dados. Esta categoria subiu da 9\u00aa posi\u00e7\u00e3o em 2017 e \u00e9 um problema conhecido que temos dificuldade em testar e avaliar o risco. \u00c9 a \u00fanica categoria a n\u00e3o ter nenhuma Vulnerabilidade e Exposi\u00e7\u00f5es Comuns (CVEs) mapeada para os CWEs inclu\u00eddos, portanto, uma explora\u00e7\u00e3o padr\u00e3o e pesos de impacto de 5,0 s\u00e3o considerados em suas pontua\u00e7\u00f5es. A07:2021-Falha de Identifica\u00e7\u00e3o e Autentica\u00e7\u00e3o era conhecida anteriormente como Falha de Autentica\u00e7\u00e3o e caiu da terceira posi\u00e7\u00e3o para essa, e foram inclu\u00eddas as CWEs que mais se relacionam com as falhas na identifica\u00e7\u00e3o. Essa categoria ainda \u00e9 parte integrante do Top 10, mas a maior disponibilidade de estruturas (frameworks) padronizadas parece estar ajudando a reduzir. A08:2021-Falha na Integridade de Dados e Software \u00e9 uma nova categoria em 2021, focadas em fazer premissas relacionadas a atualiza\u00e7\u00e3o de software, dados cr\u00edticos, e linhas de CI/CD que n\u00e3o verificam a integridade. Um dos maiores pesos dos dados nessa categoria s\u00e3o CVE/CVSS mapeados para os 10 CWEs nesta categoria. A categoria A8:2017-Desserializa\u00e7\u00e3o Insegura agora faz parte dessa categoria. A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a anteriormente chamado de A10:2017-Registro e Monitoramentos Insuficientes e foi adicionado pela pesquisa da comunidade de Top 10, ficando em terceiro lugar, passando da 10\u00b0 posi\u00e7\u00e3o anterior. Essa categoria foi expandida para incluir um maior n\u00famero de falhas, sendo um desafio para testar e n\u00e3o est\u00e1 bem representada nos dados de CVE/CVSS. No entanto falhas nessa categoria podem impactar diretamente a visibilidade, o alerta de incidente e a per\u00edcia. A10:2021-Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor foi adicionada a partir da pesquisa da comunidade, sendo a primeira da classifica\u00e7\u00e3o. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia, junto com classifica\u00e7\u00f5es acima da m\u00e9dia para potencial de explora\u00e7\u00e3o e impacto. Esta categoria representa o cen\u00e1rio em que os membros da comunidade de seguran\u00e7a est\u00e3o nos dizendo que isso \u00e9 importante, embora n\u00e3o esteja ilustrado nos dados neste momento.","title":"O que mudou no Top 10 para 2021"},{"location":"pt_BR/#metodologia","text":"Esta edi\u00e7\u00e3o do Top 10 \u00e9 mais baseada em dados do que nunca, mas n\u00e3o cegamente baseada em dados. Selecionamos oito das dez categorias de dados fornecidos e duas categorias da pesquisa da comunidade Top 10 em um alto n\u00edvel. Fazemos isso por uma raz\u00e3o fundamental: olhar para os dados de contribui\u00e7\u00e3o \u00e9 olhar para o passado. Os pesquisadores do seguran\u00e7a de aplica\u00e7\u00e3o levam tempo para encontrar novas vulnerabilidades e novas maneiras de test\u00e1-las. Leva tempo para integrar esses testes em ferramentas e processos. No momento em que podemos testar com seguran\u00e7a uma fraqueza em escala, provavelmente j\u00e1 se passaram anos. Para equilibrar essa vis\u00e3o, usamos uma pesquisa da comunidade para perguntar a especialistas em seguran\u00e7a e desenvolvimento de aplicativos na linha de frente o que eles veem como fraquezas essenciais que os dados podem n\u00e3o mostrar ainda. Existem algumas mudan\u00e7as cr\u00edticas que adotamos para continuar a amadurecer o Top 10.","title":"Metodologia"},{"location":"pt_BR/#como-as-categorias-sao-estruturadas","text":"Os esfor\u00e7os anteriores de coleta de dados concentraram-se em um subconjunto prescrito de aproximadamente 30 CWEs com um campo solicitando descobertas adicionais. Aprendemos que as organiza\u00e7\u00f5es se concentrariam principalmente nesses 30 CWEs e raramente acrescentariam outros CWEs que vissem. Nesta itera\u00e7\u00e3o, n\u00f3s abrimos e apenas pedimos os dados, sem restri\u00e7\u00e3o de CWEs. Pedimos o n\u00famero de aplicativos testados para um determinado ano (come\u00e7ando em 2017) e o n\u00famero de aplicativos com pelo menos uma inst\u00e2ncia de um CWE encontrado em teste. Esse formato nos permite rastrear a preval\u00eancia de cada CWE na popula\u00e7\u00e3o de aplicativos. Ignoramos a frequ\u00eancia para nossos prop\u00f3sitos; embora possa ser necess\u00e1rio para outras situa\u00e7\u00f5es, ele apenas oculta a preval\u00eancia real na popula\u00e7\u00e3o de aplica\u00e7\u00e3o. Se um aplicativo tem quatro inst\u00e2ncias de um CWE ou 4.000 inst\u00e2ncias n\u00e3o faz parte do c\u00e1lculo para os 10 principais. Passamos de aproximadamente 30 CWEs para quase 400 CWEs para analisar no conjunto de dados. Planejamos fazer an\u00e1lises de dados adicionais como um suplemento no futuro. Este aumento significativo no n\u00famero de CWEs exige mudan\u00e7as na forma como as categorias s\u00e3o estruturadas. Passamos v\u00e1rios meses agrupando e categorizando os CWEs e poder\u00edamos ter continuado por mais tempo. Tivemos que parar em algum ponto. Existem os tipos de causa raiz e sintoma dos CWEs, em que os tipos de causa raiz s\u00e3o como \"Falha criptogr\u00e1fica\" e \"Configura\u00e7\u00e3o incorreta\" em contraste com os tipos sintoma como \"Exposi\u00e7\u00e3o de dados confidenciais\" e \"Nega\u00e7\u00e3o de servi\u00e7o\". Decidimos nos concentrar na causa raiz sempre que poss\u00edvel, pois \u00e9 mais l\u00f3gico para fornecer orienta\u00e7\u00e3o de identifica\u00e7\u00e3o e corre\u00e7\u00e3o. Focar na causa raiz em vez do sintoma n\u00e3o \u00e9 um conceito novo; o Top 10 foi uma mistura de sintoma e causa raiz . Os CWEs tamb\u00e9m s\u00e3o uma mistura de sintoma e causa raiz ; estamos simplesmente sendo mais deliberados sobre isso e convocando-o. H\u00e1 uma m\u00e9dia de 19,6 CWEs por categoria nesta parcela, com os limites inferiores e superiores em 1 CWE para A10: 2021-Server-Side Request Forgery (SSRF) a 40 CWEs em A04: 2021-Design inseguro . Essa estrutura de categorias atualizada oferece benef\u00edcios adicionais de treinamento, pois as empresas podem se concentrar em CWEs que fa\u00e7am sentido para uma linguagem/estrutura.","title":"Como as categorias s\u00e3o estruturadas"},{"location":"pt_BR/#como-os-dados-sao-usados-para-selecionar-categorias","text":"Em 2017, selecionamos categorias por taxa de incid\u00eancia para determinar a probabilidade e, em seguida, as classificamos em discuss\u00f5es de equipe com base em d\u00e9cadas de experi\u00eancia em Explorabilidade , Detectabilidade (tamb\u00e9m probabilidade ) e Impacto t\u00e9cnico . Para 2021, queremos usar os dados para Explorabilidade e Impacto (t\u00e9cnico) , se poss\u00edvel. Baixamos o OWASP Dependency Check e extra\u00edmos a pontua\u00e7\u00e3o de explora\u00e7\u00e3o do CVSS e as pontua\u00e7\u00f5es de impacto agrupadas por CWEs relacionados. Foi necess\u00e1rio um pouco de pesquisa e esfor\u00e7o, pois todos os CVEs t\u00eam pontua\u00e7\u00f5es CVSSv2, mas h\u00e1 falhas no CVSSv2 que o CVSSv3 deve corrigir. Ap\u00f3s um determinado momento, todos os CVEs tamb\u00e9m recebem uma pontua\u00e7\u00e3o CVSSv3. Al\u00e9m disso, os intervalos de pontua\u00e7\u00e3o e f\u00f3rmulas foram atualizados entre CVSSv2 e CVSSv3. Em CVSSv2, Explora\u00e7\u00e3o e Impacto (T\u00e9cnico) podem ser at\u00e9 10,0, mas a f\u00f3rmula os derrubaria para 60% para Explora\u00e7\u00e3o e 40% para Impacto . No CVSSv3, o m\u00e1ximo te\u00f3rico foi limitado a 6,0 para Explora\u00e7\u00e3o e 4,0 para Impacto . Com a pondera\u00e7\u00e3o considerada, a pontua\u00e7\u00e3o de impacto aumentou, quase um ponto e meio em m\u00e9dia no CVSSv3, e a explorabilidade caiu quase meio ponto abaixo em m\u00e9dia. Existem 125k registros de um CVE mapeado para um CWE nos dados do National Vulnerability Database (NVD) extra\u00eddos do OWASP Dependency Check, e h\u00e1 241 CWEs exclusivos mapeados para um CVE. 62k dos CWEs t\u00eam uma pontua\u00e7\u00e3o CVSSv3, que \u00e9 aproximadamente metade da popula\u00e7\u00e3o do conjunto de dados. Para os dez primeiros 2021, calculamos as pontua\u00e7\u00f5es m\u00e9dias de explora\u00e7\u00e3o e impacto da seguinte maneira. Agrupamos todos os CVEs com pontua\u00e7\u00f5es CVSS por CWE e ponderamos explora\u00e7\u00e3o e impacto marcados pela porcentagem da popula\u00e7\u00e3o que tinha CVSSv3 + a popula\u00e7\u00e3o restante de pontua\u00e7\u00f5es CVSSv2 para obter uma m\u00e9dia geral. Mapeamos essas m\u00e9dias para os CWEs no conjunto de dados para usar como pontua\u00e7\u00e3o Explora\u00e7\u00e3o e Impacto (T\u00e9cnico) para a outra metade da equa\u00e7\u00e3o de risco.","title":"Como os dados s\u00e3o usados para selecionar categorias"},{"location":"pt_BR/#por-que-nao-apenas-dados-puramente-estatisticos","text":"Os resultados nos dados s\u00e3o limitados principalmente ao que podemos testar de maneira automatizada. Fale com um profissional experiente da seguran\u00e7a de aplica\u00e7\u00f5es, e ele lhe contar\u00e1 sobre as coisas que encontrou e as tend\u00eancias que viu e que ainda n\u00e3o constaram dos dados. Leva tempo para as pessoas desenvolverem metodologias de teste para certos tipos de vulnerabilidade e mais tempo para que esses testes sejam automatizados e executados em uma grande quantidade de aplicativos. Tudo o que encontramos \u00e9 uma retrospectiva e pode estar faltando tend\u00eancias do ano passado, que n\u00e3o est\u00e3o presentes nos dados. Portanto, escolhemos apenas oito das dez categorias dos dados porque est\u00e3o incompletos. As outras duas categorias s\u00e3o da pesquisa da comunidade Top 10. Ele permite que os profissionais nas linhas de frente votem naquilo que consideram os maiores riscos que podem n\u00e3o estar nos dados (e podem nunca ser expressos nos dados).","title":"Por que n\u00e3o apenas dados puramente estat\u00edsticos?"},{"location":"pt_BR/#por-que-taxa-de-incidencia-em-vez-de-frequencia","text":"Existem tr\u00eas fontes principais de dados. N\u00f3s os identificamos como Ferramentas Assistidas por Humanos (HaT), Humanos Assistidos por Ferramentas (TaH) e Ferramentas. Ferramentas e HaT s\u00e3o geradores de alta-frequ\u00eancia. As ferramentas procurar\u00e3o vulnerabilidades espec\u00edficas e tentar\u00e3o incansavelmente encontrar todas as inst\u00e2ncias dessa vulnerabilidade, gerando contagens de descobertas altas para alguns tipos de vulnerabilidade. Observe o Cross-Site Scripting, que normalmente \u00e9 um de dois tipos: \u00e9 um erro menor e isolado ou um problema sist\u00eamico. Quando \u00e9 um problema sist\u00eamico, a contagem de descobertas pode chegar \u00e0 casa dos milhares para um \u00fanico aplicativo. Essa alta frequ\u00eancia abafa a maioria das outras vulnerabilidades encontradas em relat\u00f3rios ou dados. TaH, por outro lado, encontrar\u00e1 uma gama mais ampla de tipos de vulnerabilidade, mas em uma frequ\u00eancia muito menor devido a restri\u00e7\u00f5es de tempo. Quando os humanos testam um aplicativo e veem algo como Cross-Site Scripting, eles normalmente encontram tr\u00eas ou quatro inst\u00e2ncias e param. Eles podem determinar um achado sist\u00eamico e escrev\u00ea-lo com uma recomenda\u00e7\u00e3o para corrigir em uma escala de aplicativo. N\u00e3o h\u00e1 necessidade (ou tempo) para encontrar todas as inst\u00e2ncias. Suponha que pegemos esses dois conjuntos de dados distintos e tentemos mescl\u00e1-los na frequ\u00eancia. Nesse caso, os dados de Ferramentas e HaT ir\u00e3o afogar os dados TaH mais precisos (mas amplos) e \u00e9 uma boa parte do motivo pelo qual algo como Cross-Site Scripting foi t\u00e3o bem classificado em muitas listas quando o impacto \u00e9 geralmente de baixo a moderado. \u00c9 por causa do grande volume de descobertas. (Cross-Site Scripting tamb\u00e9m \u00e9 razoavelmente f\u00e1cil de testar, portanto, h\u00e1 muitos outros testes para ele tamb\u00e9m). Em 2017, introduzimos o uso da taxa de incid\u00eancia para dar uma nova olhada nos dados e mesclar os dados de Ferramentas e HaT com os dados TaH. A taxa de incid\u00eancia pergunta qual porcentagem da popula\u00e7\u00e3o do aplicativo tinha pelo menos uma inst\u00e2ncia de um tipo de vulnerabilidade. N\u00e3o nos importamos se foi pontual ou sist\u00eamico. Isso \u00e9 irrelevante para nossos prop\u00f3sitos; s\u00f3 precisamos saber quantos aplicativos tiveram pelo menos uma inst\u00e2ncia, o que ajuda a fornecer uma vis\u00e3o mais clara dos resultados de teste em v\u00e1rios tipos de teste, sem afogar os dados em resultados de alta frequ\u00eancia. Isso corresponde a uma vis\u00e3o relacionada ao risco, pois um invasor precisa de apenas uma inst\u00e2ncia para atacar um aplicativo com \u00eaxito por meio da categoria.","title":"Por que taxa de incid\u00eancia em vez de frequ\u00eancia?"},{"location":"pt_BR/#qual-e-o-processo-de-coleta-e-analise-de-dados","text":"Formalizamos o processo de coleta de dados OWASP Top 10 no Open Security Summit em 2017. No OWASP Top 10 l\u00edderes e a comunidade passaram dois dias trabalhando na formaliza\u00e7\u00e3o de um processo transparente de coleta de dados. A edi\u00e7\u00e3o de 2021 \u00e9 a segunda vez que usamos essa metodologia. Publicamos uma chamada de dados atrav\u00e9s dos canais de m\u00eddia social dispon\u00edveis para n\u00f3s. Na p\u00e1gina do Projeto OWASP, listamos os elementos de dados e a estrutura que estamos procurando e como envi\u00e1-los. No projeto GitHub, temos arquivos de exemplo que servem como modelos. Trabalhamos com as organiza\u00e7\u00f5es conforme necess\u00e1rio para ajudar a descobrir a estrutura e o mapeamento para os CWEs. Obtemos dados de organiza\u00e7\u00f5es que est\u00e3o no neg\u00f3cio de ferramentas de teste, programas de recompen\u00e7as de erros (Bug Bounty) e organiza\u00e7\u00f5es que contribuem com dados de teste internos. Assim que tivermos os dados, n\u00f3s os carregamos juntos e executamos uma an\u00e1lise fundamental do que os CWEs mapeiam para as categorias de risco. H\u00e1 sobreposi\u00e7\u00e3o entre alguns CWEs e outros est\u00e3o intimamente relacionados (por exemplo, vulnerabilidades criptogr\u00e1ficas). Quaisquer decis\u00f5es relacionadas aos dados brutos enviados s\u00e3o documentadas e publicadas para serem abertas e transparentes com a forma como normalizamos os dados. Examinamos as oito categorias com as taxas de incid\u00eancia mais altas para inclus\u00e3o no Top 10. Tamb\u00e9m olhamos os resultados da pesquisa da comunidade Top 10 para ver quais j\u00e1 podem estar presentes nos dados. Os dois primeiros votos que ainda n\u00e3o est\u00e3o presentes nos dados ser\u00e3o selecionados para os outros dois lugares no Top 10. Uma vez que todos os dez foram selecionados, aplicamos fatores generalizados para explorabilidade e impacto; para ajudar a classificar os Top 10 2021 em uma ordem baseada no risco.","title":"Qual \u00e9 o processo de coleta e an\u00e1lise de dados?"},{"location":"pt_BR/#fatores-dos-dados","text":"Existem fatores nos dados listados para cada uma das 10 principais categorias, eis o que eles significam: - CWEs mapeados: o n\u00famero de CWEs mapeados para uma categoria pela equipe dos 10 principais. - Taxa de incid\u00eancia: a taxa de incid\u00eancia \u00e9 a porcentagem de aplicativos vulner\u00e1veis a esse CWE da popula\u00e7\u00e3o testada por essa organiza\u00e7\u00e3o naquele ano. - (Teste) Cobertura: a porcentagem de aplicativos testados por todas as organiza\u00e7\u00f5es para um determinado CWE. - Peso de explora\u00e7\u00e3o: a sub-pontua\u00e7\u00e3o do Explora\u00e7\u00e3o das pontua\u00e7\u00f5es CVSSv2 e CVSSv3 atribu\u00eddas aos CVEs mapeados para CWEs, normalizados e colocados em uma escala de 10 pontos. - Impacto ponderado: a sub-pontua\u00e7\u00e3o de impacto das pontua\u00e7\u00f5es CVSSv2 e CVSSv3 atribu\u00eddas aos CVEs mapeados para CWEs, normalizados e colocados em uma escala de 10 pontos. - Total de ocorr\u00eancias: n\u00famero total de aplicativos encontrados com os CWEs mapeados para uma categoria. - Total de CVEs: n\u00famero total de CVEs no banco de dados NVD que foram mapeados para os CWEs mapeados para uma categoria.","title":"Fatores dos Dados"},{"location":"pt_BR/#parabens-aos-fornecedores-de-dados","text":"As organiza\u00e7\u00f5es a seguir (junto com alguns doadores an\u00f4nimos) gentilmente doaram dados para mais de 500.000 aplicativos para tornar este o maior e mais abrangente conjunto de dados de seguran\u00e7a de aplicativos. Sem voc\u00eas, isso n\u00e3o seria poss\u00edvel. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Parab\u00e9ns aos fornecedores de dados"},{"location":"pt_BR/#obrigado-aos-nossos-patrocinadores","text":"A equipe OWASP Top 10 2021 agradece o apoio financeiro do Secure Code Warrior e Just Eat.","title":"Obrigado aos nossos patrocinadores"},{"location":"pt_BR/0x00-notice/","text":"Lan\u00e7amento \u2693\ufe0e Lan\u00e7ado em 24 de setembro de 2021 Status atual \u2693\ufe0e Esta vers\u00e3o ser\u00e1 lan\u00e7ada na celebra\u00e7\u00e3o do 20\u00ba anivers\u00e1rio da OWASP. Autores Principais \u2693\ufe0e Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet ) Contribuidores \u2693\ufe0e Orange Tsai - @orange_8361 , Autor de A10-2021: Server Side Request Forgery Jim Manico @manicode e Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination Como voc\u00ea pode ajudar \u2693\ufe0e Nesta fase, estamos pedindo Cientistas de dados - por favor revise por pares nossas an\u00e1lises Web designers - precisamos fazer uma vers\u00e3o amig\u00e1vel para celular Tradutores - reveja o texto em ingl\u00eas para se certificar de que \u00e9 traduz\u00edvel ASVS, Guia de Teste e Lideran\u00e7a do Guia de Revis\u00e3o de C\u00f3digo - utilize nossos dados e nos ajudar a conectar os nossos documentos e padr\u00f5es juntos Registre issues e pull requests \u2693\ufe0e Por favor registra qualquer corre\u00e7\u00e3o ou issues: https://github.com/OWASP/Top10/issues","title":"Notas"},{"location":"pt_BR/0x00-notice/#lancamento","text":"Lan\u00e7ado em 24 de setembro de 2021","title":"Lan\u00e7amento"},{"location":"pt_BR/0x00-notice/#status-atual","text":"Esta vers\u00e3o ser\u00e1 lan\u00e7ada na celebra\u00e7\u00e3o do 20\u00ba anivers\u00e1rio da OWASP.","title":"Status atual"},{"location":"pt_BR/0x00-notice/#autores-principais","text":"Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet )","title":"Autores Principais"},{"location":"pt_BR/0x00-notice/#contribuidores","text":"Orange Tsai - @orange_8361 , Autor de A10-2021: Server Side Request Forgery Jim Manico @manicode e Jakub Ma\u0107kowski @kubamackowski - OWASP CheatSheets Coordination","title":"Contribuidores"},{"location":"pt_BR/0x00-notice/#como-voce-pode-ajudar","text":"Nesta fase, estamos pedindo Cientistas de dados - por favor revise por pares nossas an\u00e1lises Web designers - precisamos fazer uma vers\u00e3o amig\u00e1vel para celular Tradutores - reveja o texto em ingl\u00eas para se certificar de que \u00e9 traduz\u00edvel ASVS, Guia de Teste e Lideran\u00e7a do Guia de Revis\u00e3o de C\u00f3digo - utilize nossos dados e nos ajudar a conectar os nossos documentos e padr\u00f5es juntos","title":"Como voc\u00ea pode ajudar"},{"location":"pt_BR/0x00-notice/#registre-issues-e-pull-requests","text":"Por favor registra qualquer corre\u00e7\u00e3o ou issues: https://github.com/OWASP/Top10/issues","title":"Registre issues e pull requests"},{"location":"pt_BR/A00-about-owasp/","text":"Sobre OWASP \u2693\ufe0e O Open Web Application Security Project (OWASP) \u00e9 uma comunidade aberta dedicada a capacitar as organiza\u00e7\u00f5es a desenvolver, adquirir e manter aplica\u00e7\u00f5es e APIs que podem ser confi\u00e1veis. No OWASP, voc\u00ea encontrar\u00e1: Ferramentas e padr\u00f5es de seguran\u00e7a de aplica\u00e7\u00f5es Pesquisa de ponta Bibliotecas e controles de seguran\u00e7a padr\u00e3o Livros completos sobre testes de seguran\u00e7a de aplica\u00e7\u00f5es, desenvolvimento de c\u00f3digo seguro e revis\u00e3o de c\u00f3digo seguro Apresenta\u00e7\u00f5es e v\u00eddeos Cheat sheets em muitos t\u00f3picos comuns Chapters meetings Eventos, trainamentos e confer\u00eancias . Google Groups Saiba mais em: https://www.owasp.org . Todas as ferramentas, documentos, v\u00eddeos, apresenta\u00e7\u00f5es e cap\u00edtulos do OWASP s\u00e3o gratuitos e abertos a qualquer pessoa interessada em melhorar a seguran\u00e7a de aplica\u00e7\u00f5es. N\u00f3s defendemos a abordagem da seguran\u00e7a de sistemas como um problema de pessoas, processos e tecnologia, porque as abordagens mais eficazes para a seguran\u00e7a de aplicativos requerem melhorias nessas \u00e1reas. OWASP \u00e9 um novo tipo de organiza\u00e7\u00e3o. Nossa liberdade de press\u00f5es comerciais nos permite fornecer informa\u00e7\u00f5es imparciais, pr\u00e1ticas e econ\u00f4micas sobre a seguran\u00e7a de aplica\u00e7\u00f5es. OWASP n\u00e3o \u00e9 afiliado a nenhuma empresa de tecnologia, embora apoie o uso informado de tecnologia de seguran\u00e7a comercial. OWASP produz muitos tipos de materiais de forma colaborativa, transparente e aberta. A Funda\u00e7\u00e3o OWASP \u00e9 a entidade sem fins lucrativos que garante o sucesso do projeto a longo prazo. Quase todos os associados ao OWASP s\u00e3o volunt\u00e1rios, incluindo o conselho do OWASP, l\u00edderes de cap\u00edtulo, l\u00edderes de projeto e membros do projeto. Apoiamos pesquisas inovadoras de seguran\u00e7a com subs\u00eddios e infraestrutura. Junte-se a n\u00f3s! Copyright e Licen\u00e7a \u2693\ufe0e Copyright \u00a9 2003-2021 The OWASP&tm; Foundation. Este documento foi lan\u00e7ado sob o Creative Commons Attribution Share-Alike 4.0 license. Para qualquer reutiliza\u00e7\u00e3o ou distribui\u00e7\u00e3o, voc\u00ea deve deixar claro para os outros os termos de licen\u00e7a desta obra.","title":"Sobre OWASP"},{"location":"pt_BR/A00-about-owasp/#sobre-owasp","text":"O Open Web Application Security Project (OWASP) \u00e9 uma comunidade aberta dedicada a capacitar as organiza\u00e7\u00f5es a desenvolver, adquirir e manter aplica\u00e7\u00f5es e APIs que podem ser confi\u00e1veis. No OWASP, voc\u00ea encontrar\u00e1: Ferramentas e padr\u00f5es de seguran\u00e7a de aplica\u00e7\u00f5es Pesquisa de ponta Bibliotecas e controles de seguran\u00e7a padr\u00e3o Livros completos sobre testes de seguran\u00e7a de aplica\u00e7\u00f5es, desenvolvimento de c\u00f3digo seguro e revis\u00e3o de c\u00f3digo seguro Apresenta\u00e7\u00f5es e v\u00eddeos Cheat sheets em muitos t\u00f3picos comuns Chapters meetings Eventos, trainamentos e confer\u00eancias . Google Groups Saiba mais em: https://www.owasp.org . Todas as ferramentas, documentos, v\u00eddeos, apresenta\u00e7\u00f5es e cap\u00edtulos do OWASP s\u00e3o gratuitos e abertos a qualquer pessoa interessada em melhorar a seguran\u00e7a de aplica\u00e7\u00f5es. N\u00f3s defendemos a abordagem da seguran\u00e7a de sistemas como um problema de pessoas, processos e tecnologia, porque as abordagens mais eficazes para a seguran\u00e7a de aplicativos requerem melhorias nessas \u00e1reas. OWASP \u00e9 um novo tipo de organiza\u00e7\u00e3o. Nossa liberdade de press\u00f5es comerciais nos permite fornecer informa\u00e7\u00f5es imparciais, pr\u00e1ticas e econ\u00f4micas sobre a seguran\u00e7a de aplica\u00e7\u00f5es. OWASP n\u00e3o \u00e9 afiliado a nenhuma empresa de tecnologia, embora apoie o uso informado de tecnologia de seguran\u00e7a comercial. OWASP produz muitos tipos de materiais de forma colaborativa, transparente e aberta. A Funda\u00e7\u00e3o OWASP \u00e9 a entidade sem fins lucrativos que garante o sucesso do projeto a longo prazo. Quase todos os associados ao OWASP s\u00e3o volunt\u00e1rios, incluindo o conselho do OWASP, l\u00edderes de cap\u00edtulo, l\u00edderes de projeto e membros do projeto. Apoiamos pesquisas inovadoras de seguran\u00e7a com subs\u00eddios e infraestrutura. Junte-se a n\u00f3s!","title":"Sobre OWASP"},{"location":"pt_BR/A00-about-owasp/#copyright-e-licenca","text":"Copyright \u00a9 2003-2021 The OWASP&tm; Foundation. Este documento foi lan\u00e7ado sob o Creative Commons Attribution Share-Alike 4.0 license. Para qualquer reutiliza\u00e7\u00e3o ou distribui\u00e7\u00e3o, voc\u00ea deve deixar claro para os outros os termos de licen\u00e7a desta obra.","title":"Copyright e Licen\u00e7a"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/","text":"Como iniciar um programa AppSec com o OWASP Top 10 \u2693\ufe0e Antes, o OWASP Top 10 nunca foi projetado para ser a base de um programa AppSec. No entanto, \u00e9 essencial come\u00e7ar de algum lugar para muitas organiza\u00e7\u00f5es que est\u00e3o apenas come\u00e7ando em sua jornada de seguran\u00e7a de aplica\u00e7\u00f5es. O OWASP Top 10 2021 \u00e9 um bom come\u00e7o como base para listas de verifica\u00e7\u00e3o de seguran\u00e7a e assim por diante, mas n\u00e3o \u00e9 suficiente por si s\u00f3. Etapa 1. Identifique as lacunas e os objetivos de seu programa appsec \u2693\ufe0e Muitos programas de Aplica\u00e7\u00f5es de Seguran\u00e7a (AppSec) tentam correr antes que possam engatinhar ou andar. Esses esfor\u00e7os est\u00e3o fadados ao fracasso. Incentivamos fortemente os CISOs e a lideran\u00e7a de AppSec a usar o Modelo de Maturidade de Garantia de Software OWASP (Software Assurance Maturity Model - SAMM)[ https://owaspsamm.org ] para identificar pontos fracos e \u00e1reas de melhoria em um per\u00edodo de 1-3 anos. A primeira etapa \u00e9 avaliar onde voc\u00ea est\u00e1 agora, identificar as lacunas na governan\u00e7a, design, implementa\u00e7\u00e3o, verifica\u00e7\u00e3o e opera\u00e7\u00f5es que voc\u00ea precisa resolver imediatamente em compara\u00e7\u00e3o com aquelas que podem esperar, e priorizar a implementa\u00e7\u00e3o ou melhoria das quinze pr\u00e1ticas de seguran\u00e7a OWASP SAMM. O OWASP SAMM pode ajud\u00e1-lo a construir e medir melhorias em seus esfor\u00e7os de garantia de software. Etapa 2. Plano para um ciclo de vida de desenvolvimento de um Paved Road seguro \u2693\ufe0e Tradicionalmente, a preserva\u00e7\u00e3o dos chamados \"unic\u00f3rnios\", o conceito de paved road \u00e9 a maneira mais f\u00e1cil de causar o m\u00e1ximo impacto e dimensionar os recursos do AppSec com a velocidade da equipe de desenvolvimento, que s\u00f3 aumenta a cada ano. O conceito de paved road \u00e9 \"o caminho mais f\u00e1cil \u00e9 tamb\u00e9m o mais seguro\" e deve envolver uma cultura de parcerias profundas entre a equipe de desenvolvimento e a equipe de seguran\u00e7a, de prefer\u00eancia de forma que sejam uma s\u00f3 equipe. O paved road visa melhorar, medir, detectar e substituir continuamente alternativas inseguras por meio de uma biblioteca corporativa de redu\u00e7\u00f5es de substitui\u00e7\u00f5es seguras, com ferramentas para ajudar a ver onde melhorias podem ser feitas ao adotar o paved road. Isso permite que as ferramentas de desenvolvimento existentes relatem compila\u00e7\u00f5es inseguras e ajudem as equipes de desenvolvimento a se autocorrigirem, evitando alternativas inseguras. O paved road pode parecer muito a fazer, mas deve ser constru\u00edda gradativamente ao longo do tempo. Existem outras formas de programas appsec, notavelmente o Microsoft Agile Secure Development Lifecycle . Nem toda metodologia de programa appsec se adapta a todas as empresas. Etapa 3. Implemente o Paved Road com suas equipes de desenvolvimento \u2693\ufe0e Paved roads s\u00e3o constru\u00eddos com o consentimento e envolvimento direto das equipes de desenvolvimento e opera\u00e7\u00f5es relevantes. O paved road deve estar estrategicamente alinhado com os neg\u00f3cios e ajudar a entregar aplicativos mais seguros com mais rapidez. O desenvolvimento do paved road deve ser um exerc\u00edcio hol\u00edstico cobrindo toda a empresa ou ecossistema de aplicativos, n\u00e3o um band-aid por aplicativo, como nos velhos tempos. Etapa 4. Migre todos os aplicativos futuros e existentes para o Paved Road \u2693\ufe0e Adicione ferramentas de detec\u00e7\u00e3o de paved road conforme voc\u00ea as desenvolve e fornece informa\u00e7\u00f5es para equipes de desenvolvimento para melhorar a seguran\u00e7a de seus aplicativos por meio de como eles podem adotar diretamente elementos do paved road. Uma vez que um aspecto do paved road tenha sido adotado, as organiza\u00e7\u00f5es devem implementar verifica\u00e7\u00f5es de integra\u00e7\u00e3o cont\u00ednua que inspecionam o c\u00f3digo existente e check-ins que usam alternativas proibidas e avisam ou rejeitam a compila\u00e7\u00e3o ou check-in. Isso evita que op\u00e7\u00f5es inseguras entrem no c\u00f3digo ao longo do tempo, evitando d\u00edvidas t\u00e9cnicas e um aplicativo inseguro com defeito. Esses avisos devem ser vinculados \u00e0 alternativa segura, para que a equipe de desenvolvimento receba a resposta correta imediatamente. Eles podem refatorar e adotar o componente do paved road rapidamente. Etapa 5. Teste se o Paved Road mitigou os problemas encontrados no OWASP Top 10 \u2693\ufe0e Os componentes do paved road devem abordar um problema significativo do OWASP Top 10, por exemplo, como detectar ou consertar componentes vulner\u00e1veis automaticamente ou um plug-in IDE de an\u00e1lise de c\u00f3digo est\u00e1tico para detectar inje\u00e7\u00f5es ou, melhor ainda, uma biblioteca que \u00e9 sabidamente segura contra inje\u00e7\u00e3o, como React ou Vue. Quanto mais dessas substitui\u00e7\u00f5es seguras forem fornecidas \u00e0s equipes, melhor. Uma tarefa vital da equipe do appsec \u00e9 garantir que a seguran\u00e7a desses componentes seja continuamente avaliada e aprimorada. Depois de aprimoradas, alguma forma de via de comunica\u00e7\u00e3o com os consumidores do componente deve indicar que uma atualiza\u00e7\u00e3o deve ocorrer, de prefer\u00eancia automaticamente, mas se n\u00e3o, pelo menos destacada em um painel ou similar. Etapa 6. Construa o seu programa em um programa AppSec maduro \u2693\ufe0e Voc\u00ea n\u00e3o deve parar no OWASP Top 10. Ele cobre apenas 10 categorias de riscos. Recomendamos fortemente que as organiza\u00e7\u00f5es adotem o Padr\u00e3o de Verifica\u00e7\u00e3o de Seguran\u00e7a de Aplicativos (ASVS) e adicionem progressivamente componentes de paved road e testes para os N\u00edveis 1, 2 e 3, dependendo do n\u00edvel de risco dos aplicativos desenvolvidos. Indo al\u00e9m \u2693\ufe0e Todos os grandes programas AppSec v\u00e3o al\u00e9m do m\u00ednimo. Todos devem continuar se quisermos superar as vulnerabilidades do appsec. Integridade conceitual . Os programas AppSec maduros devem conter algum conceito de arquitetura de seguran\u00e7a, seja uma nuvem formal ou arquitetura de seguran\u00e7a corporativa ou modelagem de amea\u00e7as. Automa\u00e7\u00e3o e escala . Programas maduros de AppSec tentam automatizar o m\u00e1ximo poss\u00edvel de seus resultados, usando scripts para emular etapas de teste de penetra\u00e7\u00e3o complexas, ferramentas de an\u00e1lise de c\u00f3digo est\u00e1tico dispon\u00edveis diretamente para as equipes de desenvolvimento, auxiliando as equipes de desenvolvimento na constru\u00e7\u00e3o de unidades de appsec e testes de integra\u00e7\u00e3o e muito mais. Cultura . Programas maduros de AppSec tentam construir o design inseguro e eliminar a d\u00edvida t\u00e9cnica do c\u00f3digo existente, sendo parte da equipe de desenvolvimento e n\u00e3o \u00e0 margem. As equipes da AppSec que veem as equipes de desenvolvimento como \"n\u00f3s\" e \"eles\" est\u00e3o fadadas ao fracasso. Melhoria continua . Programas maduros de AppSec procuram melhorar constantemente. Se algo n\u00e3o estiver funcionando, pare de fazer isso. Se algo \u00e9 desajeitado ou n\u00e3o escal\u00e1vel, trabalhe para melhor\u00e1-lo. Se algo n\u00e3o est\u00e1 sendo usado pelas equipes de desenvolvimento e n\u00e3o tem impacto ou tem impacto limitado, fa\u00e7a algo diferente. S\u00f3 porque temos feito testes como deskcheck desde os anos 1970, n\u00e3o significa que seja uma boa ideia. Me\u00e7a, avalie e depois construa ou melhore.","title":"Como iniciar um programa AppSec com o OWASP Top 10"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#como-iniciar-um-programa-appsec-com-o-owasp-top-10","text":"Antes, o OWASP Top 10 nunca foi projetado para ser a base de um programa AppSec. No entanto, \u00e9 essencial come\u00e7ar de algum lugar para muitas organiza\u00e7\u00f5es que est\u00e3o apenas come\u00e7ando em sua jornada de seguran\u00e7a de aplica\u00e7\u00f5es. O OWASP Top 10 2021 \u00e9 um bom come\u00e7o como base para listas de verifica\u00e7\u00e3o de seguran\u00e7a e assim por diante, mas n\u00e3o \u00e9 suficiente por si s\u00f3.","title":"Como iniciar um programa AppSec com o OWASP Top 10"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#etapa-1-identifique-as-lacunas-e-os-objetivos-de-seu-programa-appsec","text":"Muitos programas de Aplica\u00e7\u00f5es de Seguran\u00e7a (AppSec) tentam correr antes que possam engatinhar ou andar. Esses esfor\u00e7os est\u00e3o fadados ao fracasso. Incentivamos fortemente os CISOs e a lideran\u00e7a de AppSec a usar o Modelo de Maturidade de Garantia de Software OWASP (Software Assurance Maturity Model - SAMM)[ https://owaspsamm.org ] para identificar pontos fracos e \u00e1reas de melhoria em um per\u00edodo de 1-3 anos. A primeira etapa \u00e9 avaliar onde voc\u00ea est\u00e1 agora, identificar as lacunas na governan\u00e7a, design, implementa\u00e7\u00e3o, verifica\u00e7\u00e3o e opera\u00e7\u00f5es que voc\u00ea precisa resolver imediatamente em compara\u00e7\u00e3o com aquelas que podem esperar, e priorizar a implementa\u00e7\u00e3o ou melhoria das quinze pr\u00e1ticas de seguran\u00e7a OWASP SAMM. O OWASP SAMM pode ajud\u00e1-lo a construir e medir melhorias em seus esfor\u00e7os de garantia de software.","title":"Etapa 1. Identifique as lacunas e os objetivos de seu programa appsec"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#etapa-2-plano-para-um-ciclo-de-vida-de-desenvolvimento-de-um-paved-road-seguro","text":"Tradicionalmente, a preserva\u00e7\u00e3o dos chamados \"unic\u00f3rnios\", o conceito de paved road \u00e9 a maneira mais f\u00e1cil de causar o m\u00e1ximo impacto e dimensionar os recursos do AppSec com a velocidade da equipe de desenvolvimento, que s\u00f3 aumenta a cada ano. O conceito de paved road \u00e9 \"o caminho mais f\u00e1cil \u00e9 tamb\u00e9m o mais seguro\" e deve envolver uma cultura de parcerias profundas entre a equipe de desenvolvimento e a equipe de seguran\u00e7a, de prefer\u00eancia de forma que sejam uma s\u00f3 equipe. O paved road visa melhorar, medir, detectar e substituir continuamente alternativas inseguras por meio de uma biblioteca corporativa de redu\u00e7\u00f5es de substitui\u00e7\u00f5es seguras, com ferramentas para ajudar a ver onde melhorias podem ser feitas ao adotar o paved road. Isso permite que as ferramentas de desenvolvimento existentes relatem compila\u00e7\u00f5es inseguras e ajudem as equipes de desenvolvimento a se autocorrigirem, evitando alternativas inseguras. O paved road pode parecer muito a fazer, mas deve ser constru\u00edda gradativamente ao longo do tempo. Existem outras formas de programas appsec, notavelmente o Microsoft Agile Secure Development Lifecycle . Nem toda metodologia de programa appsec se adapta a todas as empresas.","title":"Etapa 2. Plano para um ciclo de vida de desenvolvimento de um Paved Road seguro"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#etapa-3-implemente-o-paved-road-com-suas-equipes-de-desenvolvimento","text":"Paved roads s\u00e3o constru\u00eddos com o consentimento e envolvimento direto das equipes de desenvolvimento e opera\u00e7\u00f5es relevantes. O paved road deve estar estrategicamente alinhado com os neg\u00f3cios e ajudar a entregar aplicativos mais seguros com mais rapidez. O desenvolvimento do paved road deve ser um exerc\u00edcio hol\u00edstico cobrindo toda a empresa ou ecossistema de aplicativos, n\u00e3o um band-aid por aplicativo, como nos velhos tempos.","title":"Etapa 3. Implemente o Paved Road com suas equipes de desenvolvimento"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#etapa-4-migre-todos-os-aplicativos-futuros-e-existentes-para-o-paved-road","text":"Adicione ferramentas de detec\u00e7\u00e3o de paved road conforme voc\u00ea as desenvolve e fornece informa\u00e7\u00f5es para equipes de desenvolvimento para melhorar a seguran\u00e7a de seus aplicativos por meio de como eles podem adotar diretamente elementos do paved road. Uma vez que um aspecto do paved road tenha sido adotado, as organiza\u00e7\u00f5es devem implementar verifica\u00e7\u00f5es de integra\u00e7\u00e3o cont\u00ednua que inspecionam o c\u00f3digo existente e check-ins que usam alternativas proibidas e avisam ou rejeitam a compila\u00e7\u00e3o ou check-in. Isso evita que op\u00e7\u00f5es inseguras entrem no c\u00f3digo ao longo do tempo, evitando d\u00edvidas t\u00e9cnicas e um aplicativo inseguro com defeito. Esses avisos devem ser vinculados \u00e0 alternativa segura, para que a equipe de desenvolvimento receba a resposta correta imediatamente. Eles podem refatorar e adotar o componente do paved road rapidamente.","title":"Etapa 4. Migre todos os aplicativos futuros e existentes para o Paved Road"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#etapa-5-teste-se-o-paved-road-mitigou-os-problemas-encontrados-no-owasp-top-10","text":"Os componentes do paved road devem abordar um problema significativo do OWASP Top 10, por exemplo, como detectar ou consertar componentes vulner\u00e1veis automaticamente ou um plug-in IDE de an\u00e1lise de c\u00f3digo est\u00e1tico para detectar inje\u00e7\u00f5es ou, melhor ainda, uma biblioteca que \u00e9 sabidamente segura contra inje\u00e7\u00e3o, como React ou Vue. Quanto mais dessas substitui\u00e7\u00f5es seguras forem fornecidas \u00e0s equipes, melhor. Uma tarefa vital da equipe do appsec \u00e9 garantir que a seguran\u00e7a desses componentes seja continuamente avaliada e aprimorada. Depois de aprimoradas, alguma forma de via de comunica\u00e7\u00e3o com os consumidores do componente deve indicar que uma atualiza\u00e7\u00e3o deve ocorrer, de prefer\u00eancia automaticamente, mas se n\u00e3o, pelo menos destacada em um painel ou similar.","title":"Etapa 5. Teste se o Paved Road mitigou os problemas encontrados no OWASP Top 10"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#etapa-6-construa-o-seu-programa-em-um-programa-appsec-maduro","text":"Voc\u00ea n\u00e3o deve parar no OWASP Top 10. Ele cobre apenas 10 categorias de riscos. Recomendamos fortemente que as organiza\u00e7\u00f5es adotem o Padr\u00e3o de Verifica\u00e7\u00e3o de Seguran\u00e7a de Aplicativos (ASVS) e adicionem progressivamente componentes de paved road e testes para os N\u00edveis 1, 2 e 3, dependendo do n\u00edvel de risco dos aplicativos desenvolvidos.","title":"Etapa 6. Construa o seu programa em um programa AppSec maduro"},{"location":"pt_BR/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#indo-alem","text":"Todos os grandes programas AppSec v\u00e3o al\u00e9m do m\u00ednimo. Todos devem continuar se quisermos superar as vulnerabilidades do appsec. Integridade conceitual . Os programas AppSec maduros devem conter algum conceito de arquitetura de seguran\u00e7a, seja uma nuvem formal ou arquitetura de seguran\u00e7a corporativa ou modelagem de amea\u00e7as. Automa\u00e7\u00e3o e escala . Programas maduros de AppSec tentam automatizar o m\u00e1ximo poss\u00edvel de seus resultados, usando scripts para emular etapas de teste de penetra\u00e7\u00e3o complexas, ferramentas de an\u00e1lise de c\u00f3digo est\u00e1tico dispon\u00edveis diretamente para as equipes de desenvolvimento, auxiliando as equipes de desenvolvimento na constru\u00e7\u00e3o de unidades de appsec e testes de integra\u00e7\u00e3o e muito mais. Cultura . Programas maduros de AppSec tentam construir o design inseguro e eliminar a d\u00edvida t\u00e9cnica do c\u00f3digo existente, sendo parte da equipe de desenvolvimento e n\u00e3o \u00e0 margem. As equipes da AppSec que veem as equipes de desenvolvimento como \"n\u00f3s\" e \"eles\" est\u00e3o fadadas ao fracasso. Melhoria continua . Programas maduros de AppSec procuram melhorar constantemente. Se algo n\u00e3o estiver funcionando, pare de fazer isso. Se algo \u00e9 desajeitado ou n\u00e3o escal\u00e1vel, trabalhe para melhor\u00e1-lo. Se algo n\u00e3o est\u00e1 sendo usado pelas equipes de desenvolvimento e n\u00e3o tem impacto ou tem impacto limitado, fa\u00e7a algo diferente. S\u00f3 porque temos feito testes como deskcheck desde os anos 1970, n\u00e3o significa que seja uma boa ideia. Me\u00e7a, avalie e depois construa ou melhore.","title":"Indo al\u00e9m"},{"location":"pt_BR/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/","text":"Como usar o OWASP Top 10 como padr\u00e3o \u2693\ufe0e O OWASP Top 10 \u00e9 principalmente um documento de conscientiza\u00e7\u00e3o. No entanto, isso n\u00e3o impediu as organiza\u00e7\u00f5es de us\u00e1-lo de fato como um padr\u00e3o AppSec na ind\u00fastria desde seu in\u00edcio em 2003. Se voc\u00ea deseja usar o OWASP Top 10 como um padr\u00e3o de codifica\u00e7\u00e3o ou teste, saiba que \u00e9 apenas o m\u00ednimo e um ponto de partida. Uma das dificuldades de usar o OWASP Top 10 como padr\u00e3o \u00e9 que documentamos os riscos do appsec, e n\u00e3o necessariamente problemas test\u00e1veis com facilidade. Por exemplo, A04:2021-Insecure Design est\u00e1 al\u00e9m do escopo da maioria das formas de teste. Outro exemplo s\u00e3o os testes no local, em uso, e o registro e monitoramento eficazes s\u00f3 podem ser feitos com entrevistas e requisi\u00e7\u00f5es de uma amostra de respostas eficazes de incidentes. Uma ferramenta de an\u00e1lise est\u00e1tica de c\u00f3digo pode procurar a aus\u00eancia de registro, mas pode ser imposs\u00edvel determinar se a l\u00f3gica de neg\u00f3cios ou o controle de acesso est\u00e1 registrando viola\u00e7\u00f5es de seguran\u00e7a cr\u00edticas. Os testadores de penetra\u00e7\u00e3o podem apenas determinar se eles chamaram a resposta a incidentes em um ambiente de teste, que raramente \u00e9 monitorado da mesma maneira que a produ\u00e7\u00e3o. Aqui est\u00e3o nossas recomenda\u00e7\u00f5es para quando \u00e9 apropriado usar o OWASP Top 10: Caso de Uso OWASP Top 10 2021 OWASP Padr\u00e3o de verifica\u00e7\u00e3o de seguran\u00e7a de aplica\u00e7\u00f5es Conscientiza\u00e7\u00e3o Sim Treinamento N\u00edvel de entrada Compreensivo Design e arquitetura Ocasionalmente Sim Padr\u00e3o de codifica\u00e7\u00e3o M\u00ednimo Sim Revis\u00e3o de C\u00f3digo Seguro M\u00ednimo Sim Lista de verifica\u00e7\u00e3o de revis\u00e3o por pares M\u00ednimo Sim Teste de unidade Ocasionalmente Sim Teste de integra\u00e7\u00e3o Ocasionalmente Sim Teste de penetra\u00e7\u00e3o M\u00ednimo Sim Suporte de ferramenta M\u00ednimo Sim Cadeia de abastecimento segura Ocasionalmente Sim N\u00f3s encorajamos qualquer pessoa que queira adotar uma seguran\u00e7a de aplica\u00e7\u00e3o padr\u00e3o para usar o OWASP Application Security Verification Standard (ASVS), pois \u00e9 projetado para ser verific\u00e1vel e testado, e pode ser usado em todas as partes de um ciclo de vida de desenvolvimento seguro. O ASVS \u00e9 a \u00fanica escolha aceit\u00e1vel para fornecedores de ferramentas. Ferramentas n\u00e3o podem detectar, testar ou proteger de forma abrangente contra o OWASP Top 10 devido a a natureza de v\u00e1rios dos 10 principais riscos OWASP, com refer\u00eancia a A04: 2021-Design inseguro. OWASP desencoraja qualquer reivindica\u00e7\u00f5es de cobertura total do OWASP Top 10 porque simplesmente n\u00e3o \u00e9 verdadeiro.","title":"Como usar o OWASP Top 10 como padr\u00e3o"},{"location":"pt_BR/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#como-usar-o-owasp-top-10-como-padrao","text":"O OWASP Top 10 \u00e9 principalmente um documento de conscientiza\u00e7\u00e3o. No entanto, isso n\u00e3o impediu as organiza\u00e7\u00f5es de us\u00e1-lo de fato como um padr\u00e3o AppSec na ind\u00fastria desde seu in\u00edcio em 2003. Se voc\u00ea deseja usar o OWASP Top 10 como um padr\u00e3o de codifica\u00e7\u00e3o ou teste, saiba que \u00e9 apenas o m\u00ednimo e um ponto de partida. Uma das dificuldades de usar o OWASP Top 10 como padr\u00e3o \u00e9 que documentamos os riscos do appsec, e n\u00e3o necessariamente problemas test\u00e1veis com facilidade. Por exemplo, A04:2021-Insecure Design est\u00e1 al\u00e9m do escopo da maioria das formas de teste. Outro exemplo s\u00e3o os testes no local, em uso, e o registro e monitoramento eficazes s\u00f3 podem ser feitos com entrevistas e requisi\u00e7\u00f5es de uma amostra de respostas eficazes de incidentes. Uma ferramenta de an\u00e1lise est\u00e1tica de c\u00f3digo pode procurar a aus\u00eancia de registro, mas pode ser imposs\u00edvel determinar se a l\u00f3gica de neg\u00f3cios ou o controle de acesso est\u00e1 registrando viola\u00e7\u00f5es de seguran\u00e7a cr\u00edticas. Os testadores de penetra\u00e7\u00e3o podem apenas determinar se eles chamaram a resposta a incidentes em um ambiente de teste, que raramente \u00e9 monitorado da mesma maneira que a produ\u00e7\u00e3o. Aqui est\u00e3o nossas recomenda\u00e7\u00f5es para quando \u00e9 apropriado usar o OWASP Top 10: Caso de Uso OWASP Top 10 2021 OWASP Padr\u00e3o de verifica\u00e7\u00e3o de seguran\u00e7a de aplica\u00e7\u00f5es Conscientiza\u00e7\u00e3o Sim Treinamento N\u00edvel de entrada Compreensivo Design e arquitetura Ocasionalmente Sim Padr\u00e3o de codifica\u00e7\u00e3o M\u00ednimo Sim Revis\u00e3o de C\u00f3digo Seguro M\u00ednimo Sim Lista de verifica\u00e7\u00e3o de revis\u00e3o por pares M\u00ednimo Sim Teste de unidade Ocasionalmente Sim Teste de integra\u00e7\u00e3o Ocasionalmente Sim Teste de penetra\u00e7\u00e3o M\u00ednimo Sim Suporte de ferramenta M\u00ednimo Sim Cadeia de abastecimento segura Ocasionalmente Sim N\u00f3s encorajamos qualquer pessoa que queira adotar uma seguran\u00e7a de aplica\u00e7\u00e3o padr\u00e3o para usar o OWASP Application Security Verification Standard (ASVS), pois \u00e9 projetado para ser verific\u00e1vel e testado, e pode ser usado em todas as partes de um ciclo de vida de desenvolvimento seguro. O ASVS \u00e9 a \u00fanica escolha aceit\u00e1vel para fornecedores de ferramentas. Ferramentas n\u00e3o podem detectar, testar ou proteger de forma abrangente contra o OWASP Top 10 devido a a natureza de v\u00e1rios dos 10 principais riscos OWASP, com refer\u00eancia a A04: 2021-Design inseguro. OWASP desencoraja qualquer reivindica\u00e7\u00f5es de cobertura total do OWASP Top 10 porque simplesmente n\u00e3o \u00e9 verdadeiro.","title":"Como usar o OWASP Top 10 como padr\u00e3o"},{"location":"pt_BR/A00_2021_Introduction/","text":"Introduction \u2693\ufe0e Welcome to the OWASP Top 10 - 2021 \u2693\ufe0e Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU! What's changed in the Top 10 for 2021 \u2693\ufe0e There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time. Methodology \u2693\ufe0e This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use a community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10. How the categories are structured \u2693\ufe0e A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework. How the data is used for selecting categories \u2693\ufe0e In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation. Why not just pure statistical data? \u2693\ufe0e The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data). Why incidence rate instead of frequency? \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Thank you to our sponsor \u2693\ufe0e The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Introdu\u00e7\u00e3o"},{"location":"pt_BR/A00_2021_Introduction/#introduction","text":"","title":"Introduction"},{"location":"pt_BR/A00_2021_Introduction/#welcome-to-the-owasp-top-10-2021","text":"Welcome to the latest installment of the OWASP Top 10! The OWASP Top 10 2021 is all-new, with a new graphic design and an available one-page infographic you can print or obtain from our home page. A huge thank you to everyone that contributed their time and data for this iteration. Without you, this installment would not happen. THANK YOU!","title":"Welcome to the OWASP Top 10 - 2021"},{"location":"pt_BR/A00_2021_Introduction/#whats-changed-in-the-top-10-for-2021","text":"There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. We've changed names when necessary to focus on the root cause over the symptom. A01:2021-Broken Access Control moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure , which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \"move left\" as an industry, we need more threat modeling, secure design patterns and principles, and reference architectures. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities ( XXE ) is now part of this risk category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System ( CVE / CVSS ) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE / CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time.","title":"What's changed in the Top 10 for 2021"},{"location":"pt_BR/A00_2021_Introduction/#methodology","text":"This installment of the Top 10 is more data-driven than ever but not blindly data-driven. We selected eight of the ten categories from contributed data and two categories from the Top 10 community survey at a high level. We do this for a fundamental reason, looking at the contributed data is looking into the past. AppSec researchers take time to find new vulnerabilities and new ways to test for them. It takes time to integrate these tests into tools and processes. By the time we can reliably test a weakness at scale, years have likely passed. To balance that view, we use a community survey to ask application security and development experts on the front lines what they see as essential weaknesses that the data may not show yet. There are a few critical changes that we adopted to continue to mature the Top 10.","title":"Methodology"},{"location":"pt_BR/A00_2021_Introduction/#how-the-categories-are-structured","text":"A few categories have changed from the previous installment of the OWASP Top Ten. Here is a high-level summary of the category changes. Previous data collection efforts were focused on a prescribed subset of approximately 30 CWEs with a field asking for additional findings. We learned that organizations would primarily focus on just those 30 CWEs and rarely add additional CWEs that they saw. In this iteration, we opened it up and just asked for data, with no restriction on CWEs. We asked for the number of applications tested for a given year (starting in 2017), and the number of applications with at least one instance of a CWE found in testing. This format allows us to track how prevalent each CWE is within the population of applications. We ignore frequency for our purposes; while it may be necessary for other situations, it only hides the actual prevalence in the application population. Whether an application has four instances of a CWE or 4,000 instances is not part of the calculation for the Top 10. We went from approximately 30 CWEs to almost 400 CWEs to analyze in the dataset. We plan to do additional data analysis as a supplement in the future. This significant increase in the number of CWEs necessitates changes to how the categories are structured. We spent several months grouping and categorizing CWEs and could have continued for additional months. We had to stop at some point. There are both root cause and symptom types of CWEs, where root cause types are like \"Cryptographic Failure\" and \"Misconfiguration\" contrasted to symptom types like \"Sensitive Data Exposure\" and \"Denial of Service.\" We decided to focus on the root cause whenever possible as it's more logical for providing identification and remediation guidance. Focusing on the root cause over the symptom isn't a new concept; the Top Ten has been a mix of symptom and root cause . CWEs are also a mix of symptom and root cause ; we are simply being more deliberate about it and calling it out. There is an average of 19.6 CWEs per category in this installment, with the lower bounds at 1 CWE for A10:2021-Server-Side Request Forgery (SSRF) to 40 CWEs in A04:2021-Insecure Design . This updated category structure offers additional training benefits as companies can focus on CWEs that make sense for a language/framework.","title":"How the categories are structured"},{"location":"pt_BR/A00_2021_Introduction/#how-the-data-is-used-for-selecting-categories","text":"In 2017, we selected categories by incidence rate to determine likelihood, then ranked them by team discussion based on decades of experience for Exploitability , Detectability (also likelihood ), and Technical Impact . For 2021, we want to use data for Exploitability and (Technical) Impact if possible. We downloaded OWASP Dependency Check and extracted the CVSS Exploit, and Impact scores grouped by related CWEs. It took a fair bit of research and effort as all the CVEs have CVSSv2 scores, but there are flaws in CVSSv2 that CVSSv3 should address. After a certain point in time, all CVEs are assigned a CVSSv3 score as well. Additionally, the scoring ranges and formulas were updated between CVSSv2 and CVSSv3. In CVSSv2, both Exploit and (Technical) Impact could be up to 10.0, but the formula would knock them down to 60% for Exploit and 40% for Impact . In CVSSv3, the theoretical max was limited to 6.0 for Exploit and 4.0 for Impact . With the weighting considered, the Impact scoring shifted higher, almost a point and a half on average in CVSSv3, and exploitability moved nearly half a point lower on average. There are 125k records of a CVE mapped to a CWE in the National Vulnerability Database ( NVD ) data extracted from OWASP Dependency Check, and there are 241 unique CWEs mapped to a CVE . 62k CWE maps have a CVSSv3 score, which is approximately half of the population in the data set. For the Top Ten 2021, we calculated average exploit and impact scores in the following manner. We grouped all the CVEs with CVSS scores by CWE and weighted both exploit and impact scored by the percentage of the population that had CVSSv3 + the remaining population of CVSSv2 scores to get an overall average. We mapped these averages to the CWEs in the dataset to use as Exploit and (Technical) Impact scoring for the other half of the risk equation.","title":"How the data is used for selecting categories"},{"location":"pt_BR/A00_2021_Introduction/#why-not-just-pure-statistical-data","text":"The results in the data are primarily limited to what we can test for in an automated fashion. Talk to a seasoned AppSec professional, and they will tell you about stuff they find and trends they see that aren't yet in the data. It takes time for people to develop testing methodologies for certain vulnerability types and then more time for those tests to be automated and run against a large population of applications. Everything we find is looking back in the past and might be missing trends from the last year, which are not present in the data. Therefore, we only pick eight of ten categories from the data because it's incomplete. The other two categories are from the Top 10 community survey. It allows the practitioners on the front lines to vote for what they see as the highest risks that might not be in the data (and may never be expressed in data).","title":"Why not just pure statistical data?"},{"location":"pt_BR/A00_2021_Introduction/#why-incidence-rate-instead-of-frequency","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for a single application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. This corresponds to a risk related view as an attacker needs only one instance to attack an application successfully via the category.","title":"Why incidence rate instead of frequency?"},{"location":"pt_BR/A00_2021_Introduction/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the Top 10 community survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 2021 in a risk based order.","title":"What is your data collection and analysis process?"},{"location":"pt_BR/A00_2021_Introduction/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE . Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"pt_BR/A00_2021_Introduction/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"pt_BR/A00_2021_Introduction/#thank-you-to-our-sponsor","text":"The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Thank you to our sponsor"},{"location":"pt_BR/A01_2021-Broken_Access_Control/","text":"A01:2021 \u2013 Quebra de Controle de Acesso \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013 Vis\u00e3o Geral \u2693\ufe0e Saindo da quinta posi\u00e7\u00e3o, 94% dos aplicativos foram testados para alguma forma de controle de acesso quebrado com a taxa de incid\u00eancia m\u00e9dia de 3,81% e tem o maior n\u00famero de ocorr\u00eancias no conjunto de dados contribu\u00eddo com mais de 318 mil. Not\u00e1vel Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-200: Exposi\u00e7\u00e3o de Informa\u00e7\u00f5es Confidenciais a um Ator N\u00e3o Autorizado , CWE-201: Exposi\u00e7\u00e3o de Informa\u00e7\u00f5es Confidenciais por meio de Dados Enviados e CWE-352: requisi\u00e7\u00f5es forjadas entre sites . Descri\u00e7\u00e3o \u2693\ufe0e O controle de acesso imp\u00f5e a pol\u00edtica de modo que os usu\u00e1rios n\u00e3o possam agir fora de suas permiss\u00f5es pretendidas. As falhas normalmente levam \u00e0 divulga\u00e7\u00e3o, modifica\u00e7\u00e3o ou destrui\u00e7\u00e3o de informa\u00e7\u00f5es n\u00e3o autorizadas de todos os dados ou ao desempenho de uma fun\u00e7\u00e3o comercial fora dos limites do usu\u00e1rio. Vulnerabilidades comuns de controle de acesso incluem: Viola\u00e7\u00e3o do princ\u00edpio de privil\u00e9gio m\u00ednimo ou nega\u00e7\u00e3o por padr\u00e3o, onde o acesso deve ser concedido apenas para determinados recursos, fun\u00e7\u00f5es ou usu\u00e1rios, mas est\u00e1 dispon\u00edvel para qualquer pessoa. Ignorar verifica\u00e7\u00f5es de controle de acesso modificando a URL (adultera\u00e7\u00e3o de par\u00e2metros ou navega\u00e7\u00e3o for\u00e7ada), o estado interno do aplicativo, a p\u00e1gina HTML ou usando uma ferramenta de ataque que modifica as requisi\u00e7\u00f5es de API. Permitir a visualiza\u00e7\u00e3o ou edi\u00e7\u00e3o da conta de outrem, mediante a disponibiliza\u00e7\u00e3o do seu identificador \u00fanico (refer\u00eancias diretas n\u00e3o seguras a objetos). Acessando API sem controles de acesso para POST, PUT e DELETE. Eleva\u00e7\u00e3o de privil\u00e9gio. Agir como um usu\u00e1rio sem estar logado ou agir como um administrador quando logado como um usu\u00e1rio. Manipula\u00e7\u00e3o de metadados, como reproduzir ou adulterar um token de controle de acesso JSON Web Token (JWT), um cookie ou campo oculto manipulado para elevar privil\u00e9gios ou abusar da invalida\u00e7\u00e3o de JWT. A configura\u00e7\u00e3o incorreta do CORS permite o acesso \u00e0 API de origens n\u00e3o autorizadas / n\u00e3o confi\u00e1veis. For\u00e7a a navega\u00e7\u00e3o para p\u00e1ginas autenticadas como um usu\u00e1rio n\u00e3o autenticado ou para p\u00e1ginas privilegiadas como um usu\u00e1rio padr\u00e3o. Como Prevenir \u2693\ufe0e O controle de acesso s\u00f3 \u00e9 eficaz em c\u00f3digo confi\u00e1vel do lado do servidor ou API sem servidor, em que o invasor n\u00e3o pode modificar a verifica\u00e7\u00e3o de controle de acesso ou metadados. Exceto para recursos p\u00fablicos, negar por padr\u00e3o. Implemente mecanismos de controle de acesso uma vez e reutilize-os em todo o aplicativo, incluindo a minimiza\u00e7\u00e3o do uso de Cross-Origin Resource Sharing (CORS). Os controles de acesso ao modelo devem impor a propriedade do registro em vez de aceitar que o usu\u00e1rio possa criar, ler, atualizar ou excluir qualquer registro. Os requisitos de limite de neg\u00f3cios de aplicativos exclusivos devem ser impostos por modelos de dom\u00ednio. Desative a lista de diret\u00f3rios do servidor da web e certifique-se de que os metadados do arquivo (por exemplo, o .git ) e os arquivos de backup n\u00e3o estejam presentes nas ra\u00edzes da web ( web roots ). Registrar falhas de controle de acesso e alertar os administradores quando apropriado (por exemplo, falhas repetidas). Limite de taxa o acesso da API e do controlador para minimizar os danos do conjunto de ferramentas de ataque automatizado. Os identificadores de sess\u00e3o com estado devem ser invalidados no servidor ap\u00f3s o logout. Os tokens JWT sem estado devem ter vida curta, para que a janela de oportunidade para um invasor seja minimizada. Para JWTs de longa dura\u00e7\u00e3o, \u00e9 altamente recomend\u00e1vel seguir os padr\u00f5es OAuth para revogar o acesso. Os desenvolvedores e a equipe de QA devem incluir uma unidade de controle de acesso funcional e testes de integra\u00e7\u00e3o. Exemplos de Cen\u00e1rios de Ataque \u2693\ufe0e Cen\u00e1rio #1: O aplicativo usa dados n\u00e3o verificados em uma chamada SQL que est\u00e1 acessando informa\u00e7\u00f5es da conta: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); Um invasor simplesmente modifica o par\u00e2metro 'acct' do navegador para enviar o n\u00famero de conta que desejar. Se n\u00e3o for verificado corretamente, o invasor pode acessar a conta de qualquer usu\u00e1rio. https://example.com/app/accountInfo?acct=notmyacct Cen\u00e1rio #2: Um invasor simplesmente for\u00e7a a navega\u00e7\u00e3o para URLs de destino. Direitos de administrador s\u00e3o necess\u00e1rios para acessar a p\u00e1gina de administrador. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo Se um usu\u00e1rio n\u00e3o autenticado pode acessar qualquer p\u00e1gina, \u00e9 uma falha. Se um n\u00e3o administrador pode acessar a p\u00e1gina de administra\u00e7\u00e3o, isso \u00e9 uma falha. Refer\u00eancias \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access Lista dos CWEs Mapeados \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"A01 Quebra de Controle de Acesso"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#a012021-quebra-de-controle-de-acesso","text":"","title":"A01:2021 \u2013 Quebra de Controle de Acesso"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#fatores","text":"CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 34 55.97% 3.81% 6.92 5.93 94.55% 47.72% 318,487 19,013","title":"Fatores"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#visao-geral","text":"Saindo da quinta posi\u00e7\u00e3o, 94% dos aplicativos foram testados para alguma forma de controle de acesso quebrado com a taxa de incid\u00eancia m\u00e9dia de 3,81% e tem o maior n\u00famero de ocorr\u00eancias no conjunto de dados contribu\u00eddo com mais de 318 mil. Not\u00e1vel Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-200: Exposi\u00e7\u00e3o de Informa\u00e7\u00f5es Confidenciais a um Ator N\u00e3o Autorizado , CWE-201: Exposi\u00e7\u00e3o de Informa\u00e7\u00f5es Confidenciais por meio de Dados Enviados e CWE-352: requisi\u00e7\u00f5es forjadas entre sites .","title":"Vis\u00e3o Geral"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#descricao","text":"O controle de acesso imp\u00f5e a pol\u00edtica de modo que os usu\u00e1rios n\u00e3o possam agir fora de suas permiss\u00f5es pretendidas. As falhas normalmente levam \u00e0 divulga\u00e7\u00e3o, modifica\u00e7\u00e3o ou destrui\u00e7\u00e3o de informa\u00e7\u00f5es n\u00e3o autorizadas de todos os dados ou ao desempenho de uma fun\u00e7\u00e3o comercial fora dos limites do usu\u00e1rio. Vulnerabilidades comuns de controle de acesso incluem: Viola\u00e7\u00e3o do princ\u00edpio de privil\u00e9gio m\u00ednimo ou nega\u00e7\u00e3o por padr\u00e3o, onde o acesso deve ser concedido apenas para determinados recursos, fun\u00e7\u00f5es ou usu\u00e1rios, mas est\u00e1 dispon\u00edvel para qualquer pessoa. Ignorar verifica\u00e7\u00f5es de controle de acesso modificando a URL (adultera\u00e7\u00e3o de par\u00e2metros ou navega\u00e7\u00e3o for\u00e7ada), o estado interno do aplicativo, a p\u00e1gina HTML ou usando uma ferramenta de ataque que modifica as requisi\u00e7\u00f5es de API. Permitir a visualiza\u00e7\u00e3o ou edi\u00e7\u00e3o da conta de outrem, mediante a disponibiliza\u00e7\u00e3o do seu identificador \u00fanico (refer\u00eancias diretas n\u00e3o seguras a objetos). Acessando API sem controles de acesso para POST, PUT e DELETE. Eleva\u00e7\u00e3o de privil\u00e9gio. Agir como um usu\u00e1rio sem estar logado ou agir como um administrador quando logado como um usu\u00e1rio. Manipula\u00e7\u00e3o de metadados, como reproduzir ou adulterar um token de controle de acesso JSON Web Token (JWT), um cookie ou campo oculto manipulado para elevar privil\u00e9gios ou abusar da invalida\u00e7\u00e3o de JWT. A configura\u00e7\u00e3o incorreta do CORS permite o acesso \u00e0 API de origens n\u00e3o autorizadas / n\u00e3o confi\u00e1veis. For\u00e7a a navega\u00e7\u00e3o para p\u00e1ginas autenticadas como um usu\u00e1rio n\u00e3o autenticado ou para p\u00e1ginas privilegiadas como um usu\u00e1rio padr\u00e3o.","title":"Descri\u00e7\u00e3o"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#como-prevenir","text":"O controle de acesso s\u00f3 \u00e9 eficaz em c\u00f3digo confi\u00e1vel do lado do servidor ou API sem servidor, em que o invasor n\u00e3o pode modificar a verifica\u00e7\u00e3o de controle de acesso ou metadados. Exceto para recursos p\u00fablicos, negar por padr\u00e3o. Implemente mecanismos de controle de acesso uma vez e reutilize-os em todo o aplicativo, incluindo a minimiza\u00e7\u00e3o do uso de Cross-Origin Resource Sharing (CORS). Os controles de acesso ao modelo devem impor a propriedade do registro em vez de aceitar que o usu\u00e1rio possa criar, ler, atualizar ou excluir qualquer registro. Os requisitos de limite de neg\u00f3cios de aplicativos exclusivos devem ser impostos por modelos de dom\u00ednio. Desative a lista de diret\u00f3rios do servidor da web e certifique-se de que os metadados do arquivo (por exemplo, o .git ) e os arquivos de backup n\u00e3o estejam presentes nas ra\u00edzes da web ( web roots ). Registrar falhas de controle de acesso e alertar os administradores quando apropriado (por exemplo, falhas repetidas). Limite de taxa o acesso da API e do controlador para minimizar os danos do conjunto de ferramentas de ataque automatizado. Os identificadores de sess\u00e3o com estado devem ser invalidados no servidor ap\u00f3s o logout. Os tokens JWT sem estado devem ter vida curta, para que a janela de oportunidade para um invasor seja minimizada. Para JWTs de longa dura\u00e7\u00e3o, \u00e9 altamente recomend\u00e1vel seguir os padr\u00f5es OAuth para revogar o acesso. Os desenvolvedores e a equipe de QA devem incluir uma unidade de controle de acesso funcional e testes de integra\u00e7\u00e3o.","title":"Como Prevenir"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#exemplos-de-cenarios-de-ataque","text":"Cen\u00e1rio #1: O aplicativo usa dados n\u00e3o verificados em uma chamada SQL que est\u00e1 acessando informa\u00e7\u00f5es da conta: pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); Um invasor simplesmente modifica o par\u00e2metro 'acct' do navegador para enviar o n\u00famero de conta que desejar. Se n\u00e3o for verificado corretamente, o invasor pode acessar a conta de qualquer usu\u00e1rio. https://example.com/app/accountInfo?acct=notmyacct Cen\u00e1rio #2: Um invasor simplesmente for\u00e7a a navega\u00e7\u00e3o para URLs de destino. Direitos de administrador s\u00e3o necess\u00e1rios para acessar a p\u00e1gina de administrador. https://example.com/app/getappInfo https://example.com/app/admin_getappInfo Se um usu\u00e1rio n\u00e3o autenticado pode acessar qualquer p\u00e1gina, \u00e9 uma falha. Se um n\u00e3o administrador pode acessar a p\u00e1gina de administra\u00e7\u00e3o, isso \u00e9 uma falha.","title":"Exemplos de Cen\u00e1rios de Ataque"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#referencias","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access","title":"Refer\u00eancias"},{"location":"pt_BR/A01_2021-Broken_Access_Control/#lista-dos-cwes-mapeados","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"Lista dos CWEs Mapeados"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/","text":"A02:2021 \u2013 Falhas Criptogr\u00e1ficas \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075 Vis\u00e3o Geral \u2693\ufe0e Subindo uma posi\u00e7\u00e3o para #2, anteriormente conhecido como Exposi\u00e7\u00e3o de Dados Sens\u00edveis , que \u00e9 mais um sintoma amplo do que uma causa raiz, o foco est\u00e1 nas falhas relacionadas \u00e0 criptografia (ou falta dela). O que muitas vezes leva \u00e0 exposi\u00e7\u00e3o de dados confidenciais. Not\u00e1vel Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-259: Uso de Senha no C\u00f3digo , CWE-327: Algoritmo Criptogr\u00e1fico Quebrado ou Arriscado e CWE-331 Entropia Insuficiente . Descri\u00e7\u00e3o \u2693\ufe0e A primeira coisa \u00e9 determinar as necessidades de prote\u00e7\u00e3o dos dados em tr\u00e2nsito e armazenados. Por exemplo, senhas, n\u00famero de cart\u00e3o de cr\u00e9dito, registros de sa\u00fade, informa\u00e7\u00f5es pessoas e segredos de neg\u00f3cios que requerem prote\u00e7\u00e3o extra, principalmente se esses dados se enquadrarem nas leis de privacidade, alguns exemplos s\u00e3o a da Europa General Data Protection Regulation (GDPR) ou regulamentos de prote\u00e7\u00e3o de dados financeiros, como PCI Data Security Standard (PCI DSS). Para todos esses dados: Todos os dados s\u00e3o transmitidos em texto n\u00e3o criptografado? Isso diz respeito a protocolos como HTTP, SMTP, FTP tamb\u00e9m usando atualiza\u00e7\u00f5es TLS como STARTTLS. O tr\u00e1fego externo da Internet \u00e9 perigoso. Verifique todo o tr\u00e1fego interno, por exemplo, entre balanceadores de carga, servidores da web ou sistemas back-end . Algum algoritmo ou protocolo criptogr\u00e1fico antigo ou fraco \u00e9 usado por padr\u00e3o ou em c\u00f3digo mais antigo? As chaves criptogr\u00e1ficas padr\u00e3o em uso, s\u00e3o chaves criptogr\u00e1ficas geradas fracas ou reutilizadas, faltando o gerenciamento ou rota\u00e7\u00e3o de chaves adequado? As chaves criptogr\u00e1ficas s\u00e3o verificadas nos reposit\u00f3rios de c\u00f3digo-fonte? A criptografia n\u00e3o \u00e9 aplicada, por exemplo, h\u00e1 alguma diretiva de seguran\u00e7a de cabe\u00e7alhos HTTP (navegador) ou cabe\u00e7alhos ausentes? O certificado do servidor recebido e a cadeia de confian\u00e7a est\u00e3o devidamente validados? Os vetores de inicializa\u00e7\u00e3o s\u00e3o ignorados, reutilizados ou n\u00e3o gerados suficientemente seguros para o modo criptogr\u00e1fico de opera\u00e7\u00e3o? Est\u00e1 em uso um modo de opera\u00e7\u00e3o inseguro, como o ECB? A criptografia \u00e9 usada quando a criptografia autenticada \u00e9 a mais apropriada? As senhas est\u00e3o sendo usadas como chaves criptogr\u00e1ficas na aus\u00eancia de uma fun\u00e7\u00e3o de deriva\u00e7\u00e3o de chave de base de senha? A aleatoriedade \u00e9 usada para fins criptogr\u00e1ficos que n\u00e3o foram projetados para atender aos requisitos criptogr\u00e1ficos? Mesmo se a fun\u00e7\u00e3o correta for escolhida, ela precisa ser propagada pelo desenvolvedor e, se n\u00e3o, o desenvolvedor sobrescreveu a forte funcionalidade de propaga\u00e7\u00e3o incorporada a ela com uma semente que carece de entropia/imprevisibilidade suficiente? Est\u00e3o em uso fun\u00e7\u00f5es hash obsoletas, como MD5 ou SHA1, ou fun\u00e7\u00f5es hash n\u00e3o criptogr\u00e1ficas usadas quando fun\u00e7\u00f5es hash criptogr\u00e1ficas s\u00e3o necess\u00e1rias? Est\u00e3o em uso m\u00e9todos de preenchimento criptogr\u00e1fico obsoletos, como PCKS n\u00famero 1 v1.5? As mensagens de erro criptogr\u00e1ficas ou as informa\u00e7\u00f5es do canal lateral podem ser exploradas, por exemplo, na forma de ataques oracle de preenchimento? Consulte ASVS Crypto (V7), Data Protection (V9) e SSL/TLS (V10) Como Prevenir \u2693\ufe0e Fa\u00e7a o seguinte, no m\u00ednimo, e consulte as refer\u00eancias: Classifique os dados processados, armazenados ou transmitidos por um aplicativo. Identifique quais dados s\u00e3o confidenciais de acordo com as leis de privacidade, requisitos regulamentares ou necessidades de neg\u00f3cios. N\u00e3o armazene dados confidenciais desnecessariamente. Descarte-o o mais r\u00e1pido poss\u00edvel ou use tokeniza\u00e7\u00e3o compat\u00edvel com PCI DSS ou mesmo truncamento. Os dados n\u00e3o retidos n\u00e3o podem ser roubados. Certifique-se de criptografar todos os dados confidenciais armazenados. Certifique-se de que algoritmos, protocolos e senhas de padr\u00e3o forte e atualizados estejam em vigor; use o gerenciamento de senhas adequado. Criptografe todos os dados em tr\u00e2nsito com protocolos seguros, como TLS com cifras de sigilo de encaminhamento (FS), prioriza\u00e7\u00e3o de cifras pelo servidor e par\u00e2metros seguros. Aplique a criptografia usando diretivas como HTTP Strict Transport Security (HSTS). Desative o armazenamento em cache para respostas que contenham dados confidenciais. Aplique os controles de seguran\u00e7a necess\u00e1rios de acordo com a classifica\u00e7\u00e3o de dados. N\u00e3o use protocolos legados, como FTP e SMTP, para transportar dados confidenciais. Armazene senhas usando fortes fun\u00e7\u00f5es de hash adapt\u00e1veis e saltadas com um fator de trabalho (fator de atraso), como Argon2, scrypt, bcrypt ou PBKDF2. Os vetores de inicializa\u00e7\u00e3o devem ser escolhidos de acordo com o modo de opera\u00e7\u00e3o. Para muitos modos, isso significa usar um CSPRNG (gerador de n\u00fameros pseudo-aleat\u00f3rios criptograficamente seguro). Para modos que requerem um nonce, o vetor de inicializa\u00e7\u00e3o (IV) n\u00e3o precisa de um CSPRNG. Em todos os casos, o IV nunca deve ser usado duas vezes para uma chave fixa. Sempre use criptografia autenticada em vez de apenas criptografia. As chaves devem ser geradas de forma criptograficamente aleat\u00f3ria e armazenadas na mem\u00f3ria como um array de bytes . Se uma senha for usada, ela deve ser convertida em uma chave por meio de uma fun\u00e7\u00e3o de deriva\u00e7\u00e3o de chave de base de senha apropriada. Certifique-se de que a aleatoriedade criptogr\u00e1fica seja usada quando apropriado e que n\u00e3o tenha sido usada uma semente de uma forma previs\u00edvel ou com baixa entropia. A maioria das APIs modernas n\u00e3o exige que o desenvolvedor propague o CSPRNG para obter seguran\u00e7a. Evite fun\u00e7\u00f5es criptogr\u00e1ficas e esquemas de preenchimento obsoletos, como MD5, SHA1, PKCS n\u00famero 1 v1.5. Verifique de forma independente a efic\u00e1cia das configura\u00e7\u00f5es. Exemplos de Cen\u00e1rios de Ataque \u2693\ufe0e Cen\u00e1rio #1 : Um aplicativo criptografa n\u00fameros de cart\u00e3o de cr\u00e9dito em um banco de dados usando criptografia autom\u00e1tica de banco de dados. No entanto, esses dados s\u00e3o automaticamente descriptografados quando recuperados, permitindo que uma falha de inje\u00e7\u00e3o de SQL recupere n\u00fameros de cart\u00e3o de cr\u00e9dito em texto n\u00e3o criptografado. Cen\u00e1rio #2 : Um site n\u00e3o usa ou imp\u00f5e TLS para todas as p\u00e1ginas ou oferece suporte a criptografia fraca. Um invasor monitora o tr\u00e1fego de rede (por exemplo, em uma rede sem fio insegura), faz o downgrade de conex\u00f5es de HTTPS para HTTP, intercepta solicita\u00e7\u00f5es e rouba o cookie de sess\u00e3o do usu\u00e1rio. O invasor ent\u00e3o reproduz esse cookie e sequestra a sess\u00e3o (autenticada) do usu\u00e1rio, acessando ou modificando os dados privados do usu\u00e1rio. Em vez do acima, eles podem alterar todos os dados transportados, por exemplo, o destinat\u00e1rio de uma transfer\u00eancia de dinheiro. Cen\u00e1rio #3 : O banco de dados de senha usa hashes sem saltos ou simples para armazenar as senhas de todos. Uma falha de upload de arquivo permite que um invasor recupere o banco de dados de senhas. Todos os hashes sem saltos podem ser expostos com uma rainbow table de hashes pr\u00e9-calculados. Hashes geradas por fun\u00e7\u00f5es de hash simples ou r\u00e1pidas podem ser quebrados por GPUs, mesmo se forem saltadas. Refer\u00eancias \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography Lista dos CWEs Mapeados \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"A02 Falhas Criptogr\u00e1ficas"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#a022021-falhas-criptograficas","text":"","title":"A02:2021 \u2013 Falhas Criptogr\u00e1ficas"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#fatores","text":"CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 29 46.44% 4.49% 7.29 6.81 79.33% 34.85% 233,788 3,075","title":"Fatores"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#visao-geral","text":"Subindo uma posi\u00e7\u00e3o para #2, anteriormente conhecido como Exposi\u00e7\u00e3o de Dados Sens\u00edveis , que \u00e9 mais um sintoma amplo do que uma causa raiz, o foco est\u00e1 nas falhas relacionadas \u00e0 criptografia (ou falta dela). O que muitas vezes leva \u00e0 exposi\u00e7\u00e3o de dados confidenciais. Not\u00e1vel Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-259: Uso de Senha no C\u00f3digo , CWE-327: Algoritmo Criptogr\u00e1fico Quebrado ou Arriscado e CWE-331 Entropia Insuficiente .","title":"Vis\u00e3o Geral"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#descricao","text":"A primeira coisa \u00e9 determinar as necessidades de prote\u00e7\u00e3o dos dados em tr\u00e2nsito e armazenados. Por exemplo, senhas, n\u00famero de cart\u00e3o de cr\u00e9dito, registros de sa\u00fade, informa\u00e7\u00f5es pessoas e segredos de neg\u00f3cios que requerem prote\u00e7\u00e3o extra, principalmente se esses dados se enquadrarem nas leis de privacidade, alguns exemplos s\u00e3o a da Europa General Data Protection Regulation (GDPR) ou regulamentos de prote\u00e7\u00e3o de dados financeiros, como PCI Data Security Standard (PCI DSS). Para todos esses dados: Todos os dados s\u00e3o transmitidos em texto n\u00e3o criptografado? Isso diz respeito a protocolos como HTTP, SMTP, FTP tamb\u00e9m usando atualiza\u00e7\u00f5es TLS como STARTTLS. O tr\u00e1fego externo da Internet \u00e9 perigoso. Verifique todo o tr\u00e1fego interno, por exemplo, entre balanceadores de carga, servidores da web ou sistemas back-end . Algum algoritmo ou protocolo criptogr\u00e1fico antigo ou fraco \u00e9 usado por padr\u00e3o ou em c\u00f3digo mais antigo? As chaves criptogr\u00e1ficas padr\u00e3o em uso, s\u00e3o chaves criptogr\u00e1ficas geradas fracas ou reutilizadas, faltando o gerenciamento ou rota\u00e7\u00e3o de chaves adequado? As chaves criptogr\u00e1ficas s\u00e3o verificadas nos reposit\u00f3rios de c\u00f3digo-fonte? A criptografia n\u00e3o \u00e9 aplicada, por exemplo, h\u00e1 alguma diretiva de seguran\u00e7a de cabe\u00e7alhos HTTP (navegador) ou cabe\u00e7alhos ausentes? O certificado do servidor recebido e a cadeia de confian\u00e7a est\u00e3o devidamente validados? Os vetores de inicializa\u00e7\u00e3o s\u00e3o ignorados, reutilizados ou n\u00e3o gerados suficientemente seguros para o modo criptogr\u00e1fico de opera\u00e7\u00e3o? Est\u00e1 em uso um modo de opera\u00e7\u00e3o inseguro, como o ECB? A criptografia \u00e9 usada quando a criptografia autenticada \u00e9 a mais apropriada? As senhas est\u00e3o sendo usadas como chaves criptogr\u00e1ficas na aus\u00eancia de uma fun\u00e7\u00e3o de deriva\u00e7\u00e3o de chave de base de senha? A aleatoriedade \u00e9 usada para fins criptogr\u00e1ficos que n\u00e3o foram projetados para atender aos requisitos criptogr\u00e1ficos? Mesmo se a fun\u00e7\u00e3o correta for escolhida, ela precisa ser propagada pelo desenvolvedor e, se n\u00e3o, o desenvolvedor sobrescreveu a forte funcionalidade de propaga\u00e7\u00e3o incorporada a ela com uma semente que carece de entropia/imprevisibilidade suficiente? Est\u00e3o em uso fun\u00e7\u00f5es hash obsoletas, como MD5 ou SHA1, ou fun\u00e7\u00f5es hash n\u00e3o criptogr\u00e1ficas usadas quando fun\u00e7\u00f5es hash criptogr\u00e1ficas s\u00e3o necess\u00e1rias? Est\u00e3o em uso m\u00e9todos de preenchimento criptogr\u00e1fico obsoletos, como PCKS n\u00famero 1 v1.5? As mensagens de erro criptogr\u00e1ficas ou as informa\u00e7\u00f5es do canal lateral podem ser exploradas, por exemplo, na forma de ataques oracle de preenchimento? Consulte ASVS Crypto (V7), Data Protection (V9) e SSL/TLS (V10)","title":"Descri\u00e7\u00e3o"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#como-prevenir","text":"Fa\u00e7a o seguinte, no m\u00ednimo, e consulte as refer\u00eancias: Classifique os dados processados, armazenados ou transmitidos por um aplicativo. Identifique quais dados s\u00e3o confidenciais de acordo com as leis de privacidade, requisitos regulamentares ou necessidades de neg\u00f3cios. N\u00e3o armazene dados confidenciais desnecessariamente. Descarte-o o mais r\u00e1pido poss\u00edvel ou use tokeniza\u00e7\u00e3o compat\u00edvel com PCI DSS ou mesmo truncamento. Os dados n\u00e3o retidos n\u00e3o podem ser roubados. Certifique-se de criptografar todos os dados confidenciais armazenados. Certifique-se de que algoritmos, protocolos e senhas de padr\u00e3o forte e atualizados estejam em vigor; use o gerenciamento de senhas adequado. Criptografe todos os dados em tr\u00e2nsito com protocolos seguros, como TLS com cifras de sigilo de encaminhamento (FS), prioriza\u00e7\u00e3o de cifras pelo servidor e par\u00e2metros seguros. Aplique a criptografia usando diretivas como HTTP Strict Transport Security (HSTS). Desative o armazenamento em cache para respostas que contenham dados confidenciais. Aplique os controles de seguran\u00e7a necess\u00e1rios de acordo com a classifica\u00e7\u00e3o de dados. N\u00e3o use protocolos legados, como FTP e SMTP, para transportar dados confidenciais. Armazene senhas usando fortes fun\u00e7\u00f5es de hash adapt\u00e1veis e saltadas com um fator de trabalho (fator de atraso), como Argon2, scrypt, bcrypt ou PBKDF2. Os vetores de inicializa\u00e7\u00e3o devem ser escolhidos de acordo com o modo de opera\u00e7\u00e3o. Para muitos modos, isso significa usar um CSPRNG (gerador de n\u00fameros pseudo-aleat\u00f3rios criptograficamente seguro). Para modos que requerem um nonce, o vetor de inicializa\u00e7\u00e3o (IV) n\u00e3o precisa de um CSPRNG. Em todos os casos, o IV nunca deve ser usado duas vezes para uma chave fixa. Sempre use criptografia autenticada em vez de apenas criptografia. As chaves devem ser geradas de forma criptograficamente aleat\u00f3ria e armazenadas na mem\u00f3ria como um array de bytes . Se uma senha for usada, ela deve ser convertida em uma chave por meio de uma fun\u00e7\u00e3o de deriva\u00e7\u00e3o de chave de base de senha apropriada. Certifique-se de que a aleatoriedade criptogr\u00e1fica seja usada quando apropriado e que n\u00e3o tenha sido usada uma semente de uma forma previs\u00edvel ou com baixa entropia. A maioria das APIs modernas n\u00e3o exige que o desenvolvedor propague o CSPRNG para obter seguran\u00e7a. Evite fun\u00e7\u00f5es criptogr\u00e1ficas e esquemas de preenchimento obsoletos, como MD5, SHA1, PKCS n\u00famero 1 v1.5. Verifique de forma independente a efic\u00e1cia das configura\u00e7\u00f5es.","title":"Como Prevenir"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#exemplos-de-cenarios-de-ataque","text":"Cen\u00e1rio #1 : Um aplicativo criptografa n\u00fameros de cart\u00e3o de cr\u00e9dito em um banco de dados usando criptografia autom\u00e1tica de banco de dados. No entanto, esses dados s\u00e3o automaticamente descriptografados quando recuperados, permitindo que uma falha de inje\u00e7\u00e3o de SQL recupere n\u00fameros de cart\u00e3o de cr\u00e9dito em texto n\u00e3o criptografado. Cen\u00e1rio #2 : Um site n\u00e3o usa ou imp\u00f5e TLS para todas as p\u00e1ginas ou oferece suporte a criptografia fraca. Um invasor monitora o tr\u00e1fego de rede (por exemplo, em uma rede sem fio insegura), faz o downgrade de conex\u00f5es de HTTPS para HTTP, intercepta solicita\u00e7\u00f5es e rouba o cookie de sess\u00e3o do usu\u00e1rio. O invasor ent\u00e3o reproduz esse cookie e sequestra a sess\u00e3o (autenticada) do usu\u00e1rio, acessando ou modificando os dados privados do usu\u00e1rio. Em vez do acima, eles podem alterar todos os dados transportados, por exemplo, o destinat\u00e1rio de uma transfer\u00eancia de dinheiro. Cen\u00e1rio #3 : O banco de dados de senha usa hashes sem saltos ou simples para armazenar as senhas de todos. Uma falha de upload de arquivo permite que um invasor recupere o banco de dados de senhas. Todos os hashes sem saltos podem ser expostos com uma rainbow table de hashes pr\u00e9-calculados. Hashes geradas por fun\u00e7\u00f5es de hash simples ou r\u00e1pidas podem ser quebrados por GPUs, mesmo se forem saltadas.","title":"Exemplos de Cen\u00e1rios de Ataque"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#referencias","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"Refer\u00eancias"},{"location":"pt_BR/A02_2021-Cryptographic_Failures/#lista-dos-cwes-mapeados","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"Lista dos CWEs Mapeados"},{"location":"pt_BR/A03_2021-Injection/","text":"A03:2021 \u2013 Inje\u00e7\u00e3o \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078 Vis\u00e3o Geral \u2693\ufe0e A Inje\u00e7\u00e3o desliza para a terceira posi\u00e7\u00e3o. 94% das aplica\u00e7\u00f5es foram testadas para alguma forma de inje\u00e7\u00e3o com uma taxa de incid\u00eancia m\u00e1xima de 19%, uma taxa de incid\u00eancia m\u00e9dia de 3% e 274k ocorr\u00eancias. Not\u00e1vel Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-79: Cross-site Scripting , CWE-89: Inje\u00e7\u00e3o de SQL e CWE-73: Controle Externo do Nome do Arquivo ou Caminho . Descri\u00e7\u00e3o \u2693\ufe0e Uma aplica\u00e7\u00e3o \u00e9 vulner\u00e1vel a ataques quando: Os dados fornecidos pelo usu\u00e1rio n\u00e3o s\u00e3o validados, filtrados ou higienizados pelo aplicativo. Consultas din\u00e2micas ou chamadas n\u00e3o parametrizadas sem escape ciente do contexto s\u00e3o usadas diretamente no interpretador. Dados hostis s\u00e3o usados nos par\u00e2metros de pesquisa de mapeamento relacional de objeto (ORM) para extrair registros confidenciais adicionais. Os dados fornecidos pelo usu\u00e1rio n\u00e3o s\u00e3o validados, filtrados ou higienizados pelo aplicativo. Consultas din\u00e2micas ou chamadas n\u00e3o parametrizadas sem escape ciente do contexto s\u00e3o usadas diretamente no interpretador. Dados hostis s\u00e3o usados nos par\u00e2metros de pesquisa de mapeamento relacional de objeto (ORM) para extrair registros confidenciais adicionais. Dados hostis s\u00e3o usados diretamente ou concatenados. O SQL ou comando cont\u00e9m a estrutura e os dados maliciosos em consultas din\u00e2micas, comandos ou procedimentos armazenados. Algumas das inje\u00e7\u00f5es mais comuns s\u00e3o SQL, NoSQL, comando OS, Mapeamento Relacional de Objeto (ORM), LDAP e Linguagem de Express\u00e3o (EL) ou inje\u00e7\u00e3o de Biblioteca de Navega\u00e7\u00e3o de Gr\u00e1fico de Objeto (OGNL). O conceito \u00e9 id\u00eantico entre todos os int\u00e9rpretes. A revis\u00e3o do c\u00f3digo-fonte \u00e9 o melhor m\u00e9todo para detectar se os aplicativos s\u00e3o vulner\u00e1veis a inje\u00e7\u00f5es. O teste automatizado de todos os par\u00e2metros, cabe\u00e7alhos, URL, cookies, JSON, SOAP e entradas de dados XML s\u00e3o fortemente encorajados. As organiza\u00e7\u00f5es podem incluir ferramentas de teste de seguran\u00e7a de aplica\u00e7\u00f5es est\u00e1ticos (SAST), din\u00e2micos (DAST) e interativos (IAST) no pipeline de CI/CD para identificar as falhas de inje\u00e7\u00e3o introduzidas antes da implanta\u00e7\u00e3o da produ\u00e7\u00e3o. Como Prevenir \u2693\ufe0e Prevenir a inje\u00e7\u00e3o requer manter os dados separados dos comandos e consultas: A op\u00e7\u00e3o preferida \u00e9 usar uma API segura, que evita usar o interpretador inteiramente, fornece uma interface parametrizada ou migra para uma ferramenta de Mapeamento Relacional de Objeto (ORMs). Nota: Mesmo quando parametrizados, os procedimentos armazenados ainda podem introduzir inje\u00e7\u00e3o de SQL se PL/SQL ou T-SQL concatenar consultas e dados ou executar dados hostis com EXECUTE IMMEDIATE ou exec(). Use valida\u00e7\u00e3o de entrada positiva ou \" safelist \" do lado do servidor. Esta n\u00e3o \u00e9 uma defesa completa, pois muitos aplicativos requerem caracteres especiais, como \u00e1reas de texto ou APIs para aplicativos m\u00f3veis. Para quaisquer consultas din\u00e2micas residuais, escape os caracteres especiais usando a sintaxe de escape espec\u00edfica para esse interpretador.. Nota: Estruturas SQL, como nomes de tabelas, nomes de colunas e assim por diante, n\u00e3o podem ter escape e, portanto, nomes de estruturas fornecidos pelo usu\u00e1rio s\u00e3o perigosos. Este \u00e9 um problema comum em software de elabora\u00e7\u00e3o de relat\u00f3rios. Use LIMIT e outros SQL de controle em consultas para evitar a divulga\u00e7\u00e3o em massa de registros no caso de inje\u00e7\u00e3o de SQL. Exemplos de Cen\u00e1rios de Ataque \u2693\ufe0e Cen\u00e1rio #1: Um aplicativo usa dados n\u00e3o confi\u00e1veis na constru\u00e7\u00e3o da seguinte chamada SQL vulner\u00e1vel: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Cen\u00e1rio #2: Da mesma forma, a confian\u00e7a cega em frameworks de aplica\u00e7\u00e3os pode resultar em consultas que ainda s\u00e3o vulner\u00e1veis (por exemplo, Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); Em ambos os casos, o invasor modifica o valor do par\u00e2metro \u2018 id \u2019 em seu navegador para enviar: \u2018 or \u20181\u2019=\u20191 . Por exemplo: http://example.com/app/accountView?id=' or '1'='1 Isso muda o significado de ambas as consultas para retornar todos os registros da tabela de contas. Ataques mais perigosos podem modificar ou excluir dados ou at\u00e9 mesmo invocar procedimentos armazenados. Refer\u00eancias \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection e ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection Lista dos CWEs Mapeados \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"A03 Inje\u00e7\u00e3o"},{"location":"pt_BR/A03_2021-Injection/#a032021-injecao","text":"","title":"A03:2021 \u2013 Inje\u00e7\u00e3o"},{"location":"pt_BR/A03_2021-Injection/#fatores","text":"CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 33 19.09% 3.37% 7.25 7.15 94.04% 47.90% 274,228 32,078","title":"Fatores"},{"location":"pt_BR/A03_2021-Injection/#visao-geral","text":"A Inje\u00e7\u00e3o desliza para a terceira posi\u00e7\u00e3o. 94% das aplica\u00e7\u00f5es foram testadas para alguma forma de inje\u00e7\u00e3o com uma taxa de incid\u00eancia m\u00e1xima de 19%, uma taxa de incid\u00eancia m\u00e9dia de 3% e 274k ocorr\u00eancias. Not\u00e1vel Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-79: Cross-site Scripting , CWE-89: Inje\u00e7\u00e3o de SQL e CWE-73: Controle Externo do Nome do Arquivo ou Caminho .","title":"Vis\u00e3o Geral"},{"location":"pt_BR/A03_2021-Injection/#descricao","text":"Uma aplica\u00e7\u00e3o \u00e9 vulner\u00e1vel a ataques quando: Os dados fornecidos pelo usu\u00e1rio n\u00e3o s\u00e3o validados, filtrados ou higienizados pelo aplicativo. Consultas din\u00e2micas ou chamadas n\u00e3o parametrizadas sem escape ciente do contexto s\u00e3o usadas diretamente no interpretador. Dados hostis s\u00e3o usados nos par\u00e2metros de pesquisa de mapeamento relacional de objeto (ORM) para extrair registros confidenciais adicionais. Os dados fornecidos pelo usu\u00e1rio n\u00e3o s\u00e3o validados, filtrados ou higienizados pelo aplicativo. Consultas din\u00e2micas ou chamadas n\u00e3o parametrizadas sem escape ciente do contexto s\u00e3o usadas diretamente no interpretador. Dados hostis s\u00e3o usados nos par\u00e2metros de pesquisa de mapeamento relacional de objeto (ORM) para extrair registros confidenciais adicionais. Dados hostis s\u00e3o usados diretamente ou concatenados. O SQL ou comando cont\u00e9m a estrutura e os dados maliciosos em consultas din\u00e2micas, comandos ou procedimentos armazenados. Algumas das inje\u00e7\u00f5es mais comuns s\u00e3o SQL, NoSQL, comando OS, Mapeamento Relacional de Objeto (ORM), LDAP e Linguagem de Express\u00e3o (EL) ou inje\u00e7\u00e3o de Biblioteca de Navega\u00e7\u00e3o de Gr\u00e1fico de Objeto (OGNL). O conceito \u00e9 id\u00eantico entre todos os int\u00e9rpretes. A revis\u00e3o do c\u00f3digo-fonte \u00e9 o melhor m\u00e9todo para detectar se os aplicativos s\u00e3o vulner\u00e1veis a inje\u00e7\u00f5es. O teste automatizado de todos os par\u00e2metros, cabe\u00e7alhos, URL, cookies, JSON, SOAP e entradas de dados XML s\u00e3o fortemente encorajados. As organiza\u00e7\u00f5es podem incluir ferramentas de teste de seguran\u00e7a de aplica\u00e7\u00f5es est\u00e1ticos (SAST), din\u00e2micos (DAST) e interativos (IAST) no pipeline de CI/CD para identificar as falhas de inje\u00e7\u00e3o introduzidas antes da implanta\u00e7\u00e3o da produ\u00e7\u00e3o.","title":"Descri\u00e7\u00e3o"},{"location":"pt_BR/A03_2021-Injection/#como-prevenir","text":"Prevenir a inje\u00e7\u00e3o requer manter os dados separados dos comandos e consultas: A op\u00e7\u00e3o preferida \u00e9 usar uma API segura, que evita usar o interpretador inteiramente, fornece uma interface parametrizada ou migra para uma ferramenta de Mapeamento Relacional de Objeto (ORMs). Nota: Mesmo quando parametrizados, os procedimentos armazenados ainda podem introduzir inje\u00e7\u00e3o de SQL se PL/SQL ou T-SQL concatenar consultas e dados ou executar dados hostis com EXECUTE IMMEDIATE ou exec(). Use valida\u00e7\u00e3o de entrada positiva ou \" safelist \" do lado do servidor. Esta n\u00e3o \u00e9 uma defesa completa, pois muitos aplicativos requerem caracteres especiais, como \u00e1reas de texto ou APIs para aplicativos m\u00f3veis. Para quaisquer consultas din\u00e2micas residuais, escape os caracteres especiais usando a sintaxe de escape espec\u00edfica para esse interpretador.. Nota: Estruturas SQL, como nomes de tabelas, nomes de colunas e assim por diante, n\u00e3o podem ter escape e, portanto, nomes de estruturas fornecidos pelo usu\u00e1rio s\u00e3o perigosos. Este \u00e9 um problema comum em software de elabora\u00e7\u00e3o de relat\u00f3rios. Use LIMIT e outros SQL de controle em consultas para evitar a divulga\u00e7\u00e3o em massa de registros no caso de inje\u00e7\u00e3o de SQL.","title":"Como Prevenir"},{"location":"pt_BR/A03_2021-Injection/#exemplos-de-cenarios-de-ataque","text":"Cen\u00e1rio #1: Um aplicativo usa dados n\u00e3o confi\u00e1veis na constru\u00e7\u00e3o da seguinte chamada SQL vulner\u00e1vel: String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; Cen\u00e1rio #2: Da mesma forma, a confian\u00e7a cega em frameworks de aplica\u00e7\u00e3os pode resultar em consultas que ainda s\u00e3o vulner\u00e1veis (por exemplo, Hibernate Query Language (HQL)): Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); Em ambos os casos, o invasor modifica o valor do par\u00e2metro \u2018 id \u2019 em seu navegador para enviar: \u2018 or \u20181\u2019=\u20191 . Por exemplo: http://example.com/app/accountView?id=' or '1'='1 Isso muda o significado de ambas as consultas para retornar todos os registros da tabela de contas. Ataques mais perigosos podem modificar ou excluir dados ou at\u00e9 mesmo invocar procedimentos armazenados.","title":"Exemplos de Cen\u00e1rios de Ataque"},{"location":"pt_BR/A03_2021-Injection/#referencias","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection e ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"Refer\u00eancias"},{"location":"pt_BR/A03_2021-Injection/#lista-dos-cwes-mapeados","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"Lista dos CWEs Mapeados"},{"location":"pt_BR/A04_2021-Insecure_Design/","text":"A04:2021 \u2013 Design Inseguro \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691 Vis\u00e3o Geral \u2693\ufe0e Uma nova categoria para 2021 concentra-se nos riscos relacionados a falhas de design e arquitetura, com uma chamada para mais uso de modelagem de amea\u00e7as ( threat modeling ), padr\u00f5es de design seguros e arquiteturas de refer\u00eancia. Como uma comunidade, precisamos ir al\u00e9m de \" shift-left \" no espa\u00e7o de codifica\u00e7\u00e3o para atividades antes da codifica\u00e7\u00e3o que s\u00e3o cr\u00edticas para os princ\u00edpios de Secure by Design . Not\u00e1veis Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-209: Gera\u00e7\u00e3o de Mensagem de Erro Contendo Informa\u00e7\u00f5es Confidenciais , CWE-256: Armazenamento Desprotegido de Credenciais , CWE-501: Viola\u00e7\u00e3o de Limites de Confian\u00e7a e CWE-522: Credenciais Insuficientemente Protegidas . Descri\u00e7\u00e3o \u2693\ufe0e O design inseguro \u00e9 uma categoria ampla que representa diferentes pontos fracos, expressos como \"design de controle ausente ou ineficaz\". O design inseguro n\u00e3o \u00e9 a fonte de todas as outras 10 categorias principais de risco de seguran\u00e7a. H\u00e1 uma diferen\u00e7a entre design inseguro e implementa\u00e7\u00e3o insegura. N\u00f3s diferenciamos entre falhas de design e defeitos de implementa\u00e7\u00e3o por um motivo, eles t\u00eam diferentes causas ra\u00edzes e remedia\u00e7\u00e3o. Um design seguro ainda pode ter defeitos de implementa\u00e7\u00e3o que levam a vulnerabilidades que podem ser exploradas. Um design inseguro n\u00e3o pode ser corrigido por uma implementa\u00e7\u00e3o perfeita, pois, por defini\u00e7\u00e3o, os controles de seguran\u00e7a necess\u00e1rios nunca foram criados para a defesa contra ataques espec\u00edficos. Um dos fatores que contribuem para um design inseguro \u00e9 a falta de perfis de risco de neg\u00f3cios inerentes ao software ou sistema que est\u00e1 sendo desenvolvido e, portanto, a falha em determinar o n\u00edvel de design de seguran\u00e7a necess\u00e1rio. Gerenciamento de Requisitos e Recursos \u2693\ufe0e Colete e negocie os requisitos de neg\u00f3cios para uma aplica\u00e7\u00e3o com a empresa, incluindo os requisitos de prote\u00e7\u00e3o relativos \u00e0 confidencialidade, integridade, disponibilidade e autenticidade de todos os ativos de dados e a l\u00f3gica de neg\u00f3cios esperada. Leve em considera\u00e7\u00e3o a exposi\u00e7\u00e3o da sua aplica\u00e7\u00e3o e se voc\u00ea precisa de segrega\u00e7\u00e3o de tenants (al\u00e9m do controle de acesso). Compile os requisitos t\u00e9cnicos, incluindo requisitos de seguran\u00e7a funcionais e n\u00e3o funcionais. Planeje e negocie o or\u00e7amento cobrindo todo o projeto, constru\u00e7\u00e3o, teste e opera\u00e7\u00e3o, incluindo atividades de seguran\u00e7a. Design Seguro \u2693\ufe0e O design seguro \u00e9 uma cultura e metodologia que avalia constantemente as amea\u00e7as e garante que o c\u00f3digo seja desenvolvido e testado de forma robusta para evitar m\u00e9todos de ataque conhecidos. A Modelagem de Amea\u00e7as deve ser integrada \u00e0s sess\u00f5es de refinamento (ou atividades semelhantes); procure por mudan\u00e7as nos fluxos de dados e controle de acesso ou outros controles de seguran\u00e7a. No desenvolvimento da hist\u00f3ria do usu\u00e1rio, determine o fluxo correto e os estados de falha, certifique-se de que sejam bem compreendidos e aceitos pelas partes respons\u00e1veis e afetadas. Analise suposi\u00e7\u00f5es e condi\u00e7\u00f5es para fluxos esperados e de falha, assegure-se de que eles ainda sejam precisos e desej\u00e1veis. Determine como validar as suposi\u00e7\u00f5es e fazer cumprir as condi\u00e7\u00f5es necess\u00e1rias para comportamentos adequados. Certifique-se de que os resultados sejam documentados na hist\u00f3ria do usu\u00e1rio. Aprenda com os erros e ofere\u00e7a incentivos positivos para promover melhorias. O design seguro n\u00e3o \u00e9 um add-on nem uma ferramenta que voc\u00ea pode adicionar ao software. Ciclo de Vida de Desenvolvimento Seguro \u2693\ufe0e O software seguro requer um ciclo de vida de desenvolvimento seguro, alguma forma de padr\u00e3o de projeto seguro, metodologia de paved road , bibliotecas de componentes protegidos, ferramentas e modelagem de amea\u00e7as. Procure seus especialistas em seguran\u00e7a no in\u00edcio de um projeto de software, durante todo o projeto e durante a manuten\u00e7\u00e3o de seu software. Considere aproveitar o OWASP Software Assurance Maturity Model (SAMM) para ajudar a estruturar seus esfor\u00e7os de desenvolvimento de software seguro. Como Prevenir \u2693\ufe0e Estabele\u00e7a e use um ciclo de vida de desenvolvimento seguro com profissionais de AppSec para ajudar a avaliar e projetar controles relacionados \u00e0 seguran\u00e7a e privacidade. Estabele\u00e7a e use bibliotecas de padr\u00f5es de projeto seguros ou componentes de paved road prontos para usar. Use Modelagem de Amea\u00e7as para autentica\u00e7\u00e3o cr\u00edtica, controle de acesso, l\u00f3gica de neg\u00f3cios e fluxos de chaves. Integre a linguagem e os controles de seguran\u00e7a \u00e0s hist\u00f3rias de usu\u00e1rios. Integre verifica\u00e7\u00f5es de plausibilidade em cada camada da sua aplica\u00e7\u00e3o (do front-end ao back-end). Escreva testes de unidade e integra\u00e7\u00e3o para validar se todos os fluxos cr\u00edticos s\u00e3o resistentes ao modelo de amea\u00e7a. Compile casos de uso de sucesso e casos de uso indevido para cada camada da sua aplica\u00e7\u00e3o. Separe as camadas de n\u00edvel no sistema e nas camadas de rede, dependendo das necessidades de exposi\u00e7\u00e3o e prote\u00e7\u00e3o. Separe os tenants de maneira robusta por design em todas as camadas. Limite o consumo de recursos por usu\u00e1rio ou servi\u00e7o. Exemplos de Cen\u00e1rios de Ataque \u2693\ufe0e Cen\u00e1rio #1: Um fluxo de trabalho de recupera\u00e7\u00e3o de credencial pode incluir \"perguntas e respostas\" (confirma\u00e7\u00e3o positiva), o que \u00e9 proibido pelo NIST 800-63b, o OWASP ASVS e o OWASP Top 10. Perguntas e respostas n\u00e3o podem ser consideradas evid\u00eancias de identidade, pois mais de uma pessoa pode saber as respostas, \u00e9 por isso que eles s\u00e3o proibidos. Esse c\u00f3digo deve ser removido e substitu\u00eddo por um design mais seguro. Cen\u00e1rio #2: Uma rede de cinemas permite descontos para reservas de grupos e tem um m\u00e1ximo de quinze participantes antes de exigir um dep\u00f3sito. Os invasores podem modelar esse fluxo e testar se conseguem reservar seiscentos lugares e todos os cinemas de uma s\u00f3 vez em algumas solicita\u00e7\u00f5es, causando uma enorme perda de receita. Cen\u00e1rio #3: O site de com\u00e9rcio eletr\u00f4nico de uma rede de varejo n\u00e3o tem prote\u00e7\u00e3o contra bots executados por cambistas que compram placas de v\u00eddeo de \u00faltima gera\u00e7\u00e3o para revender sites de leil\u00e3o. Isso cria uma publicidade terr\u00edvel para os fabricantes de placas de v\u00eddeo e propriet\u00e1rios de redes de varejo, al\u00e9m de sofrer com os entusiastas que n\u00e3o podem obter essas placas a qualquer pre\u00e7o. O design anti-bot cuidadoso e as regras de l\u00f3gica de dom\u00ednio, como compras feitas dentro de alguns segundos de disponibilidade, podem identificar compras n\u00e3o aut\u00eanticas e rejeitar tais transa\u00e7\u00f5es. Refer\u00eancias \u2693\ufe0e OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling Lista dos CWEs Mapeados \u2693\ufe0e CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"A04 Design Inseguro"},{"location":"pt_BR/A04_2021-Insecure_Design/#a042021-design-inseguro","text":"","title":"A04:2021 \u2013 Design Inseguro"},{"location":"pt_BR/A04_2021-Insecure_Design/#fatores","text":"CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 40 24.19% 3.00% 6.46 6.78 77.25% 42.51% 262,407 2,691","title":"Fatores"},{"location":"pt_BR/A04_2021-Insecure_Design/#visao-geral","text":"Uma nova categoria para 2021 concentra-se nos riscos relacionados a falhas de design e arquitetura, com uma chamada para mais uso de modelagem de amea\u00e7as ( threat modeling ), padr\u00f5es de design seguros e arquiteturas de refer\u00eancia. Como uma comunidade, precisamos ir al\u00e9m de \" shift-left \" no espa\u00e7o de codifica\u00e7\u00e3o para atividades antes da codifica\u00e7\u00e3o que s\u00e3o cr\u00edticas para os princ\u00edpios de Secure by Design . Not\u00e1veis Common Weakness Enumerations (CWEs) inclu\u00eddas s\u00e3o CWE-209: Gera\u00e7\u00e3o de Mensagem de Erro Contendo Informa\u00e7\u00f5es Confidenciais , CWE-256: Armazenamento Desprotegido de Credenciais , CWE-501: Viola\u00e7\u00e3o de Limites de Confian\u00e7a e CWE-522: Credenciais Insuficientemente Protegidas .","title":"Vis\u00e3o Geral"},{"location":"pt_BR/A04_2021-Insecure_Design/#descricao","text":"O design inseguro \u00e9 uma categoria ampla que representa diferentes pontos fracos, expressos como \"design de controle ausente ou ineficaz\". O design inseguro n\u00e3o \u00e9 a fonte de todas as outras 10 categorias principais de risco de seguran\u00e7a. H\u00e1 uma diferen\u00e7a entre design inseguro e implementa\u00e7\u00e3o insegura. N\u00f3s diferenciamos entre falhas de design e defeitos de implementa\u00e7\u00e3o por um motivo, eles t\u00eam diferentes causas ra\u00edzes e remedia\u00e7\u00e3o. Um design seguro ainda pode ter defeitos de implementa\u00e7\u00e3o que levam a vulnerabilidades que podem ser exploradas. Um design inseguro n\u00e3o pode ser corrigido por uma implementa\u00e7\u00e3o perfeita, pois, por defini\u00e7\u00e3o, os controles de seguran\u00e7a necess\u00e1rios nunca foram criados para a defesa contra ataques espec\u00edficos. Um dos fatores que contribuem para um design inseguro \u00e9 a falta de perfis de risco de neg\u00f3cios inerentes ao software ou sistema que est\u00e1 sendo desenvolvido e, portanto, a falha em determinar o n\u00edvel de design de seguran\u00e7a necess\u00e1rio.","title":"Descri\u00e7\u00e3o"},{"location":"pt_BR/A04_2021-Insecure_Design/#gerenciamento-de-requisitos-e-recursos","text":"Colete e negocie os requisitos de neg\u00f3cios para uma aplica\u00e7\u00e3o com a empresa, incluindo os requisitos de prote\u00e7\u00e3o relativos \u00e0 confidencialidade, integridade, disponibilidade e autenticidade de todos os ativos de dados e a l\u00f3gica de neg\u00f3cios esperada. Leve em considera\u00e7\u00e3o a exposi\u00e7\u00e3o da sua aplica\u00e7\u00e3o e se voc\u00ea precisa de segrega\u00e7\u00e3o de tenants (al\u00e9m do controle de acesso). Compile os requisitos t\u00e9cnicos, incluindo requisitos de seguran\u00e7a funcionais e n\u00e3o funcionais. Planeje e negocie o or\u00e7amento cobrindo todo o projeto, constru\u00e7\u00e3o, teste e opera\u00e7\u00e3o, incluindo atividades de seguran\u00e7a.","title":"Gerenciamento de Requisitos e Recursos"},{"location":"pt_BR/A04_2021-Insecure_Design/#design-seguro","text":"O design seguro \u00e9 uma cultura e metodologia que avalia constantemente as amea\u00e7as e garante que o c\u00f3digo seja desenvolvido e testado de forma robusta para evitar m\u00e9todos de ataque conhecidos. A Modelagem de Amea\u00e7as deve ser integrada \u00e0s sess\u00f5es de refinamento (ou atividades semelhantes); procure por mudan\u00e7as nos fluxos de dados e controle de acesso ou outros controles de seguran\u00e7a. No desenvolvimento da hist\u00f3ria do usu\u00e1rio, determine o fluxo correto e os estados de falha, certifique-se de que sejam bem compreendidos e aceitos pelas partes respons\u00e1veis e afetadas. Analise suposi\u00e7\u00f5es e condi\u00e7\u00f5es para fluxos esperados e de falha, assegure-se de que eles ainda sejam precisos e desej\u00e1veis. Determine como validar as suposi\u00e7\u00f5es e fazer cumprir as condi\u00e7\u00f5es necess\u00e1rias para comportamentos adequados. Certifique-se de que os resultados sejam documentados na hist\u00f3ria do usu\u00e1rio. Aprenda com os erros e ofere\u00e7a incentivos positivos para promover melhorias. O design seguro n\u00e3o \u00e9 um add-on nem uma ferramenta que voc\u00ea pode adicionar ao software.","title":"Design Seguro"},{"location":"pt_BR/A04_2021-Insecure_Design/#ciclo-de-vida-de-desenvolvimento-seguro","text":"O software seguro requer um ciclo de vida de desenvolvimento seguro, alguma forma de padr\u00e3o de projeto seguro, metodologia de paved road , bibliotecas de componentes protegidos, ferramentas e modelagem de amea\u00e7as. Procure seus especialistas em seguran\u00e7a no in\u00edcio de um projeto de software, durante todo o projeto e durante a manuten\u00e7\u00e3o de seu software. Considere aproveitar o OWASP Software Assurance Maturity Model (SAMM) para ajudar a estruturar seus esfor\u00e7os de desenvolvimento de software seguro.","title":"Ciclo de Vida de Desenvolvimento Seguro"},{"location":"pt_BR/A04_2021-Insecure_Design/#como-prevenir","text":"Estabele\u00e7a e use um ciclo de vida de desenvolvimento seguro com profissionais de AppSec para ajudar a avaliar e projetar controles relacionados \u00e0 seguran\u00e7a e privacidade. Estabele\u00e7a e use bibliotecas de padr\u00f5es de projeto seguros ou componentes de paved road prontos para usar. Use Modelagem de Amea\u00e7as para autentica\u00e7\u00e3o cr\u00edtica, controle de acesso, l\u00f3gica de neg\u00f3cios e fluxos de chaves. Integre a linguagem e os controles de seguran\u00e7a \u00e0s hist\u00f3rias de usu\u00e1rios. Integre verifica\u00e7\u00f5es de plausibilidade em cada camada da sua aplica\u00e7\u00e3o (do front-end ao back-end). Escreva testes de unidade e integra\u00e7\u00e3o para validar se todos os fluxos cr\u00edticos s\u00e3o resistentes ao modelo de amea\u00e7a. Compile casos de uso de sucesso e casos de uso indevido para cada camada da sua aplica\u00e7\u00e3o. Separe as camadas de n\u00edvel no sistema e nas camadas de rede, dependendo das necessidades de exposi\u00e7\u00e3o e prote\u00e7\u00e3o. Separe os tenants de maneira robusta por design em todas as camadas. Limite o consumo de recursos por usu\u00e1rio ou servi\u00e7o.","title":"Como Prevenir"},{"location":"pt_BR/A04_2021-Insecure_Design/#exemplos-de-cenarios-de-ataque","text":"Cen\u00e1rio #1: Um fluxo de trabalho de recupera\u00e7\u00e3o de credencial pode incluir \"perguntas e respostas\" (confirma\u00e7\u00e3o positiva), o que \u00e9 proibido pelo NIST 800-63b, o OWASP ASVS e o OWASP Top 10. Perguntas e respostas n\u00e3o podem ser consideradas evid\u00eancias de identidade, pois mais de uma pessoa pode saber as respostas, \u00e9 por isso que eles s\u00e3o proibidos. Esse c\u00f3digo deve ser removido e substitu\u00eddo por um design mais seguro. Cen\u00e1rio #2: Uma rede de cinemas permite descontos para reservas de grupos e tem um m\u00e1ximo de quinze participantes antes de exigir um dep\u00f3sito. Os invasores podem modelar esse fluxo e testar se conseguem reservar seiscentos lugares e todos os cinemas de uma s\u00f3 vez em algumas solicita\u00e7\u00f5es, causando uma enorme perda de receita. Cen\u00e1rio #3: O site de com\u00e9rcio eletr\u00f4nico de uma rede de varejo n\u00e3o tem prote\u00e7\u00e3o contra bots executados por cambistas que compram placas de v\u00eddeo de \u00faltima gera\u00e7\u00e3o para revender sites de leil\u00e3o. Isso cria uma publicidade terr\u00edvel para os fabricantes de placas de v\u00eddeo e propriet\u00e1rios de redes de varejo, al\u00e9m de sofrer com os entusiastas que n\u00e3o podem obter essas placas a qualquer pre\u00e7o. O design anti-bot cuidadoso e as regras de l\u00f3gica de dom\u00ednio, como compras feitas dentro de alguns segundos de disponibilidade, podem identificar compras n\u00e3o aut\u00eanticas e rejeitar tais transa\u00e7\u00f5es.","title":"Exemplos de Cen\u00e1rios de Ataque"},{"location":"pt_BR/A04_2021-Insecure_Design/#referencias","text":"OWASP Cheat Sheet: Secure Design Principles OWASP SAMM: Design:Security Architecture OWASP SAMM: Design:Threat Assessment NIST \u2013 Guidelines on Minimum Standards for Developer Verification of Software The Threat Modeling Manifesto Awesome Threat Modeling","title":"Refer\u00eancias"},{"location":"pt_BR/A04_2021-Insecure_Design/#lista-dos-cwes-mapeados","text":"CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"Lista dos CWEs Mapeados"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/","text":"A05:2021 \u2013 Configura\u00e7\u00e3o Incorreta de Seguran\u00e7a \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789 Vis\u00e3o Geral \u2693\ufe0e Saindo da #6 posi\u00e7\u00e3o na edi\u00e7\u00e3o anterior, 90% das aplica\u00e7\u00f5es foram testados para alguma forma de configura\u00e7\u00e3o incorreta, com uma taxa de incid\u00eancia m\u00e9dia de 4% e mais de 208 mil ocorr\u00eancias de Common Weakness Enumeration (CWE) nesta categoria de risco. Com mais mudan\u00e7as em software altamente configur\u00e1vel, n\u00e3o \u00e9 surpreendente ver essa categoria subir. CWEs not\u00e1veis inclu\u00eddos s\u00e3o CWE-16 Configura\u00e7\u00e3o e CWE-611 Restri\u00e7\u00e3o Impr\u00f3pria de Refer\u00eancia de Entidade Externa XML . Descri\u00e7\u00e3o \u2693\ufe0e A aplica\u00e7\u00e3o pode ser vulner\u00e1vel se for: Falta de prote\u00e7\u00e3o de seguran\u00e7a apropriada em qualquer parte da stack das aplica\u00e7\u00f5es ou permiss\u00f5es configuradas incorretamente em servi\u00e7os em nuvem. Recursos desnecess\u00e1rios s\u00e3o ativados ou instalados (por exemplo, portas, servi\u00e7os, p\u00e1ginas, contas ou privil\u00e9gios desnecess\u00e1rios). As contas padr\u00e3o e suas senhas ainda est\u00e3o ativadas e inalteradas. O tratamento de erros revela stack traces ou outras mensagens de erro excessivamente informativas aos usu\u00e1rios. Para sistemas atualizados, os recursos de seguran\u00e7a mais recentes est\u00e3o desabilitados ou n\u00e3o est\u00e3o configurados com seguran\u00e7a. As configura\u00e7\u00f5es de seguran\u00e7a nos servidores das aplica\u00e7\u00f5es, nos frameworks (por exemplo, Struts, Spring, ASP.NET), bibliotecas, bancos de dados, etc., n\u00e3o est\u00e3o definidas para proteger os valores. O servidor n\u00e3o envia cabe\u00e7alhos ou diretivas de seguran\u00e7a, ou eles n\u00e3o est\u00e3o configurados para proteger os valores. O software est\u00e1 desatualizado ou vulner\u00e1vel (consulte A06: 2021-Componentes Vulner\u00e1veis e Desatualizados ). Sem um processo de configura\u00e7\u00e3o de seguran\u00e7a de aplica\u00e7\u00f5es que seja integrado e repet\u00edvel, os sistemas correm um risco maior. Como Prevenir \u2693\ufe0e Devem ser implementados processos de instala\u00e7\u00e3o segura, incluindo: Um processo de prote\u00e7\u00e3o repet\u00edvel torna mais r\u00e1pido e f\u00e1cil implantar outro ambiente que esteja devidamente bloqueado. Os ambientes de desenvolvimento, controle de qualidade e produ\u00e7\u00e3o devem ser todos configurados de forma id\u00eantica, com credenciais diferentes usadas em cada ambiente. Este processo deve ser automatizado para minimizar o esfor\u00e7o necess\u00e1rio para configurar um novo ambiente seguro. Uma plataforma m\u00ednima sem recursos, componentes, documenta\u00e7\u00e3o e outros desnecess\u00e1rios. Remova ou n\u00e3o instale recursos e estruturas n\u00e3o utilizados. Uma tarefa para revisar e atualizar as configura\u00e7\u00f5es apropriadas para todas as notas de seguran\u00e7a, atualiza\u00e7\u00f5es e patches como parte do processo de gerenciamento de patch (consulte A06: 2021-Componentes Vulner\u00e1veis e Desatualizados ). Revise as permiss\u00f5es de armazenamento em nuvem (por exemplo, S3 bucket permissions ). Uma arquitetura de aplica\u00e7\u00e3o segmentada fornece separa\u00e7\u00e3o eficaz e segura entre componentes ou tenants , com segmenta\u00e7\u00e3o, conteineriza\u00e7\u00e3o ou grupos de seguran\u00e7a em nuvem (ACLs). Envio de diretivas de seguran\u00e7a para clientes, por exemplo, Security Headers . Um processo automatizado para verificar a efic\u00e1cia das configura\u00e7\u00f5es em todos os ambientes. Exemplos de Cen\u00e1rios de Ataque \u2693\ufe0e Cen\u00e1rio #1: O servidor da aplica\u00e7\u00e3o \u00e9 fornecido com os sistemas de amostra n\u00e3o removidos do servidor de produ\u00e7\u00e3o. Esses aplicativos de amostra t\u00eam falhas de seguran\u00e7a conhecidas que os invasores usam para comprometer o servidor. Suponha que um desses aplicativos seja o console de administra\u00e7\u00e3o e as contas padr\u00e3o n\u00e3o tenham sido alteradas. Nesse caso, o invasor efetua login com as senhas padr\u00e3o e assume o controle. Cen\u00e1rio #2: A listagem do diret\u00f3rio n\u00e3o est\u00e1 desabilitada no servidor. Um invasor descobre que pode simplesmente listar diret\u00f3rios. O invasor encontra e baixa as classes Java compiladas, que ele descompila e faz engenharia reversa para visualizar o c\u00f3digo. O invasor ent\u00e3o encontra uma falha grave de controle de acesso no aplicativo. Cen\u00e1rio #3: A configura\u00e7\u00e3o do servidor de aplica\u00e7\u00f5es permite que os detalhes das mensagens de erro, por exemplo, stack trace , sejam retornadas aos usu\u00e1rios. Isso potencialmente exp\u00f5e informa\u00e7\u00f5es confidenciais ou falhas subjacentes, como vers\u00f5es de componentes que s\u00e3o conhecidas por serem vulner\u00e1veis. Cen\u00e1rio #4: Um provedor de servi\u00e7os de nuvem tem permiss\u00f5es de compartilhamento padr\u00e3o abertas para a Internet por outros usu\u00e1rios de Content Security Policy header (CSP) . Isso permite que dados confidenciais armazenados no armazenamento em nuvem sejam acessados. Refer\u00eancias \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration Lista dos CWEs Mapeados \u2693\ufe0e CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"A05 Configura\u00e7\u00e3o Incorreta de Seguran\u00e7a"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#a052021-configuracao-incorreta-de-seguranca","text":"","title":"A05:2021 \u2013 Configura\u00e7\u00e3o Incorreta de Seguran\u00e7a"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#fatores","text":"CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 20 19.84% 4.51% 8.12 6.56 89.58% 44.84% 208,387 789","title":"Fatores"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#visao-geral","text":"Saindo da #6 posi\u00e7\u00e3o na edi\u00e7\u00e3o anterior, 90% das aplica\u00e7\u00f5es foram testados para alguma forma de configura\u00e7\u00e3o incorreta, com uma taxa de incid\u00eancia m\u00e9dia de 4% e mais de 208 mil ocorr\u00eancias de Common Weakness Enumeration (CWE) nesta categoria de risco. Com mais mudan\u00e7as em software altamente configur\u00e1vel, n\u00e3o \u00e9 surpreendente ver essa categoria subir. CWEs not\u00e1veis inclu\u00eddos s\u00e3o CWE-16 Configura\u00e7\u00e3o e CWE-611 Restri\u00e7\u00e3o Impr\u00f3pria de Refer\u00eancia de Entidade Externa XML .","title":"Vis\u00e3o Geral"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#descricao","text":"A aplica\u00e7\u00e3o pode ser vulner\u00e1vel se for: Falta de prote\u00e7\u00e3o de seguran\u00e7a apropriada em qualquer parte da stack das aplica\u00e7\u00f5es ou permiss\u00f5es configuradas incorretamente em servi\u00e7os em nuvem. Recursos desnecess\u00e1rios s\u00e3o ativados ou instalados (por exemplo, portas, servi\u00e7os, p\u00e1ginas, contas ou privil\u00e9gios desnecess\u00e1rios). As contas padr\u00e3o e suas senhas ainda est\u00e3o ativadas e inalteradas. O tratamento de erros revela stack traces ou outras mensagens de erro excessivamente informativas aos usu\u00e1rios. Para sistemas atualizados, os recursos de seguran\u00e7a mais recentes est\u00e3o desabilitados ou n\u00e3o est\u00e3o configurados com seguran\u00e7a. As configura\u00e7\u00f5es de seguran\u00e7a nos servidores das aplica\u00e7\u00f5es, nos frameworks (por exemplo, Struts, Spring, ASP.NET), bibliotecas, bancos de dados, etc., n\u00e3o est\u00e3o definidas para proteger os valores. O servidor n\u00e3o envia cabe\u00e7alhos ou diretivas de seguran\u00e7a, ou eles n\u00e3o est\u00e3o configurados para proteger os valores. O software est\u00e1 desatualizado ou vulner\u00e1vel (consulte A06: 2021-Componentes Vulner\u00e1veis e Desatualizados ). Sem um processo de configura\u00e7\u00e3o de seguran\u00e7a de aplica\u00e7\u00f5es que seja integrado e repet\u00edvel, os sistemas correm um risco maior.","title":"Descri\u00e7\u00e3o"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#como-prevenir","text":"Devem ser implementados processos de instala\u00e7\u00e3o segura, incluindo: Um processo de prote\u00e7\u00e3o repet\u00edvel torna mais r\u00e1pido e f\u00e1cil implantar outro ambiente que esteja devidamente bloqueado. Os ambientes de desenvolvimento, controle de qualidade e produ\u00e7\u00e3o devem ser todos configurados de forma id\u00eantica, com credenciais diferentes usadas em cada ambiente. Este processo deve ser automatizado para minimizar o esfor\u00e7o necess\u00e1rio para configurar um novo ambiente seguro. Uma plataforma m\u00ednima sem recursos, componentes, documenta\u00e7\u00e3o e outros desnecess\u00e1rios. Remova ou n\u00e3o instale recursos e estruturas n\u00e3o utilizados. Uma tarefa para revisar e atualizar as configura\u00e7\u00f5es apropriadas para todas as notas de seguran\u00e7a, atualiza\u00e7\u00f5es e patches como parte do processo de gerenciamento de patch (consulte A06: 2021-Componentes Vulner\u00e1veis e Desatualizados ). Revise as permiss\u00f5es de armazenamento em nuvem (por exemplo, S3 bucket permissions ). Uma arquitetura de aplica\u00e7\u00e3o segmentada fornece separa\u00e7\u00e3o eficaz e segura entre componentes ou tenants , com segmenta\u00e7\u00e3o, conteineriza\u00e7\u00e3o ou grupos de seguran\u00e7a em nuvem (ACLs). Envio de diretivas de seguran\u00e7a para clientes, por exemplo, Security Headers . Um processo automatizado para verificar a efic\u00e1cia das configura\u00e7\u00f5es em todos os ambientes.","title":"Como Prevenir"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#exemplos-de-cenarios-de-ataque","text":"Cen\u00e1rio #1: O servidor da aplica\u00e7\u00e3o \u00e9 fornecido com os sistemas de amostra n\u00e3o removidos do servidor de produ\u00e7\u00e3o. Esses aplicativos de amostra t\u00eam falhas de seguran\u00e7a conhecidas que os invasores usam para comprometer o servidor. Suponha que um desses aplicativos seja o console de administra\u00e7\u00e3o e as contas padr\u00e3o n\u00e3o tenham sido alteradas. Nesse caso, o invasor efetua login com as senhas padr\u00e3o e assume o controle. Cen\u00e1rio #2: A listagem do diret\u00f3rio n\u00e3o est\u00e1 desabilitada no servidor. Um invasor descobre que pode simplesmente listar diret\u00f3rios. O invasor encontra e baixa as classes Java compiladas, que ele descompila e faz engenharia reversa para visualizar o c\u00f3digo. O invasor ent\u00e3o encontra uma falha grave de controle de acesso no aplicativo. Cen\u00e1rio #3: A configura\u00e7\u00e3o do servidor de aplica\u00e7\u00f5es permite que os detalhes das mensagens de erro, por exemplo, stack trace , sejam retornadas aos usu\u00e1rios. Isso potencialmente exp\u00f5e informa\u00e7\u00f5es confidenciais ou falhas subjacentes, como vers\u00f5es de componentes que s\u00e3o conhecidas por serem vulner\u00e1veis. Cen\u00e1rio #4: Um provedor de servi\u00e7os de nuvem tem permiss\u00f5es de compartilhamento padr\u00e3o abertas para a Internet por outros usu\u00e1rios de Content Security Policy header (CSP) . Isso permite que dados confidenciais armazenados no armazenamento em nuvem sejam acessados.","title":"Exemplos de Cen\u00e1rios de Ataque"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#referencias","text":"OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes Application Security Verification Standard V19 Configuration NIST Guide to General Server Hardening CIS Security Configuration Guides/Benchmarks Amazon S3 Bucket Discovery and Enumeration","title":"Refer\u00eancias"},{"location":"pt_BR/A05_2021-Security_Misconfiguration/#lista-dos-cwes-mapeados","text":"CWE-2 7PK - Environment CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-15 External Control of System or Configuration Setting CWE-16 Configuration CWE-260 Password in Configuration File CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-520 .NET Misconfiguration: Use of Impersonation CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-541 Inclusion of Sensitive Information in an Include File CWE-547 Use of Hard-coded, Security-relevant Constants CWE-611 Improper Restriction of XML External Entity Reference CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-756 Missing Custom Error Page CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1174 ASP.NET Misconfiguration: Improper Model Validation","title":"Lista dos CWEs Mapeados"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/","text":"A06:2021 \u2013 Componentes Vulner\u00e1veis e Desatualizados \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 Vis\u00e3o Geral \u2693\ufe0e Foi o segundo colocado na pesquisa da comunidade do Top 10, mas tamb\u00e9m tinha dados suficientes para chegar ao Top 10 por meio da an\u00e1lise de dados. Componentes vulner\u00e1veis s\u00e3o um problema conhecido que n\u00f3s lutamos para testar e avaliar o risco e \u00e9 a \u00fanica categoria que n\u00e3o tem nenhuma Common Weakness Enumerations (CWEs) mapeada para os CWEs inclu\u00eddos, ent\u00e3o um exploits /impacto padr\u00e3o de 5.0 \u00e9 usado. Os CWEs not\u00e1veis inclu\u00eddos s\u00e3o CWE-1104: Uso de Componentes de Terceiros n\u00e3o Mantidos e os dois CWEs dos Top 10 de 2013 e 2017. Descri\u00e7\u00e3o \u2693\ufe0e Voc\u00ea provavelmente est\u00e1 vulner\u00e1vel: Se voc\u00ea n\u00e3o souber as vers\u00f5es de todos os componentes que usa (tanto do lado do cliente quanto do lado do servidor). Isso inclui componentes que voc\u00ea usa diretamente, bem como depend\u00eancias aninhadas. Se o software for vulner\u00e1vel, sem suporte ou desatualizado. Isso inclui o sistema operacional, servidor web/application , sistema de gerenciamento de banco de dados (DBMS), aplica\u00e7\u00f5es, APIs e todos os componentes, ambientes de tempo de execu\u00e7\u00e3o e bibliotecas. Se voc\u00ea n\u00e3o faz a varredura de vulnerabilidades regularmente e n\u00e3o assina os boletins de seguran\u00e7a relacionados aos componentes que voc\u00ea usa. Se voc\u00ea n\u00e3o corrigir ou atualizar a plataforma, as estruturas e as depend\u00eancias subjacentes de maneira oportuna e baseada em riscos. Isso geralmente acontece em ambientes em que a corre\u00e7\u00e3o \u00e9 uma tarefa mensal ou trimestral sob controle de altera\u00e7\u00f5es, deixando as organiza\u00e7\u00f5es abertas a dias ou meses de exposi\u00e7\u00e3o desnecess\u00e1ria a vulnerabilidades corrigidas. Se os desenvolvedores de software n\u00e3o testarem a compatibilidade de bibliotecas atualizadas, atualiza\u00e7\u00f5es ou com patches. Se voc\u00ea n\u00e3o proteger as configura\u00e7\u00f5es dos componentes (consulte A05: 2021-Configura\u00e7\u00e3o Incorreta de Seguran\u00e7a ). Como Prevenir \u2693\ufe0e Deve haver um processo de gerenciamento de depend\u00eancias para: Remova depend\u00eancias n\u00e3o utilizadas, recursos, componentes, arquivos e documenta\u00e7\u00e3o desnecess\u00e1rios. Atualizar continuamente um invent\u00e1rio com as vers\u00f5es dos componentes do lado do cliente e do lado do servidor (por exemplo, estruturas, bibliotecas) e suas depend\u00eancias usando ferramentas como versions , OWASP Dependency Check , retire.js , etc. Monitore continuamente fontes como Common Vulnerability and Exposures (CVE) e National Vulnerability Database (NVD) para vulnerabilidades nos componentes. Use ferramentas de an\u00e1lise de composi\u00e7\u00e3o de software para automatizar o processo. Inscreva-se para receber alertas de e-mail sobre vulnerabilidades de seguran\u00e7a relacionadas aos componentes que voc\u00ea usa. Obtenha componentes apenas de fontes oficiais por meio de links seguros. Prefira pacotes assinados para reduzir a chance de incluir um componente malicioso modificado (consulte A08: 2021-Software e Falhas de Integridade de Dados ). Monitore bibliotecas e componentes sem manuten\u00e7\u00e3o ou que n\u00e3o criem patches de seguran\u00e7a para vers\u00f5es anteriores. Se o patch n\u00e3o for poss\u00edvel, considere implantar um patch virtual para monitorar, detectar ou proteger contra o problema descoberto. Cada organiza\u00e7\u00e3o deve garantir um plano cont\u00ednuo de monitoramento, triagem e aplica\u00e7\u00e3o de atualiza\u00e7\u00f5es ou altera\u00e7\u00f5es de configura\u00e7\u00e3o durante a vida \u00fatil da aplica\u00e7\u00e3o ou portf\u00f3lio. Exemplos de Cen\u00e1rios de Ataque \u2693\ufe0e Cen\u00e1rio #1: Os componentes normalmente s\u00e3o executados com os mesmos privil\u00e9gios da pr\u00f3pria aplica\u00e7\u00e3o, portanto, as falhas em qualquer componente podem resultar em s\u00e9rio impacto. Essas falhas podem ser acidentais (por exemplo, erro de codifica\u00e7\u00e3o) ou intencionais (por exemplo, uma backdoor em um componente). Alguns exemplos de vulnerabilidades de componentes explor\u00e1veis descobertos s\u00e3o: CVE-2017-5638, uma vulnerabilidade de execu\u00e7\u00e3o remota de c\u00f3digo do Struts 2 que permite a execu\u00e7\u00e3o de c\u00f3digo arbitr\u00e1rio no servidor, foi responsabilizada por viola\u00e7\u00f5es significativas. Embora a Internet das Coisas (IoT) seja frequentemente dif\u00edcil ou imposs\u00edvel de corrigir, a import\u00e2ncia de corrigi-los pode ser grande (por exemplo, dispositivos biom\u00e9dicos). Existem ferramentas automatizadas para ajudar os invasores a encontrar sistemas n\u00e3o corrigidos ou configurados incorretamente. Por exemplo, o mecanismo de pesquisa Shodan IoT pode ajud\u00e1-lo a encontrar dispositivos que ainda sofrem com a vulnerabilidade Heartbleed corrigida em abril de 2014. Refer\u00eancias \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf Lista dos CWEs Mapeados \u2693\ufe0e CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"A06 Componentes Vulner\u00e1veis e Desatualizados"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#a062021-componentes-vulneraveis-e-desatualizados","text":"","title":"A06:2021 \u2013 Componentes Vulner\u00e1veis e Desatualizados"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#fatores","text":"CWEs Mapeados Taxa de Incid\u00eancia M\u00e1xima Taxa de Incid\u00eancia M\u00e9dia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima Cobertura M\u00e9dia Total de ocorr\u00eancias Total de CVEs 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"Fatores"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#visao-geral","text":"Foi o segundo colocado na pesquisa da comunidade do Top 10, mas tamb\u00e9m tinha dados suficientes para chegar ao Top 10 por meio da an\u00e1lise de dados. Componentes vulner\u00e1veis s\u00e3o um problema conhecido que n\u00f3s lutamos para testar e avaliar o risco e \u00e9 a \u00fanica categoria que n\u00e3o tem nenhuma Common Weakness Enumerations (CWEs) mapeada para os CWEs inclu\u00eddos, ent\u00e3o um exploits /impacto padr\u00e3o de 5.0 \u00e9 usado. Os CWEs not\u00e1veis inclu\u00eddos s\u00e3o CWE-1104: Uso de Componentes de Terceiros n\u00e3o Mantidos e os dois CWEs dos Top 10 de 2013 e 2017.","title":"Vis\u00e3o Geral"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#descricao","text":"Voc\u00ea provavelmente est\u00e1 vulner\u00e1vel: Se voc\u00ea n\u00e3o souber as vers\u00f5es de todos os componentes que usa (tanto do lado do cliente quanto do lado do servidor). Isso inclui componentes que voc\u00ea usa diretamente, bem como depend\u00eancias aninhadas. Se o software for vulner\u00e1vel, sem suporte ou desatualizado. Isso inclui o sistema operacional, servidor web/application , sistema de gerenciamento de banco de dados (DBMS), aplica\u00e7\u00f5es, APIs e todos os componentes, ambientes de tempo de execu\u00e7\u00e3o e bibliotecas. Se voc\u00ea n\u00e3o faz a varredura de vulnerabilidades regularmente e n\u00e3o assina os boletins de seguran\u00e7a relacionados aos componentes que voc\u00ea usa. Se voc\u00ea n\u00e3o corrigir ou atualizar a plataforma, as estruturas e as depend\u00eancias subjacentes de maneira oportuna e baseada em riscos. Isso geralmente acontece em ambientes em que a corre\u00e7\u00e3o \u00e9 uma tarefa mensal ou trimestral sob controle de altera\u00e7\u00f5es, deixando as organiza\u00e7\u00f5es abertas a dias ou meses de exposi\u00e7\u00e3o desnecess\u00e1ria a vulnerabilidades corrigidas. Se os desenvolvedores de software n\u00e3o testarem a compatibilidade de bibliotecas atualizadas, atualiza\u00e7\u00f5es ou com patches. Se voc\u00ea n\u00e3o proteger as configura\u00e7\u00f5es dos componentes (consulte A05: 2021-Configura\u00e7\u00e3o Incorreta de Seguran\u00e7a ).","title":"Descri\u00e7\u00e3o"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#como-prevenir","text":"Deve haver um processo de gerenciamento de depend\u00eancias para: Remova depend\u00eancias n\u00e3o utilizadas, recursos, componentes, arquivos e documenta\u00e7\u00e3o desnecess\u00e1rios. Atualizar continuamente um invent\u00e1rio com as vers\u00f5es dos componentes do lado do cliente e do lado do servidor (por exemplo, estruturas, bibliotecas) e suas depend\u00eancias usando ferramentas como versions , OWASP Dependency Check , retire.js , etc. Monitore continuamente fontes como Common Vulnerability and Exposures (CVE) e National Vulnerability Database (NVD) para vulnerabilidades nos componentes. Use ferramentas de an\u00e1lise de composi\u00e7\u00e3o de software para automatizar o processo. Inscreva-se para receber alertas de e-mail sobre vulnerabilidades de seguran\u00e7a relacionadas aos componentes que voc\u00ea usa. Obtenha componentes apenas de fontes oficiais por meio de links seguros. Prefira pacotes assinados para reduzir a chance de incluir um componente malicioso modificado (consulte A08: 2021-Software e Falhas de Integridade de Dados ). Monitore bibliotecas e componentes sem manuten\u00e7\u00e3o ou que n\u00e3o criem patches de seguran\u00e7a para vers\u00f5es anteriores. Se o patch n\u00e3o for poss\u00edvel, considere implantar um patch virtual para monitorar, detectar ou proteger contra o problema descoberto. Cada organiza\u00e7\u00e3o deve garantir um plano cont\u00ednuo de monitoramento, triagem e aplica\u00e7\u00e3o de atualiza\u00e7\u00f5es ou altera\u00e7\u00f5es de configura\u00e7\u00e3o durante a vida \u00fatil da aplica\u00e7\u00e3o ou portf\u00f3lio.","title":"Como Prevenir"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#exemplos-de-cenarios-de-ataque","text":"Cen\u00e1rio #1: Os componentes normalmente s\u00e3o executados com os mesmos privil\u00e9gios da pr\u00f3pria aplica\u00e7\u00e3o, portanto, as falhas em qualquer componente podem resultar em s\u00e9rio impacto. Essas falhas podem ser acidentais (por exemplo, erro de codifica\u00e7\u00e3o) ou intencionais (por exemplo, uma backdoor em um componente). Alguns exemplos de vulnerabilidades de componentes explor\u00e1veis descobertos s\u00e3o: CVE-2017-5638, uma vulnerabilidade de execu\u00e7\u00e3o remota de c\u00f3digo do Struts 2 que permite a execu\u00e7\u00e3o de c\u00f3digo arbitr\u00e1rio no servidor, foi responsabilizada por viola\u00e7\u00f5es significativas. Embora a Internet das Coisas (IoT) seja frequentemente dif\u00edcil ou imposs\u00edvel de corrigir, a import\u00e2ncia de corrigi-los pode ser grande (por exemplo, dispositivos biom\u00e9dicos). Existem ferramentas automatizadas para ajudar os invasores a encontrar sistemas n\u00e3o corrigidos ou configurados incorretamente. Por exemplo, o mecanismo de pesquisa Shodan IoT pode ajud\u00e1-lo a encontrar dispositivos que ainda sofrem com a vulnerabilidade Heartbleed corrigida em abril de 2014.","title":"Exemplos de Cen\u00e1rios de Ataque"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#referencias","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries MITRE Common Vulnerabilities and Exposures (CVE) search National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"Refer\u00eancias"},{"location":"pt_BR/A06_2021-Vulnerable_and_Outdated_Components/#lista-dos-cwes-mapeados","text":"CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"Lista dos CWEs Mapeados"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/","text":"A07:2021 \u2013 Identification and Authentication Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897 Overview \u2693\ufe0e Previously known as Broken Authentication , this category slid down from the second position and now includes Common Weakness Enumerations (CWEs) related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation . Description \u2693\ufe0e Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin\". Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures ). Has missing or ineffective multi-factor authentication. Exposes session identifier in the URL. Reuse session identifier after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity. How to Prevent \u2693\ufe0e Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts. Example Attack Scenarios \u2693\ufe0e Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated. References \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets List of Mapped CWEs \u2693\ufe0e CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"A07 Identification and Authentication Failures"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#a072021-identification-and-authentication-failures","text":"","title":"A07:2021 \u2013 Identification and Authentication Failures"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 22 14.84% 2.55% 7.40 6.50 79.51% 45.72% 132,195 3,897","title":"Factors"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#overview","text":"Previously known as Broken Authentication , this category slid down from the second position and now includes Common Weakness Enumerations (CWEs) related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch , CWE-287: Improper Authentication , and CWE-384: Session Fixation .","title":"Overview"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#description","text":"Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. Permits brute force or other automated attacks. Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin\". Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe. Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures ). Has missing or ineffective multi-factor authentication. Exposes session identifier in the URL. Reuse session identifier after successful login. Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.","title":"Description"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#how-to-prevent","text":"Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks. Do not ship or deploy with any default credentials, particularly for admin users. Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list. Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies. Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes. Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts.","title":"How to Prevent"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#example-attack-scenarios","text":"Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid. Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered, best practices, password rotation, and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication. Scenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated.","title":"Example Attack Scenarios"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#references","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity , Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"References"},{"location":"pt_BR/A07_2021-Identification_and_Authentication_Failures/#list-of-mapped-cwes","text":"CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"List of Mapped CWEs"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/","text":"A08:2021 \u2013 Software and Data Integrity Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152 Overview \u2693\ufe0e A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data . Description \u2693\ufe0e Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization. How to Prevent \u2693\ufe0e Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data Example Attack Scenarios \u2693\ufe0e Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server. References \u2693\ufe0e [OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent List of Mapped CWEs \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"A08 Software and Data Integrity Failures"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#a082021-software-and-data-integrity-failures","text":"","title":"A08:2021 \u2013 Software and Data Integrity Failures"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 10 16.67% 2.05% 6.94 7.94 75.04% 45.35% 47,972 1,152","title":"Factors"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#overview","text":"A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere , CWE-494: Download of Code Without Integrity Check , and CWE-502: Deserialization of Untrusted Data .","title":"Overview"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#description","text":"Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization.","title":"Description"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#how-to-prevent","text":"Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered. Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted. Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline. Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes. Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data","title":"How to Prevent"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#example-attack-scenarios","text":"Scenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. Scenario #2 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. Scenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server.","title":"Example Attack Scenarios"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#references","text":"[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon) [OWASP Cheat Sheet: Secure build and deployment](Coming Soon) OWASP Cheat Sheet: Infrastructure as Code OWASP Cheat Sheet: Deserialization SAFECode Software Integrity Controls A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack CodeCov Bash Uploader Compromise Securing DevOps by Julien Vehent","title":"References"},{"location":"pt_BR/A08_2021-Software_and_Data_Integrity_Failures/#list-of-mapped-cwes","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-353 Missing Support for Integrity Check CWE-426 Untrusted Search Path CWE-494 Download of Code Without Integrity Check CWE-502 Deserialization of Untrusted Data CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes","title":"List of Mapped CWEs"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/","text":"A09:2021 \u2013 Security Logging and Monitoring Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242 Overview \u2693\ufe0e Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File . Description \u2693\ufe0e Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ). How to Prevent \u2693\ufe0e Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting. Example Attack Scenarios \u2693\ufe0e Scenario #1: A children's health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator. References \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events List of Mapped CWEs \u2693\ufe0e CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"A09 Security Logging and Monitoring Failures"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#a092021-security-logging-and-monitoring-failures","text":"","title":"A09:2021 \u2013 Security Logging and Monitoring Failures"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 4 19.23% 6.51% 6.87 4.99 53.67% 39.97% 53,615 242","title":"Factors"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#overview","text":"Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File .","title":"Overview"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#description","text":"Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: Auditable events, such as logins, failed logins, and high-value transactions, are not logged. Warnings and errors generate no, inadequate, or unclear log messages. Logs of applications and APIs are not monitored for suspicious activity. Logs are only stored locally. Appropriate alerting thresholds and response escalation processes are not in place or effective. Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control ).","title":"Description"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#how-to-prevent","text":"Developers should implement some or all the following controls, depending on the risk of the application: Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. Ensure that logs are generated in a format that log management solutions can easily consume. Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later. There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting.","title":"How to Prevent"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#example-attack-scenarios","text":"Scenario #1: A children's health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator.","title":"Example Attack Scenarios"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#references","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Cheat Sheet: Application Logging Vocabulary OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"References"},{"location":"pt_BR/A09_2021-Security_Logging_and_Monitoring_Failures/#list-of-mapped-cwes","text":"CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging","title":"List of Mapped CWEs"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/","text":"A10:2021 \u2013 Server-Side Request Forgery (SSRF) \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Overview \u2693\ufe0e This category is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of Common Weakness Enumerations (CWEs) for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition. Description \u2693\ufe0e SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures. How to Prevent \u2693\ufe0e Developers can prevent SSRF by implementing some or all the following defense in depth controls: From Network layer \u2693\ufe0e Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic. Hints: ~ Establish an ownership and a lifecycle for firewall rules based on applications. ~ Log all accepted and blocked network flows on firewalls (see A09:2021-Security Logging and Monitoring Failures ). From Application layer: \u2693\ufe0e Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists. Additional Measures to consider: \u2693\ufe0e Don't deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost) For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs Example Attack Scenarios \u2693\ufe0e Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers \u2013 If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure \u2013 Attackers can access local files such as or internal services to gain sensitive information such as file:///etc/passwd</span> and http://localhost:28017/ . Scenario #3: Access metadata storage of cloud services \u2013 Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS). References \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! List of Mapped CWEs \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10 Server Side Request Forgery (SSRF)"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#a102021-server-side-request-forgery-ssrf","text":"","title":"A10:2021 \u2013 Server-Side Request Forgery (SSRF)"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Factors"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#overview","text":"This category is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of Common Weakness Enumerations (CWEs) for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition.","title":"Overview"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#description","text":"SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.","title":"Description"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#how-to-prevent","text":"Developers can prevent SSRF by implementing some or all the following defense in depth controls:","title":"How to Prevent"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#from-network-layer","text":"Segment remote resource access functionality in separate networks to reduce the impact of SSRF Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic. Hints: ~ Establish an ownership and a lifecycle for firewall rules based on applications. ~ Log all accepted and blocked network flows on firewalls (see A09:2021-Security Logging and Monitoring Failures ).","title":"From Network layer"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#from-application-layer","text":"Sanitize and validate all client-supplied input data Enforce the URL schema, port, and destination with a positive allow list Do not send raw responses to clients Disable HTTP redirections Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists.","title":"From Application layer:"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#additional-measures-to-consider","text":"Don't deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost) For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs","title":"Additional Measures to consider:"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#example-attack-scenarios","text":"Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: Scenario #1: Port scan internal servers \u2013 If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. Scenario #2: Sensitive data exposure \u2013 Attackers can access local files such as or internal services to gain sensitive information such as file:///etc/passwd</span> and http://localhost:28017/ . Scenario #3: Access metadata storage of cloud services \u2013 Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS).","title":"Example Attack Scenarios"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#references","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"References"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/#list-of-mapped-cwes","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"List of Mapped CWEs"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/","text":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF) \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Vis\u00e3o Geral \u2693\ufe0e Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura. Descri\u00e7\u00e3o \u2693\ufe0e As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas. Como Previnir \u2693\ufe0e Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade: Para a Camada de Rede \u2693\ufe0e Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ). Para a Camada de Aplica\u00e7\u00e3o: \u2693\ufe0e Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o. Medidas Adicionais a Considerar: \u2693\ufe0e N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas. Cen\u00e1rio de exemplo de um ataque \u2693\ufe0e Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS). Refer\u00eancias \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista de CWEs mapeadas \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)    ![icon](assets/TOP_10_Icons_Final_SSRF.png)"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#a102021-falsificacao-de-solicitacao-do-lado-do-servidor-ssrf","text":"","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#fatores","text":"CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fatores"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#visao-geral","text":"Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura.","title":"Vis\u00e3o Geral"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#descricao","text":"As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas.","title":"Descri\u00e7\u00e3o"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#como-previnir","text":"Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade:","title":"Como Previnir"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-rede","text":"Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ).","title":"Para a Camada de Rede"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-aplicacao","text":"Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o.","title":"Para a Camada de Aplica\u00e7\u00e3o:"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#medidas-adicionais-a-considerar","text":"N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas.","title":"Medidas Adicionais a Considerar:"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#cenario-de-exemplo-de-um-ataque","text":"Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS).","title":"Cen\u00e1rio de exemplo de um ataque"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#referencias","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Refer\u00eancias"},{"location":"pt_BR/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#lista-de-cwes-mapeadas","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista de CWEs mapeadas"},{"location":"pt_BR/A11_2021-Next_Steps/","text":"A11:2021 \u2013 Next Steps \u2693\ufe0e By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate. Code Quality issues \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References OWASP Code Review Guide Google Code Review Guide Denial of Service \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service Memory Management Errors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of attackers over the years. The attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function\u2019s return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker\u2019s data. References OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"Pr\u00f3ximos passos"},{"location":"pt_BR/A11_2021-Next_Steps/#a112021-next-steps","text":"By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate.","title":"A11:2021 \u2013 Next Steps"},{"location":"pt_BR/A11_2021-Next_Steps/#code-quality-issues","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 38 49.46% 2.22% 7.1 6.7 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References OWASP Code Review Guide Google Code Review Guide","title":"Code Quality issues"},{"location":"pt_BR/A11_2021-Next_Steps/#denial-of-service","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 8 17.54% 4.89% 8.3 5.9 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References OWASP Cheet Sheet: Denial of Service OWASP Attacks: Denial of Service","title":"Denial of Service"},{"location":"pt_BR/A11_2021-Next_Steps/#memory-management-errors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Avg Weighted Exploit Avg Weighted Impact Max Coverage Avg Coverage Total Occurrences Total CVEs 14 7.03% 1.16% 6.7 8.1 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of attackers over the years. The attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function\u2019s return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker\u2019s data. References OWASP Vulnerabilities: Buffer Overflow OWASP Attacks: Buffer Overflow Science Direct: Integer Overflow","title":"Memory Management Errors"},{"location":"pt_BR/ar/assets/readme/","text":"","title":"Readme"},{"location":"zh_TW/","text":"OWASP Top 10 2021 \u4ecb\u7d39 \u2693\ufe0e \u6b61\u8fce\u4f86\u5230\u6700\u65b0\u7248\u672c\u7684 OWASP Top 10\uff01! OWASP Top 10 2021 \u662f\u4e00\u500b\u5168\u65b0\u7684\u540d\u55ae\uff0c\u5305\u542b\u4e86\u4f60\u53ef\u4ee5\u5217\u5370\u4e0b\u4f86\u7684\u65b0\u5716\u793a\u8aaa\u660e\uff0c\u82e5\u6709\u9700\u8981\u7684\u8a71\uff0c\u4f60\u53ef\u4ee5\u5f9e\u6211\u5011\u7684\u7db2\u9801\u4e0a\u9762\u4e0b\u8f09\u3002 \u5728\u6b64\u6211\u5011\u60f3\u5c0d\u6240\u6709\u8ca2\u737b\u4e86\u4ed6\u5011\u6642\u9593\u548c\u8cc7\u6599\u7684\u4eba\u7d66\u4e88\u4e00\u500b\u6975\u5927\u7684\u611f\u8b1d\u3002\u6c92\u6709\u4f60\u5011\uff0c\u9019\u4e00\u500b\u65b0\u7248\u672c\u662f\u4e0d\u6703\u51fa\u73fe\u7684\u3002 \u8b1d\u8b1d \u3002 Top 10 for 2021 \u6709\u4ec0\u9ebc\u65b0\u7684\u8b8a\u5316\uff1f \u2693\ufe0e \u9019\u6b21\u5728 OWASP Top 10 for 2021 \u6709\u4e09\u500b\u5168\u65b0\u7684\u5206\u985e\uff0c\u6709\u56db\u500b\u5206\u985e\u6709\u505a\u540d\u7a31\u548c\u7bc4\u570d\u7684\u4fee\u6b63\uff0c\u4e26\u6709\u5c07\u4e00\u4e9b\u985e\u5225\u505a\u5408\u4f75\u3002 A01:2021-\u6b0a\u9650\u63a7\u5236\u5931\u6548 \u5f9e\u7b2c\u4e94\u540d\u79fb\u4e0a\u4f86; 94% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6b0a\u9650\u63a7\u5236\u5931\u6548\u7684\u554f\u984c\u3002\u5728\u6b0a\u9650\u63a7\u5236\u5931\u6548\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 34 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u90fd\u9ad8\u65bc\u5176\u4ed6\u7684\u5f31\u9ede\u985e\u5225\u3002 A02:2021-\u52a0\u5bc6\u6a5f\u5236\u5931\u6548 \u63d0\u5347\u4e00\u540d\u5230\u7b2c\u4e8c\u540d\uff0c\u5728\u4e4b\u524d\u70ba \u654f\u611f\u8cc7\u6599\u5916\u66dd \uff0c\u5728\u6b64\u5b9a\u7fa9\u4e0b\u6bd4\u8f03\u985e\u4f3c\u65bc\u4e00\u500b\u5ee3\u6cdb\u7684\u554f\u984c\u800c\u975e\u6839\u672c\u539f\u56e0\u3002\u5728\u6b64\u91cd\u65b0\u5b9a\u7fa9\u4e26\u5c07\u554f\u984c\u6838\u5fc3\u5b9a\u7fa9\u5728\u52a0\u5bc6\u6a5f\u5236\u7684\u5931\u6557\uff0c\u4e26\u56e0\u6b64\u9020\u6210\u654f\u611f\u6027\u8cc7\u6599\u5916\u6d29\u6216\u662f\u7cfb\u7d71\u88ab\u7834\u58de\u3002 A03:2021-\u6ce8\u5165\u5f0f\u653b\u64ca \u4e0b\u6ed1\u5230\u7b2c\u4e09\u540d\u300294% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6ce8\u5165\u5f0f\u653b\u64ca\u7684\u554f\u984c\u3002\u5728\u6ce8\u5165\u5f0f\u653b\u64ca\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 33 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u70ba\u5f31\u9ede\u554f\u984c\u7684\u7b2c\u4e8c\u9ad8\u3002\u8de8\u7ad9\u8173\u672c\u653b\u64ca\u73fe\u5728\u5728\u65b0\u7248\u672c\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u9019\u662f 2021 \u5e74\u7248\u672c\u7684\u65b0\u985e\u5225\uff0c\u4e26\u7279\u5225\u91dd\u6ce8\u5728\u8207\u8a2d\u8a08\u76f8\u95dc\u7684\u7f3a\u5931\u3002\u5982\u679c\u6211\u5011\u771f\u7684\u5e0c\u671b\u8b93\u6574\u500b\u7522\u696d\"\u5411\u5de6\u79fb\u52d5\"\uff0a\u8a3b\u4e00\uff0a\uff0c\u90a3\u6211\u5011\u5fc5\u9808\u9032\u4e00\u6b65\u7684\u5f80\u5a01\u8105\u5efa\u6a21\uff0c\u5b89\u5168\u8a2d\u8a08\u6a21\u584a\u7684\u89c0\u5ff5\uff0c\u548c\u5b89\u5168\u53c3\u8003\u67b6\u69cb\u524d\u9032\u3002 \uff0a\u8a3b\u4e00: Move Left \u65bc\u82f1\u6587\u539f\u6587\u4e2d\u4ee3\u8868\u5728\u8edf\u9ad4\u958b\u767c\u53ca\u4ea4\u4ed8\u904e\u7a0b\u4e2d\uff0c\u5728\u65e9\u671f\u627e\u51fa\u53ca\u8655\u7406\u76f8\u95dc\u554f\u984c\uff0c\u540c Shift Left Testing\u3002\uff0a A05:2021-\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677 \u5f9e\u4e0a\u4e00\u7248\u672c\u7684\u7b2c\u516d\u540d\u79fb\u52d5\u4e0a\u4f86\u300290% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u7684\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677\u3002\u5728\u66f4\u591a\u7684\u8edf\u9ad4\u5f80\u66f4\u9ad8\u5ea6\u548c\u6709\u5f48\u6027\u7684\u8a2d\u5b9a\u79fb\u52d5\uff0c\u6211\u5011\u4e26\u4e0d\u610f\u5916\u9019\u500b\u985e\u5225\u7684\u554f\u984c\u5f80\u4e0a\u79fb\u52d5\u3002\u5728\u524d\u7248\u672c\u4e2d\u7684 XML \u5916\u90e8\u5be6\u9ad4\u6ce8\u5165\u653b\u64ca \uff08XML External Entities\uff09\u73fe\u5728\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A06:2021-\u5371\u96aa\u6216\u904e\u820a\u7684\u5143\u4ef6 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u4f7f\u7528\u6709\u5df2\u77e5\u5f31\u9ede\u7684\u5143\u4ef6 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u65bc\u696d\u754c\u554f\u5377\u4e2d\u6392\u540d\u7b2c\u4e8c\uff0c\u4f46\u4e5f\u6709\u8db3\u5920\u7684\u7d71\u8a08\u8cc7\u6599\u8b93\u5b83\u53ef\u4ee5\u9032\u5165 Top 10\u3002\u9019\u500b\u985e\u5225\u5f9e 2017 \u7248\u672c\u7684\u7b2c\u4e5d\u540d\u722c\u5347\u5230\u7b2c\u516d\uff0c\u4e5f\u662f\u6211\u5011\u6301\u7e8c\u6399\u624e\u505a\u6e2c\u8a66\u548c\u8a55\u4f30\u98a8\u96aa\u7684\u985e\u5225\u3002\u9019\u4e5f\u662f\u552f\u4e00\u4e00\u500b\u6c92\u6709\u4efb\u4f55 CVE \u80fd\u88ab\u5c0d\u61c9\u5230 CWE \u5167\u7684\u985e\u5225\uff0c\u6240\u4ee5\u9810\u8a2d\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u5728\u9019\u985e\u5225\u7684\u5206\u6578\u4e0a\u88ab\u9810\u8a2d\u70ba 5.0\u3002 A07:2021-\u8a8d\u8b49\u53ca\u9a57\u8b49\u6a5f\u5236\u5931\u6548 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u932f\u8aa4\u7684\u8a8d\u8b49\u6a5f\u5236 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u6cb9\u7b2c\u4e8c\u540d\u4e0b\u6ed1\u81f3\u6b64\uff0c\u4e26\u540c\u6642\u5305\u542b\u4e86\u5c07\u8a8d\u8b49\u76f8\u95dc\u7f3a\u5931\u7684 CWE \u5305\u542b\u5728\u5167\u3002\u9019\u500b\u985e\u5225\u4ecd\u662f Top 10 \u4e0d\u53ef\u7f3a\u5c11\u7684\u4e00\u74b0\uff0c\u4f46\u540c\u6642\u4e5f\u6709\u767c\u73fe\u73fe\u5728\u6a19\u6e96\u5316\u7684\u67b6\u69cb\u6709\u5354\u52a9\u964d\u4f4e\u6b21\u98a8\u96aa\u767c\u751f\u6a5f\u7387\u3002 A08:2021-\u8edf\u9ad4\u53ca\u8cc7\u6599\u5b8c\u6574\u6027\u5931\u6548 \u9019\u662f 2021 \u5e74\u7248\u672c\u5168\u65b0\u7684\u985e\u5225\uff0c\u4e26\u5728\u8edf\u9ad4\u66f4\u65b0\uff0c\u6a5f\u654f\u53ca\u91cd\u8981\u8cc7\u6599\uff0c\u548c CI/CD \u7ba1\u9053\u4e2d\u4e26\u6c92\u6709\u505a\u5b8c\u6574\u6027\u7684\u78ba\u8a8d\u70ba\u524d\u63d0\u505a\u5047\u8a2d\u4e26\u9032\u884c\u8a55\u4f30\u3002\u5728\u8a55\u4f30\u4e2d\u5f71\u97ff\u6b0a\u91cd\u6700\u9ad8\u5206\u7684 CVE/CVSS \u8cc7\u6599\u90fd\u8207\u9019\u985e\u5225\u4e2d\u7684 10 \u500b CWE \u5c0d\u61c9\u5230\u30022017 \u5e74\u7248\u672c\u4e2d\u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\u73fe\u5728\u88ab\u5408\u4f75\u81f3\u6b64\u985e\u5225\u3002 A09:2021-\u8cc7\u5b89\u8a18\u9304\u53ca\u76e3\u63a7\u5931\u6548 \u5728\u4e4b\u524d\u70ba \u4e0d\u5b8c\u6574\u7684\u7d00\u9304\u53ca\u76e3\u63a7 \u4e26\u7d0d\u5165\u5728\u696d\u754c\u554f\u5377\u4e2d\u5728\u672c\u6b21\u5217\u540d\u70ba\u7b2c\u4e09\u540d\u4e26\u5f9e\u4e4b\u524d\u7684\u7b2c\u5341\u540d\u4e0a\u79fb\u3002\u9019\u500b\u985e\u5225\u5c07\u64f4\u5145\u53bb\u7d0d\u5165\u66f4\u591a\u76f8\u95dc\u7684\u7f3a\u5931\uff0c\u4f46\u9019\u4e5f\u662f\u76f8\u7576\u96e3\u53bb\u9a57\u8b49\uff0c\u4e26\u6c92\u6709\u76f8\u7576\u591a\u7684 CVE/CVSS \u8cc7\u6599\u53ef\u4ee5\u4f50\u8b49\u3002\u4f46\u662f\u5728\u9019\u500b\u985e\u5225\u4e2d\u7684\u7f3a\u5931\u6703\u76f4\u63a5\u5f71\u97ff\u5230\u6574\u9ad4\u5b89\u5168\u7684\u53ef\u8996\u6027\uff0c\u4e8b\u4ef6\u544a\u8b66\u53ca\u9451\u8b58\u3002 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u9019\u500b\u985e\u5225\u662f\u5728\u696d\u754c\u554f\u5377\u6392\u540d\u7b2c\u4e00\u540d\uff0c\u4e26\u5728\u6b64\u7248\u672c\u5167\u7d0d\u5165\u3002\u7531\u8cc7\u6599\u986f\u793a\u6b64\u554f\u984c\u6709\u8f03\u4f4e\u88ab\u9a57\u6e2c\u6b21\u6578\u548c\u7bc4\u570d\uff0c\u4f46\u6709\u9ad8\u65bc\u5e73\u5747\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u6bd4\u7387\u3002\u9019\u500b\u985e\u5225\u7684\u51fa\u73fe\u4e5f\u662f\u56e0\u70ba\u696d\u754c\u5c08\u5bb6\u91cd\u8907\u7533\u660e\u9019\u985e\u5225\u7684\u554f\u984c\u76f8\u7576\u91cd\u8981\uff0c\u5373\u4f7f\u5728\u672c\u6b21\u8cc7\u6599\u4e2d\u4e26\u6c92\u6709\u8db3\u5920\u7684\u8cc7\u6599\u53bb\u986f\u793a\u9019\u500b\u554f\u984c\u3002 \u5206\u6790\u65b9\u6cd5 \u2693\ufe0e \u672c\u6b21 Top 10 \u7684\u9078\u64c7\u65b9\u5f0f\u6bd4\u4ee5\u5f80\u66f4\u91cd\u8996\u8cc7\u6599\u5206\u6790\uff0c\u4f46\u4e26\u4e0d\u662f\u5b8c\u5168\u4ee5\u8cc7\u6599\u5206\u6790\u70ba\u4e3b\u3002\u6211\u5011\u5f9e\u8cc7\u6599\u5206\u6790\u4e2d\u6311\u9078\u4e86\u516b\u500b\u98a8\u96aa\u985e\u5225\uff0c\u7136\u5f8c\u7531\u696d\u754c\u554f\u5377\u4e2d\u6311\u9078\u5169\u500b\u98a8\u96aa\u985e\u5225\u3002\u6211\u5011\u5f9e\u904e\u5f80\u7684\u5206\u4eab\u8cc7\u6599\u4e2d\u53bb\u77ad\u89e3\uff0c\u4e26\u6709\u6211\u5011\u4e00\u500b\u57fa\u672c\u7684\u7406\u7531\u3002\u539f\u56e0\u662f\u6240\u6709\u7684\u8cc7\u5b89\u7814\u7a76\u4eba\u54e1\u90fd\u4e0d\u65b7\u7684\u5728\u627e\u65b0\u7684\u5f31\u9ede\u4e26\u627e\u51fa\u65b9\u6cd5\u53bb\u9a57\u8b49\u5f31\u9ede\uff0c\u4f46\u6703\u9700\u8981\u6642\u9593\u624d\u80fd\u5c07\u9019\u4e9b\u9a57\u6e2c\u65b9\u6cd5\u7d0d\u5165\u5230\u65e2\u6709\u7684\u5de5\u5177\u548c\u6e2c\u8a66\u6d41\u7a0b\u4e2d\u3002\u7576\u6211\u5011\u80fd\u6709\u6548\u7684\u5927\u91cf\u6e2c\u8a66\u9019\u500b\u5f31\u9ede\u6642\uff0c\u6709\u53ef\u80fd\u5df2\u7d93\u904e\u4e86\u591a\u5e74\u7684\u6642\u9593\u3002\u70ba\u4e86\u8981\u8b93\u5169\u8005\u4e4b\u9593\u6709\u5e73\u8861\uff0c\u6211\u5011\u4f7f\u7528\u696d\u754c\u554f\u5377\u8acb\u6559\u5728\u524d\u7dda\u7684\u8cc7\u5b89\u7814\u7a76\u5c08\u5bb6\u5011\u4e26\u77ad\u89e3\u4ed6\u5011\u89ba\u5f97\u6709\u54ea\u4e9b\u662f\u4ed6\u5011\u89ba\u5f97\u56b4\u91cd\u4f46\u5c1a\u672a\u51fa\u73fe\u5728\u6e2c\u8a66\u8cc7\u6599\u4e2d\u7684\u6f0f\u6d1e\u53ca\u554f\u984c\u3002 \u9019\u662f\u5e7e\u500b\u6211\u5011\u70ba\u4e86\u8981\u8b93 OWASP Top 10 \u66f4\u52a0\u6210\u719f\u7684\u91cd\u8981\u6539\u8b8a\u3002 \u5982\u4f55\u5efa\u69cb\u98a8\u96aa\u985e\u5225 \u2693\ufe0e \u6709\u5225\u65bc\u4e0a\u4e00\u500b\u7248\u672c\uff0c\u5728\u9019\u6b21\u7684 OWASP Top 10 \u6709\u4e00\u4e9b\u98a8\u96aa\u985e\u5225\u7684\u4fee\u6539\u3002\u6211\u5011\u5728\u6b64\u4ee5\u6bd4\u8f03\u9ad8\u7684\u89d2\u5ea6\u8aaa\u660e\u4e00\u4e0b\u9019\u6b21\u7684\u985e\u5225\u4fee\u6539\u3002 \u5728\u4e0a\u4e00\u6b21\u7684\u8cc7\u6599\u6536\u96c6\u7576\u4e2d\uff0c\u6211\u5011\u5c07\u8cc7\u6599\u6536\u96c6\u7684\u91cd\u5fc3\u653e\u5728\u9810\u5148\u5b9a\u7fa9\u597d\u7684\u7d04 30 \u500b CWEs \u4e26\u7d0d\u5165\u4e00\u500b\u6b04\u4f4d\u5fb5\u6c42\u5176\u4ed6\u7684\u767c\u73fe\u3002\u5f9e\u9019\u88e1\u6211\u5011\u770b\u5230\u6c7a\u591a\u6578\u7684\u7d44\u7e54\u90fd\u53ea\u6703\u5c08\u6ce8\u5728\u9019 30 \u500b CWEs \u800c\u4e0d\u5e38\u52a0\u5165\u5176\u4ed6\u4ed6\u5011\u53ef\u80fd\u767c\u73fe\u7684 CWEs\u3002\u5728\u9019\u6b21\u7684\u6539\u7248\u4e2d\uff0c\u6211\u5011\u5c07\u6240\u6709\u7684\u554f\u984c\u90fd\u4ee5\u958b\u653e\u5f0f\u7684\u65b9\u6cd5\u8655\u7406\uff0c\u4e26\u6c92\u6709\u9650\u5236\u5728\u4efb\u4f55\u4e00\u500b CWEs\u3002\u6211\u5011\u8acb\u6559\u4e86\u5f9e 2017 \u5e74\u958b\u59cb\u6240\u6e2c\u8a66\u7684\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\uff0c\u7136\u5f8c\u5728\u9019\u4e9b\u7a0b\u5f0f\u4e2d\u81f3\u5c11\u6709\u4e00\u500b CWE \u88ab\u767c\u73fe\u7684\u6578\u91cf\u3002\u9019\u500b\u683c\u5f0f\u8b93\u6211\u5011\u80fd\u5920\u8ffd\u8e64\u6bcf\u500b CWE \u8ddf\u6240\u6709\u88ab\u9a57\u6e2c\u53ca\u7d71\u8a08\u7684\u61c9\u7528\u7a0b\u5f0f\u7684\u6578\u91cf\u8ddf\u95dc\u4fc2\u3002\u6211\u5011\u4e5f\u5ffd\u7565\u4e86 CWE \u51fa\u73fe\u7684\u983b\u7387\uff0c\u96d6\u7136\u5728\u67d0\u4e9b\u72c0\u6cc1\u4e0b\u9019\u4e5f\u8a31\u662f\u5fc5\u9808\u7684\uff0c\u4f46\u9019\u537b\u96b1\u85cf\u4e86\u98a8\u96aa\u985e\u5225\u672c\u8eab\u8207\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\u6574\u9ad4\u7684\u95dc\u4fc2\u3002\u6240\u4ee5\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u6709 4 \u500b\u6216\u662f 4,000 \u500b\u5f31\u9ede\u4e26\u4e0d\u662f\u88ab\u8a08\u7b97\u5728 Top 10 \u7684\u57fa\u790e\u3002\u4f46\u540c\u6642\u6211\u5011\u4e5f\u5f9e\u539f\u672c\u7684 30 \u591a\u500b CWEs \u589e\u9577\u5230\u5feb 400 \u591a\u500bCWEs \u53bb\u9032\u884c\u5206\u6790\u3002\u6211\u5011\u56e0\u6b64\u4e5f\u8a08\u756b\u672a\u4f86\u505a\u66f4\u591a\u7684\u8cc7\u6599\u5206\u6790\uff0c\u4e26\u5728\u5c0d\u6b64\u7248\u672c\u9032\u884c\u88dc\u5145\u8aaa\u660e\u3002\u800c\u9019\u4e9b\u589e\u52a0\u7684 CWEs \u4e5f\u540c\u6642\u5f71\u97ff\u4e86\u9019\u6b21\u98a8\u96aa\u985e\u5225\u7684\u898f\u5283\u3002 \u6211\u5011\u82b1\u4e86\u597d\u5e7e\u500b\u6708\u5c07 CWEs \u9032\u884c\u5206\u7d44\u8ddf\u5206\u985e\uff0c\u800c\u4e14\u5176\u5be6\u53ef\u4ee5\u4e00\u76f4\u82b1\u66f4\u591a\u500b\u6708\u53bb\u505a\u9019\u4ef6\u4e8b\u60c5\u3002\u4f46\u6211\u5011\u5fc5\u9808\u5728\u67d0\u4e00\u500b\u6642\u9593\u9ede\u505c\u4f4f\u3002\u5728 CWEs \u7576\u4e2d\uff0c\u540c\u6642\u6709 \u539f\u56e0 \u4ee5\u53ca \u75c7\u72c0 \u7684\u554f\u984c\uff0c\u800c\u50cf\u662f \"\u52a0\u5bc6\u6a5f\u5236\u5931\u6548\" \u548c \"\u8a2d\u5b9a\u554f\u984c\" \u9019\u985e\u578b\u7684 \u539f\u56e0 \u8207 \"\u6a5f\u654f\u8cc7\u6599\u5916\u6d29\" \u548c \"\u963b\u65b7\u670d\u52d9\" \u9019\u985e\u578b\u7684 \u75c7\u72c0 \u662f\u5c0d\u7acb\u7684\u3002\u56e0\u6b64\u6211\u5011\u6c7a\u5b9a\u5728\u53ef\u4ee5\u7684\u6642\u5019\u8981\u66f4\u5c08\u6ce8\u65bc\u5e95\u5c64\u7684\u539f\u56e0\uff0c\u56e0\u70ba\u9019\u662f\u53ef\u4ee5\u6709\u6548\u6307\u51fa\u554f\u984c\u7684\u672c\u9ad4\u8ddf\u540c\u6642\u63d0\u4f9b\u554f\u984c\u7684\u89e3\u6c7a\u65b9\u5411\u3002\u5c08\u6ce8\u5728\u554f\u984c\u6838\u5fc3\u800c\u4e0d\u5c07\u91cd\u5fc3\u653e\u5728\u75c7\u72c0\u4e26\u4e0d\u662f\u4e00\u500b\u65b0\u7684\u6982\u5ff5\b\b\uff0cTop Ten \u6709\u53f2\u4ee5\u4f86\u4e00\u76f4\u662f\u75c7\u72c0\u8ddf\u554f\u984c\u6838\u5fc3\u7684\u7d9c\u5408\u9ad4\uff0c\u53ea\u662f\u9019\u6b21\u6211\u5011\u66f4\u523b\u610f\u7684\u5c07\u4ed6\u7a81\u986f\u51fa\u4f86\u3002\u5728\u9019\u6b21\u7684\u65b0\u7248\u672c\u4e2d\uff0c\u6bcf\u4e00\u500b\u985e\u5225\u5167\u7684\u5e73\u5747\u6709 19.6 \u500b CWE\uff0c\u800c\u6700\u4f4e\u7684 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u6709\u4e00\u500b CWE \u5230 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u6709\u56db\u5341\u500b CWE\u3002\u9019\u500b\u65b0\u7684\u985e\u5225\u67b6\u69cb\u80fd\u63d0\u4f9b\u4f01\u696d\u66f4\u591a\u7684\u8cc7\u5b89\u8a13\u7df4\u7684\u597d\u8655\uff0c\u56e0\u70ba\u5728\u65b0\u7684\u67b6\u69cb\u4e0b\u53ef\u4ee5\u66f4\u5c08\u6ce8\u5728\u67d0\u500b\u8a9e\u7cfb\u6216\u5e73\u53f0\u4e0a\u7684 CWE\u3002 \u9078\u64c7\u985e\u5225\u6642\u8cc7\u6599\u7684\u4f7f\u7528\u65b9\u5f0f \u2693\ufe0e \u5728 2017 \u5e74\uff0c\u6211\u5011\u7528\u4e8b\u4ef6\u767c\u751f\u6b21\u6578\u53bb\u5224\u65b7\u53ef\u80fd\u767c\u751f\u7684\u6a5f\u7387\u53bb\u9078\u64c7\u985e\u5225\uff0c\u7136\u5f8c\u900f\u904e\u4e00\u7fa4\u5728\u696d\u754c\u64c1\u6709\u6578\u5341\u5e74\u7d93\u9a57\u7684\u5c08\u5bb6\u5718\u5c0d\u8a0e\u8ad6\u4e26\u4f9d\u7167 \u53ef\u767c\u751f\u6027 \uff0c \u53ef\u767c\u73fe\u6027\uff08\u540c\u53ef\u80fd\u6027\uff09 \uff0c\u548c \u6280\u8853\u5f71\u97ff\u529b \u53bb\u505a\u6392\u540d\u3002\u5728 2021 \u5e74\uff0c\u6211\u5011\u5e0c\u671b\u5982\u679c\u53ef\u4ee5\u7684\u8a71\u7528\u8cc7\u6599\u8b49\u660e\u53ef\u767c\u751f\u6027\u548c\u6280\u8853\u5f71\u97ff\u6027\u3002 \u6211\u5011\u4e0b\u8f09\u4e86 OWASP Depndency Check \u4e26\u53d6\u51fa\u4e86 CVSS \u6f0f\u6d1e\uff0c\u4e26\u5c07\u76f8\u95dc\u7684 CWE \u7528\u5f71\u97ff\u529b\u5206\u6578\u5206\u7fa4\u3002\u9019\u82b1\u4e86\u4e00\u4e9b\u6642\u9593\u548c\u529b\u6c23\u53bb\u7814\u7a76\u56e0\u70ba\u6240\u6709\u7684 CVEs \u90fd\u6709 CVSSv2 \u5206\u6578\uff0c\u4f46\u662f\u5728\u5176\u4e2d\u56e0\u70ba CVSSv2 \u8ddf CVSSv3 \u4e4b\u9593\u6709\u4e00\u4e9b\u7f3a\u5931\u662f\u5fc5\u9808\u88ab\u4fee\u6b63\u7684\u3002\u7d93\u904e\u4e86\u4e00\u6bb5\u6642\u9593\u5f8c\uff0c\u6240\u6709\u7684 CVEs \u90fd\u6703\u6709\u5c0d\u61c9\u7684 CVSSv3 \u7684\u5206\u6578\u3002\u518d\u8005\uff0c\u5206\u6578\u7684\u7bc4\u570d\u548c\u8a08\u7b97\u7684\u516c\u5f0f\u5728 CVSSv2 \u548c CVSSv3 \u4e4b\u9593\u4e5f\u505a\u4e86\u66f4\u65b0\u3002 \u5728 CVSSv2 \u4e2d\uff0c\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5169\u8005\u90fd\u53ef\u9054\u5230 10.0 \u5206\uff0c\u4f46\u662f\u516c\u5f0f\u672c\u8eab\u6703\u5c07\u5169\u8005\u8abf\u6574\u70ba\u6f0f\u6d1e\u4f54 60%\uff0c\u7136\u5f8c\u5f71\u97ff\u529b\u4f54 40%\u3002\u5728 CVSSv3 \u4e2d\uff0c\u7406\u8ad6\u4e0a\u7684\u6700\u9ad8\u503c\u5c07\u6f0f\u6d1e\u9650\u5236\u5728 6.0 \u5206\u800c\u5f71\u97ff\u529b\u5728 4.0 \u5206\u3002\u7576\u8003\u616e\u5230\u6b0a\u91cd\u6bd4\u7387\u6642\uff0c\u5f71\u97ff\u529b\u7684\u5206\u6578\u6703\u504f\u9ad8\uff0c\u5728 CVSSv3 \u4e2d\u5e7e\u4e4e\u5e73\u5747\u6703\u591a\u51fa 1.5 \u5206\uff0c\u800c\u6f0f\u6d1e\u5206\u6578\u537b\u6703\u5e73\u5747\u5c11 0.5 \u5206\u3002 \u5f9e OWASP Dependcy Check \u7fe0\u53d6\u51fa\u7684 NVD \u8cc7\u6599\u7576\u4e2d\u6709\u5c07\u8fd1 12.5 \u842c\u7b46 CVE \u8cc7\u6599\u6709\u5c0d\u61c9\u5230 CWE\uff0c\u800c\u6709 241 \u7b46\u7368\u7279\u7684 CWEs \u6709\u5c0d\u61c9\u5230 CVE\u30026.2\u842c\u7b46 CWE \u6709\u5c0d\u61c9\u5230 CVSSv3 \u5206\u6578\uff0c\u6240\u4ee5\u5927\u7d04\u662f\u6574\u9ad4\u8cc7\u6599\u4e2d\u4e00\u534a\u7684\u90e8\u5206\u3002 \u800c\u5728 Top Ten\uff0c\u6211\u5011\u8a08\u7b97\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u7684\u5e73\u5747\u5206\u6578\u7684\u65b9\u5f0f\u5982\u4e0b\u3002\u6211\u5011\u5c07\u6240\u6709\u6709 CVSS \u5206\u6578\u7684 CVE \u4f9d\u7167 CWE \u5206\u7d44\uff0c\u7136\u5f8c\u4f9d\u7167\u6709 CVSSv3 \u7684\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5728\u6240\u6709\u8cc7\u6599\u4e2d\u7684\u767e\u5206\u6bd4\u4f5c\u6b0a\u91cd\uff0c\u5728\u52a0\u4e0a\u8cc7\u6599\u4e2d\u6709 CVSSv2 \u7684\u8cc7\u6599\u53bb\u505a\u5e73\u5747\u3002\u6211\u5011\u5c07\u9019\u4e9b\u5e73\u5747\u5f8c\u7684 CWEs \u5c0d\u61c9\u5230\u8cc7\u6599\u4e2d\uff0c\u7136\u5f8c\u5c07\u4ed6\u7684\u6f0f\u6d1e\u548c\u5f15\u60f3\u529b\u5206\u6578\u4f7f\u7528\u5728\u53e6\u4e00\u534a\u7684\u98a8\u96aa\u516c\u5f0f\u4e2d\u3002 \u70ba\u4ec0\u9ebc\u5c31\u4e0d\u7d14\u7cb9\u505a\u7d71\u8a08\u5206\u6790\uff1f \u2693\ufe0e \u9019\u4e9b\u8cc7\u6599\u7684\u7d50\u679c\u6700\u4e3b\u8981\u662f\u88ab\u9650\u5236\u5728\u80fd\u4f7f\u7528\u81ea\u52d5\u5de5\u5177\u6e2c\u8a66\u51fa\u4f86\u7684\u7d50\u679c\u3002\u53ef\u662f\u7576\u4f60\u8ddf\u4e00\u4f4d\u6709\u7d93\u9a57\u7684\u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u5c08\u5bb6\u804a\u7684\u6642\u5019\uff0c\u4ed6\u5011\u6703\u8ddf\u4f60\u8aaa\u7d55\u5927\u591a\u6578\u4ed6\u5011\u627e\u5230\u7684\u554f\u984c\u90fd\u4e0d\u5728\u9019\u4e9b\u8cc7\u6599\u88e1\u9762\u3002\u539f\u56e0\u662f\u4e00\u500b\u6e2c\u8a66\u8981\u88ab\u81ea\u52d5\u5316\u7684\u6642\u5019\uff0c\u9700\u8981\u82b1\u6642\u9593\u53bb\u958b\u767c\u9019\u4e9b\u5f31\u9ede\u6e2c\u8a66\u7684\u65b9\u6cd5\u8ad6\uff0c\u7576\u4f60\u9700\u8981\u5c07\u9019\u500b\u6e2c\u8a66\u81ea\u52d5\u5316\u4e26\u80fd\u5c0d\u5927\u91cf\u7684\u61c9\u7528\u7a0b\u5f0f\u53bb\u9a57\u8b49\u6642\uff0c\u53c8\u6703\u82b1\u4e0a\u66f4\u591a\u7684\u6642\u9593\u3002\u7576\u6211\u5011\u56de\u982d\u770b\u53bb\u5e74\u7372\u4ee5\u524d\u6709\u53ef\u80fd\u6c92\u51fa\u73fe\u7684\u4e00\u4e9b\u554f\u984c\u7684\u8da8\u52e2\uff0c\u6211\u5011\u767c\u73fe\u5176\u5be6\u90fd\u6c92\u6709\u5728\u9019\u4e9b\u8cc7\u6599\u7576\u4e2d\u3002 \u56e0\u6b64\uff0c\u7531\u65bc\u8cc7\u6599\u4e0d\u5b8c\u5168\u7684\u95dc\u4fc2\uff0c\u6211\u5011\u53ea\u6709\u5f9e\u8cc7\u6599\u4e2d\u9078\u51fa 8 \u500b\u985e\u5225\uff0c\u800c\u4e26\u4e0d\u662f 10 \u500b\u3002\u5269\u4e0b\u7684\u5169\u500b\u985e\u5225\u662f\u5f9e\u696d\u754c\u554f\u5377\u4e2d\u6240\u9078\u51fa\u7684\u3002\u9019\u6703\u5141\u8a31\u5728\u524d\u7dda\u7684\u53c3\u8207\u8005\u53bb\u9078\u51fa\u4ed6\u5011\u8a8d\u70ba\u7684\u9ad8\u98a8\u96aa\uff0c\u800c\u4e0d\u662f\u7d14\u7cb9\u4f9d\u64da\u8cc7\u6599\u53bb\u5224\u65b7\uff08\u751a\u81f3\u53ef\u80fd\u8cc7\u6599\u6c38\u9060\u90fd\u4e0d\u6703\u6709\u51fa\u73fe\u7684\u8e64\u8de1\uff09\u3002 \u70ba\u4ec0\u9ebc\u7528\u4e8b\u6545\u7387\u800c\u4e0d\u662f\u7528\u767c\u751f\u6b21\u6578 \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page , we list the data elements and structure we are looking for and how to submit them. In the GitHub project , we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped : The number of CWEs mapped to a category by the Top 10 team. Incidence Rate : Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage : The percentage of applications tested by all organizations for a given CWE. Weighted Exploit : The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact : The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences : Total number of applications found to have the CWEs mapped to a category. Total CVEs : Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Category Relationships from 2017 \u2693\ufe0e There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities . While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT) Thank you to our sponsors \u2693\ufe0e The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"\u9996\u9801"},{"location":"zh_TW/#owasp-top-10-2021","text":"\u6b61\u8fce\u4f86\u5230\u6700\u65b0\u7248\u672c\u7684 OWASP Top 10\uff01! OWASP Top 10 2021 \u662f\u4e00\u500b\u5168\u65b0\u7684\u540d\u55ae\uff0c\u5305\u542b\u4e86\u4f60\u53ef\u4ee5\u5217\u5370\u4e0b\u4f86\u7684\u65b0\u5716\u793a\u8aaa\u660e\uff0c\u82e5\u6709\u9700\u8981\u7684\u8a71\uff0c\u4f60\u53ef\u4ee5\u5f9e\u6211\u5011\u7684\u7db2\u9801\u4e0a\u9762\u4e0b\u8f09\u3002 \u5728\u6b64\u6211\u5011\u60f3\u5c0d\u6240\u6709\u8ca2\u737b\u4e86\u4ed6\u5011\u6642\u9593\u548c\u8cc7\u6599\u7684\u4eba\u7d66\u4e88\u4e00\u500b\u6975\u5927\u7684\u611f\u8b1d\u3002\u6c92\u6709\u4f60\u5011\uff0c\u9019\u4e00\u500b\u65b0\u7248\u672c\u662f\u4e0d\u6703\u51fa\u73fe\u7684\u3002 \u8b1d\u8b1d \u3002","title":"OWASP Top 10 2021 \u4ecb\u7d39"},{"location":"zh_TW/#top-10-for-2021","text":"\u9019\u6b21\u5728 OWASP Top 10 for 2021 \u6709\u4e09\u500b\u5168\u65b0\u7684\u5206\u985e\uff0c\u6709\u56db\u500b\u5206\u985e\u6709\u505a\u540d\u7a31\u548c\u7bc4\u570d\u7684\u4fee\u6b63\uff0c\u4e26\u6709\u5c07\u4e00\u4e9b\u985e\u5225\u505a\u5408\u4f75\u3002 A01:2021-\u6b0a\u9650\u63a7\u5236\u5931\u6548 \u5f9e\u7b2c\u4e94\u540d\u79fb\u4e0a\u4f86; 94% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6b0a\u9650\u63a7\u5236\u5931\u6548\u7684\u554f\u984c\u3002\u5728\u6b0a\u9650\u63a7\u5236\u5931\u6548\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 34 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u90fd\u9ad8\u65bc\u5176\u4ed6\u7684\u5f31\u9ede\u985e\u5225\u3002 A02:2021-\u52a0\u5bc6\u6a5f\u5236\u5931\u6548 \u63d0\u5347\u4e00\u540d\u5230\u7b2c\u4e8c\u540d\uff0c\u5728\u4e4b\u524d\u70ba \u654f\u611f\u8cc7\u6599\u5916\u66dd \uff0c\u5728\u6b64\u5b9a\u7fa9\u4e0b\u6bd4\u8f03\u985e\u4f3c\u65bc\u4e00\u500b\u5ee3\u6cdb\u7684\u554f\u984c\u800c\u975e\u6839\u672c\u539f\u56e0\u3002\u5728\u6b64\u91cd\u65b0\u5b9a\u7fa9\u4e26\u5c07\u554f\u984c\u6838\u5fc3\u5b9a\u7fa9\u5728\u52a0\u5bc6\u6a5f\u5236\u7684\u5931\u6557\uff0c\u4e26\u56e0\u6b64\u9020\u6210\u654f\u611f\u6027\u8cc7\u6599\u5916\u6d29\u6216\u662f\u7cfb\u7d71\u88ab\u7834\u58de\u3002 A03:2021-\u6ce8\u5165\u5f0f\u653b\u64ca \u4e0b\u6ed1\u5230\u7b2c\u4e09\u540d\u300294% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6ce8\u5165\u5f0f\u653b\u64ca\u7684\u554f\u984c\u3002\u5728\u6ce8\u5165\u5f0f\u653b\u64ca\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 33 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u70ba\u5f31\u9ede\u554f\u984c\u7684\u7b2c\u4e8c\u9ad8\u3002\u8de8\u7ad9\u8173\u672c\u653b\u64ca\u73fe\u5728\u5728\u65b0\u7248\u672c\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u9019\u662f 2021 \u5e74\u7248\u672c\u7684\u65b0\u985e\u5225\uff0c\u4e26\u7279\u5225\u91dd\u6ce8\u5728\u8207\u8a2d\u8a08\u76f8\u95dc\u7684\u7f3a\u5931\u3002\u5982\u679c\u6211\u5011\u771f\u7684\u5e0c\u671b\u8b93\u6574\u500b\u7522\u696d\"\u5411\u5de6\u79fb\u52d5\"\uff0a\u8a3b\u4e00\uff0a\uff0c\u90a3\u6211\u5011\u5fc5\u9808\u9032\u4e00\u6b65\u7684\u5f80\u5a01\u8105\u5efa\u6a21\uff0c\u5b89\u5168\u8a2d\u8a08\u6a21\u584a\u7684\u89c0\u5ff5\uff0c\u548c\u5b89\u5168\u53c3\u8003\u67b6\u69cb\u524d\u9032\u3002 \uff0a\u8a3b\u4e00: Move Left \u65bc\u82f1\u6587\u539f\u6587\u4e2d\u4ee3\u8868\u5728\u8edf\u9ad4\u958b\u767c\u53ca\u4ea4\u4ed8\u904e\u7a0b\u4e2d\uff0c\u5728\u65e9\u671f\u627e\u51fa\u53ca\u8655\u7406\u76f8\u95dc\u554f\u984c\uff0c\u540c Shift Left Testing\u3002\uff0a A05:2021-\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677 \u5f9e\u4e0a\u4e00\u7248\u672c\u7684\u7b2c\u516d\u540d\u79fb\u52d5\u4e0a\u4f86\u300290% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u7684\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677\u3002\u5728\u66f4\u591a\u7684\u8edf\u9ad4\u5f80\u66f4\u9ad8\u5ea6\u548c\u6709\u5f48\u6027\u7684\u8a2d\u5b9a\u79fb\u52d5\uff0c\u6211\u5011\u4e26\u4e0d\u610f\u5916\u9019\u500b\u985e\u5225\u7684\u554f\u984c\u5f80\u4e0a\u79fb\u52d5\u3002\u5728\u524d\u7248\u672c\u4e2d\u7684 XML \u5916\u90e8\u5be6\u9ad4\u6ce8\u5165\u653b\u64ca \uff08XML External Entities\uff09\u73fe\u5728\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A06:2021-\u5371\u96aa\u6216\u904e\u820a\u7684\u5143\u4ef6 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u4f7f\u7528\u6709\u5df2\u77e5\u5f31\u9ede\u7684\u5143\u4ef6 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u65bc\u696d\u754c\u554f\u5377\u4e2d\u6392\u540d\u7b2c\u4e8c\uff0c\u4f46\u4e5f\u6709\u8db3\u5920\u7684\u7d71\u8a08\u8cc7\u6599\u8b93\u5b83\u53ef\u4ee5\u9032\u5165 Top 10\u3002\u9019\u500b\u985e\u5225\u5f9e 2017 \u7248\u672c\u7684\u7b2c\u4e5d\u540d\u722c\u5347\u5230\u7b2c\u516d\uff0c\u4e5f\u662f\u6211\u5011\u6301\u7e8c\u6399\u624e\u505a\u6e2c\u8a66\u548c\u8a55\u4f30\u98a8\u96aa\u7684\u985e\u5225\u3002\u9019\u4e5f\u662f\u552f\u4e00\u4e00\u500b\u6c92\u6709\u4efb\u4f55 CVE \u80fd\u88ab\u5c0d\u61c9\u5230 CWE \u5167\u7684\u985e\u5225\uff0c\u6240\u4ee5\u9810\u8a2d\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u5728\u9019\u985e\u5225\u7684\u5206\u6578\u4e0a\u88ab\u9810\u8a2d\u70ba 5.0\u3002 A07:2021-\u8a8d\u8b49\u53ca\u9a57\u8b49\u6a5f\u5236\u5931\u6548 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u932f\u8aa4\u7684\u8a8d\u8b49\u6a5f\u5236 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u6cb9\u7b2c\u4e8c\u540d\u4e0b\u6ed1\u81f3\u6b64\uff0c\u4e26\u540c\u6642\u5305\u542b\u4e86\u5c07\u8a8d\u8b49\u76f8\u95dc\u7f3a\u5931\u7684 CWE \u5305\u542b\u5728\u5167\u3002\u9019\u500b\u985e\u5225\u4ecd\u662f Top 10 \u4e0d\u53ef\u7f3a\u5c11\u7684\u4e00\u74b0\uff0c\u4f46\u540c\u6642\u4e5f\u6709\u767c\u73fe\u73fe\u5728\u6a19\u6e96\u5316\u7684\u67b6\u69cb\u6709\u5354\u52a9\u964d\u4f4e\u6b21\u98a8\u96aa\u767c\u751f\u6a5f\u7387\u3002 A08:2021-\u8edf\u9ad4\u53ca\u8cc7\u6599\u5b8c\u6574\u6027\u5931\u6548 \u9019\u662f 2021 \u5e74\u7248\u672c\u5168\u65b0\u7684\u985e\u5225\uff0c\u4e26\u5728\u8edf\u9ad4\u66f4\u65b0\uff0c\u6a5f\u654f\u53ca\u91cd\u8981\u8cc7\u6599\uff0c\u548c CI/CD \u7ba1\u9053\u4e2d\u4e26\u6c92\u6709\u505a\u5b8c\u6574\u6027\u7684\u78ba\u8a8d\u70ba\u524d\u63d0\u505a\u5047\u8a2d\u4e26\u9032\u884c\u8a55\u4f30\u3002\u5728\u8a55\u4f30\u4e2d\u5f71\u97ff\u6b0a\u91cd\u6700\u9ad8\u5206\u7684 CVE/CVSS \u8cc7\u6599\u90fd\u8207\u9019\u985e\u5225\u4e2d\u7684 10 \u500b CWE \u5c0d\u61c9\u5230\u30022017 \u5e74\u7248\u672c\u4e2d\u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\u73fe\u5728\u88ab\u5408\u4f75\u81f3\u6b64\u985e\u5225\u3002 A09:2021-\u8cc7\u5b89\u8a18\u9304\u53ca\u76e3\u63a7\u5931\u6548 \u5728\u4e4b\u524d\u70ba \u4e0d\u5b8c\u6574\u7684\u7d00\u9304\u53ca\u76e3\u63a7 \u4e26\u7d0d\u5165\u5728\u696d\u754c\u554f\u5377\u4e2d\u5728\u672c\u6b21\u5217\u540d\u70ba\u7b2c\u4e09\u540d\u4e26\u5f9e\u4e4b\u524d\u7684\u7b2c\u5341\u540d\u4e0a\u79fb\u3002\u9019\u500b\u985e\u5225\u5c07\u64f4\u5145\u53bb\u7d0d\u5165\u66f4\u591a\u76f8\u95dc\u7684\u7f3a\u5931\uff0c\u4f46\u9019\u4e5f\u662f\u76f8\u7576\u96e3\u53bb\u9a57\u8b49\uff0c\u4e26\u6c92\u6709\u76f8\u7576\u591a\u7684 CVE/CVSS \u8cc7\u6599\u53ef\u4ee5\u4f50\u8b49\u3002\u4f46\u662f\u5728\u9019\u500b\u985e\u5225\u4e2d\u7684\u7f3a\u5931\u6703\u76f4\u63a5\u5f71\u97ff\u5230\u6574\u9ad4\u5b89\u5168\u7684\u53ef\u8996\u6027\uff0c\u4e8b\u4ef6\u544a\u8b66\u53ca\u9451\u8b58\u3002 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u9019\u500b\u985e\u5225\u662f\u5728\u696d\u754c\u554f\u5377\u6392\u540d\u7b2c\u4e00\u540d\uff0c\u4e26\u5728\u6b64\u7248\u672c\u5167\u7d0d\u5165\u3002\u7531\u8cc7\u6599\u986f\u793a\u6b64\u554f\u984c\u6709\u8f03\u4f4e\u88ab\u9a57\u6e2c\u6b21\u6578\u548c\u7bc4\u570d\uff0c\u4f46\u6709\u9ad8\u65bc\u5e73\u5747\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u6bd4\u7387\u3002\u9019\u500b\u985e\u5225\u7684\u51fa\u73fe\u4e5f\u662f\u56e0\u70ba\u696d\u754c\u5c08\u5bb6\u91cd\u8907\u7533\u660e\u9019\u985e\u5225\u7684\u554f\u984c\u76f8\u7576\u91cd\u8981\uff0c\u5373\u4f7f\u5728\u672c\u6b21\u8cc7\u6599\u4e2d\u4e26\u6c92\u6709\u8db3\u5920\u7684\u8cc7\u6599\u53bb\u986f\u793a\u9019\u500b\u554f\u984c\u3002","title":"Top 10 for 2021 \u6709\u4ec0\u9ebc\u65b0\u7684\u8b8a\u5316\uff1f"},{"location":"zh_TW/#_1","text":"\u672c\u6b21 Top 10 \u7684\u9078\u64c7\u65b9\u5f0f\u6bd4\u4ee5\u5f80\u66f4\u91cd\u8996\u8cc7\u6599\u5206\u6790\uff0c\u4f46\u4e26\u4e0d\u662f\u5b8c\u5168\u4ee5\u8cc7\u6599\u5206\u6790\u70ba\u4e3b\u3002\u6211\u5011\u5f9e\u8cc7\u6599\u5206\u6790\u4e2d\u6311\u9078\u4e86\u516b\u500b\u98a8\u96aa\u985e\u5225\uff0c\u7136\u5f8c\u7531\u696d\u754c\u554f\u5377\u4e2d\u6311\u9078\u5169\u500b\u98a8\u96aa\u985e\u5225\u3002\u6211\u5011\u5f9e\u904e\u5f80\u7684\u5206\u4eab\u8cc7\u6599\u4e2d\u53bb\u77ad\u89e3\uff0c\u4e26\u6709\u6211\u5011\u4e00\u500b\u57fa\u672c\u7684\u7406\u7531\u3002\u539f\u56e0\u662f\u6240\u6709\u7684\u8cc7\u5b89\u7814\u7a76\u4eba\u54e1\u90fd\u4e0d\u65b7\u7684\u5728\u627e\u65b0\u7684\u5f31\u9ede\u4e26\u627e\u51fa\u65b9\u6cd5\u53bb\u9a57\u8b49\u5f31\u9ede\uff0c\u4f46\u6703\u9700\u8981\u6642\u9593\u624d\u80fd\u5c07\u9019\u4e9b\u9a57\u6e2c\u65b9\u6cd5\u7d0d\u5165\u5230\u65e2\u6709\u7684\u5de5\u5177\u548c\u6e2c\u8a66\u6d41\u7a0b\u4e2d\u3002\u7576\u6211\u5011\u80fd\u6709\u6548\u7684\u5927\u91cf\u6e2c\u8a66\u9019\u500b\u5f31\u9ede\u6642\uff0c\u6709\u53ef\u80fd\u5df2\u7d93\u904e\u4e86\u591a\u5e74\u7684\u6642\u9593\u3002\u70ba\u4e86\u8981\u8b93\u5169\u8005\u4e4b\u9593\u6709\u5e73\u8861\uff0c\u6211\u5011\u4f7f\u7528\u696d\u754c\u554f\u5377\u8acb\u6559\u5728\u524d\u7dda\u7684\u8cc7\u5b89\u7814\u7a76\u5c08\u5bb6\u5011\u4e26\u77ad\u89e3\u4ed6\u5011\u89ba\u5f97\u6709\u54ea\u4e9b\u662f\u4ed6\u5011\u89ba\u5f97\u56b4\u91cd\u4f46\u5c1a\u672a\u51fa\u73fe\u5728\u6e2c\u8a66\u8cc7\u6599\u4e2d\u7684\u6f0f\u6d1e\u53ca\u554f\u984c\u3002 \u9019\u662f\u5e7e\u500b\u6211\u5011\u70ba\u4e86\u8981\u8b93 OWASP Top 10 \u66f4\u52a0\u6210\u719f\u7684\u91cd\u8981\u6539\u8b8a\u3002","title":"\u5206\u6790\u65b9\u6cd5"},{"location":"zh_TW/#_2","text":"\u6709\u5225\u65bc\u4e0a\u4e00\u500b\u7248\u672c\uff0c\u5728\u9019\u6b21\u7684 OWASP Top 10 \u6709\u4e00\u4e9b\u98a8\u96aa\u985e\u5225\u7684\u4fee\u6539\u3002\u6211\u5011\u5728\u6b64\u4ee5\u6bd4\u8f03\u9ad8\u7684\u89d2\u5ea6\u8aaa\u660e\u4e00\u4e0b\u9019\u6b21\u7684\u985e\u5225\u4fee\u6539\u3002 \u5728\u4e0a\u4e00\u6b21\u7684\u8cc7\u6599\u6536\u96c6\u7576\u4e2d\uff0c\u6211\u5011\u5c07\u8cc7\u6599\u6536\u96c6\u7684\u91cd\u5fc3\u653e\u5728\u9810\u5148\u5b9a\u7fa9\u597d\u7684\u7d04 30 \u500b CWEs \u4e26\u7d0d\u5165\u4e00\u500b\u6b04\u4f4d\u5fb5\u6c42\u5176\u4ed6\u7684\u767c\u73fe\u3002\u5f9e\u9019\u88e1\u6211\u5011\u770b\u5230\u6c7a\u591a\u6578\u7684\u7d44\u7e54\u90fd\u53ea\u6703\u5c08\u6ce8\u5728\u9019 30 \u500b CWEs \u800c\u4e0d\u5e38\u52a0\u5165\u5176\u4ed6\u4ed6\u5011\u53ef\u80fd\u767c\u73fe\u7684 CWEs\u3002\u5728\u9019\u6b21\u7684\u6539\u7248\u4e2d\uff0c\u6211\u5011\u5c07\u6240\u6709\u7684\u554f\u984c\u90fd\u4ee5\u958b\u653e\u5f0f\u7684\u65b9\u6cd5\u8655\u7406\uff0c\u4e26\u6c92\u6709\u9650\u5236\u5728\u4efb\u4f55\u4e00\u500b CWEs\u3002\u6211\u5011\u8acb\u6559\u4e86\u5f9e 2017 \u5e74\u958b\u59cb\u6240\u6e2c\u8a66\u7684\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\uff0c\u7136\u5f8c\u5728\u9019\u4e9b\u7a0b\u5f0f\u4e2d\u81f3\u5c11\u6709\u4e00\u500b CWE \u88ab\u767c\u73fe\u7684\u6578\u91cf\u3002\u9019\u500b\u683c\u5f0f\u8b93\u6211\u5011\u80fd\u5920\u8ffd\u8e64\u6bcf\u500b CWE \u8ddf\u6240\u6709\u88ab\u9a57\u6e2c\u53ca\u7d71\u8a08\u7684\u61c9\u7528\u7a0b\u5f0f\u7684\u6578\u91cf\u8ddf\u95dc\u4fc2\u3002\u6211\u5011\u4e5f\u5ffd\u7565\u4e86 CWE \u51fa\u73fe\u7684\u983b\u7387\uff0c\u96d6\u7136\u5728\u67d0\u4e9b\u72c0\u6cc1\u4e0b\u9019\u4e5f\u8a31\u662f\u5fc5\u9808\u7684\uff0c\u4f46\u9019\u537b\u96b1\u85cf\u4e86\u98a8\u96aa\u985e\u5225\u672c\u8eab\u8207\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\u6574\u9ad4\u7684\u95dc\u4fc2\u3002\u6240\u4ee5\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u6709 4 \u500b\u6216\u662f 4,000 \u500b\u5f31\u9ede\u4e26\u4e0d\u662f\u88ab\u8a08\u7b97\u5728 Top 10 \u7684\u57fa\u790e\u3002\u4f46\u540c\u6642\u6211\u5011\u4e5f\u5f9e\u539f\u672c\u7684 30 \u591a\u500b CWEs \u589e\u9577\u5230\u5feb 400 \u591a\u500bCWEs \u53bb\u9032\u884c\u5206\u6790\u3002\u6211\u5011\u56e0\u6b64\u4e5f\u8a08\u756b\u672a\u4f86\u505a\u66f4\u591a\u7684\u8cc7\u6599\u5206\u6790\uff0c\u4e26\u5728\u5c0d\u6b64\u7248\u672c\u9032\u884c\u88dc\u5145\u8aaa\u660e\u3002\u800c\u9019\u4e9b\u589e\u52a0\u7684 CWEs \u4e5f\u540c\u6642\u5f71\u97ff\u4e86\u9019\u6b21\u98a8\u96aa\u985e\u5225\u7684\u898f\u5283\u3002 \u6211\u5011\u82b1\u4e86\u597d\u5e7e\u500b\u6708\u5c07 CWEs \u9032\u884c\u5206\u7d44\u8ddf\u5206\u985e\uff0c\u800c\u4e14\u5176\u5be6\u53ef\u4ee5\u4e00\u76f4\u82b1\u66f4\u591a\u500b\u6708\u53bb\u505a\u9019\u4ef6\u4e8b\u60c5\u3002\u4f46\u6211\u5011\u5fc5\u9808\u5728\u67d0\u4e00\u500b\u6642\u9593\u9ede\u505c\u4f4f\u3002\u5728 CWEs \u7576\u4e2d\uff0c\u540c\u6642\u6709 \u539f\u56e0 \u4ee5\u53ca \u75c7\u72c0 \u7684\u554f\u984c\uff0c\u800c\u50cf\u662f \"\u52a0\u5bc6\u6a5f\u5236\u5931\u6548\" \u548c \"\u8a2d\u5b9a\u554f\u984c\" \u9019\u985e\u578b\u7684 \u539f\u56e0 \u8207 \"\u6a5f\u654f\u8cc7\u6599\u5916\u6d29\" \u548c \"\u963b\u65b7\u670d\u52d9\" \u9019\u985e\u578b\u7684 \u75c7\u72c0 \u662f\u5c0d\u7acb\u7684\u3002\u56e0\u6b64\u6211\u5011\u6c7a\u5b9a\u5728\u53ef\u4ee5\u7684\u6642\u5019\u8981\u66f4\u5c08\u6ce8\u65bc\u5e95\u5c64\u7684\u539f\u56e0\uff0c\u56e0\u70ba\u9019\u662f\u53ef\u4ee5\u6709\u6548\u6307\u51fa\u554f\u984c\u7684\u672c\u9ad4\u8ddf\u540c\u6642\u63d0\u4f9b\u554f\u984c\u7684\u89e3\u6c7a\u65b9\u5411\u3002\u5c08\u6ce8\u5728\u554f\u984c\u6838\u5fc3\u800c\u4e0d\u5c07\u91cd\u5fc3\u653e\u5728\u75c7\u72c0\u4e26\u4e0d\u662f\u4e00\u500b\u65b0\u7684\u6982\u5ff5\b\b\uff0cTop Ten \u6709\u53f2\u4ee5\u4f86\u4e00\u76f4\u662f\u75c7\u72c0\u8ddf\u554f\u984c\u6838\u5fc3\u7684\u7d9c\u5408\u9ad4\uff0c\u53ea\u662f\u9019\u6b21\u6211\u5011\u66f4\u523b\u610f\u7684\u5c07\u4ed6\u7a81\u986f\u51fa\u4f86\u3002\u5728\u9019\u6b21\u7684\u65b0\u7248\u672c\u4e2d\uff0c\u6bcf\u4e00\u500b\u985e\u5225\u5167\u7684\u5e73\u5747\u6709 19.6 \u500b CWE\uff0c\u800c\u6700\u4f4e\u7684 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u6709\u4e00\u500b CWE \u5230 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u6709\u56db\u5341\u500b CWE\u3002\u9019\u500b\u65b0\u7684\u985e\u5225\u67b6\u69cb\u80fd\u63d0\u4f9b\u4f01\u696d\u66f4\u591a\u7684\u8cc7\u5b89\u8a13\u7df4\u7684\u597d\u8655\uff0c\u56e0\u70ba\u5728\u65b0\u7684\u67b6\u69cb\u4e0b\u53ef\u4ee5\u66f4\u5c08\u6ce8\u5728\u67d0\u500b\u8a9e\u7cfb\u6216\u5e73\u53f0\u4e0a\u7684 CWE\u3002","title":"\u5982\u4f55\u5efa\u69cb\u98a8\u96aa\u985e\u5225"},{"location":"zh_TW/#_3","text":"\u5728 2017 \u5e74\uff0c\u6211\u5011\u7528\u4e8b\u4ef6\u767c\u751f\u6b21\u6578\u53bb\u5224\u65b7\u53ef\u80fd\u767c\u751f\u7684\u6a5f\u7387\u53bb\u9078\u64c7\u985e\u5225\uff0c\u7136\u5f8c\u900f\u904e\u4e00\u7fa4\u5728\u696d\u754c\u64c1\u6709\u6578\u5341\u5e74\u7d93\u9a57\u7684\u5c08\u5bb6\u5718\u5c0d\u8a0e\u8ad6\u4e26\u4f9d\u7167 \u53ef\u767c\u751f\u6027 \uff0c \u53ef\u767c\u73fe\u6027\uff08\u540c\u53ef\u80fd\u6027\uff09 \uff0c\u548c \u6280\u8853\u5f71\u97ff\u529b \u53bb\u505a\u6392\u540d\u3002\u5728 2021 \u5e74\uff0c\u6211\u5011\u5e0c\u671b\u5982\u679c\u53ef\u4ee5\u7684\u8a71\u7528\u8cc7\u6599\u8b49\u660e\u53ef\u767c\u751f\u6027\u548c\u6280\u8853\u5f71\u97ff\u6027\u3002 \u6211\u5011\u4e0b\u8f09\u4e86 OWASP Depndency Check \u4e26\u53d6\u51fa\u4e86 CVSS \u6f0f\u6d1e\uff0c\u4e26\u5c07\u76f8\u95dc\u7684 CWE \u7528\u5f71\u97ff\u529b\u5206\u6578\u5206\u7fa4\u3002\u9019\u82b1\u4e86\u4e00\u4e9b\u6642\u9593\u548c\u529b\u6c23\u53bb\u7814\u7a76\u56e0\u70ba\u6240\u6709\u7684 CVEs \u90fd\u6709 CVSSv2 \u5206\u6578\uff0c\u4f46\u662f\u5728\u5176\u4e2d\u56e0\u70ba CVSSv2 \u8ddf CVSSv3 \u4e4b\u9593\u6709\u4e00\u4e9b\u7f3a\u5931\u662f\u5fc5\u9808\u88ab\u4fee\u6b63\u7684\u3002\u7d93\u904e\u4e86\u4e00\u6bb5\u6642\u9593\u5f8c\uff0c\u6240\u6709\u7684 CVEs \u90fd\u6703\u6709\u5c0d\u61c9\u7684 CVSSv3 \u7684\u5206\u6578\u3002\u518d\u8005\uff0c\u5206\u6578\u7684\u7bc4\u570d\u548c\u8a08\u7b97\u7684\u516c\u5f0f\u5728 CVSSv2 \u548c CVSSv3 \u4e4b\u9593\u4e5f\u505a\u4e86\u66f4\u65b0\u3002 \u5728 CVSSv2 \u4e2d\uff0c\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5169\u8005\u90fd\u53ef\u9054\u5230 10.0 \u5206\uff0c\u4f46\u662f\u516c\u5f0f\u672c\u8eab\u6703\u5c07\u5169\u8005\u8abf\u6574\u70ba\u6f0f\u6d1e\u4f54 60%\uff0c\u7136\u5f8c\u5f71\u97ff\u529b\u4f54 40%\u3002\u5728 CVSSv3 \u4e2d\uff0c\u7406\u8ad6\u4e0a\u7684\u6700\u9ad8\u503c\u5c07\u6f0f\u6d1e\u9650\u5236\u5728 6.0 \u5206\u800c\u5f71\u97ff\u529b\u5728 4.0 \u5206\u3002\u7576\u8003\u616e\u5230\u6b0a\u91cd\u6bd4\u7387\u6642\uff0c\u5f71\u97ff\u529b\u7684\u5206\u6578\u6703\u504f\u9ad8\uff0c\u5728 CVSSv3 \u4e2d\u5e7e\u4e4e\u5e73\u5747\u6703\u591a\u51fa 1.5 \u5206\uff0c\u800c\u6f0f\u6d1e\u5206\u6578\u537b\u6703\u5e73\u5747\u5c11 0.5 \u5206\u3002 \u5f9e OWASP Dependcy Check \u7fe0\u53d6\u51fa\u7684 NVD \u8cc7\u6599\u7576\u4e2d\u6709\u5c07\u8fd1 12.5 \u842c\u7b46 CVE \u8cc7\u6599\u6709\u5c0d\u61c9\u5230 CWE\uff0c\u800c\u6709 241 \u7b46\u7368\u7279\u7684 CWEs \u6709\u5c0d\u61c9\u5230 CVE\u30026.2\u842c\u7b46 CWE \u6709\u5c0d\u61c9\u5230 CVSSv3 \u5206\u6578\uff0c\u6240\u4ee5\u5927\u7d04\u662f\u6574\u9ad4\u8cc7\u6599\u4e2d\u4e00\u534a\u7684\u90e8\u5206\u3002 \u800c\u5728 Top Ten\uff0c\u6211\u5011\u8a08\u7b97\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u7684\u5e73\u5747\u5206\u6578\u7684\u65b9\u5f0f\u5982\u4e0b\u3002\u6211\u5011\u5c07\u6240\u6709\u6709 CVSS \u5206\u6578\u7684 CVE \u4f9d\u7167 CWE \u5206\u7d44\uff0c\u7136\u5f8c\u4f9d\u7167\u6709 CVSSv3 \u7684\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5728\u6240\u6709\u8cc7\u6599\u4e2d\u7684\u767e\u5206\u6bd4\u4f5c\u6b0a\u91cd\uff0c\u5728\u52a0\u4e0a\u8cc7\u6599\u4e2d\u6709 CVSSv2 \u7684\u8cc7\u6599\u53bb\u505a\u5e73\u5747\u3002\u6211\u5011\u5c07\u9019\u4e9b\u5e73\u5747\u5f8c\u7684 CWEs \u5c0d\u61c9\u5230\u8cc7\u6599\u4e2d\uff0c\u7136\u5f8c\u5c07\u4ed6\u7684\u6f0f\u6d1e\u548c\u5f15\u60f3\u529b\u5206\u6578\u4f7f\u7528\u5728\u53e6\u4e00\u534a\u7684\u98a8\u96aa\u516c\u5f0f\u4e2d\u3002","title":"\u9078\u64c7\u985e\u5225\u6642\u8cc7\u6599\u7684\u4f7f\u7528\u65b9\u5f0f"},{"location":"zh_TW/#_4","text":"\u9019\u4e9b\u8cc7\u6599\u7684\u7d50\u679c\u6700\u4e3b\u8981\u662f\u88ab\u9650\u5236\u5728\u80fd\u4f7f\u7528\u81ea\u52d5\u5de5\u5177\u6e2c\u8a66\u51fa\u4f86\u7684\u7d50\u679c\u3002\u53ef\u662f\u7576\u4f60\u8ddf\u4e00\u4f4d\u6709\u7d93\u9a57\u7684\u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u5c08\u5bb6\u804a\u7684\u6642\u5019\uff0c\u4ed6\u5011\u6703\u8ddf\u4f60\u8aaa\u7d55\u5927\u591a\u6578\u4ed6\u5011\u627e\u5230\u7684\u554f\u984c\u90fd\u4e0d\u5728\u9019\u4e9b\u8cc7\u6599\u88e1\u9762\u3002\u539f\u56e0\u662f\u4e00\u500b\u6e2c\u8a66\u8981\u88ab\u81ea\u52d5\u5316\u7684\u6642\u5019\uff0c\u9700\u8981\u82b1\u6642\u9593\u53bb\u958b\u767c\u9019\u4e9b\u5f31\u9ede\u6e2c\u8a66\u7684\u65b9\u6cd5\u8ad6\uff0c\u7576\u4f60\u9700\u8981\u5c07\u9019\u500b\u6e2c\u8a66\u81ea\u52d5\u5316\u4e26\u80fd\u5c0d\u5927\u91cf\u7684\u61c9\u7528\u7a0b\u5f0f\u53bb\u9a57\u8b49\u6642\uff0c\u53c8\u6703\u82b1\u4e0a\u66f4\u591a\u7684\u6642\u9593\u3002\u7576\u6211\u5011\u56de\u982d\u770b\u53bb\u5e74\u7372\u4ee5\u524d\u6709\u53ef\u80fd\u6c92\u51fa\u73fe\u7684\u4e00\u4e9b\u554f\u984c\u7684\u8da8\u52e2\uff0c\u6211\u5011\u767c\u73fe\u5176\u5be6\u90fd\u6c92\u6709\u5728\u9019\u4e9b\u8cc7\u6599\u7576\u4e2d\u3002 \u56e0\u6b64\uff0c\u7531\u65bc\u8cc7\u6599\u4e0d\u5b8c\u5168\u7684\u95dc\u4fc2\uff0c\u6211\u5011\u53ea\u6709\u5f9e\u8cc7\u6599\u4e2d\u9078\u51fa 8 \u500b\u985e\u5225\uff0c\u800c\u4e26\u4e0d\u662f 10 \u500b\u3002\u5269\u4e0b\u7684\u5169\u500b\u985e\u5225\u662f\u5f9e\u696d\u754c\u554f\u5377\u4e2d\u6240\u9078\u51fa\u7684\u3002\u9019\u6703\u5141\u8a31\u5728\u524d\u7dda\u7684\u53c3\u8207\u8005\u53bb\u9078\u51fa\u4ed6\u5011\u8a8d\u70ba\u7684\u9ad8\u98a8\u96aa\uff0c\u800c\u4e0d\u662f\u7d14\u7cb9\u4f9d\u64da\u8cc7\u6599\u53bb\u5224\u65b7\uff08\u751a\u81f3\u53ef\u80fd\u8cc7\u6599\u6c38\u9060\u90fd\u4e0d\u6703\u6709\u51fa\u73fe\u7684\u8e64\u8de1\uff09\u3002","title":"\u70ba\u4ec0\u9ebc\u5c31\u4e0d\u7d14\u7cb9\u505a\u7d71\u8a08\u5206\u6790\uff1f"},{"location":"zh_TW/#_5","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results.","title":"\u70ba\u4ec0\u9ebc\u7528\u4e8b\u6545\u7387\u800c\u4e0d\u662f\u7528\u767c\u751f\u6b21\u6578"},{"location":"zh_TW/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page , we list the data elements and structure we are looking for and how to submit them. In the GitHub project , we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order.","title":"What is your data collection and analysis process?"},{"location":"zh_TW/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped : The number of CWEs mapped to a category by the Top 10 team. Incidence Rate : Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage : The percentage of applications tested by all organizations for a given CWE. Weighted Exploit : The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact : The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences : Total number of applications found to have the CWEs mapped to a category. Total CVEs : Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"zh_TW/#category-relationships-from-2017","text":"There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities . While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks.","title":"Category Relationships from 2017"},{"location":"zh_TW/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs GitLab Micro Focus Sqreen Cobalt.io HackerOne PenTest-Tools Veracode Contrast Security HCL Technologies Probely WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"zh_TW/#thank-you-to-our-sponsors","text":"The OWASP Top 10 2021 team gratefully acknowledge the financial support of Secure Code Warrior and Just Eat.","title":"Thank you to our sponsors"},{"location":"zh_TW/0x00-notice/","text":"\u767c\u8868\u7248\u672c \u2693\ufe0e \u65bc 2021 \u5e74 9 \u6708 24 \u65e5\u6b63\u5f0f\u767c\u8868 \u5c08\u6848\u9818\u8896 \u2693\ufe0e Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet ) \u8ca2\u737b\u5c08\u5bb6 \u2693\ufe0e Orange Tsai, @orange_8361 A10-2021: \u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u7684\u4f5c\u8005 Jim Manico @manicode \u548c Jakub Ma\u0107kowski @kubamackowski \u4f60\u80fd\u5982\u4f55\u5e6b\u52a9 \u2693\ufe0e \u5728\u76ee\u524d\u968e\u6bb5\uff0c\u6211\u5011\u9700\u8981 \u8cc7\u6599\u79d1\u5b78\u5bb6 - \u5354\u52a9\u78ba\u8a8d\u6211\u5011\u7684\u8cc7\u6599\u5206\u6790\u7d50\u679c \u7db2\u9801\u8a2d\u8a08\u5e2b - \u6211\u5011\u9700\u8981\u505a\u4e00\u500b\u5c0d\u884c\u52d5\u88dd\u7f6e\u53cb\u5584\u7684\u7248\u672c \u7ffb\u8b6f\u4eba\u54e1 - \u8acb\u5354\u52a9\u78ba\u8a8d\u82f1\u6587\u7248\u672c\u6587\u5b57\u4e26\u78ba\u8a8d\u53ef\u88ab\u7ffb\u8b6f\u5230\u5176\u4ed6\u8a9e\u8a00\u7248\u672c ASVS, Testing Guide, \u548c Code Review Guide \u5c08\u6848\u9818\u8896 - \u8acb\u4f7f\u7528\u6211\u5011\u7684\u8cc7\u6599\u4e26\u5354\u52a9\u6211\u5011\u628a\u5176\u4ed6\u7684\u6587\u4ef6\u548c\u6a19\u6e96\u9023\u63a5\u8d77\u4f86 \u554f\u984c\u53ca Pull Request \u2693\ufe0e \u8acb\u5c07\u4efb\u4f55\u554f\u984c\u6216\u662f\u9700\u88ab\u4fee\u6539\u7684\u5730\u65b9\u8a18\u9304\u5230\u6b64: https://github.com/OWASP/Top10/issues","title":"\u6ce8\u610f\u4e8b\u9805"},{"location":"zh_TW/0x00-notice/#_1","text":"\u65bc 2021 \u5e74 9 \u6708 24 \u65e5\u6b63\u5f0f\u767c\u8868","title":"\u767c\u8868\u7248\u672c"},{"location":"zh_TW/0x00-notice/#_2","text":"Andrew van der Stock (twitter: @vanderaj ) Brian Glas (twitter: @infosecdad ) Neil Smithline (twitter: @appsecneil ) Torsten Gigler (twitter: @torsten_tweet )","title":"\u5c08\u6848\u9818\u8896"},{"location":"zh_TW/0x00-notice/#_3","text":"Orange Tsai, @orange_8361 A10-2021: \u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u7684\u4f5c\u8005 Jim Manico @manicode \u548c Jakub Ma\u0107kowski @kubamackowski","title":"\u8ca2\u737b\u5c08\u5bb6"},{"location":"zh_TW/0x00-notice/#_4","text":"\u5728\u76ee\u524d\u968e\u6bb5\uff0c\u6211\u5011\u9700\u8981 \u8cc7\u6599\u79d1\u5b78\u5bb6 - \u5354\u52a9\u78ba\u8a8d\u6211\u5011\u7684\u8cc7\u6599\u5206\u6790\u7d50\u679c \u7db2\u9801\u8a2d\u8a08\u5e2b - \u6211\u5011\u9700\u8981\u505a\u4e00\u500b\u5c0d\u884c\u52d5\u88dd\u7f6e\u53cb\u5584\u7684\u7248\u672c \u7ffb\u8b6f\u4eba\u54e1 - \u8acb\u5354\u52a9\u78ba\u8a8d\u82f1\u6587\u7248\u672c\u6587\u5b57\u4e26\u78ba\u8a8d\u53ef\u88ab\u7ffb\u8b6f\u5230\u5176\u4ed6\u8a9e\u8a00\u7248\u672c ASVS, Testing Guide, \u548c Code Review Guide \u5c08\u6848\u9818\u8896 - \u8acb\u4f7f\u7528\u6211\u5011\u7684\u8cc7\u6599\u4e26\u5354\u52a9\u6211\u5011\u628a\u5176\u4ed6\u7684\u6587\u4ef6\u548c\u6a19\u6e96\u9023\u63a5\u8d77\u4f86","title":"\u4f60\u80fd\u5982\u4f55\u5e6b\u52a9"},{"location":"zh_TW/0x00-notice/#pull-request","text":"\u8acb\u5c07\u4efb\u4f55\u554f\u984c\u6216\u662f\u9700\u88ab\u4fee\u6539\u7684\u5730\u65b9\u8a18\u9304\u5230\u6b64: https://github.com/OWASP/Top10/issues","title":"\u554f\u984c\u53ca Pull Request"},{"location":"zh_TW/A00-about-owasp/","text":"\u95dc\u65bc OWASP \u2693\ufe0e The Open Web Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications and APIs that can be trusted. At OWASP, you'll find free and open: Application security tools and standards Cutting edge research Standard security controls and libraries Complete books on application security testing, secure code development, and secure code review Presentations and videos Cheat sheets on many common topics Chapters meetings Events, training, and conferences . Google Groups Learn more at: https://www.owasp.org . All OWASP tools, documents, videos, presentations, and chapters are free and open to anyone interested in improving application security. We advocate approaching application security as a people, process, and technology problem, because the most effective approaches to application security require improvements in these areas. OWASP is a new kind of organization. Our freedom from commercial pressures allows us to provide unbiased, practical, and cost-effective information about application security. OWASP is not affiliated with any technology company, although we support the informed use of commercial security technology. OWASP produces many types of materials in a collaborative, transparent, and open way. The OWASP Foundation is the non-profit entity that ensures the project's long-term success. Almost everyone associated with OWASP is a volunteer, including the OWASP board, chapter leaders, project leaders, and project members. We support innovative security research with grants and infrastructure. Come join us! Copyright and License \u2693\ufe0e Copyright \u00a9 2003-2021 The OWASP&tm; Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"OWASP \u76f8\u95dc"},{"location":"zh_TW/A00-about-owasp/#owasp","text":"The Open Web Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications and APIs that can be trusted. At OWASP, you'll find free and open: Application security tools and standards Cutting edge research Standard security controls and libraries Complete books on application security testing, secure code development, and secure code review Presentations and videos Cheat sheets on many common topics Chapters meetings Events, training, and conferences . Google Groups Learn more at: https://www.owasp.org . All OWASP tools, documents, videos, presentations, and chapters are free and open to anyone interested in improving application security. We advocate approaching application security as a people, process, and technology problem, because the most effective approaches to application security require improvements in these areas. OWASP is a new kind of organization. Our freedom from commercial pressures allows us to provide unbiased, practical, and cost-effective information about application security. OWASP is not affiliated with any technology company, although we support the informed use of commercial security technology. OWASP produces many types of materials in a collaborative, transparent, and open way. The OWASP Foundation is the non-profit entity that ensures the project's long-term success. Almost everyone associated with OWASP is a volunteer, including the OWASP board, chapter leaders, project leaders, and project members. We support innovative security research with grants and infrastructure. Come join us!","title":"\u95dc\u65bc OWASP"},{"location":"zh_TW/A00-about-owasp/#copyright-and-license","text":"Copyright \u00a9 2003-2021 The OWASP&tm; Foundation. This document is released under the Creative Commons Attribution Share-Alike 4.0 license. For any reuse or distribution, you must make it clear to others the license terms of this work.","title":"Copyright and License"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/","text":"How to start an AppSec Program with the OWASP Top 10 \u2693\ufe0e Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient. Stage 1. Identify the gaps and goals of your appsec program \u2693\ufe0e Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) [ https://owaspsamm.org ] to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts. Stage 2. Plan for a paved road secure development lifecycle \u2693\ufe0e Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business. Stage 3. Implement the paved road with your development teams \u2693\ufe0e Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days. Stage 4. Migrate all upcoming and existing applications to the paved road \u2693\ufe0e Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly. Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10 \u2693\ufe0e Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better a library that is known safe against injection, such as React or Vue. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar. Stage 6. Build your program into a mature AppSec program \u2693\ufe0e You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level. Going beyond \u2693\ufe0e All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"\u5982\u4f55\u4f7f\u7528 OWASP Top 10 \u555f\u52d5 AppSec"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#how-to-start-an-appsec-program-with-the-owasp-top-10","text":"Previously, the OWASP Top 10 was never designed to be the basis for an AppSec program. However, it's essential to start somewhere for many organizations just starting out on their application security journey. The OWASP Top 10 2021 is a good start as a baseline for checklists and so on, but it's not in itself sufficient.","title":"How to start an AppSec Program with the OWASP Top 10"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-1-identify-the-gaps-and-goals-of-your-appsec-program","text":"Many Application Security (AppSec) programs try to run before they can crawl or walk. These efforts are doomed to failure. We strongly encourage CISOs and AppSec leadership to use OWASP Software Assurance Maturity Model (SAMM) [ https://owaspsamm.org ] to identify weaknesses and areas for improvement over a 1-3 year period. The first step is to evaluate where you are now, identify the gaps in governance, design, implementation, verification, and operations you need to resolve immediately versus those that can wait, and prioritize implementing or improving the fifteen OWASP SAMM security practices. OWASP SAMM can help you build and measure improvements in your software assurance efforts.","title":"Stage 1. Identify the gaps and goals of your appsec program"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-2-plan-for-a-paved-road-secure-development-lifecycle","text":"Traditionally the preserve of so-called \"unicorns,\" the paved road concept is the easiest way to make the most impact and scale AppSec resources with development team velocity, which only increases every year. The paved road concept is \"the easiest way is also the most secure way\" and should involve a culture of deep partnerships between the development team and the security team, preferably such that they are one and the same team. The paved road aims to continuously improve, measure, detect and replace insecure alternatives by having an enterprise-wide library of drop-in secured replacements, with tooling to help see where improvements can be made by adopting the paved road. This allows existing development tools to report on insecure builds and help development teams self-correct away from insecure alternatives. The paved road might seem a lot to take in, but it should be built incrementally over time. There are other forms of appsec programs out there, notably the Microsoft Agile Secure Development Lifecycle. Not every appsec program methodology suits every business.","title":"Stage 2. Plan for a paved road secure development lifecycle"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-3-implement-the-paved-road-with-your-development-teams","text":"Paved roads are built with the consent and direct involvement of the relevant development and operations teams. The paved road should be aligned strategically with the business and help deliver more secure applications faster. Developing the paved road should be a holistic exercise covering the entire enterprise or application ecosystem, not a per-app band-aid, as in the old days.","title":"Stage 3. Implement the paved road with your development teams"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-4-migrate-all-upcoming-and-existing-applications-to-the-paved-road","text":"Add paved road detection tools as you develop them and provide information to development teams to improve the security of their applications by how they can directly adopt elements of the paved road. Once an aspect of the paved road has been adopted, organizations should implement continuous integration checks that inspect existing code and check-ins that use prohibited alternatives and warn or reject the build or check-in. This prevents insecure options from creeping into code over time, preventing technical debt and a defective insecure application. Such warnings should link to the secure alternative, so the development team is given the correct answer immediately. They can refactor and adopt the paved road component quickly.","title":"Stage 4. Migrate all upcoming and existing applications to the paved road"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-5-test-that-the-paved-road-has-mitigated-the-issues-found-in-the-owasp-top-10","text":"Paved road components should address a significant issue with the OWASP Top 10, for example, how to automatically detect or fix vulnerable components, or a static code analysis IDE plugin to detect injections or even better a library that is known safe against injection, such as React or Vue. The more of these secure drop-in replacements provided to teams, the better. A vital task of the appsec team is to ensure that the security of these components is continuously evaluated and improved. Once they are improved, some form of communication pathway with consumers of the component should indicate that an upgrade should occur, preferably automatically, but if not, as least highlighted on a dashboard or similar.","title":"Stage 5. Test that the paved road has mitigated the issues found in the OWASP Top 10"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#stage-6-build-your-program-into-a-mature-appsec-program","text":"You must not stop at the OWASP Top 10. It only covers 10 risk categories. We strongly encourage organizations to adopt the Application Security Verification Standard and progressively add paved road components and tests for Level 1, 2, and 3, depending on the developed applications' risk level.","title":"Stage 6. Build your program into a mature AppSec program"},{"location":"zh_TW/A00_2021-How_to_start_an_AppSec_program_with_the_OWASP_Top_10/#going-beyond","text":"All great AppSec programs go beyond the bare minimum. Everyone must keep going if we're ever going to get on top of appsec vulnerabilities. Conceptual integrity . Mature AppSec programs must contain some concept of security architecture, whether a formal cloud or enterprise security architecture or threat modeling Automation and scale . Mature AppSec programs try to automate as much of their deliverables as possible, using scripts to emulate complex penetration testing steps, static code analysis tools directly available to the development teams, assisting dev teams in building appsec unit and integration tests, and more. Culture . Mature AppSec programs try to build out the insecure design and eliminate the technical debt of existing code by being a part of the development team and not to the side. AppSec teams who see development teams as \"us\" and \"them\" are doomed to failure. Continuous improvement . Mature AppSec programs look to constantly improve. If something is not working, stop doing it. If something is clunky or not scalable, work to improve it. If something is not being used by the development teams and has no or limited impact, do something different. Just because we've done testing like desk checks since the 1970s doesn't mean it's a good idea. Measure, evaluate, and then build or improve.","title":"Going beyond"},{"location":"zh_TW/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/","text":"\u5982\u4f55\u5c07 OWASP Top 10 2021 \u505a\u70ba\u6a19\u6e96\u4f7f\u7528 \u2693\ufe0e OWASP Top 10 \u6700\u4e3b\u8981\u662f\u4e00\u500b\u63d0\u5347\u610f\u8b58\u53ca\u8cc7\u5b89\u8a8d\u77e5\u5f62\u614b\u7684\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u5f9e 2003 \u5e74\u958b\u59cb\uff0c\u9019\u4e26\u6c92\u6709\u8b93\u4efb\u4f55\u7684\u4f01\u696d\u6216\u7d44\u7e54\u505c\u6b62\u4f7f\u7528\u5b83\u7576\u4f5c\u9810\u8a2d\u7684\u61c9\u7528\u5b89\u5168\u6a19\u6e96\u3002\u5982\u679c\u4f60\u60f3\u8981\u7528\u4f7f\u7528 OWASP Top 10 \u7576\u4f5c\u7a0b\u5f0f\u8a2d\u8a08\u6216\u662f\u9a57\u8b49\u6e2c\u8a66\u7684\u4e00\u500b\u6a19\u6e96\uff0c\u8981\u5148\u77e5\u9053\u9019\u53ea\u662f\u4e00\u500b\u6700\u4f4e\u9650\u5ea6\u7684\u6307\u6a19\u4e26\u4e14\u4e5f\u53ea\u662f\u4e00\u500b\u958b\u59cb\u3002 \u4f7f\u7528 OWASP Top 10 \u4f5c\u70ba\u6a19\u6e96\u7684\u56f0\u96e3\u4e4b\u4e00\u662f\u6211\u5011\u8a18\u9304\u4e86\u61c9\u7528\u5b89\u5168\u98a8\u96aa\uff0c\u800c\u4e0d\u4e00\u5b9a\u662f\u5bb9\u6613\u6e2c\u8a66\u7684\u554f\u984c\u3002\u4f8b\u5982\uff0cA04:2021-Insecure Design \u8d85\u51fa\u4e86\u5927\u591a\u6578\u80fd\u5920\u6e2c\u88ab\u8a66\u53ca\u88ab\u9a57\u8b49\u7684\u7bc4\u570d\u3002 \u53e6\u4e00\u500b\u4f8b\u5b50\u662f\u8981\u6e2c\u8a66\u6709\u6548\u7684\u5c31\u5730\u3001\u88ab\u4f7f\u7528\u4e2d\u7684\u6e2c\u8a66\u8a18\u9304\u548c\u76e3\u63a7\u6a5f\u5236\u53ea\u80fd\u900f\u904e\u9762\u8ac7\u548c\u8981\u6c42\u62bd\u6a23\u6709\u6548\u7684\u8cc7\u5b89\u4e8b\u4ef6\u9451\u8b58\u6848\u4f8b\u3002 \u4e00\u500b\u975c\u614b\u539f\u59cb\u78bc\u5206\u6790\u5de5\u5177\u53ef\u4ee5\u627e\u51fa\u65e5\u8a8c\u8a18\u9304\u7684\u7f3a\u5931\uff0c\u4f46\u53ef\u80fd\u7121\u6cd5\u78ba\u5b9a\u696d\u52d9\u908f\u8f2f\u6216\u5b58\u53d6\u63a7\u5236\u662f\u5426\u5728\u65e5\u8a8c\u8a18\u9304\u4e2d\u8a18\u9304\u4e86\u6709\u95dc\u91cd\u8981\u5b89\u5168\u6f0f\u6d1e\u7684\u65e5\u8a8c\u3002 \u6ef2\u900f\u6e2c\u8a66\u4eba\u54e1\u53ef\u80fd\u53ea\u80fd\u78ba\u5b9a\u4ed6\u5011\u5728\u6e2c\u8a66\u74b0\u5883\u4e2d\u6e2c\u8a66\u6642\u6709\u78ba\u5be6\u7684\u57f7\u884c\u4e86\u8cc7\u5b89\u4e8b\u4ef6\u9451\u8b58\uff0c\u5728\u5be6\u969b\u7684\u5be6\u9ad4\u74b0\u5883\u4e2d\u537b\u6709\u53ef\u80fd\u6c92\u6709\u505a\u5230\u76f8\u540c\u7684\u6a19\u6e96\u3002 \u4ee5\u4e0b\u662f\u6211\u5011\u5efa\u8b70\u5728\u4ec0\u9ebc\u6642\u5019\u53ef\u4ee5\u4f7f\u7528 OWASP Top 10: \u4f7f\u7528\u6848\u4f8b OWASP Top 10 2021 OWASP \u61c9\u7528\u5b89\u5168\u9a57\u8b49\u6a19\u6e96 (ASVS) \u8a8d\u77e5\u6027 \u662f \u6559\u80b2\u8a13\u7df4 \u57fa\u790e \u5b8c\u6574 \u8a2d\u8a08\u53ca\u67b6\u69cb \u5076\u723e \u53ef\u4ee5 \u7a0b\u5f0f\u6a19\u6e96 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u5b89\u5168\u7a0b\u5f0f\u9a57\u8b49 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u540c\u884c\u8a55\u5be9\u6e05\u55ae \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u55ae\u5143\u6e2c\u8a66 \u5076\u800c\u53ef\u4ee5 \u53ef\u4ee5 \u6574\u5408\u6e2c\u8a66 \u5076\u800c\u53ef\u4ee5 \u53ef\u4ee5 \u6ef2\u900f\u6e2c\u8a66 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u652f\u63f4\u5de5\u5177 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u5b89\u5168\u4f9b\u61c9\u93c8 \u5076\u800c\u53ef\u4ee5 \u53ef\u4ee5 \u6211\u5011\u9f13\u52f5\u4efb\u4f55\u5e0c\u671b\u80fd\u5957\u7528\u61c9\u7528\u5b89\u5168\u6a19\u6e96\u7684\u4eba\u53ef\u4ee5\u5229\u7528 OWASP \u61c9\u7528\u5b89\u5168\u9a57\u8b49\u6a19\u6e96\uff08ASVS\uff09\uff0c\u56e0\u70ba\u5b83\u672c\u8eab\u7684\u8a2d\u8a08\u5c31\u662f\u53ef\u88ab\u6e2c\u8a66\u53ca\u9a57\u8b49\u7684\uff0c\u4e26\u53ef\u4ee5\u5728\u5b89\u5168\u8edf\u9ad4\u958b\u767c\u751f\u547d\u9031\u671f\u7684\u6240\u6709\u968e\u6bb5\u90fd\u53ef\u88ab\u904b\u7528\u3002 ASVS \u4e5f\u662f\u552f\u4e00\u5de5\u5177\u63d0\u4f9b\u8005\u80fd\u88ab\u63a5\u53d7\u7684\u9078\u64c7\u3002\u6e2c\u8a66\u5de5\u5177\u6c92\u8fa6\u6cd5\u5168\u9762\u7684\u5075\u6e2c\uff0c\u6e2c\u8a66\uff0c\u6216\u4fdd\u8b77 OWASP Top 10 \u7576\u4e2d\u7684\u4e00\u4e9b\u9805\u76ee\u3002\u662f\u56e0\u70ba OWASP Top 10 \u7684\u98a8\u96aa\u985e\u5225\u7684\u5340\u5206\u6709\u4e00\u90e8\u5206\u4e5f\u662f\u8ddf A04:2021-\u4e0d\u5b89\u5168\u7684\u8a2d\u8a08\u6709\u6240\u76f8\u95dc\u3002OWASP \u5f37\u70c8\u4e0d\u5efa\u8b70\u7528 OWASP Top 10 \u53bb\u51fd\u84cb\u6240\u6709\u7684\u5b89\u5168\u898f\u7bc4\u53ca\u9700\u6c42\uff0c\u56e0\u70ba\u9019\u672c\u8eab\u5c31\u4e0d\u662f\u771f\u7684\u3002","title":"\u5982\u4f55\u6b63\u78ba\u4f7f\u7528 OWASP Top 10 \u70ba\u6a19\u6e96"},{"location":"zh_TW/A00_2021_How_to_use_the_OWASP_Top_10_as_a_standard/#owasp-top-10-2021","text":"OWASP Top 10 \u6700\u4e3b\u8981\u662f\u4e00\u500b\u63d0\u5347\u610f\u8b58\u53ca\u8cc7\u5b89\u8a8d\u77e5\u5f62\u614b\u7684\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u5f9e 2003 \u5e74\u958b\u59cb\uff0c\u9019\u4e26\u6c92\u6709\u8b93\u4efb\u4f55\u7684\u4f01\u696d\u6216\u7d44\u7e54\u505c\u6b62\u4f7f\u7528\u5b83\u7576\u4f5c\u9810\u8a2d\u7684\u61c9\u7528\u5b89\u5168\u6a19\u6e96\u3002\u5982\u679c\u4f60\u60f3\u8981\u7528\u4f7f\u7528 OWASP Top 10 \u7576\u4f5c\u7a0b\u5f0f\u8a2d\u8a08\u6216\u662f\u9a57\u8b49\u6e2c\u8a66\u7684\u4e00\u500b\u6a19\u6e96\uff0c\u8981\u5148\u77e5\u9053\u9019\u53ea\u662f\u4e00\u500b\u6700\u4f4e\u9650\u5ea6\u7684\u6307\u6a19\u4e26\u4e14\u4e5f\u53ea\u662f\u4e00\u500b\u958b\u59cb\u3002 \u4f7f\u7528 OWASP Top 10 \u4f5c\u70ba\u6a19\u6e96\u7684\u56f0\u96e3\u4e4b\u4e00\u662f\u6211\u5011\u8a18\u9304\u4e86\u61c9\u7528\u5b89\u5168\u98a8\u96aa\uff0c\u800c\u4e0d\u4e00\u5b9a\u662f\u5bb9\u6613\u6e2c\u8a66\u7684\u554f\u984c\u3002\u4f8b\u5982\uff0cA04:2021-Insecure Design \u8d85\u51fa\u4e86\u5927\u591a\u6578\u80fd\u5920\u6e2c\u88ab\u8a66\u53ca\u88ab\u9a57\u8b49\u7684\u7bc4\u570d\u3002 \u53e6\u4e00\u500b\u4f8b\u5b50\u662f\u8981\u6e2c\u8a66\u6709\u6548\u7684\u5c31\u5730\u3001\u88ab\u4f7f\u7528\u4e2d\u7684\u6e2c\u8a66\u8a18\u9304\u548c\u76e3\u63a7\u6a5f\u5236\u53ea\u80fd\u900f\u904e\u9762\u8ac7\u548c\u8981\u6c42\u62bd\u6a23\u6709\u6548\u7684\u8cc7\u5b89\u4e8b\u4ef6\u9451\u8b58\u6848\u4f8b\u3002 \u4e00\u500b\u975c\u614b\u539f\u59cb\u78bc\u5206\u6790\u5de5\u5177\u53ef\u4ee5\u627e\u51fa\u65e5\u8a8c\u8a18\u9304\u7684\u7f3a\u5931\uff0c\u4f46\u53ef\u80fd\u7121\u6cd5\u78ba\u5b9a\u696d\u52d9\u908f\u8f2f\u6216\u5b58\u53d6\u63a7\u5236\u662f\u5426\u5728\u65e5\u8a8c\u8a18\u9304\u4e2d\u8a18\u9304\u4e86\u6709\u95dc\u91cd\u8981\u5b89\u5168\u6f0f\u6d1e\u7684\u65e5\u8a8c\u3002 \u6ef2\u900f\u6e2c\u8a66\u4eba\u54e1\u53ef\u80fd\u53ea\u80fd\u78ba\u5b9a\u4ed6\u5011\u5728\u6e2c\u8a66\u74b0\u5883\u4e2d\u6e2c\u8a66\u6642\u6709\u78ba\u5be6\u7684\u57f7\u884c\u4e86\u8cc7\u5b89\u4e8b\u4ef6\u9451\u8b58\uff0c\u5728\u5be6\u969b\u7684\u5be6\u9ad4\u74b0\u5883\u4e2d\u537b\u6709\u53ef\u80fd\u6c92\u6709\u505a\u5230\u76f8\u540c\u7684\u6a19\u6e96\u3002 \u4ee5\u4e0b\u662f\u6211\u5011\u5efa\u8b70\u5728\u4ec0\u9ebc\u6642\u5019\u53ef\u4ee5\u4f7f\u7528 OWASP Top 10: \u4f7f\u7528\u6848\u4f8b OWASP Top 10 2021 OWASP \u61c9\u7528\u5b89\u5168\u9a57\u8b49\u6a19\u6e96 (ASVS) \u8a8d\u77e5\u6027 \u662f \u6559\u80b2\u8a13\u7df4 \u57fa\u790e \u5b8c\u6574 \u8a2d\u8a08\u53ca\u67b6\u69cb \u5076\u723e \u53ef\u4ee5 \u7a0b\u5f0f\u6a19\u6e96 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u5b89\u5168\u7a0b\u5f0f\u9a57\u8b49 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u540c\u884c\u8a55\u5be9\u6e05\u55ae \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u55ae\u5143\u6e2c\u8a66 \u5076\u800c\u53ef\u4ee5 \u53ef\u4ee5 \u6574\u5408\u6e2c\u8a66 \u5076\u800c\u53ef\u4ee5 \u53ef\u4ee5 \u6ef2\u900f\u6e2c\u8a66 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u652f\u63f4\u5de5\u5177 \u6700\u4f4e\u9650\u5ea6 \u53ef\u4ee5 \u5b89\u5168\u4f9b\u61c9\u93c8 \u5076\u800c\u53ef\u4ee5 \u53ef\u4ee5 \u6211\u5011\u9f13\u52f5\u4efb\u4f55\u5e0c\u671b\u80fd\u5957\u7528\u61c9\u7528\u5b89\u5168\u6a19\u6e96\u7684\u4eba\u53ef\u4ee5\u5229\u7528 OWASP \u61c9\u7528\u5b89\u5168\u9a57\u8b49\u6a19\u6e96\uff08ASVS\uff09\uff0c\u56e0\u70ba\u5b83\u672c\u8eab\u7684\u8a2d\u8a08\u5c31\u662f\u53ef\u88ab\u6e2c\u8a66\u53ca\u9a57\u8b49\u7684\uff0c\u4e26\u53ef\u4ee5\u5728\u5b89\u5168\u8edf\u9ad4\u958b\u767c\u751f\u547d\u9031\u671f\u7684\u6240\u6709\u968e\u6bb5\u90fd\u53ef\u88ab\u904b\u7528\u3002 ASVS \u4e5f\u662f\u552f\u4e00\u5de5\u5177\u63d0\u4f9b\u8005\u80fd\u88ab\u63a5\u53d7\u7684\u9078\u64c7\u3002\u6e2c\u8a66\u5de5\u5177\u6c92\u8fa6\u6cd5\u5168\u9762\u7684\u5075\u6e2c\uff0c\u6e2c\u8a66\uff0c\u6216\u4fdd\u8b77 OWASP Top 10 \u7576\u4e2d\u7684\u4e00\u4e9b\u9805\u76ee\u3002\u662f\u56e0\u70ba OWASP Top 10 \u7684\u98a8\u96aa\u985e\u5225\u7684\u5340\u5206\u6709\u4e00\u90e8\u5206\u4e5f\u662f\u8ddf A04:2021-\u4e0d\u5b89\u5168\u7684\u8a2d\u8a08\u6709\u6240\u76f8\u95dc\u3002OWASP \u5f37\u70c8\u4e0d\u5efa\u8b70\u7528 OWASP Top 10 \u53bb\u51fd\u84cb\u6240\u6709\u7684\u5b89\u5168\u898f\u7bc4\u53ca\u9700\u6c42\uff0c\u56e0\u70ba\u9019\u672c\u8eab\u5c31\u4e0d\u662f\u771f\u7684\u3002","title":"\u5982\u4f55\u5c07 OWASP Top 10 2021 \u505a\u70ba\u6a19\u6e96\u4f7f\u7528"},{"location":"zh_TW/A00_2021_Introduction/","text":"OWASP Top 10 2021 \u4ecb\u7d39 \u2693\ufe0e \u6b61\u8fce\u4f86\u5230\u6700\u65b0\u7248\u672c\u7684 OWASP Top 10\uff01! OWASP Top 10 2021 \u662f\u4e00\u500b\u5168\u65b0\u7684\u540d\u55ae\uff0c\u5305\u542b\u4e86\u4f60\u53ef\u4ee5\u5217\u5370\u4e0b\u4f86\u7684\u65b0\u5716\u793a\u8aaa\u660e\uff0c\u82e5\u6709\u9700\u8981\u7684\u8a71\uff0c\u4f60\u53ef\u4ee5\u5f9e\u6211\u5011\u7684\u7db2\u9801\u4e0a\u9762\u4e0b\u8f09\u3002 \u5728\u6b64\u6211\u5011\u60f3\u5c0d\u6240\u6709\u8ca2\u737b\u4e86\u4ed6\u5011\u6642\u9593\u548c\u8cc7\u6599\u7684\u4eba\u7d66\u4e88\u4e00\u500b\u6975\u5927\u7684\u611f\u8b1d\u3002\u6c92\u6709\u4f60\u5011\uff0c\u9019\u4e00\u500b\u65b0\u7248\u672c\u662f\u4e0d\u6703\u51fa\u73fe\u7684\u3002 \u8b1d\u8b1d \u3002 Top 10 for 2021 \u6709\u4ec0\u9ebc\u65b0\u7684\u8b8a\u5316\uff1f \u2693\ufe0e \u9019\u6b21\u5728 OWASP Top 10 for 2021 \u6709\u4e09\u500b\u5168\u65b0\u7684\u5206\u985e\uff0c\u6709\u56db\u500b\u5206\u985e\u6709\u505a\u540d\u7a31\u548c\u7bc4\u570d\u7684\u4fee\u6b63\uff0c\u4e26\u6709\u5c07\u4e00\u4e9b\u985e\u5225\u505a\u5408\u4f75\u3002 A01:2021-\u6b0a\u9650\u63a7\u5236\u5931\u6548 \u5f9e\u7b2c\u4e94\u540d\u79fb\u4e0a\u4f86; 94% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6b0a\u9650\u63a7\u5236\u5931\u6548\u7684\u554f\u984c\u3002\u5728\u6b0a\u9650\u63a7\u5236\u5931\u6548\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 34 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u90fd\u9ad8\u65bc\u5176\u4ed6\u7684\u5f31\u9ede\u985e\u5225\u3002 A02:2021-\u52a0\u5bc6\u6a5f\u5236\u5931\u6548 \u63d0\u5347\u4e00\u540d\u5230\u7b2c\u4e8c\u540d\uff0c\u5728\u4e4b\u524d\u70ba \u654f\u611f\u8cc7\u6599\u5916\u66dd \uff0c\u5728\u6b64\u5b9a\u7fa9\u4e0b\u6bd4\u8f03\u985e\u4f3c\u65bc\u4e00\u500b\u5ee3\u6cdb\u7684\u554f\u984c\u800c\u975e\u6839\u672c\u539f\u56e0\u3002\u5728\u6b64\u91cd\u65b0\u5b9a\u7fa9\u4e26\u5c07\u554f\u984c\u6838\u5fc3\u5b9a\u7fa9\u5728\u52a0\u5bc6\u6a5f\u5236\u7684\u5931\u6557\uff0c\u4e26\u56e0\u6b64\u9020\u6210\u654f\u611f\u6027\u8cc7\u6599\u5916\u6d29\u6216\u662f\u7cfb\u7d71\u88ab\u7834\u58de\u3002 A03:2021-\u6ce8\u5165\u5f0f\u653b\u64ca \u4e0b\u6ed1\u5230\u7b2c\u4e09\u540d\u300294% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6ce8\u5165\u5f0f\u653b\u64ca\u7684\u554f\u984c\u3002\u5728\u6ce8\u5165\u5f0f\u653b\u64ca\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 33 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u70ba\u5f31\u9ede\u554f\u984c\u7684\u7b2c\u4e8c\u9ad8\u3002\u8de8\u7ad9\u8173\u672c\u653b\u64ca\u73fe\u5728\u5728\u65b0\u7248\u672c\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u9019\u662f 2021 \u5e74\u7248\u672c\u7684\u65b0\u985e\u5225\uff0c\u4e26\u7279\u5225\u91dd\u6ce8\u5728\u8207\u8a2d\u8a08\u76f8\u95dc\u7684\u7f3a\u5931\u3002\u5982\u679c\u6211\u5011\u771f\u7684\u5e0c\u671b\u8b93\u6574\u500b\u7522\u696d\"\u5411\u5de6\u79fb\u52d5\"\uff0a\u8a3b\u4e00\uff0a\uff0c\u90a3\u6211\u5011\u5fc5\u9808\u9032\u4e00\u6b65\u7684\u5f80\u5a01\u8105\u5efa\u6a21\uff0c\u5b89\u5168\u8a2d\u8a08\u6a21\u584a\u7684\u89c0\u5ff5\uff0c\u548c\u5b89\u5168\u53c3\u8003\u67b6\u69cb\u524d\u9032\u3002 \uff0a\u8a3b\u4e00: Move Left \u65bc\u82f1\u6587\u539f\u6587\u4e2d\u4ee3\u8868\u5728\u8edf\u9ad4\u958b\u767c\u53ca\u4ea4\u4ed8\u904e\u7a0b\u4e2d\uff0c\u5728\u65e9\u671f\u627e\u51fa\u53ca\u8655\u7406\u76f8\u95dc\u554f\u984c\uff0c\u540c Shift Left Testing\u3002\uff0a A05:2021-\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677 \u5f9e\u4e0a\u4e00\u7248\u672c\u7684\u7b2c\u516d\u540d\u79fb\u52d5\u4e0a\u4f86\u300290% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u7684\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677\u3002\u5728\u66f4\u591a\u7684\u8edf\u9ad4\u5f80\u66f4\u9ad8\u5ea6\u548c\u6709\u5f48\u6027\u7684\u8a2d\u5b9a\u79fb\u52d5\uff0c\u6211\u5011\u4e26\u4e0d\u610f\u5916\u9019\u500b\u985e\u5225\u7684\u554f\u984c\u5f80\u4e0a\u79fb\u52d5\u3002\u5728\u524d\u7248\u672c\u4e2d\u7684 XML \u5916\u90e8\u5be6\u9ad4\u6ce8\u5165\u653b\u64ca \uff08XML External Entities\uff09\u73fe\u5728\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A06:2021-\u5371\u96aa\u6216\u904e\u820a\u7684\u5143\u4ef6 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u4f7f\u7528\u6709\u5df2\u77e5\u5f31\u9ede\u7684\u5143\u4ef6 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u65bc\u696d\u754c\u554f\u5377\u4e2d\u6392\u540d\u7b2c\u4e8c\uff0c\u4f46\u4e5f\u6709\u8db3\u5920\u7684\u7d71\u8a08\u8cc7\u6599\u8b93\u5b83\u53ef\u4ee5\u9032\u5165 Top 10\u3002\u9019\u500b\u985e\u5225\u5f9e 2017 \u7248\u672c\u7684\u7b2c\u4e5d\u540d\u722c\u5347\u5230\u7b2c\u516d\uff0c\u4e5f\u662f\u6211\u5011\u6301\u7e8c\u6399\u624e\u505a\u6e2c\u8a66\u548c\u8a55\u4f30\u98a8\u96aa\u7684\u985e\u5225\u3002\u9019\u4e5f\u662f\u552f\u4e00\u4e00\u500b\u6c92\u6709\u4efb\u4f55 CVE \u80fd\u88ab\u5c0d\u61c9\u5230 CWE \u5167\u7684\u985e\u5225\uff0c\u6240\u4ee5\u9810\u8a2d\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u5728\u9019\u985e\u5225\u7684\u5206\u6578\u4e0a\u88ab\u9810\u8a2d\u70ba 5.0\u3002 A07:2021-\u8a8d\u8b49\u53ca\u9a57\u8b49\u6a5f\u5236\u5931\u6548 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u932f\u8aa4\u7684\u8a8d\u8b49\u6a5f\u5236 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u6cb9\u7b2c\u4e8c\u540d\u4e0b\u6ed1\u81f3\u6b64\uff0c\u4e26\u540c\u6642\u5305\u542b\u4e86\u5c07\u8a8d\u8b49\u76f8\u95dc\u7f3a\u5931\u7684 CWE \u5305\u542b\u5728\u5167\u3002\u9019\u500b\u985e\u5225\u4ecd\u662f Top 10 \u4e0d\u53ef\u7f3a\u5c11\u7684\u4e00\u74b0\uff0c\u4f46\u540c\u6642\u4e5f\u6709\u767c\u73fe\u73fe\u5728\u6a19\u6e96\u5316\u7684\u67b6\u69cb\u6709\u5354\u52a9\u964d\u4f4e\u6b21\u98a8\u96aa\u767c\u751f\u6a5f\u7387\u3002 A08:2021-\u8edf\u9ad4\u53ca\u8cc7\u6599\u5b8c\u6574\u6027\u5931\u6548 \u9019\u662f 2021 \u5e74\u7248\u672c\u5168\u65b0\u7684\u985e\u5225\uff0c\u4e26\u5728\u8edf\u9ad4\u66f4\u65b0\uff0c\u6a5f\u654f\u53ca\u91cd\u8981\u8cc7\u6599\uff0c\u548c CI/CD \u7ba1\u9053\u4e2d\u4e26\u6c92\u6709\u505a\u5b8c\u6574\u6027\u7684\u78ba\u8a8d\u70ba\u524d\u63d0\u505a\u5047\u8a2d\u4e26\u9032\u884c\u8a55\u4f30\u3002\u5728\u8a55\u4f30\u4e2d\u5f71\u97ff\u6b0a\u91cd\u6700\u9ad8\u5206\u7684 CVE/CVSS \u8cc7\u6599\u90fd\u8207\u9019\u985e\u5225\u4e2d\u7684 10 \u500b CWE \u5c0d\u61c9\u5230\u30022017 \u5e74\u7248\u672c\u4e2d\u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\u73fe\u5728\u88ab\u5408\u4f75\u81f3\u6b64\u985e\u5225\u3002 A09:2021-\u8cc7\u5b89\u8a18\u9304\u53ca\u76e3\u63a7\u5931\u6548 \u5728\u4e4b\u524d\u70ba \u4e0d\u5b8c\u6574\u7684\u7d00\u9304\u53ca\u76e3\u63a7 \u4e26\u7d0d\u5165\u5728\u696d\u754c\u554f\u5377\u4e2d\u5728\u672c\u6b21\u5217\u540d\u70ba\u7b2c\u4e09\u540d\u4e26\u5f9e\u4e4b\u524d\u7684\u7b2c\u5341\u540d\u4e0a\u79fb\u3002\u9019\u500b\u985e\u5225\u5c07\u64f4\u5145\u53bb\u7d0d\u5165\u66f4\u591a\u76f8\u95dc\u7684\u7f3a\u5931\uff0c\u4f46\u9019\u4e5f\u662f\u76f8\u7576\u96e3\u53bb\u9a57\u8b49\uff0c\u4e26\u6c92\u6709\u76f8\u7576\u591a\u7684 CVE/CVSS \u8cc7\u6599\u53ef\u4ee5\u4f50\u8b49\u3002\u4f46\u662f\u5728\u9019\u500b\u985e\u5225\u4e2d\u7684\u7f3a\u5931\u6703\u76f4\u63a5\u5f71\u97ff\u5230\u6574\u9ad4\u5b89\u5168\u7684\u53ef\u8996\u6027\uff0c\u4e8b\u4ef6\u544a\u8b66\u53ca\u9451\u8b58\u3002 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u9019\u500b\u985e\u5225\u662f\u5728\u696d\u754c\u554f\u5377\u6392\u540d\u7b2c\u4e00\u540d\uff0c\u4e26\u5728\u6b64\u7248\u672c\u5167\u7d0d\u5165\u3002\u7531\u8cc7\u6599\u986f\u793a\u6b64\u554f\u984c\u6709\u8f03\u4f4e\u88ab\u9a57\u6e2c\u6b21\u6578\u548c\u7bc4\u570d\uff0c\u4f46\u6709\u9ad8\u65bc\u5e73\u5747\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u6bd4\u7387\u3002\u9019\u500b\u985e\u5225\u7684\u51fa\u73fe\u4e5f\u662f\u56e0\u70ba\u696d\u754c\u5c08\u5bb6\u91cd\u8907\u7533\u660e\u9019\u985e\u5225\u7684\u554f\u984c\u76f8\u7576\u91cd\u8981\uff0c\u5373\u4f7f\u5728\u672c\u6b21\u8cc7\u6599\u4e2d\u4e26\u6c92\u6709\u8db3\u5920\u7684\u8cc7\u6599\u53bb\u986f\u793a\u9019\u500b\u554f\u984c\u3002 \u5206\u6790\u65b9\u6cd5 \u2693\ufe0e \u672c\u6b21 Top 10 \u7684\u9078\u64c7\u65b9\u5f0f\u6bd4\u4ee5\u5f80\u66f4\u91cd\u8996\u8cc7\u6599\u5206\u6790\uff0c\u4f46\u4e26\u4e0d\u662f\u5b8c\u5168\u4ee5\u8cc7\u6599\u5206\u6790\u70ba\u4e3b\u3002\u6211\u5011\u5f9e\u8cc7\u6599\u5206\u6790\u4e2d\u6311\u9078\u4e86\u516b\u500b\u98a8\u96aa\u985e\u5225\uff0c\u7136\u5f8c\u7531\u696d\u754c\u554f\u5377\u4e2d\u6311\u9078\u5169\u500b\u98a8\u96aa\u985e\u5225\u3002\u6211\u5011\u5f9e\u904e\u5f80\u7684\u5206\u4eab\u8cc7\u6599\u4e2d\u53bb\u77ad\u89e3\uff0c\u4e26\u6709\u6211\u5011\u4e00\u500b\u57fa\u672c\u7684\u7406\u7531\u3002\u539f\u56e0\u662f\u6240\u6709\u7684\u8cc7\u5b89\u7814\u7a76\u4eba\u54e1\u90fd\u4e0d\u65b7\u7684\u5728\u627e\u65b0\u7684\u5f31\u9ede\u4e26\u627e\u51fa\u65b9\u6cd5\u53bb\u9a57\u8b49\u5f31\u9ede\uff0c\u4f46\u6703\u9700\u8981\u6642\u9593\u624d\u80fd\u5c07\u9019\u4e9b\u9a57\u6e2c\u65b9\u6cd5\u7d0d\u5165\u5230\u65e2\u6709\u7684\u5de5\u5177\u548c\u6e2c\u8a66\u6d41\u7a0b\u4e2d\u3002\u7576\u6211\u5011\u80fd\u6709\u6548\u7684\u5927\u91cf\u6e2c\u8a66\u9019\u500b\u5f31\u9ede\u6642\uff0c\u6709\u53ef\u80fd\u5df2\u7d93\u904e\u4e86\u591a\u5e74\u7684\u6642\u9593\u3002\u70ba\u4e86\u8981\u8b93\u5169\u8005\u4e4b\u9593\u6709\u5e73\u8861\uff0c\u6211\u5011\u4f7f\u7528\u696d\u754c\u554f\u5377\u8acb\u6559\u5728\u524d\u7dda\u7684\u8cc7\u5b89\u7814\u7a76\u5c08\u5bb6\u5011\u4e26\u77ad\u89e3\u4ed6\u5011\u89ba\u5f97\u6709\u54ea\u4e9b\u662f\u4ed6\u5011\u89ba\u5f97\u56b4\u91cd\u4f46\u5c1a\u672a\u51fa\u73fe\u5728\u6e2c\u8a66\u8cc7\u6599\u4e2d\u7684\u6f0f\u6d1e\u53ca\u554f\u984c\u3002 \u9019\u662f\u5e7e\u500b\u6211\u5011\u70ba\u4e86\u8981\u8b93 OWASP Top 10 \u66f4\u52a0\u6210\u719f\u7684\u91cd\u8981\u6539\u8b8a\u3002 \u5982\u4f55\u5efa\u69cb\u98a8\u96aa\u985e\u5225 \u2693\ufe0e \u6709\u5225\u65bc\u4e0a\u4e00\u500b\u7248\u672c\uff0c\u5728\u9019\u6b21\u7684 OWASP Top 10 \u6709\u4e00\u4e9b\u98a8\u96aa\u985e\u5225\u7684\u4fee\u6539\u3002\u6211\u5011\u5728\u6b64\u4ee5\u6bd4\u8f03\u9ad8\u7684\u89d2\u5ea6\u8aaa\u660e\u4e00\u4e0b\u9019\u6b21\u7684\u985e\u5225\u4fee\u6539\u3002 \u5728\u4e0a\u4e00\u6b21\u7684\u8cc7\u6599\u6536\u96c6\u7576\u4e2d\uff0c\u6211\u5011\u5c07\u8cc7\u6599\u6536\u96c6\u7684\u91cd\u5fc3\u653e\u5728\u9810\u5148\u5b9a\u7fa9\u597d\u7684\u7d04 30 \u500b CWEs \u4e26\u7d0d\u5165\u4e00\u500b\u6b04\u4f4d\u5fb5\u6c42\u5176\u4ed6\u7684\u767c\u73fe\u3002\u5f9e\u9019\u88e1\u6211\u5011\u770b\u5230\u6c7a\u591a\u6578\u7684\u7d44\u7e54\u90fd\u53ea\u6703\u5c08\u6ce8\u5728\u9019 30 \u500b CWEs \u800c\u4e0d\u5e38\u52a0\u5165\u5176\u4ed6\u4ed6\u5011\u53ef\u80fd\u767c\u73fe\u7684 CWEs\u3002\u5728\u9019\u6b21\u7684\u6539\u7248\u4e2d\uff0c\u6211\u5011\u5c07\u6240\u6709\u7684\u554f\u984c\u90fd\u4ee5\u958b\u653e\u5f0f\u7684\u65b9\u6cd5\u8655\u7406\uff0c\u4e26\u6c92\u6709\u9650\u5236\u5728\u4efb\u4f55\u4e00\u500b CWEs\u3002\u6211\u5011\u8acb\u6559\u4e86\u5f9e 2017 \u5e74\u958b\u59cb\u6240\u6e2c\u8a66\u7684\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\uff0c\u7136\u5f8c\u5728\u9019\u4e9b\u7a0b\u5f0f\u4e2d\u81f3\u5c11\u6709\u4e00\u500b CWE \u88ab\u767c\u73fe\u7684\u6578\u91cf\u3002\u9019\u500b\u683c\u5f0f\u8b93\u6211\u5011\u80fd\u5920\u8ffd\u8e64\u6bcf\u500b CWE \u8ddf\u6240\u6709\u88ab\u9a57\u6e2c\u53ca\u7d71\u8a08\u7684\u61c9\u7528\u7a0b\u5f0f\u7684\u6578\u91cf\u8ddf\u95dc\u4fc2\u3002\u6211\u5011\u4e5f\u5ffd\u7565\u4e86 CWE \u51fa\u73fe\u7684\u983b\u7387\uff0c\u96d6\u7136\u5728\u67d0\u4e9b\u72c0\u6cc1\u4e0b\u9019\u4e5f\u8a31\u662f\u5fc5\u9808\u7684\uff0c\u4f46\u9019\u537b\u96b1\u85cf\u4e86\u98a8\u96aa\u985e\u5225\u672c\u8eab\u8207\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\u6574\u9ad4\u7684\u95dc\u4fc2\u3002\u6240\u4ee5\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u6709 4 \u500b\u6216\u662f 4,000 \u500b\u5f31\u9ede\u4e26\u4e0d\u662f\u88ab\u8a08\u7b97\u5728 Top 10 \u7684\u57fa\u790e\u3002\u4f46\u540c\u6642\u6211\u5011\u4e5f\u5f9e\u539f\u672c\u7684 30 \u591a\u500b CWEs \u589e\u9577\u5230\u5feb 400 \u591a\u500bCWEs \u53bb\u9032\u884c\u5206\u6790\u3002\u6211\u5011\u56e0\u6b64\u4e5f\u8a08\u756b\u672a\u4f86\u505a\u66f4\u591a\u7684\u8cc7\u6599\u5206\u6790\uff0c\u4e26\u5728\u5c0d\u6b64\u7248\u672c\u9032\u884c\u88dc\u5145\u8aaa\u660e\u3002\u800c\u9019\u4e9b\u589e\u52a0\u7684 CWEs \u4e5f\u540c\u6642\u5f71\u97ff\u4e86\u9019\u6b21\u98a8\u96aa\u985e\u5225\u7684\u898f\u5283\u3002 \u6211\u5011\u82b1\u4e86\u597d\u5e7e\u500b\u6708\u5c07 CWEs \u9032\u884c\u5206\u7d44\u8ddf\u5206\u985e\uff0c\u800c\u4e14\u5176\u5be6\u53ef\u4ee5\u4e00\u76f4\u82b1\u66f4\u591a\u500b\u6708\u53bb\u505a\u9019\u4ef6\u4e8b\u60c5\u3002\u4f46\u6211\u5011\u5fc5\u9808\u5728\u67d0\u4e00\u500b\u6642\u9593\u9ede\u505c\u4f4f\u3002\u5728 CWEs \u7576\u4e2d\uff0c\u540c\u6642\u6709 \u539f\u56e0 \u4ee5\u53ca \u75c7\u72c0 \u7684\u554f\u984c\uff0c\u800c\u50cf\u662f \"\u52a0\u5bc6\u6a5f\u5236\u5931\u6548\" \u548c \"\u8a2d\u5b9a\u554f\u984c\" \u9019\u985e\u578b\u7684 \u539f\u56e0 \u8207 \"\u6a5f\u654f\u8cc7\u6599\u5916\u6d29\" \u548c \"\u963b\u65b7\u670d\u52d9\" \u9019\u985e\u578b\u7684 \u75c7\u72c0 \u662f\u5c0d\u7acb\u7684\u3002\u56e0\u6b64\u6211\u5011\u6c7a\u5b9a\u5728\u53ef\u4ee5\u7684\u6642\u5019\u8981\u66f4\u5c08\u6ce8\u65bc\u5e95\u5c64\u7684\u539f\u56e0\uff0c\u56e0\u70ba\u9019\u662f\u53ef\u4ee5\u6709\u6548\u6307\u51fa\u554f\u984c\u7684\u672c\u9ad4\u8ddf\u540c\u6642\u63d0\u4f9b\u554f\u984c\u7684\u89e3\u6c7a\u65b9\u5411\u3002\u5c08\u6ce8\u5728\u554f\u984c\u6838\u5fc3\u800c\u4e0d\u5c07\u91cd\u5fc3\u653e\u5728\u75c7\u72c0\u4e26\u4e0d\u662f\u4e00\u500b\u65b0\u7684\u6982\u5ff5\b\b\uff0cTop Ten \u6709\u53f2\u4ee5\u4f86\u4e00\u76f4\u662f\u75c7\u72c0\u8ddf\u554f\u984c\u6838\u5fc3\u7684\u7d9c\u5408\u9ad4\uff0c\u53ea\u662f\u9019\u6b21\u6211\u5011\u66f4\u523b\u610f\u7684\u5c07\u4ed6\u7a81\u986f\u51fa\u4f86\u3002\u5728\u9019\u6b21\u7684\u65b0\u7248\u672c\u4e2d\uff0c\u6bcf\u4e00\u500b\u985e\u5225\u5167\u7684\u5e73\u5747\u6709 19.6 \u500b CWE\uff0c\u800c\u6700\u4f4e\u7684 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u6709\u4e00\u500b CWE \u5230 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u6709\u56db\u5341\u500b CWE\u3002\u9019\u500b\u65b0\u7684\u985e\u5225\u67b6\u69cb\u80fd\u63d0\u4f9b\u4f01\u696d\u66f4\u591a\u7684\u8cc7\u5b89\u8a13\u7df4\u7684\u597d\u8655\uff0c\u56e0\u70ba\u5728\u65b0\u7684\u67b6\u69cb\u4e0b\u53ef\u4ee5\u66f4\u5c08\u6ce8\u5728\u67d0\u500b\u8a9e\u7cfb\u6216\u5e73\u53f0\u4e0a\u7684 CWE\u3002 \u9078\u64c7\u985e\u5225\u6642\u8cc7\u6599\u7684\u4f7f\u7528\u65b9\u5f0f \u2693\ufe0e \u5728 2017 \u5e74\uff0c\u6211\u5011\u7528\u4e8b\u4ef6\u767c\u751f\u6b21\u6578\u53bb\u5224\u65b7\u53ef\u80fd\u767c\u751f\u7684\u6a5f\u7387\u53bb\u9078\u64c7\u985e\u5225\uff0c\u7136\u5f8c\u900f\u904e\u4e00\u7fa4\u5728\u696d\u754c\u64c1\u6709\u6578\u5341\u5e74\u7d93\u9a57\u7684\u5c08\u5bb6\u5718\u5c0d\u8a0e\u8ad6\u4e26\u4f9d\u7167 \u53ef\u767c\u751f\u6027 \uff0c \u53ef\u767c\u73fe\u6027\uff08\u540c\u53ef\u80fd\u6027\uff09 \uff0c\u548c \u6280\u8853\u5f71\u97ff\u529b \u53bb\u505a\u6392\u540d\u3002\u5728 2021 \u5e74\uff0c\u6211\u5011\u5e0c\u671b\u5982\u679c\u53ef\u4ee5\u7684\u8a71\u7528\u8cc7\u6599\u8b49\u660e\u53ef\u767c\u751f\u6027\u548c\u6280\u8853\u5f71\u97ff\u6027\u3002 \u6211\u5011\u4e0b\u8f09\u4e86 OWASP Depndency Check \u4e26\u53d6\u51fa\u4e86 CVSS \u6f0f\u6d1e\uff0c\u4e26\u5c07\u76f8\u95dc\u7684 CWE \u7528\u5f71\u97ff\u529b\u5206\u6578\u5206\u7fa4\u3002\u9019\u82b1\u4e86\u4e00\u4e9b\u6642\u9593\u548c\u529b\u6c23\u53bb\u7814\u7a76\u56e0\u70ba\u6240\u6709\u7684 CVEs \u90fd\u6709 CVSSv2 \u5206\u6578\uff0c\u4f46\u662f\u5728\u5176\u4e2d\u56e0\u70ba CVSSv2 \u8ddf CVSSv3 \u4e4b\u9593\u6709\u4e00\u4e9b\u7f3a\u5931\u662f\u5fc5\u9808\u88ab\u4fee\u6b63\u7684\u3002\u7d93\u904e\u4e86\u4e00\u6bb5\u6642\u9593\u5f8c\uff0c\u6240\u6709\u7684 CVEs \u90fd\u6703\u6709\u5c0d\u61c9\u7684 CVSSv3 \u7684\u5206\u6578\u3002\u518d\u8005\uff0c\u5206\u6578\u7684\u7bc4\u570d\u548c\u8a08\u7b97\u7684\u516c\u5f0f\u5728 CVSSv2 \u548c CVSSv3 \u4e4b\u9593\u4e5f\u505a\u4e86\u66f4\u65b0\u3002 \u5728 CVSSv2 \u4e2d\uff0c\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5169\u8005\u90fd\u53ef\u9054\u5230 10.0 \u5206\uff0c\u4f46\u662f\u516c\u5f0f\u672c\u8eab\u6703\u5c07\u5169\u8005\u8abf\u6574\u70ba\u6f0f\u6d1e\u4f54 60%\uff0c\u7136\u5f8c\u5f71\u97ff\u529b\u4f54 40%\u3002\u5728 CVSSv3 \u4e2d\uff0c\u7406\u8ad6\u4e0a\u7684\u6700\u9ad8\u503c\u5c07\u6f0f\u6d1e\u9650\u5236\u5728 6.0 \u5206\u800c\u5f71\u97ff\u529b\u5728 4.0 \u5206\u3002\u7576\u8003\u616e\u5230\u6b0a\u91cd\u6bd4\u7387\u6642\uff0c\u5f71\u97ff\u529b\u7684\u5206\u6578\u6703\u504f\u9ad8\uff0c\u5728 CVSSv3 \u4e2d\u5e7e\u4e4e\u5e73\u5747\u6703\u591a\u51fa 1.5 \u5206\uff0c\u800c\u6f0f\u6d1e\u5206\u6578\u537b\u6703\u5e73\u5747\u5c11 0.5 \u5206\u3002 \u5f9e OWASP Dependcy Check \u8403\u53d6\u51fa\u7684 NVD \u8cc7\u6599\u7576\u4e2d\u6709\u5c07\u8fd1 12.5 \u842c\u7b46 CVE \u8cc7\u6599\u6709\u5c0d\u61c9\u5230 CWE\uff0c\u800c\u6709 241 \u7b46\u7368\u7279\u7684 CWEs \u6709\u5c0d\u61c9\u5230 CVE\u30026.2\u842c\u7b46 CWE \u6709\u5c0d\u61c9\u5230 CVSSv3 \u5206\u6578\uff0c\u6240\u4ee5\u5927\u7d04\u662f\u6574\u9ad4\u8cc7\u6599\u4e2d\u4e00\u534a\u7684\u90e8\u5206\u3002 \u800c\u5728 Top Ten\uff0c\u6211\u5011\u8a08\u7b97\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u7684\u5e73\u5747\u5206\u6578\u7684\u65b9\u5f0f\u5982\u4e0b\u3002\u6211\u5011\u5c07\u6240\u6709\u6709 CVSS \u5206\u6578\u7684 CVE \u4f9d\u7167 CWE \u5206\u7d44\uff0c\u7136\u5f8c\u4f9d\u7167\u6709 CVSSv3 \u7684\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5728\u6240\u6709\u8cc7\u6599\u4e2d\u7684\u767e\u5206\u6bd4\u4f5c\u6b0a\u91cd\uff0c\u5728\u52a0\u4e0a\u8cc7\u6599\u4e2d\u6709 CVSSv2 \u7684\u8cc7\u6599\u53bb\u505a\u5e73\u5747\u3002\u6211\u5011\u5c07\u9019\u4e9b\u5e73\u5747\u5f8c\u7684 CWEs \u5c0d\u61c9\u5230\u8cc7\u6599\u4e2d\uff0c\u7136\u5f8c\u5c07\u4ed6\u7684\u6f0f\u6d1e\u548c\u5f15\u60f3\u529b\u5206\u6578\u4f7f\u7528\u5728\u53e6\u4e00\u534a\u7684\u98a8\u96aa\u516c\u5f0f\u4e2d\u3002 \u70ba\u4ec0\u9ebc\u5c31\u4e0d\u7d14\u7cb9\u505a\u7d71\u8a08\u5206\u6790\uff1f \u2693\ufe0e \u9019\u4e9b\u8cc7\u6599\u7684\u7d50\u679c\u6700\u4e3b\u8981\u662f\u88ab\u9650\u5236\u5728\u80fd\u4f7f\u7528\u81ea\u52d5\u5de5\u5177\u6e2c\u8a66\u51fa\u4f86\u7684\u7d50\u679c\u3002\u53ef\u662f\u7576\u4f60\u8ddf\u4e00\u4f4d\u6709\u7d93\u9a57\u7684\u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u5c08\u5bb6\u804a\u7684\u6642\u5019\uff0c\u4ed6\u5011\u6703\u8ddf\u4f60\u8aaa\u7d55\u5927\u591a\u6578\u4ed6\u5011\u627e\u5230\u7684\u554f\u984c\u90fd\u4e0d\u5728\u9019\u4e9b\u8cc7\u6599\u88e1\u9762\u3002\u539f\u56e0\u662f\u4e00\u500b\u6e2c\u8a66\u8981\u88ab\u81ea\u52d5\u5316\u7684\u6642\u5019\uff0c\u9700\u8981\u82b1\u6642\u9593\u53bb\u958b\u767c\u9019\u4e9b\u5f31\u9ede\u6e2c\u8a66\u7684\u65b9\u6cd5\u8ad6\uff0c\u7576\u4f60\u9700\u8981\u5c07\u9019\u500b\u6e2c\u8a66\u81ea\u52d5\u5316\u4e26\u80fd\u5c0d\u5927\u91cf\u7684\u61c9\u7528\u7a0b\u5f0f\u53bb\u9a57\u8b49\u6642\uff0c\u53c8\u6703\u82b1\u4e0a\u66f4\u591a\u7684\u6642\u9593\u3002\u7576\u6211\u5011\u56de\u982d\u770b\u53bb\u5e74\u7372\u4ee5\u524d\u6709\u53ef\u80fd\u6c92\u51fa\u73fe\u7684\u4e00\u4e9b\u554f\u984c\u7684\u8da8\u52e2\uff0c\u6211\u5011\u767c\u73fe\u5176\u5be6\u90fd\u6c92\u6709\u5728\u9019\u4e9b\u8cc7\u6599\u7576\u4e2d\u3002 \u56e0\u6b64\uff0c\u7531\u65bc\u8cc7\u6599\u4e0d\u5b8c\u5168\u7684\u95dc\u4fc2\uff0c\u6211\u5011\u53ea\u6709\u5f9e\u8cc7\u6599\u4e2d\u9078\u51fa 8 \u500b\u985e\u5225\uff0c\u800c\u4e26\u4e0d\u662f 10 \u500b\u3002\u5269\u4e0b\u7684\u5169\u500b\u985e\u5225\u662f\u5f9e\u696d\u754c\u554f\u5377\u4e2d\u6240\u9078\u51fa\u7684\u3002\u9019\u6703\u5141\u8a31\u5728\u524d\u7dda\u7684\u53c3\u8207\u8005\u53bb\u9078\u51fa\u4ed6\u5011\u8a8d\u70ba\u7684\u9ad8\u98a8\u96aa\uff0c\u800c\u4e0d\u662f\u7d14\u7cb9\u4f9d\u64da\u8cc7\u6599\u53bb\u5224\u65b7\uff08\u751a\u81f3\u53ef\u80fd\u8cc7\u6599\u6c38\u9060\u90fd\u4e0d\u6703\u6709\u51fa\u73fe\u7684\u8e64\u8de1\uff09\u3002 Why incidence rate instead of frequency? \u2693\ufe0e There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results. What is your data collection and analysis process? \u2693\ufe0e We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order. Data Factors \u2693\ufe0e There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category. Category Relationships from 2017 \u2693\ufe0e There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities. While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks. Thank you to our data contributors \u2693\ufe0e The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT) Thank you to our financial supporters \u2693\ufe0e","title":"OWASP 2021 \u4ecb\u7d39"},{"location":"zh_TW/A00_2021_Introduction/#owasp-top-10-2021","text":"\u6b61\u8fce\u4f86\u5230\u6700\u65b0\u7248\u672c\u7684 OWASP Top 10\uff01! OWASP Top 10 2021 \u662f\u4e00\u500b\u5168\u65b0\u7684\u540d\u55ae\uff0c\u5305\u542b\u4e86\u4f60\u53ef\u4ee5\u5217\u5370\u4e0b\u4f86\u7684\u65b0\u5716\u793a\u8aaa\u660e\uff0c\u82e5\u6709\u9700\u8981\u7684\u8a71\uff0c\u4f60\u53ef\u4ee5\u5f9e\u6211\u5011\u7684\u7db2\u9801\u4e0a\u9762\u4e0b\u8f09\u3002 \u5728\u6b64\u6211\u5011\u60f3\u5c0d\u6240\u6709\u8ca2\u737b\u4e86\u4ed6\u5011\u6642\u9593\u548c\u8cc7\u6599\u7684\u4eba\u7d66\u4e88\u4e00\u500b\u6975\u5927\u7684\u611f\u8b1d\u3002\u6c92\u6709\u4f60\u5011\uff0c\u9019\u4e00\u500b\u65b0\u7248\u672c\u662f\u4e0d\u6703\u51fa\u73fe\u7684\u3002 \u8b1d\u8b1d \u3002","title":"OWASP Top 10 2021 \u4ecb\u7d39"},{"location":"zh_TW/A00_2021_Introduction/#top-10-for-2021","text":"\u9019\u6b21\u5728 OWASP Top 10 for 2021 \u6709\u4e09\u500b\u5168\u65b0\u7684\u5206\u985e\uff0c\u6709\u56db\u500b\u5206\u985e\u6709\u505a\u540d\u7a31\u548c\u7bc4\u570d\u7684\u4fee\u6b63\uff0c\u4e26\u6709\u5c07\u4e00\u4e9b\u985e\u5225\u505a\u5408\u4f75\u3002 A01:2021-\u6b0a\u9650\u63a7\u5236\u5931\u6548 \u5f9e\u7b2c\u4e94\u540d\u79fb\u4e0a\u4f86; 94% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6b0a\u9650\u63a7\u5236\u5931\u6548\u7684\u554f\u984c\u3002\u5728\u6b0a\u9650\u63a7\u5236\u5931\u6548\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 34 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u90fd\u9ad8\u65bc\u5176\u4ed6\u7684\u5f31\u9ede\u985e\u5225\u3002 A02:2021-\u52a0\u5bc6\u6a5f\u5236\u5931\u6548 \u63d0\u5347\u4e00\u540d\u5230\u7b2c\u4e8c\u540d\uff0c\u5728\u4e4b\u524d\u70ba \u654f\u611f\u8cc7\u6599\u5916\u66dd \uff0c\u5728\u6b64\u5b9a\u7fa9\u4e0b\u6bd4\u8f03\u985e\u4f3c\u65bc\u4e00\u500b\u5ee3\u6cdb\u7684\u554f\u984c\u800c\u975e\u6839\u672c\u539f\u56e0\u3002\u5728\u6b64\u91cd\u65b0\u5b9a\u7fa9\u4e26\u5c07\u554f\u984c\u6838\u5fc3\u5b9a\u7fa9\u5728\u52a0\u5bc6\u6a5f\u5236\u7684\u5931\u6557\uff0c\u4e26\u56e0\u6b64\u9020\u6210\u654f\u611f\u6027\u8cc7\u6599\u5916\u6d29\u6216\u662f\u7cfb\u7d71\u88ab\u7834\u58de\u3002 A03:2021-\u6ce8\u5165\u5f0f\u653b\u64ca \u4e0b\u6ed1\u5230\u7b2c\u4e09\u540d\u300294% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6ce8\u5165\u5f0f\u653b\u64ca\u7684\u554f\u984c\u3002\u5728\u6ce8\u5165\u5f0f\u653b\u64ca\u9019\u500b\u985e\u5225\u4e2d\u88ab\u5c0d\u61c9\u5230\u7684 33 \u500b CWEs \u5728\u9a57\u6e2c\u8cc7\u6599\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u70ba\u5f31\u9ede\u554f\u984c\u7684\u7b2c\u4e8c\u9ad8\u3002\u8de8\u7ad9\u8173\u672c\u653b\u64ca\u73fe\u5728\u5728\u65b0\u7248\u672c\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u9019\u662f 2021 \u5e74\u7248\u672c\u7684\u65b0\u985e\u5225\uff0c\u4e26\u7279\u5225\u91dd\u6ce8\u5728\u8207\u8a2d\u8a08\u76f8\u95dc\u7684\u7f3a\u5931\u3002\u5982\u679c\u6211\u5011\u771f\u7684\u5e0c\u671b\u8b93\u6574\u500b\u7522\u696d\"\u5411\u5de6\u79fb\u52d5\"\uff0a\u8a3b\u4e00\uff0a\uff0c\u90a3\u6211\u5011\u5fc5\u9808\u9032\u4e00\u6b65\u7684\u5f80\u5a01\u8105\u5efa\u6a21\uff0c\u5b89\u5168\u8a2d\u8a08\u6a21\u584a\u7684\u89c0\u5ff5\uff0c\u548c\u5b89\u5168\u53c3\u8003\u67b6\u69cb\u524d\u9032\u3002 \uff0a\u8a3b\u4e00: Move Left \u65bc\u82f1\u6587\u539f\u6587\u4e2d\u4ee3\u8868\u5728\u8edf\u9ad4\u958b\u767c\u53ca\u4ea4\u4ed8\u904e\u7a0b\u4e2d\uff0c\u5728\u65e9\u671f\u627e\u51fa\u53ca\u8655\u7406\u76f8\u95dc\u554f\u984c\uff0c\u540c Shift Left Testing\u3002\uff0a A05:2021-\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677 \u5f9e\u4e0a\u4e00\u7248\u672c\u7684\u7b2c\u516d\u540d\u79fb\u52d5\u4e0a\u4f86\u300290% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u7684\u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677\u3002\u5728\u66f4\u591a\u7684\u8edf\u9ad4\u5f80\u66f4\u9ad8\u5ea6\u548c\u6709\u5f48\u6027\u7684\u8a2d\u5b9a\u79fb\u52d5\uff0c\u6211\u5011\u4e26\u4e0d\u610f\u5916\u9019\u500b\u985e\u5225\u7684\u554f\u984c\u5f80\u4e0a\u79fb\u52d5\u3002\u5728\u524d\u7248\u672c\u4e2d\u7684 XML \u5916\u90e8\u5be6\u9ad4\u6ce8\u5165\u653b\u64ca \uff08XML External Entities\uff09\u73fe\u5728\u5c6c\u65bc\u9019\u500b\u985e\u5225\u3002 A06:2021-\u5371\u96aa\u6216\u904e\u820a\u7684\u5143\u4ef6 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u4f7f\u7528\u6709\u5df2\u77e5\u5f31\u9ede\u7684\u5143\u4ef6 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u65bc\u696d\u754c\u554f\u5377\u4e2d\u6392\u540d\u7b2c\u4e8c\uff0c\u4f46\u4e5f\u6709\u8db3\u5920\u7684\u7d71\u8a08\u8cc7\u6599\u8b93\u5b83\u53ef\u4ee5\u9032\u5165 Top 10\u3002\u9019\u500b\u985e\u5225\u5f9e 2017 \u7248\u672c\u7684\u7b2c\u4e5d\u540d\u722c\u5347\u5230\u7b2c\u516d\uff0c\u4e5f\u662f\u6211\u5011\u6301\u7e8c\u6399\u624e\u505a\u6e2c\u8a66\u548c\u8a55\u4f30\u98a8\u96aa\u7684\u985e\u5225\u3002\u9019\u4e5f\u662f\u552f\u4e00\u4e00\u500b\u6c92\u6709\u4efb\u4f55 CVE \u80fd\u88ab\u5c0d\u61c9\u5230 CWE \u5167\u7684\u985e\u5225\uff0c\u6240\u4ee5\u9810\u8a2d\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u5728\u9019\u985e\u5225\u7684\u5206\u6578\u4e0a\u88ab\u9810\u8a2d\u70ba 5.0\u3002 A07:2021-\u8a8d\u8b49\u53ca\u9a57\u8b49\u6a5f\u5236\u5931\u6548 \u5728\u4e4b\u524d\u6a19\u984c\u70ba \u932f\u8aa4\u7684\u8a8d\u8b49\u6a5f\u5236 \u3002\u5728\u672c\u6b21\u7248\u672c\u4e2d\u6cb9\u7b2c\u4e8c\u540d\u4e0b\u6ed1\u81f3\u6b64\uff0c\u4e26\u540c\u6642\u5305\u542b\u4e86\u5c07\u8a8d\u8b49\u76f8\u95dc\u7f3a\u5931\u7684 CWE \u5305\u542b\u5728\u5167\u3002\u9019\u500b\u985e\u5225\u4ecd\u662f Top 10 \u4e0d\u53ef\u7f3a\u5c11\u7684\u4e00\u74b0\uff0c\u4f46\u540c\u6642\u4e5f\u6709\u767c\u73fe\u73fe\u5728\u6a19\u6e96\u5316\u7684\u67b6\u69cb\u6709\u5354\u52a9\u964d\u4f4e\u6b21\u98a8\u96aa\u767c\u751f\u6a5f\u7387\u3002 A08:2021-\u8edf\u9ad4\u53ca\u8cc7\u6599\u5b8c\u6574\u6027\u5931\u6548 \u9019\u662f 2021 \u5e74\u7248\u672c\u5168\u65b0\u7684\u985e\u5225\uff0c\u4e26\u5728\u8edf\u9ad4\u66f4\u65b0\uff0c\u6a5f\u654f\u53ca\u91cd\u8981\u8cc7\u6599\uff0c\u548c CI/CD \u7ba1\u9053\u4e2d\u4e26\u6c92\u6709\u505a\u5b8c\u6574\u6027\u7684\u78ba\u8a8d\u70ba\u524d\u63d0\u505a\u5047\u8a2d\u4e26\u9032\u884c\u8a55\u4f30\u3002\u5728\u8a55\u4f30\u4e2d\u5f71\u97ff\u6b0a\u91cd\u6700\u9ad8\u5206\u7684 CVE/CVSS \u8cc7\u6599\u90fd\u8207\u9019\u985e\u5225\u4e2d\u7684 10 \u500b CWE \u5c0d\u61c9\u5230\u30022017 \u5e74\u7248\u672c\u4e2d\u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\u73fe\u5728\u88ab\u5408\u4f75\u81f3\u6b64\u985e\u5225\u3002 A09:2021-\u8cc7\u5b89\u8a18\u9304\u53ca\u76e3\u63a7\u5931\u6548 \u5728\u4e4b\u524d\u70ba \u4e0d\u5b8c\u6574\u7684\u7d00\u9304\u53ca\u76e3\u63a7 \u4e26\u7d0d\u5165\u5728\u696d\u754c\u554f\u5377\u4e2d\u5728\u672c\u6b21\u5217\u540d\u70ba\u7b2c\u4e09\u540d\u4e26\u5f9e\u4e4b\u524d\u7684\u7b2c\u5341\u540d\u4e0a\u79fb\u3002\u9019\u500b\u985e\u5225\u5c07\u64f4\u5145\u53bb\u7d0d\u5165\u66f4\u591a\u76f8\u95dc\u7684\u7f3a\u5931\uff0c\u4f46\u9019\u4e5f\u662f\u76f8\u7576\u96e3\u53bb\u9a57\u8b49\uff0c\u4e26\u6c92\u6709\u76f8\u7576\u591a\u7684 CVE/CVSS \u8cc7\u6599\u53ef\u4ee5\u4f50\u8b49\u3002\u4f46\u662f\u5728\u9019\u500b\u985e\u5225\u4e2d\u7684\u7f3a\u5931\u6703\u76f4\u63a5\u5f71\u97ff\u5230\u6574\u9ad4\u5b89\u5168\u7684\u53ef\u8996\u6027\uff0c\u4e8b\u4ef6\u544a\u8b66\u53ca\u9451\u8b58\u3002 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u9019\u500b\u985e\u5225\u662f\u5728\u696d\u754c\u554f\u5377\u6392\u540d\u7b2c\u4e00\u540d\uff0c\u4e26\u5728\u6b64\u7248\u672c\u5167\u7d0d\u5165\u3002\u7531\u8cc7\u6599\u986f\u793a\u6b64\u554f\u984c\u6709\u8f03\u4f4e\u88ab\u9a57\u6e2c\u6b21\u6578\u548c\u7bc4\u570d\uff0c\u4f46\u6709\u9ad8\u65bc\u5e73\u5747\u7684\u5a01\u8105\u53ca\u5f71\u97ff\u6b0a\u91cd\u6bd4\u7387\u3002\u9019\u500b\u985e\u5225\u7684\u51fa\u73fe\u4e5f\u662f\u56e0\u70ba\u696d\u754c\u5c08\u5bb6\u91cd\u8907\u7533\u660e\u9019\u985e\u5225\u7684\u554f\u984c\u76f8\u7576\u91cd\u8981\uff0c\u5373\u4f7f\u5728\u672c\u6b21\u8cc7\u6599\u4e2d\u4e26\u6c92\u6709\u8db3\u5920\u7684\u8cc7\u6599\u53bb\u986f\u793a\u9019\u500b\u554f\u984c\u3002","title":"Top 10 for 2021 \u6709\u4ec0\u9ebc\u65b0\u7684\u8b8a\u5316\uff1f"},{"location":"zh_TW/A00_2021_Introduction/#_1","text":"\u672c\u6b21 Top 10 \u7684\u9078\u64c7\u65b9\u5f0f\u6bd4\u4ee5\u5f80\u66f4\u91cd\u8996\u8cc7\u6599\u5206\u6790\uff0c\u4f46\u4e26\u4e0d\u662f\u5b8c\u5168\u4ee5\u8cc7\u6599\u5206\u6790\u70ba\u4e3b\u3002\u6211\u5011\u5f9e\u8cc7\u6599\u5206\u6790\u4e2d\u6311\u9078\u4e86\u516b\u500b\u98a8\u96aa\u985e\u5225\uff0c\u7136\u5f8c\u7531\u696d\u754c\u554f\u5377\u4e2d\u6311\u9078\u5169\u500b\u98a8\u96aa\u985e\u5225\u3002\u6211\u5011\u5f9e\u904e\u5f80\u7684\u5206\u4eab\u8cc7\u6599\u4e2d\u53bb\u77ad\u89e3\uff0c\u4e26\u6709\u6211\u5011\u4e00\u500b\u57fa\u672c\u7684\u7406\u7531\u3002\u539f\u56e0\u662f\u6240\u6709\u7684\u8cc7\u5b89\u7814\u7a76\u4eba\u54e1\u90fd\u4e0d\u65b7\u7684\u5728\u627e\u65b0\u7684\u5f31\u9ede\u4e26\u627e\u51fa\u65b9\u6cd5\u53bb\u9a57\u8b49\u5f31\u9ede\uff0c\u4f46\u6703\u9700\u8981\u6642\u9593\u624d\u80fd\u5c07\u9019\u4e9b\u9a57\u6e2c\u65b9\u6cd5\u7d0d\u5165\u5230\u65e2\u6709\u7684\u5de5\u5177\u548c\u6e2c\u8a66\u6d41\u7a0b\u4e2d\u3002\u7576\u6211\u5011\u80fd\u6709\u6548\u7684\u5927\u91cf\u6e2c\u8a66\u9019\u500b\u5f31\u9ede\u6642\uff0c\u6709\u53ef\u80fd\u5df2\u7d93\u904e\u4e86\u591a\u5e74\u7684\u6642\u9593\u3002\u70ba\u4e86\u8981\u8b93\u5169\u8005\u4e4b\u9593\u6709\u5e73\u8861\uff0c\u6211\u5011\u4f7f\u7528\u696d\u754c\u554f\u5377\u8acb\u6559\u5728\u524d\u7dda\u7684\u8cc7\u5b89\u7814\u7a76\u5c08\u5bb6\u5011\u4e26\u77ad\u89e3\u4ed6\u5011\u89ba\u5f97\u6709\u54ea\u4e9b\u662f\u4ed6\u5011\u89ba\u5f97\u56b4\u91cd\u4f46\u5c1a\u672a\u51fa\u73fe\u5728\u6e2c\u8a66\u8cc7\u6599\u4e2d\u7684\u6f0f\u6d1e\u53ca\u554f\u984c\u3002 \u9019\u662f\u5e7e\u500b\u6211\u5011\u70ba\u4e86\u8981\u8b93 OWASP Top 10 \u66f4\u52a0\u6210\u719f\u7684\u91cd\u8981\u6539\u8b8a\u3002","title":"\u5206\u6790\u65b9\u6cd5"},{"location":"zh_TW/A00_2021_Introduction/#_2","text":"\u6709\u5225\u65bc\u4e0a\u4e00\u500b\u7248\u672c\uff0c\u5728\u9019\u6b21\u7684 OWASP Top 10 \u6709\u4e00\u4e9b\u98a8\u96aa\u985e\u5225\u7684\u4fee\u6539\u3002\u6211\u5011\u5728\u6b64\u4ee5\u6bd4\u8f03\u9ad8\u7684\u89d2\u5ea6\u8aaa\u660e\u4e00\u4e0b\u9019\u6b21\u7684\u985e\u5225\u4fee\u6539\u3002 \u5728\u4e0a\u4e00\u6b21\u7684\u8cc7\u6599\u6536\u96c6\u7576\u4e2d\uff0c\u6211\u5011\u5c07\u8cc7\u6599\u6536\u96c6\u7684\u91cd\u5fc3\u653e\u5728\u9810\u5148\u5b9a\u7fa9\u597d\u7684\u7d04 30 \u500b CWEs \u4e26\u7d0d\u5165\u4e00\u500b\u6b04\u4f4d\u5fb5\u6c42\u5176\u4ed6\u7684\u767c\u73fe\u3002\u5f9e\u9019\u88e1\u6211\u5011\u770b\u5230\u6c7a\u591a\u6578\u7684\u7d44\u7e54\u90fd\u53ea\u6703\u5c08\u6ce8\u5728\u9019 30 \u500b CWEs \u800c\u4e0d\u5e38\u52a0\u5165\u5176\u4ed6\u4ed6\u5011\u53ef\u80fd\u767c\u73fe\u7684 CWEs\u3002\u5728\u9019\u6b21\u7684\u6539\u7248\u4e2d\uff0c\u6211\u5011\u5c07\u6240\u6709\u7684\u554f\u984c\u90fd\u4ee5\u958b\u653e\u5f0f\u7684\u65b9\u6cd5\u8655\u7406\uff0c\u4e26\u6c92\u6709\u9650\u5236\u5728\u4efb\u4f55\u4e00\u500b CWEs\u3002\u6211\u5011\u8acb\u6559\u4e86\u5f9e 2017 \u5e74\u958b\u59cb\u6240\u6e2c\u8a66\u7684\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\uff0c\u7136\u5f8c\u5728\u9019\u4e9b\u7a0b\u5f0f\u4e2d\u81f3\u5c11\u6709\u4e00\u500b CWE \u88ab\u767c\u73fe\u7684\u6578\u91cf\u3002\u9019\u500b\u683c\u5f0f\u8b93\u6211\u5011\u80fd\u5920\u8ffd\u8e64\u6bcf\u500b CWE \u8ddf\u6240\u6709\u88ab\u9a57\u6e2c\u53ca\u7d71\u8a08\u7684\u61c9\u7528\u7a0b\u5f0f\u7684\u6578\u91cf\u8ddf\u95dc\u4fc2\u3002\u6211\u5011\u4e5f\u5ffd\u7565\u4e86 CWE \u51fa\u73fe\u7684\u983b\u7387\uff0c\u96d6\u7136\u5728\u67d0\u4e9b\u72c0\u6cc1\u4e0b\u9019\u4e5f\u8a31\u662f\u5fc5\u9808\u7684\uff0c\u4f46\u9019\u537b\u96b1\u85cf\u4e86\u98a8\u96aa\u985e\u5225\u672c\u8eab\u8207\u61c9\u7528\u7a0b\u5f0f\u6578\u91cf\u6574\u9ad4\u7684\u95dc\u4fc2\u3002\u6240\u4ee5\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u6709 4 \u500b\u6216\u662f 4,000 \u500b\u5f31\u9ede\u4e26\u4e0d\u662f\u88ab\u8a08\u7b97\u5728 Top 10 \u7684\u57fa\u790e\u3002\u4f46\u540c\u6642\u6211\u5011\u4e5f\u5f9e\u539f\u672c\u7684 30 \u591a\u500b CWEs \u589e\u9577\u5230\u5feb 400 \u591a\u500bCWEs \u53bb\u9032\u884c\u5206\u6790\u3002\u6211\u5011\u56e0\u6b64\u4e5f\u8a08\u756b\u672a\u4f86\u505a\u66f4\u591a\u7684\u8cc7\u6599\u5206\u6790\uff0c\u4e26\u5728\u5c0d\u6b64\u7248\u672c\u9032\u884c\u88dc\u5145\u8aaa\u660e\u3002\u800c\u9019\u4e9b\u589e\u52a0\u7684 CWEs \u4e5f\u540c\u6642\u5f71\u97ff\u4e86\u9019\u6b21\u98a8\u96aa\u985e\u5225\u7684\u898f\u5283\u3002 \u6211\u5011\u82b1\u4e86\u597d\u5e7e\u500b\u6708\u5c07 CWEs \u9032\u884c\u5206\u7d44\u8ddf\u5206\u985e\uff0c\u800c\u4e14\u5176\u5be6\u53ef\u4ee5\u4e00\u76f4\u82b1\u66f4\u591a\u500b\u6708\u53bb\u505a\u9019\u4ef6\u4e8b\u60c5\u3002\u4f46\u6211\u5011\u5fc5\u9808\u5728\u67d0\u4e00\u500b\u6642\u9593\u9ede\u505c\u4f4f\u3002\u5728 CWEs \u7576\u4e2d\uff0c\u540c\u6642\u6709 \u539f\u56e0 \u4ee5\u53ca \u75c7\u72c0 \u7684\u554f\u984c\uff0c\u800c\u50cf\u662f \"\u52a0\u5bc6\u6a5f\u5236\u5931\u6548\" \u548c \"\u8a2d\u5b9a\u554f\u984c\" \u9019\u985e\u578b\u7684 \u539f\u56e0 \u8207 \"\u6a5f\u654f\u8cc7\u6599\u5916\u6d29\" \u548c \"\u963b\u65b7\u670d\u52d9\" \u9019\u985e\u578b\u7684 \u75c7\u72c0 \u662f\u5c0d\u7acb\u7684\u3002\u56e0\u6b64\u6211\u5011\u6c7a\u5b9a\u5728\u53ef\u4ee5\u7684\u6642\u5019\u8981\u66f4\u5c08\u6ce8\u65bc\u5e95\u5c64\u7684\u539f\u56e0\uff0c\u56e0\u70ba\u9019\u662f\u53ef\u4ee5\u6709\u6548\u6307\u51fa\u554f\u984c\u7684\u672c\u9ad4\u8ddf\u540c\u6642\u63d0\u4f9b\u554f\u984c\u7684\u89e3\u6c7a\u65b9\u5411\u3002\u5c08\u6ce8\u5728\u554f\u984c\u6838\u5fc3\u800c\u4e0d\u5c07\u91cd\u5fc3\u653e\u5728\u75c7\u72c0\u4e26\u4e0d\u662f\u4e00\u500b\u65b0\u7684\u6982\u5ff5\b\b\uff0cTop Ten \u6709\u53f2\u4ee5\u4f86\u4e00\u76f4\u662f\u75c7\u72c0\u8ddf\u554f\u984c\u6838\u5fc3\u7684\u7d9c\u5408\u9ad4\uff0c\u53ea\u662f\u9019\u6b21\u6211\u5011\u66f4\u523b\u610f\u7684\u5c07\u4ed6\u7a81\u986f\u51fa\u4f86\u3002\u5728\u9019\u6b21\u7684\u65b0\u7248\u672c\u4e2d\uff0c\u6bcf\u4e00\u500b\u985e\u5225\u5167\u7684\u5e73\u5747\u6709 19.6 \u500b CWE\uff0c\u800c\u6700\u4f4e\u7684 A10:2021-\u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020 \u6709\u4e00\u500b CWE \u5230 A04:2021-\u4e0d\u5b89\u5168\u8a2d\u8a08 \u6709\u56db\u5341\u500b CWE\u3002\u9019\u500b\u65b0\u7684\u985e\u5225\u67b6\u69cb\u80fd\u63d0\u4f9b\u4f01\u696d\u66f4\u591a\u7684\u8cc7\u5b89\u8a13\u7df4\u7684\u597d\u8655\uff0c\u56e0\u70ba\u5728\u65b0\u7684\u67b6\u69cb\u4e0b\u53ef\u4ee5\u66f4\u5c08\u6ce8\u5728\u67d0\u500b\u8a9e\u7cfb\u6216\u5e73\u53f0\u4e0a\u7684 CWE\u3002","title":"\u5982\u4f55\u5efa\u69cb\u98a8\u96aa\u985e\u5225"},{"location":"zh_TW/A00_2021_Introduction/#_3","text":"\u5728 2017 \u5e74\uff0c\u6211\u5011\u7528\u4e8b\u4ef6\u767c\u751f\u6b21\u6578\u53bb\u5224\u65b7\u53ef\u80fd\u767c\u751f\u7684\u6a5f\u7387\u53bb\u9078\u64c7\u985e\u5225\uff0c\u7136\u5f8c\u900f\u904e\u4e00\u7fa4\u5728\u696d\u754c\u64c1\u6709\u6578\u5341\u5e74\u7d93\u9a57\u7684\u5c08\u5bb6\u5718\u5c0d\u8a0e\u8ad6\u4e26\u4f9d\u7167 \u53ef\u767c\u751f\u6027 \uff0c \u53ef\u767c\u73fe\u6027\uff08\u540c\u53ef\u80fd\u6027\uff09 \uff0c\u548c \u6280\u8853\u5f71\u97ff\u529b \u53bb\u505a\u6392\u540d\u3002\u5728 2021 \u5e74\uff0c\u6211\u5011\u5e0c\u671b\u5982\u679c\u53ef\u4ee5\u7684\u8a71\u7528\u8cc7\u6599\u8b49\u660e\u53ef\u767c\u751f\u6027\u548c\u6280\u8853\u5f71\u97ff\u6027\u3002 \u6211\u5011\u4e0b\u8f09\u4e86 OWASP Depndency Check \u4e26\u53d6\u51fa\u4e86 CVSS \u6f0f\u6d1e\uff0c\u4e26\u5c07\u76f8\u95dc\u7684 CWE \u7528\u5f71\u97ff\u529b\u5206\u6578\u5206\u7fa4\u3002\u9019\u82b1\u4e86\u4e00\u4e9b\u6642\u9593\u548c\u529b\u6c23\u53bb\u7814\u7a76\u56e0\u70ba\u6240\u6709\u7684 CVEs \u90fd\u6709 CVSSv2 \u5206\u6578\uff0c\u4f46\u662f\u5728\u5176\u4e2d\u56e0\u70ba CVSSv2 \u8ddf CVSSv3 \u4e4b\u9593\u6709\u4e00\u4e9b\u7f3a\u5931\u662f\u5fc5\u9808\u88ab\u4fee\u6b63\u7684\u3002\u7d93\u904e\u4e86\u4e00\u6bb5\u6642\u9593\u5f8c\uff0c\u6240\u6709\u7684 CVEs \u90fd\u6703\u6709\u5c0d\u61c9\u7684 CVSSv3 \u7684\u5206\u6578\u3002\u518d\u8005\uff0c\u5206\u6578\u7684\u7bc4\u570d\u548c\u8a08\u7b97\u7684\u516c\u5f0f\u5728 CVSSv2 \u548c CVSSv3 \u4e4b\u9593\u4e5f\u505a\u4e86\u66f4\u65b0\u3002 \u5728 CVSSv2 \u4e2d\uff0c\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5169\u8005\u90fd\u53ef\u9054\u5230 10.0 \u5206\uff0c\u4f46\u662f\u516c\u5f0f\u672c\u8eab\u6703\u5c07\u5169\u8005\u8abf\u6574\u70ba\u6f0f\u6d1e\u4f54 60%\uff0c\u7136\u5f8c\u5f71\u97ff\u529b\u4f54 40%\u3002\u5728 CVSSv3 \u4e2d\uff0c\u7406\u8ad6\u4e0a\u7684\u6700\u9ad8\u503c\u5c07\u6f0f\u6d1e\u9650\u5236\u5728 6.0 \u5206\u800c\u5f71\u97ff\u529b\u5728 4.0 \u5206\u3002\u7576\u8003\u616e\u5230\u6b0a\u91cd\u6bd4\u7387\u6642\uff0c\u5f71\u97ff\u529b\u7684\u5206\u6578\u6703\u504f\u9ad8\uff0c\u5728 CVSSv3 \u4e2d\u5e7e\u4e4e\u5e73\u5747\u6703\u591a\u51fa 1.5 \u5206\uff0c\u800c\u6f0f\u6d1e\u5206\u6578\u537b\u6703\u5e73\u5747\u5c11 0.5 \u5206\u3002 \u5f9e OWASP Dependcy Check \u8403\u53d6\u51fa\u7684 NVD \u8cc7\u6599\u7576\u4e2d\u6709\u5c07\u8fd1 12.5 \u842c\u7b46 CVE \u8cc7\u6599\u6709\u5c0d\u61c9\u5230 CWE\uff0c\u800c\u6709 241 \u7b46\u7368\u7279\u7684 CWEs \u6709\u5c0d\u61c9\u5230 CVE\u30026.2\u842c\u7b46 CWE \u6709\u5c0d\u61c9\u5230 CVSSv3 \u5206\u6578\uff0c\u6240\u4ee5\u5927\u7d04\u662f\u6574\u9ad4\u8cc7\u6599\u4e2d\u4e00\u534a\u7684\u90e8\u5206\u3002 \u800c\u5728 Top Ten\uff0c\u6211\u5011\u8a08\u7b97\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u7684\u5e73\u5747\u5206\u6578\u7684\u65b9\u5f0f\u5982\u4e0b\u3002\u6211\u5011\u5c07\u6240\u6709\u6709 CVSS \u5206\u6578\u7684 CVE \u4f9d\u7167 CWE \u5206\u7d44\uff0c\u7136\u5f8c\u4f9d\u7167\u6709 CVSSv3 \u7684\u6f0f\u6d1e\u548c\u5f71\u97ff\u529b\u5728\u6240\u6709\u8cc7\u6599\u4e2d\u7684\u767e\u5206\u6bd4\u4f5c\u6b0a\u91cd\uff0c\u5728\u52a0\u4e0a\u8cc7\u6599\u4e2d\u6709 CVSSv2 \u7684\u8cc7\u6599\u53bb\u505a\u5e73\u5747\u3002\u6211\u5011\u5c07\u9019\u4e9b\u5e73\u5747\u5f8c\u7684 CWEs \u5c0d\u61c9\u5230\u8cc7\u6599\u4e2d\uff0c\u7136\u5f8c\u5c07\u4ed6\u7684\u6f0f\u6d1e\u548c\u5f15\u60f3\u529b\u5206\u6578\u4f7f\u7528\u5728\u53e6\u4e00\u534a\u7684\u98a8\u96aa\u516c\u5f0f\u4e2d\u3002","title":"\u9078\u64c7\u985e\u5225\u6642\u8cc7\u6599\u7684\u4f7f\u7528\u65b9\u5f0f"},{"location":"zh_TW/A00_2021_Introduction/#_4","text":"\u9019\u4e9b\u8cc7\u6599\u7684\u7d50\u679c\u6700\u4e3b\u8981\u662f\u88ab\u9650\u5236\u5728\u80fd\u4f7f\u7528\u81ea\u52d5\u5de5\u5177\u6e2c\u8a66\u51fa\u4f86\u7684\u7d50\u679c\u3002\u53ef\u662f\u7576\u4f60\u8ddf\u4e00\u4f4d\u6709\u7d93\u9a57\u7684\u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u5c08\u5bb6\u804a\u7684\u6642\u5019\uff0c\u4ed6\u5011\u6703\u8ddf\u4f60\u8aaa\u7d55\u5927\u591a\u6578\u4ed6\u5011\u627e\u5230\u7684\u554f\u984c\u90fd\u4e0d\u5728\u9019\u4e9b\u8cc7\u6599\u88e1\u9762\u3002\u539f\u56e0\u662f\u4e00\u500b\u6e2c\u8a66\u8981\u88ab\u81ea\u52d5\u5316\u7684\u6642\u5019\uff0c\u9700\u8981\u82b1\u6642\u9593\u53bb\u958b\u767c\u9019\u4e9b\u5f31\u9ede\u6e2c\u8a66\u7684\u65b9\u6cd5\u8ad6\uff0c\u7576\u4f60\u9700\u8981\u5c07\u9019\u500b\u6e2c\u8a66\u81ea\u52d5\u5316\u4e26\u80fd\u5c0d\u5927\u91cf\u7684\u61c9\u7528\u7a0b\u5f0f\u53bb\u9a57\u8b49\u6642\uff0c\u53c8\u6703\u82b1\u4e0a\u66f4\u591a\u7684\u6642\u9593\u3002\u7576\u6211\u5011\u56de\u982d\u770b\u53bb\u5e74\u7372\u4ee5\u524d\u6709\u53ef\u80fd\u6c92\u51fa\u73fe\u7684\u4e00\u4e9b\u554f\u984c\u7684\u8da8\u52e2\uff0c\u6211\u5011\u767c\u73fe\u5176\u5be6\u90fd\u6c92\u6709\u5728\u9019\u4e9b\u8cc7\u6599\u7576\u4e2d\u3002 \u56e0\u6b64\uff0c\u7531\u65bc\u8cc7\u6599\u4e0d\u5b8c\u5168\u7684\u95dc\u4fc2\uff0c\u6211\u5011\u53ea\u6709\u5f9e\u8cc7\u6599\u4e2d\u9078\u51fa 8 \u500b\u985e\u5225\uff0c\u800c\u4e26\u4e0d\u662f 10 \u500b\u3002\u5269\u4e0b\u7684\u5169\u500b\u985e\u5225\u662f\u5f9e\u696d\u754c\u554f\u5377\u4e2d\u6240\u9078\u51fa\u7684\u3002\u9019\u6703\u5141\u8a31\u5728\u524d\u7dda\u7684\u53c3\u8207\u8005\u53bb\u9078\u51fa\u4ed6\u5011\u8a8d\u70ba\u7684\u9ad8\u98a8\u96aa\uff0c\u800c\u4e0d\u662f\u7d14\u7cb9\u4f9d\u64da\u8cc7\u6599\u53bb\u5224\u65b7\uff08\u751a\u81f3\u53ef\u80fd\u8cc7\u6599\u6c38\u9060\u90fd\u4e0d\u6703\u6709\u51fa\u73fe\u7684\u8e64\u8de1\uff09\u3002","title":"\u70ba\u4ec0\u9ebc\u5c31\u4e0d\u7d14\u7cb9\u505a\u7d71\u8a08\u5206\u6790\uff1f"},{"location":"zh_TW/A00_2021_Introduction/#why-incidence-rate-instead-of-frequency","text":"There are three primary sources of data. We identify them as Human-assisted Tooling (HaT), Tool-assisted Human (TaH), and raw Tooling. Tooling and HaT are high-frequency finding generators. Tools will look for specific vulnerabilities and tirelessly attempt to find every instance of that vulnerability and will generate high finding counts for some vulnerability types. Look at Cross-Site Scripting, which is typically one of two flavors: it's either a more minor, isolated mistake or a systemic issue. When it's a systemic issue, the finding counts can be in the thousands for an application. This high frequency drowns out most other vulnerabilities found in reports or data. TaH, on the other hand, will find a broader range of vulnerability types but at a much lower frequency due to time constraints. When humans test an application and see something like Cross-Site Scripting, they will typically find three or four instances and stop. They can determine a systemic finding and write it up with a recommendation to fix on an application-wide scale. There is no need (or time) to find every instance. Suppose we take these two distinct data sets and try to merge them on frequency. In that case, the Tooling and HaT data will drown the more accurate (but broad) TaH data and is a good part of why something like Cross-Site Scripting has been so highly ranked in many lists when the impact is generally low to moderate. It's because of the sheer volume of findings. (Cross-Site Scripting is also reasonably easy to test for, so there are many more tests for it as well). In 2017, we introduced using incidence rate instead to take a fresh look at the data and cleanly merge Tooling and HaT data with TaH data. The incidence rate asks what percentage of the application population had at least one instance of a vulnerability type. We don't care if it was one-off or systemic. That's irrelevant for our purposes; we just need to know how many applications had at least one instance, which helps provide a clearer view of the testing is findings across multiple testing types without drowning the data in high-frequency results.","title":"Why incidence rate instead of frequency?"},{"location":"zh_TW/A00_2021_Introduction/#what-is-your-data-collection-and-analysis-process","text":"We formalized the OWASP Top 10 data collection process at the Open Security Summit in 2017. OWASP Top 10 leaders and the community spent two days working out formalizing a transparent data collection process. The 2021 edition is the second time we have used this methodology. We publish a call for data through social media channels available to us, both project and OWASP. On the OWASP Project page, we list the data elements and structure we are looking for and how to submit them. In the GitHub project, we have example files that serve as templates. We work with organizations as needed to help figure out the structure and mapping to CWEs. We get data from organizations that are testing vendors by trade, bug bounty vendors, and organizations that contribute internal testing data. Once we have the data, we load it together and run a fundamental analysis of what CWEs map to risk categories. There is overlap between some CWEs, and others are very closely related (ex. Cryptographic vulnerabilities). Any decisions related to the raw data submitted are documented and published to be open and transparent with how we normalized the data. We look at the eight categories with the highest incidence rates for inclusion in the Top 10. We also look at the industry survey results to see which ones may already be present in the data. The top two votes that aren't already present in the data will be selected for the other two places in the Top 10. Once all ten were selected, we applied generalized factors for exploitability and impact; to help rank the Top 10 in order.","title":"What is your data collection and analysis process?"},{"location":"zh_TW/A00_2021_Introduction/#data-factors","text":"There are data factors that are listed for each of the Top 10 Categories, here is what they mean: CWEs Mapped: The number of CWEs mapped to a category by the Top 10 team. Incidence Rate: Incidence rate is the percentage of applications vulnerable to that CWE from the population tested by that org for that year. (Testing) Coverage: The percentage of applications tested by all organizations for a given CWE. Weighted Exploit: The Exploit sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Weighted Impact: The Impact sub-score from CVSSv2 and CVSSv3 scores assigned to CVEs mapped to CWEs, normalized, and placed on a 10pt scale. Total Occurrences: Total number of applications found to have the CWEs mapped to a category. Total CVEs: Total number of CVEs in the NVD DB that were mapped to the CWEs mapped to a category.","title":"Data Factors"},{"location":"zh_TW/A00_2021_Introduction/#category-relationships-from-2017","text":"There has been a lot of talk about the overlap between the Top Ten risks. By the definition of each (list of CWEs included), there really isn't any overlap. However, conceptually, there can be overlap or interactions based on the higher-level naming. Venn diagrams are many times used to show overlap like this. The Venn diagram above represents the interactions between the Top Ten 2017 risk categories. While doing so, a couple of essential points became obvious: One could argue that Cross-Site Scripting ultimately belongs within Injection as it's essentially Content Injection. Looking at the 2021 data, it became even more evident that XSS needed to move into Injection. The overlap is only in one direction. We will often classify a vulnerability by the end manifestation or \"symptom,\" not the (potentially deep) root cause. For instance, \"Sensitive Data Exposure\" may have been the result of a \"Security Misconfiguration\"; however, you won't see it in the other direction. As a result, arrows are drawn in the interaction zones to indicate which direction it occurs. Sometimes these diagrams are drawn with everything in A06:2021 Using Components with Known Vulnerabilities. While some of these risk categories may be the root cause of third-party vulnerabilities, they are generally managed differently and with different responsibilities. The other types are typically representing first-party risks.","title":"Category Relationships from 2017"},{"location":"zh_TW/A00_2021_Introduction/#thank-you-to-our-data-contributors","text":"The following organizations (along with some anonymous donors) kindly donated data for over 500,000 applications to make this the largest and most comprehensive application security data set. Without you, this would not be possible. AppSec Labs Cobalt.io Contrast Security GitLab HackerOne HCL Technologies Micro Focus PenTest-Tools Probely Sqreen Veracode WhiteHat (NTT)","title":"Thank you to our data contributors"},{"location":"zh_TW/A00_2021_Introduction/#thank-you-to-our-financial-supporters","text":"","title":"Thank you to our financial supporters"},{"location":"zh_TW/A01_2021-Broken_Access_Control/","text":"A01:2021 \u2013 \u6b0a\u9650\u63a7\u5236\u5931\u6548 \u2693\ufe0e \u5c0d\u7167\u56e0\u7d20 \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013 \u6982\u8ff0 \u2693\ufe0e \u5f9e\u7b2c\u4e94\u540d\u664b\u5347\u81f3\u7b2c\u4e00\u540d\uff0c94% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\uff0c\u90fd\u6709\u88ab\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6b0a\u9650\u63a7\u5236\u5931\u6548\u7684\u554f\u984c\u3002\u8457\u540d\u7684CWE\u5305\u62ec CWE-200\uff1aExposure of Sensitive Information to an Unauthorized Actor \uff0c CWE-201\uff1aExposure of Sensitive Information Through Sent Data \u548c *CWE-352 Cross-Site Request Forgery\u3002 \u63cf\u8ff0 \u2693\ufe0e \u5b58\u53d6\u63a7\u5236\u5f37\u5316\u653f\u7b56\uff0c\u4f7f\u7528\u6236\u4e0d\u80fd\u63a1\u53d6\u5728\u9810\u671f\u6b0a\u9650\u4e4b\u5916\u7684\u884c\u52d5\u3002\u63a7\u5236\u5931\u6548\u901a\u5e38\u6703\u5c0e\u81f4\u672a\u7d93\u6388\u6b0a\u7684\u8cc7\u8a0a\u6d29\u9732\u3001\u4fee\u6539\u6216\u640d\u58de\u6240\u6709\u8cc7\u6599\uff0c\u6216\u57f7\u884c\u8d85\u51fa\u7528\u6236\u6b0a\u9650\u7684\u696d\u52d9\u529f\u80fd\u3002\u5e38\u898b\u7684\u5b58\u53d6\u63a7\u5236\u5f31\u9ede\u5305\u62ec\uff1a \u901a\u904e\u4fee\u6539URL\u3001\u5167\u90e8\u61c9\u7528\u7a0b\u5f0f\u72c0\u614b\u6216HTML\u9801\u9762\uff0c\u6216\u50c5\u4f7f\u7528\u81ea\u5b9a\u7fa9API\u653b\u64ca\u5de5\u5177\u4f86\u7e5e\u904e\u5b58\u53d6\u63a7\u5236\u6aa2\u67e5\u3002 \u5bb9\u8a31\u4e3b\u9375\u88ab\u66f4\u6539\u70ba\u5176\u4ed6\u7528\u6236\u7684\u8a18\u9304\uff0c\u5141\u8a31\u67e5\u770b\u6216\u7de8\u8f2f\u5176\u4ed6\u4eba\u7684\u5e33\u6236\u3002 \u7279\u6b0a\u63d0\u5347\u3002\u672a\u767b\u5165\u5373\u6210\u70ba\u7528\u6236\uff0c\u6216\u4ee5\u7528\u6236\u8eab\u4efd\u767b\u5165\u5373\u6210\u70ba\u7ba1\u7406\u54e1\u3002 \u4e2d\u7e7c\u8cc7\u6599\u64cd\u4f5c\uff0c\u4f8b\u5982\u91cd\u653e\u6216\u7be1\u6539JSON\u7db2\u7ad9\u4ee4\u724c(JWT)\u4e4b\u5b58\u53d6\u63a7\u5236\u4ee4\u724c\uff0c\u6216\u88ab\u64cd\u7e31\u4ee5\u63d0\u5347\u7279\u6b0a\u6216\u6feb\u7528JWT\u5931\u6548\u7684cookie\u6216\u96b1\u85cf\u6b04\u4f4d\u3002 CORS\u932f\u8aa4\u914d\u7f6e\u5141\u8a31\u672a\u7d93\u6388\u6b0a\u7684API\u5b58\u53d6\u3002 \u4ee5\u672a\u7d93\u8eab\u4efd\u9a57\u8b49\u7684\u7528\u6236\u8eab\u4efd\u5f37\u5236\u700f\u89bd\u5df2\u9a57\u8b49\u7684\u9801\u9762\u6216\u4ee5\u6a19\u6e96\u7528\u6236\u8eab\u4efd\u5b58\u53d6\u7279\u6b0a\u9801\u9762\u3002\u5b58\u53d6\u7f3a\u5c11\u5b58\u53d6\u63a7\u5236\u7684API\u4ee5\u9032\u884cPOST\u3001PUT \u548c DELETE\u64cd\u4f5c\u3002 \u5982\u4f55\u9810\u9632 \u2693\ufe0e \u5b58\u53d6\u63a7\u5236\u50c5\u5728\u53d7\u4fe1\u4efb\u7684\u4f3a\u670d\u5668\u7aef\u4ee3\u78bc\u6216\u7121\u4f3a\u670d\u5668\u7684API\u6709\u6548\uff0c\u653b\u64ca\u8005\u7121\u6cd5\u4fee\u6539\u9019\u88cf\u7684\u5b58\u53d6\u63a7\u5236\u6aa2\u67e5\u6216\u4e2d\u7e7c\u8cc7\u6599\u3002 \u9664\u516c\u958b\u7684\u8cc7\u6e90\u5916\uff0c\u9ed8\u8a8d\u70ba\u62d2\u7d55\u5b58\u53d6\u3002 \u4e00\u6b21\u6027\u5730\u5efa\u7f6e\u5b58\u53d6\u63a7\u5236\u6a5f\u5236\uff0c\u4e4b\u5f8c\u5728\u6574\u500b\u61c9\u7528\u7a0b\u5f0f\u4e2d\u91cd\u8907\u4f7f\u7528\u5b83\u5011\uff0c\u5305\u62ec\u6700\u5927\u9650\u5ea6\u5730\u6e1b\u5c11\u4f7f\u7528CORS\u3002 \u6a21\u578b\u7684\u5b58\u53d6\u63a7\u5236\u63aa\u65bd\u61c9\u8a72\u5f37\u5316\u8a18\u9304\u6240\u6709\u6b0a\uff0c\u800c\u4e0d\u662f\u8b93\u7528\u6236\u53ef\u4ee5\u5275\u5efa\u3001\u8b80\u53d6\u3001\u66f4\u65b0\u6216\u522a\u9664\u4efb\u4f55\u8a18\u9304\u3002 \u7368\u7279\u7684\u61c9\u7528\u7a0b\u5f0f\u696d\u52d9\u9650\u5236\u8981\u6c42\u61c9\u7531\u9818\u57df\u6a21\u578b\u4e88\u4ee5\u5f37\u5316\u3002 \u505c\u7528Web\u4f3a\u670d\u5668\u76ee\u9304\u5217\u8868\uff0c\u4e26\u78ba\u4fdd\u6a94\u6848\u4e2d\u7e7c\u8cc7\u6599\uff08\u4f8b\u5982\uff0c.git)\u548c\u5099\u4efd\u6a94\u6848\u4e0d\u5728web\u6839\u76ee\u9304\u4e2d\u3002 \u8a18\u9304\u5b58\u53d6\u63a7\u5236\u5931\u6548\uff0c\u4e26\u5728\u9069\u7576\u7684\u6642\u9593\u8b66\u793a\u7ba1\u7406\u54e1\uff08\u4f8b\u5982\uff0c\u91cd\u8986\u6027\u5931\u6548\uff09\u3002 \u5c0dAPI\u548c\u63a7\u5236\u5668\u5b58\u53d6\u9032\u884c\u6d41\u91cf\u9650\u5236\uff0c\u4ee5\u6700\u5c0f\u5316\u81ea\u52d5\u653b\u64ca\u5de5\u5177\u6240\u5e36\u4f86\u7684\u640d\u5bb3\u3002 JWT\u4ee4\u724c\u65bc\u767b\u51fa\u5f8c\uff0c\u5728\u4f3a\u670d\u5668\u7aef\u61c9\u4f7f\u5176\u5931\u6548\u3002 \u958b\u767c\u4eba\u54e1\u548cQA\u54c1\u4fdd\u4eba\u54e1\u61c9\u7d0d\u5165\u8207\u529f\u80fd\u6709\u95dc\u4e4b\u5b58\u53d6\u63a7\u5236\u7684\u55ae\u5143\u548c\u6574\u5408\u6e2c\u8a66\u3002 \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b \u2693\ufe0e \u60c5\u5883 #1\uff1a \u61c9\u7528\u7a0b\u5f0f\u5728\u5b58\u53d6\u5e33\u6236\u8cc7\u8a0a\u7684SQL\u547c\u53eb\u4e2d\u4f7f\u7528\u672a\u7d93\u9a57\u8b49\u7684\u8cc7\u6599\uff1a pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); \u653b\u64ca\u8005\u53ea\u9700\u4fee\u6539\u700f\u89bd\u5668\u7684\u201cacct\u201d\u53c3\u6578\u5373\u53ef\u767c\u9001\u4ed6\u5011\u60f3\u8981\u7684\u4efb\u4f55\u5e33\u865f\u3002\u5982\u679c\u6c92\u6709\u6b63\u78ba\u9a57\u8b49\uff0c\u653b\u64ca\u8005\u53ef\u4ee5\u5b58\u53d6\u4efb\u4f55\u7528\u6236\u7684\u5e33\u6236\u3002 https://example.com/app/accountInfo?acct=notmyacct \u60c5\u5883#2\uff1a \u653b\u64ca\u8005\u50c5\u5f37\u8feb\u700f\u89bd\u67d0\u4e9b\u76ee\u6a19\u7db2\u5740\u3002\u5b58\u53d6\u7ba1\u7406\u9801\u9762\u9700\u8981\u7ba1\u7406\u54e1\u6b0a\u9650\u3002 https://example.com/app/getappInfo https://example.com/app/admin_getappInfo \u5982\u679c\u672a\u7d93\u8eab\u4efd\u9a57\u8b49\u7684\u7528\u6236\u53ef\u4ee5\u5b58\u53d6\u4efb\u4e00\u9801\u9762\uff0c\u90a3\u5c31\u662f\u4e00\u500b\u7f3a\u9677\u3002 \u5982\u679c\u4e00\u500b\u975e\u7ba1\u7406\u54e1\u53ef\u4ee5\u5b58\u53d6\u7ba1\u7406\u9801\u9762\uff0c\u9019\u4e5f\u662f\u4e00\u500b\u7f3a\u9677\u3002 \u53c3\u8003 \u2693\ufe0e OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access \u5c0d\u61c9\u7684CWE\u5217\u8868 \u2693\ufe0e CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"A01 \u6b0a\u9650\u63a7\u5236\u5931\u6548"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#a012021","text":"","title":"A01:2021 \u2013 \u6b0a\u9650\u63a7\u5236\u5931\u6548"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#_1","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 34 55.97% 3.81% 94.55% 47.72% 6.92 5.93 318,487 19,013","title":"\u5c0d\u7167\u56e0\u7d20"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#_2","text":"\u5f9e\u7b2c\u4e94\u540d\u664b\u5347\u81f3\u7b2c\u4e00\u540d\uff0c94% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\uff0c\u90fd\u6709\u88ab\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u5225\u6b0a\u9650\u63a7\u5236\u5931\u6548\u7684\u554f\u984c\u3002\u8457\u540d\u7684CWE\u5305\u62ec CWE-200\uff1aExposure of Sensitive Information to an Unauthorized Actor \uff0c CWE-201\uff1aExposure of Sensitive Information Through Sent Data \u548c *CWE-352 Cross-Site Request Forgery\u3002","title":"\u6982\u8ff0"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#_3","text":"\u5b58\u53d6\u63a7\u5236\u5f37\u5316\u653f\u7b56\uff0c\u4f7f\u7528\u6236\u4e0d\u80fd\u63a1\u53d6\u5728\u9810\u671f\u6b0a\u9650\u4e4b\u5916\u7684\u884c\u52d5\u3002\u63a7\u5236\u5931\u6548\u901a\u5e38\u6703\u5c0e\u81f4\u672a\u7d93\u6388\u6b0a\u7684\u8cc7\u8a0a\u6d29\u9732\u3001\u4fee\u6539\u6216\u640d\u58de\u6240\u6709\u8cc7\u6599\uff0c\u6216\u57f7\u884c\u8d85\u51fa\u7528\u6236\u6b0a\u9650\u7684\u696d\u52d9\u529f\u80fd\u3002\u5e38\u898b\u7684\u5b58\u53d6\u63a7\u5236\u5f31\u9ede\u5305\u62ec\uff1a \u901a\u904e\u4fee\u6539URL\u3001\u5167\u90e8\u61c9\u7528\u7a0b\u5f0f\u72c0\u614b\u6216HTML\u9801\u9762\uff0c\u6216\u50c5\u4f7f\u7528\u81ea\u5b9a\u7fa9API\u653b\u64ca\u5de5\u5177\u4f86\u7e5e\u904e\u5b58\u53d6\u63a7\u5236\u6aa2\u67e5\u3002 \u5bb9\u8a31\u4e3b\u9375\u88ab\u66f4\u6539\u70ba\u5176\u4ed6\u7528\u6236\u7684\u8a18\u9304\uff0c\u5141\u8a31\u67e5\u770b\u6216\u7de8\u8f2f\u5176\u4ed6\u4eba\u7684\u5e33\u6236\u3002 \u7279\u6b0a\u63d0\u5347\u3002\u672a\u767b\u5165\u5373\u6210\u70ba\u7528\u6236\uff0c\u6216\u4ee5\u7528\u6236\u8eab\u4efd\u767b\u5165\u5373\u6210\u70ba\u7ba1\u7406\u54e1\u3002 \u4e2d\u7e7c\u8cc7\u6599\u64cd\u4f5c\uff0c\u4f8b\u5982\u91cd\u653e\u6216\u7be1\u6539JSON\u7db2\u7ad9\u4ee4\u724c(JWT)\u4e4b\u5b58\u53d6\u63a7\u5236\u4ee4\u724c\uff0c\u6216\u88ab\u64cd\u7e31\u4ee5\u63d0\u5347\u7279\u6b0a\u6216\u6feb\u7528JWT\u5931\u6548\u7684cookie\u6216\u96b1\u85cf\u6b04\u4f4d\u3002 CORS\u932f\u8aa4\u914d\u7f6e\u5141\u8a31\u672a\u7d93\u6388\u6b0a\u7684API\u5b58\u53d6\u3002 \u4ee5\u672a\u7d93\u8eab\u4efd\u9a57\u8b49\u7684\u7528\u6236\u8eab\u4efd\u5f37\u5236\u700f\u89bd\u5df2\u9a57\u8b49\u7684\u9801\u9762\u6216\u4ee5\u6a19\u6e96\u7528\u6236\u8eab\u4efd\u5b58\u53d6\u7279\u6b0a\u9801\u9762\u3002\u5b58\u53d6\u7f3a\u5c11\u5b58\u53d6\u63a7\u5236\u7684API\u4ee5\u9032\u884cPOST\u3001PUT \u548c DELETE\u64cd\u4f5c\u3002","title":"\u63cf\u8ff0"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#_4","text":"\u5b58\u53d6\u63a7\u5236\u50c5\u5728\u53d7\u4fe1\u4efb\u7684\u4f3a\u670d\u5668\u7aef\u4ee3\u78bc\u6216\u7121\u4f3a\u670d\u5668\u7684API\u6709\u6548\uff0c\u653b\u64ca\u8005\u7121\u6cd5\u4fee\u6539\u9019\u88cf\u7684\u5b58\u53d6\u63a7\u5236\u6aa2\u67e5\u6216\u4e2d\u7e7c\u8cc7\u6599\u3002 \u9664\u516c\u958b\u7684\u8cc7\u6e90\u5916\uff0c\u9ed8\u8a8d\u70ba\u62d2\u7d55\u5b58\u53d6\u3002 \u4e00\u6b21\u6027\u5730\u5efa\u7f6e\u5b58\u53d6\u63a7\u5236\u6a5f\u5236\uff0c\u4e4b\u5f8c\u5728\u6574\u500b\u61c9\u7528\u7a0b\u5f0f\u4e2d\u91cd\u8907\u4f7f\u7528\u5b83\u5011\uff0c\u5305\u62ec\u6700\u5927\u9650\u5ea6\u5730\u6e1b\u5c11\u4f7f\u7528CORS\u3002 \u6a21\u578b\u7684\u5b58\u53d6\u63a7\u5236\u63aa\u65bd\u61c9\u8a72\u5f37\u5316\u8a18\u9304\u6240\u6709\u6b0a\uff0c\u800c\u4e0d\u662f\u8b93\u7528\u6236\u53ef\u4ee5\u5275\u5efa\u3001\u8b80\u53d6\u3001\u66f4\u65b0\u6216\u522a\u9664\u4efb\u4f55\u8a18\u9304\u3002 \u7368\u7279\u7684\u61c9\u7528\u7a0b\u5f0f\u696d\u52d9\u9650\u5236\u8981\u6c42\u61c9\u7531\u9818\u57df\u6a21\u578b\u4e88\u4ee5\u5f37\u5316\u3002 \u505c\u7528Web\u4f3a\u670d\u5668\u76ee\u9304\u5217\u8868\uff0c\u4e26\u78ba\u4fdd\u6a94\u6848\u4e2d\u7e7c\u8cc7\u6599\uff08\u4f8b\u5982\uff0c.git)\u548c\u5099\u4efd\u6a94\u6848\u4e0d\u5728web\u6839\u76ee\u9304\u4e2d\u3002 \u8a18\u9304\u5b58\u53d6\u63a7\u5236\u5931\u6548\uff0c\u4e26\u5728\u9069\u7576\u7684\u6642\u9593\u8b66\u793a\u7ba1\u7406\u54e1\uff08\u4f8b\u5982\uff0c\u91cd\u8986\u6027\u5931\u6548\uff09\u3002 \u5c0dAPI\u548c\u63a7\u5236\u5668\u5b58\u53d6\u9032\u884c\u6d41\u91cf\u9650\u5236\uff0c\u4ee5\u6700\u5c0f\u5316\u81ea\u52d5\u653b\u64ca\u5de5\u5177\u6240\u5e36\u4f86\u7684\u640d\u5bb3\u3002 JWT\u4ee4\u724c\u65bc\u767b\u51fa\u5f8c\uff0c\u5728\u4f3a\u670d\u5668\u7aef\u61c9\u4f7f\u5176\u5931\u6548\u3002 \u958b\u767c\u4eba\u54e1\u548cQA\u54c1\u4fdd\u4eba\u54e1\u61c9\u7d0d\u5165\u8207\u529f\u80fd\u6709\u95dc\u4e4b\u5b58\u53d6\u63a7\u5236\u7684\u55ae\u5143\u548c\u6574\u5408\u6e2c\u8a66\u3002","title":"\u5982\u4f55\u9810\u9632"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#_5","text":"\u60c5\u5883 #1\uff1a \u61c9\u7528\u7a0b\u5f0f\u5728\u5b58\u53d6\u5e33\u6236\u8cc7\u8a0a\u7684SQL\u547c\u53eb\u4e2d\u4f7f\u7528\u672a\u7d93\u9a57\u8b49\u7684\u8cc7\u6599\uff1a pstmt.setString(1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery( ); \u653b\u64ca\u8005\u53ea\u9700\u4fee\u6539\u700f\u89bd\u5668\u7684\u201cacct\u201d\u53c3\u6578\u5373\u53ef\u767c\u9001\u4ed6\u5011\u60f3\u8981\u7684\u4efb\u4f55\u5e33\u865f\u3002\u5982\u679c\u6c92\u6709\u6b63\u78ba\u9a57\u8b49\uff0c\u653b\u64ca\u8005\u53ef\u4ee5\u5b58\u53d6\u4efb\u4f55\u7528\u6236\u7684\u5e33\u6236\u3002 https://example.com/app/accountInfo?acct=notmyacct \u60c5\u5883#2\uff1a \u653b\u64ca\u8005\u50c5\u5f37\u8feb\u700f\u89bd\u67d0\u4e9b\u76ee\u6a19\u7db2\u5740\u3002\u5b58\u53d6\u7ba1\u7406\u9801\u9762\u9700\u8981\u7ba1\u7406\u54e1\u6b0a\u9650\u3002 https://example.com/app/getappInfo https://example.com/app/admin_getappInfo \u5982\u679c\u672a\u7d93\u8eab\u4efd\u9a57\u8b49\u7684\u7528\u6236\u53ef\u4ee5\u5b58\u53d6\u4efb\u4e00\u9801\u9762\uff0c\u90a3\u5c31\u662f\u4e00\u500b\u7f3a\u9677\u3002 \u5982\u679c\u4e00\u500b\u975e\u7ba1\u7406\u54e1\u53ef\u4ee5\u5b58\u53d6\u7ba1\u7406\u9801\u9762\uff0c\u9019\u4e5f\u662f\u4e00\u500b\u7f3a\u9677\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#_6","text":"OWASP Proactive Controls: Enforce Access Controls OWASP Application Security Verification Standard: V4 Access Control OWASP Testing Guide: Authorization Testing OWASP Cheat Sheet: Access Control OWASP Cheat Sheet: Authorization PortSwigger: Exploiting CORS misconfiguration OAuth: Revoking Access","title":"\u53c3\u8003"},{"location":"zh_TW/A01_2021-Broken_Access_Control/#cwe","text":"CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') CWE-23 Relative Path Traversal CWE-35 Path Traversal: '.../...//' CWE-59 Improper Link Resolution Before File Access ('Link Following') CWE-200 Exposure of Sensitive Information to an Unauthorized Actor CWE-201 Exposure of Sensitive Information Through Sent Data CWE-219 Storage of File with Sensitive Data Under Web Root CWE-264 Permissions, Privileges, and Access Controls (should no longer be used) CWE-275 Permission Issues CWE-276 Incorrect Default Permissions CWE-284 Improper Access Control CWE-285 Improper Authorization CWE-352 Cross-Site Request Forgery (CSRF) CWE-359 Exposure of Private Personal Information to an Unauthorized Actor CWE-377 Insecure Temporary File CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak') CWE-425 Direct Request ('Forced Browsing') CWE-441 Unintended Proxy or Intermediary ('Confused Deputy') CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory CWE-540 Inclusion of Sensitive Information in Source Code CWE-548 Exposure of Information Through Directory Listing CWE-552 Files or Directories Accessible to External Parties CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key CWE-601 URL Redirection to Untrusted Site ('Open Redirect') CWE-639 Authorization Bypass Through User-Controlled Key CWE-651 Exposure of WSDL File Containing Sensitive Information CWE-668 Exposure of Resource to Wrong Sphere CWE-706 Use of Incorrectly-Resolved Name or Reference CWE-862 Missing Authorization CWE-863 Incorrect Authorization CWE-913 Improper Control of Dynamically-Managed Code Resources CWE-922 Insecure Storage of Sensitive Information CWE-1275 Sensitive Cookie with Improper SameSite Attribute","title":"\u5c0d\u61c9\u7684CWE\u5217\u8868"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/","text":"A02:2021 \u2013 \u52a0\u5bc6\u6a5f\u5236\u5931\u6548 \u2693\ufe0e \u5f31\u9ede\u56e0\u7d20 \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075 \u5f31\u9ede\u7c21\u4ecb \u2693\ufe0e \u4e0a\u5347\u4e00\u500b\u540d\u6b21\u4f86\u5230\u7b2c\u4e8c\u540d\uff0c\u4e4b\u524d\u7248\u672c\u7a31\u70ba\"\u654f\u611f\u6027\u8cc7\u6599\u6d29\u6f0f\"\uff0c\u66f4\u50cf\u662f\u4e00\u7a2e\u5ee3\u6cdb\u7684\u75c7\u72c0\u800c\u975e\u6839\u56e0\uff0c\u672c\u7248\u672c\u805a\u7126\u65bc\u5bc6\u78bc\u5b78\u76f8\u95dc\u7684\u5931\u6548(\u6216\u7f3a\u4e4f\u52a0\u5bc6)\uff0c\u4e26\u56e0\u6b64\u5e38\u5e38\u5c0e\u81f4\u654f\u611f\u8cc7\u6599\u7684\u6d29\u6f0f\u3002\u8457\u540d\u7684CWE\u5305\u542b\"CWE259: Use of Hard-coded Password\", \"CWE-327: Broken or Risky Crypto Algorithm\", \u4ee5\u53ca\"CWE-331: Insufficient Entropy\"\u3002 \u5f31\u9ede\u63cf\u8ff0 \u2693\ufe0e \u9996\u5148\u78ba\u5b9a\u975c\u614b\u8cc7\u6599\u53ca\u8cc7\u6599\u50b3\u8f38\u7684\u9632\u8b77\u9700\u6c42\uff0c\u8209\u4f8b\u4f86\u8aaa\uff0c\u5bc6\u78bc\u3001\u4fe1\u7528\u5361\u5361\u865f\u3001\u5065\u5eb7\u7d00\u9304\u3001\u500b\u8cc7\u3001\u4ee5\u53ca\u9700\u8981\u984d\u5916\u4fdd\u8b77\u7684\u71df\u696d\u7955\u5bc6...\u7b49\u7b49\u4e3b\u8981\u88ab\u96b1\u79c1\u6cd5\u6240\u4fdd\u8b77\u7684\u8cc7\u6599\uff0c\u5982\u6b50\u76dfGDPR\u6216PCIDSS\u7b49\u7b49\u91d1\u878d\u696d\u76f8\u95dc\u7684\u8cc7\u6599\u4fdd\u8b77\u6cd5\u6216\u6a19\u6e96\u3002\u5c0d\u65bc\u9019\u4e9b\u8cc7\u6599\u9700\u8003\u91cf: \u4e0a\u958b\u8cc7\u6599\u662f\u5426\u4ee5\u660e\u78bc\u50b3\u8f38? \u50cf\u662fHTTP, SMTP, FTP\u7b49\u7b49\u5354\u5b9a\uff0c\u4f7f\u7528\u65bc\u5c0d\u5916\u7db2\u969b\u7db2\u8def\u7684\u6d41\u91cf\u662f\u5371\u96aa\u7684\u3002\u5fc5\u9808\u9a57\u8b49\u6240\u6709\u7684\u5167\u90e8\u6d41\u91cf\uff0c\u5982\u5728\u8ca0\u8f09\u5e73\u8861\u5668\u3001\u7db2\u7ad9\u4f3a\u670d\u5668\u3001\u6216\u5f8c\u7aef\u7cfb\u7d71\u4e4b\u9593 \u3002 \u662f\u5426\u6709\u4efb\u4f55\u8001\u820a\u6216\u8106\u5f31\u7684\u52a0\u5bc6\u6f14\u7b97\u6cd5\u88ab\u9810\u8a2d\u4f7f\u7528\u6216\u5b58\u5728\u65bc\u8f03\u820a\u7684\u7a0b\u5f0f\u78bc? \u662f\u5426\u6709\u4efb\u4f55\u9810\u8a2d\u7684\u52a0\u5bc6\u91d1\u9470\u88ab\u4f7f\u7528\u3001\u8106\u5f31\u7684\u52a0\u5bc6\u91d1\u9470\u88ab\u91cd\u8907\u4f7f\u7528\uff0c\u662f\u5426\u6709\u9069\u7576\u7684\u91d1\u9470\u7ba1\u7406\u6216\u91d1\u9470\u8f2a\u63db? \u52a0\u5bc6\u662f\u5426\u975e\u5f37\u5236? \u8209\u4f8b: \u4f7f\u7528\u8005\u4ee3\u7406(\u700f\u89bd\u5668)\u662f\u5426\u6709\u907a\u5931\u5b89\u5168\u76f8\u95dc\u7684\u6307\u4ee4\u6216\u6a19\u984c? \u4f7f\u7528\u8005\u4ee3\u7406(\u5982: app, \u90f5\u4ef6\u5ba2\u6236\u7aef)\u662f\u5426\u6709\u9a57\u8b49\u4f3a\u670d\u5668\u7684\u6191\u8b49\u662f\u6709\u6548\u7684? \u8acb\u53c3\u8003 ASVS \u52a0\u5bc6(V7), \u8cc7\u6599\u4fdd\u8b77(V9), \u53caSSL/TLS(V10)\u3002 \u5982\u4f55\u9810\u9632 \u2693\ufe0e \u81f3\u5c11\u57f7\u884c\u4ee5\u4e0b\u63aa\u65bd\uff0c\u4e26\u53c3\u8003\u76f8\u95dc\u8cc7\u6599: \u5c0d\u61c9\u7528\u7a0b\u5f0f\u8655\u7406\u3001\u5132\u5b58\u3001\u50b3\u8f38\u7684\u8cc7\u6599\u9032\u884c\u5206\u985e\uff0c\u6839\u64da\u96b1\u79c1\u6cd5\u3001\u6cd5\u4ee4\u6cd5\u898f\u3001\u6216\u5546\u696d\u9700\u6c42\u8fa8\u8b58\u54ea\u4e9b\u70ba\u654f\u611f\u6027\u8cc7\u6599\u3002 \u4f9d\u7167\u5206\u985e\u57f7\u884c\u5c0d\u61c9\u7684\u63a7\u5236\u63aa\u65bd\u3002 \u975e\u5fc5\u8981\u4e0d\u5132\u5b58\u654f\u611f\u6027\u8cc7\u6599\uff0c\u76e1\u5feb\u6368\u68c4\u6216\u4f7f\u7528\u7b26\u5408PCIDSS\u7684\u8cc7\u6599\u8a18\u865f\u5316(tokenization)\u751a\u81f3\u622a\u65b7(truncation)\u3002 \u6c92\u6709\u88ab\u4fdd\u5b58\u7684\u6578\u64da\u662f\u4e0d\u6703\u88ab\u7aca\u53d6\u7684\u3002 \u78ba\u4fdd\u5c07\u6240\u6709\u975c\u614b\u7684\u654f\u611f\u6027\u8cc7\u6599\u52a0\u5bc6\u3002 \u78ba\u8a8d\u4f7f\u7528\u6700\u65b0\u7248\u4e14\u6a19\u6e96\u7684\u5f37\u6f14\u7b97\u6cd5\u3001\u5354\u5b9a\u53ca\u91d1\u9470; \u4f7f\u7528\u9069\u7576\u7684\u91d1\u9470\u7ba1\u7406\u3002 \u4f7f\u7528\u5b89\u5168\u7684\u5354\u5b9a\u52a0\u5bc6\u50b3\u8f38\u4e2d\u7684\u8cc7\u6599\uff0c\u50cf\u662f\u6709\u5b8c\u5168\u524d\u5411\u4fdd\u5bc6(PFS)\u3001\u4f3a\u670d\u5668\u52a0\u5bc6\u512a\u5148\u9806\u5e8f(cipher prioritization by the server)\u53ca\u5b89\u5168\u53c3\u6578\u7684TLS\u3002 \u4f7f\u7528\u50cf\u662fHTTP\u5f37\u5236\u5b89\u5168\u50b3\u8f38\u6280\u8853(HSTS)\u7684\u6307\u4ee4\u5f37\u5316\u52a0\u5bc6\u3002 \u91dd\u5c0d\u5305\u542b\u654f\u611f\u8cc7\u6599\u7684\u56de\u61c9\u505c\u7528\u5feb\u53d6\u3002 \u4f7f\u7528\u5177\u6709\u96dc\u6e4a\u8fed\u4ee3\u6b21\u6578\u56e0\u7d20(work factor/delay factor)\uff0c\u5982Argon2, scrypt, bcrypt\u6216PBKDF2\u7684\u5f37\u81ea\u9069\u61c9\u6027\u52a0\u9e7d\u96dc\u6e4a\u6cd5\u4f86\u5132\u5b58\u5bc6\u78bc\u3002 \u7368\u7acb\u9a57\u8b49\u8a2d\u5b9a\u7684\u6709\u6548\u6027\u3002 \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b \u2693\ufe0e \u60c5\u5883 #1 : \u6709\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u4f7f\u7528\u81ea\u52d5\u5316\u8cc7\u6599\u5eab\u52a0\u5bc6\u4f86\u52a0\u5bc6\u8cc7\u6599\u5eab\u4e2d\u7684\u4fe1\u7528\u5361\u5361\u865f\uff0c\u4f46\u662f\u8cc7\u6599\u88ab\u5b58\u53d6\u6642\u662f\u88ab\u81ea\u52d5\u89e3\u5bc6\u7684\uff0c\u9032\u800c\u5141\u8a31\u900f\u904eSQL\u6ce8\u5165\u7f3a\u9677\u4f86\u5b58\u53d6\u4fe1\u7528\u5361\u5361\u865f\u660e\u6587\u3002 \u60c5\u5883 #2 : \u6709\u4e00\u500b\u7ad9\u53f0\u6c92\u6709\u5c0d\u6240\u6709\u9801\u9762\u5f37\u5236\u4f7f\u7528TLS\u6216\u652f\u63f4\u8106\u5f31\u7684\u52a0\u5bc6\uff0c\u653b\u64ca\u8005\u76e3\u63a7\u7db2\u8def\u6d41\u91cf(\u5982\u5728\u4e0d\u5b89\u5168\u7684\u7121\u7dda\u7db2\u8def), \u5c07\u9023\u7dda\u5f9eHTTPS\u964d\u7d1a\u6210HTTP\uff0c\u4e26\u6514\u622a\u8acb\u6c42\u7aca\u53d6\u4f7f\u7528\u8005\u7684\u6703\u8a71(session) cookies\uff0c\u4e4b\u5f8c\u653b\u64ca\u8005\u91cd\u9001\u7aca\u53d6\u5230\u7684\u6703\u8a71(session) cookies\u4e26\u52ab\u6301\u7528\u6236(\u8a8d\u8b49\u904e\u7684)\u7684\u6703\u8a71\uff0c\u9032\u800c\u5b58\u53d6\u6216\u4fee\u6539\u4f7f\u7528\u8005\u7684\u96b1\u79c1\u8cc7\u6599\u3002 \u9664\u4e86\u4e0a\u8ff0\u4ee5\u5916\uff0c\u653b\u64ca\u8005\u4e5f\u80fd\u4fee\u6539\u50b3\u8f38\u7684\u8cc7\u6599\uff0c\u5982\u532f\u6b3e\u6536\u6b3e\u4eba\u3002 \u60c5\u5883 #3 : \u5bc6\u78bc\u8cc7\u6599\u5eab\u4f7f\u7528\u672a\u88ab\u52a0\u9e7d\u6216\u7c21\u55ae\u7684\u96dc\u6e4a\u4f86\u5132\u5b58\u6bcf\u500b\u4eba\u7684\u5bc6\u78bc\uff0c\u4e00\u500b\u6a94\u6848\u4e0a\u50b3\u7684\u7f3a\u9677\u53ef\u4ee5\u8b93\u653b\u64ca\u8005\u5b58\u53d6\u5bc6\u78bc\u8cc7\u6599\u5eab\uff0c\u6240\u6709\u672a\u88ab\u52a0\u9e7d\u7684\u96dc\u6e4a\u53ef\u4ee5\u88ab\u9810\u5148\u8a08\u7b97\u597d\u7684\u5f69\u8679\u8868\u516c\u958b\u3002\u5373\u4f7f\u96dc\u6e4a\u6709\u88ab\u52a0\u9e7d\uff0c\u7531\u7c21\u55ae\u6216\u5feb\u901f\u7684\u96dc\u6e4a\u6cd5\u7b97\u51fa\u7684\u96dc\u6e4a\u4ecd\u80fd\u88abGPU\u7834\u89e3\u3002 \u53c3\u8003\u6587\u737b \u2693\ufe0e OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography \u5c0d\u61c9\u7684CWEs\u6e05\u55ae \u2693\ufe0e CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"A02 \u52a0\u5bc6\u6a5f\u5236\u5931\u6548"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#a022021","text":"","title":"A02:2021 \u2013 \u52a0\u5bc6\u6a5f\u5236\u5931\u6548"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#_1","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 29 46.44% 4.49% 79.33% 34.85% 7.29 6.81 233,788 3,075","title":"\u5f31\u9ede\u56e0\u7d20"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#_2","text":"\u4e0a\u5347\u4e00\u500b\u540d\u6b21\u4f86\u5230\u7b2c\u4e8c\u540d\uff0c\u4e4b\u524d\u7248\u672c\u7a31\u70ba\"\u654f\u611f\u6027\u8cc7\u6599\u6d29\u6f0f\"\uff0c\u66f4\u50cf\u662f\u4e00\u7a2e\u5ee3\u6cdb\u7684\u75c7\u72c0\u800c\u975e\u6839\u56e0\uff0c\u672c\u7248\u672c\u805a\u7126\u65bc\u5bc6\u78bc\u5b78\u76f8\u95dc\u7684\u5931\u6548(\u6216\u7f3a\u4e4f\u52a0\u5bc6)\uff0c\u4e26\u56e0\u6b64\u5e38\u5e38\u5c0e\u81f4\u654f\u611f\u8cc7\u6599\u7684\u6d29\u6f0f\u3002\u8457\u540d\u7684CWE\u5305\u542b\"CWE259: Use of Hard-coded Password\", \"CWE-327: Broken or Risky Crypto Algorithm\", \u4ee5\u53ca\"CWE-331: Insufficient Entropy\"\u3002","title":"\u5f31\u9ede\u7c21\u4ecb"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#_3","text":"\u9996\u5148\u78ba\u5b9a\u975c\u614b\u8cc7\u6599\u53ca\u8cc7\u6599\u50b3\u8f38\u7684\u9632\u8b77\u9700\u6c42\uff0c\u8209\u4f8b\u4f86\u8aaa\uff0c\u5bc6\u78bc\u3001\u4fe1\u7528\u5361\u5361\u865f\u3001\u5065\u5eb7\u7d00\u9304\u3001\u500b\u8cc7\u3001\u4ee5\u53ca\u9700\u8981\u984d\u5916\u4fdd\u8b77\u7684\u71df\u696d\u7955\u5bc6...\u7b49\u7b49\u4e3b\u8981\u88ab\u96b1\u79c1\u6cd5\u6240\u4fdd\u8b77\u7684\u8cc7\u6599\uff0c\u5982\u6b50\u76dfGDPR\u6216PCIDSS\u7b49\u7b49\u91d1\u878d\u696d\u76f8\u95dc\u7684\u8cc7\u6599\u4fdd\u8b77\u6cd5\u6216\u6a19\u6e96\u3002\u5c0d\u65bc\u9019\u4e9b\u8cc7\u6599\u9700\u8003\u91cf: \u4e0a\u958b\u8cc7\u6599\u662f\u5426\u4ee5\u660e\u78bc\u50b3\u8f38? \u50cf\u662fHTTP, SMTP, FTP\u7b49\u7b49\u5354\u5b9a\uff0c\u4f7f\u7528\u65bc\u5c0d\u5916\u7db2\u969b\u7db2\u8def\u7684\u6d41\u91cf\u662f\u5371\u96aa\u7684\u3002\u5fc5\u9808\u9a57\u8b49\u6240\u6709\u7684\u5167\u90e8\u6d41\u91cf\uff0c\u5982\u5728\u8ca0\u8f09\u5e73\u8861\u5668\u3001\u7db2\u7ad9\u4f3a\u670d\u5668\u3001\u6216\u5f8c\u7aef\u7cfb\u7d71\u4e4b\u9593 \u3002 \u662f\u5426\u6709\u4efb\u4f55\u8001\u820a\u6216\u8106\u5f31\u7684\u52a0\u5bc6\u6f14\u7b97\u6cd5\u88ab\u9810\u8a2d\u4f7f\u7528\u6216\u5b58\u5728\u65bc\u8f03\u820a\u7684\u7a0b\u5f0f\u78bc? \u662f\u5426\u6709\u4efb\u4f55\u9810\u8a2d\u7684\u52a0\u5bc6\u91d1\u9470\u88ab\u4f7f\u7528\u3001\u8106\u5f31\u7684\u52a0\u5bc6\u91d1\u9470\u88ab\u91cd\u8907\u4f7f\u7528\uff0c\u662f\u5426\u6709\u9069\u7576\u7684\u91d1\u9470\u7ba1\u7406\u6216\u91d1\u9470\u8f2a\u63db? \u52a0\u5bc6\u662f\u5426\u975e\u5f37\u5236? \u8209\u4f8b: \u4f7f\u7528\u8005\u4ee3\u7406(\u700f\u89bd\u5668)\u662f\u5426\u6709\u907a\u5931\u5b89\u5168\u76f8\u95dc\u7684\u6307\u4ee4\u6216\u6a19\u984c? \u4f7f\u7528\u8005\u4ee3\u7406(\u5982: app, \u90f5\u4ef6\u5ba2\u6236\u7aef)\u662f\u5426\u6709\u9a57\u8b49\u4f3a\u670d\u5668\u7684\u6191\u8b49\u662f\u6709\u6548\u7684? \u8acb\u53c3\u8003 ASVS \u52a0\u5bc6(V7), \u8cc7\u6599\u4fdd\u8b77(V9), \u53caSSL/TLS(V10)\u3002","title":"\u5f31\u9ede\u63cf\u8ff0"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#_4","text":"\u81f3\u5c11\u57f7\u884c\u4ee5\u4e0b\u63aa\u65bd\uff0c\u4e26\u53c3\u8003\u76f8\u95dc\u8cc7\u6599: \u5c0d\u61c9\u7528\u7a0b\u5f0f\u8655\u7406\u3001\u5132\u5b58\u3001\u50b3\u8f38\u7684\u8cc7\u6599\u9032\u884c\u5206\u985e\uff0c\u6839\u64da\u96b1\u79c1\u6cd5\u3001\u6cd5\u4ee4\u6cd5\u898f\u3001\u6216\u5546\u696d\u9700\u6c42\u8fa8\u8b58\u54ea\u4e9b\u70ba\u654f\u611f\u6027\u8cc7\u6599\u3002 \u4f9d\u7167\u5206\u985e\u57f7\u884c\u5c0d\u61c9\u7684\u63a7\u5236\u63aa\u65bd\u3002 \u975e\u5fc5\u8981\u4e0d\u5132\u5b58\u654f\u611f\u6027\u8cc7\u6599\uff0c\u76e1\u5feb\u6368\u68c4\u6216\u4f7f\u7528\u7b26\u5408PCIDSS\u7684\u8cc7\u6599\u8a18\u865f\u5316(tokenization)\u751a\u81f3\u622a\u65b7(truncation)\u3002 \u6c92\u6709\u88ab\u4fdd\u5b58\u7684\u6578\u64da\u662f\u4e0d\u6703\u88ab\u7aca\u53d6\u7684\u3002 \u78ba\u4fdd\u5c07\u6240\u6709\u975c\u614b\u7684\u654f\u611f\u6027\u8cc7\u6599\u52a0\u5bc6\u3002 \u78ba\u8a8d\u4f7f\u7528\u6700\u65b0\u7248\u4e14\u6a19\u6e96\u7684\u5f37\u6f14\u7b97\u6cd5\u3001\u5354\u5b9a\u53ca\u91d1\u9470; \u4f7f\u7528\u9069\u7576\u7684\u91d1\u9470\u7ba1\u7406\u3002 \u4f7f\u7528\u5b89\u5168\u7684\u5354\u5b9a\u52a0\u5bc6\u50b3\u8f38\u4e2d\u7684\u8cc7\u6599\uff0c\u50cf\u662f\u6709\u5b8c\u5168\u524d\u5411\u4fdd\u5bc6(PFS)\u3001\u4f3a\u670d\u5668\u52a0\u5bc6\u512a\u5148\u9806\u5e8f(cipher prioritization by the server)\u53ca\u5b89\u5168\u53c3\u6578\u7684TLS\u3002 \u4f7f\u7528\u50cf\u662fHTTP\u5f37\u5236\u5b89\u5168\u50b3\u8f38\u6280\u8853(HSTS)\u7684\u6307\u4ee4\u5f37\u5316\u52a0\u5bc6\u3002 \u91dd\u5c0d\u5305\u542b\u654f\u611f\u8cc7\u6599\u7684\u56de\u61c9\u505c\u7528\u5feb\u53d6\u3002 \u4f7f\u7528\u5177\u6709\u96dc\u6e4a\u8fed\u4ee3\u6b21\u6578\u56e0\u7d20(work factor/delay factor)\uff0c\u5982Argon2, scrypt, bcrypt\u6216PBKDF2\u7684\u5f37\u81ea\u9069\u61c9\u6027\u52a0\u9e7d\u96dc\u6e4a\u6cd5\u4f86\u5132\u5b58\u5bc6\u78bc\u3002 \u7368\u7acb\u9a57\u8b49\u8a2d\u5b9a\u7684\u6709\u6548\u6027\u3002","title":"\u5982\u4f55\u9810\u9632"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#_5","text":"\u60c5\u5883 #1 : \u6709\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u4f7f\u7528\u81ea\u52d5\u5316\u8cc7\u6599\u5eab\u52a0\u5bc6\u4f86\u52a0\u5bc6\u8cc7\u6599\u5eab\u4e2d\u7684\u4fe1\u7528\u5361\u5361\u865f\uff0c\u4f46\u662f\u8cc7\u6599\u88ab\u5b58\u53d6\u6642\u662f\u88ab\u81ea\u52d5\u89e3\u5bc6\u7684\uff0c\u9032\u800c\u5141\u8a31\u900f\u904eSQL\u6ce8\u5165\u7f3a\u9677\u4f86\u5b58\u53d6\u4fe1\u7528\u5361\u5361\u865f\u660e\u6587\u3002 \u60c5\u5883 #2 : \u6709\u4e00\u500b\u7ad9\u53f0\u6c92\u6709\u5c0d\u6240\u6709\u9801\u9762\u5f37\u5236\u4f7f\u7528TLS\u6216\u652f\u63f4\u8106\u5f31\u7684\u52a0\u5bc6\uff0c\u653b\u64ca\u8005\u76e3\u63a7\u7db2\u8def\u6d41\u91cf(\u5982\u5728\u4e0d\u5b89\u5168\u7684\u7121\u7dda\u7db2\u8def), \u5c07\u9023\u7dda\u5f9eHTTPS\u964d\u7d1a\u6210HTTP\uff0c\u4e26\u6514\u622a\u8acb\u6c42\u7aca\u53d6\u4f7f\u7528\u8005\u7684\u6703\u8a71(session) cookies\uff0c\u4e4b\u5f8c\u653b\u64ca\u8005\u91cd\u9001\u7aca\u53d6\u5230\u7684\u6703\u8a71(session) cookies\u4e26\u52ab\u6301\u7528\u6236(\u8a8d\u8b49\u904e\u7684)\u7684\u6703\u8a71\uff0c\u9032\u800c\u5b58\u53d6\u6216\u4fee\u6539\u4f7f\u7528\u8005\u7684\u96b1\u79c1\u8cc7\u6599\u3002 \u9664\u4e86\u4e0a\u8ff0\u4ee5\u5916\uff0c\u653b\u64ca\u8005\u4e5f\u80fd\u4fee\u6539\u50b3\u8f38\u7684\u8cc7\u6599\uff0c\u5982\u532f\u6b3e\u6536\u6b3e\u4eba\u3002 \u60c5\u5883 #3 : \u5bc6\u78bc\u8cc7\u6599\u5eab\u4f7f\u7528\u672a\u88ab\u52a0\u9e7d\u6216\u7c21\u55ae\u7684\u96dc\u6e4a\u4f86\u5132\u5b58\u6bcf\u500b\u4eba\u7684\u5bc6\u78bc\uff0c\u4e00\u500b\u6a94\u6848\u4e0a\u50b3\u7684\u7f3a\u9677\u53ef\u4ee5\u8b93\u653b\u64ca\u8005\u5b58\u53d6\u5bc6\u78bc\u8cc7\u6599\u5eab\uff0c\u6240\u6709\u672a\u88ab\u52a0\u9e7d\u7684\u96dc\u6e4a\u53ef\u4ee5\u88ab\u9810\u5148\u8a08\u7b97\u597d\u7684\u5f69\u8679\u8868\u516c\u958b\u3002\u5373\u4f7f\u96dc\u6e4a\u6709\u88ab\u52a0\u9e7d\uff0c\u7531\u7c21\u55ae\u6216\u5feb\u901f\u7684\u96dc\u6e4a\u6cd5\u7b97\u51fa\u7684\u96dc\u6e4a\u4ecd\u80fd\u88abGPU\u7834\u89e3\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#_6","text":"OWASP Proactive Controls: Protect Data Everywhere OWASP Application Security Verification Standard (V7, 9, 10) OWASP Cheat Sheet: Transport Layer Protection OWASP Cheat Sheet: User Privacy Protection OWASP Cheat Sheet: Password and Cryptographic Storage OWASP Cheat Sheet: HSTS OWASP Testing Guide: Testing for weak cryptography","title":"\u53c3\u8003\u6587\u737b"},{"location":"zh_TW/A02_2021-Cryptographic_Failures/#cwes","text":"CWE-261 Weak Encoding for Password CWE-296 Improper Following of a Certificate's Chain of Trust CWE-310 Cryptographic Issues CWE-319 Cleartext Transmission of Sensitive Information CWE-321 Use of Hard-coded Cryptographic Key CWE-322 Key Exchange without Entity Authentication CWE-323 Reusing a Nonce, Key Pair in Encryption CWE-324 Use of a Key Past its Expiration Date CWE-325 Missing Required Cryptographic Step CWE-326 Inadequate Encryption Strength CWE-327 Use of a Broken or Risky Cryptographic Algorithm CWE-328 Reversible One-Way Hash CWE-329 Not Using a Random IV with CBC Mode CWE-330 Use of Insufficiently Random Values CWE-331 Insufficient Entropy CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG) CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG) CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG) CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG) CWE-340 Generation of Predictable Numbers or Identifiers CWE-347 Improper Verification of Cryptographic Signature CWE-523 Unprotected Transport of Credentials CWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications CWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade') CWE-759 Use of a One-Way Hash without a Salt CWE-760 Use of a One-Way Hash with a Predictable Salt CWE-780 Use of RSA Algorithm without OAEP CWE-818 Insufficient Transport Layer Protection CWE-916 Use of Password Hash With Insufficient Computational Effort","title":"\u5c0d\u61c9\u7684CWEs\u6e05\u55ae"},{"location":"zh_TW/A03_2021-Injection/","text":"A03:2021 \u2013 \u6ce8\u5165\u5f0f\u653b\u64ca \u2693\ufe0e \u5c0d\u7167\u56e0\u7d20 \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078 \u6982\u8ff0 \u2693\ufe0e \u690d\u5165\u5f0f\u653b\u64ca\u4e0b\u6ed1\u5230\u4e86\u7b2c\u4e09\u540d\u300294% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u578b\u7684\u6ce8\u5165\u5f0f\u653b\u64ca\u554f\u984c\u3002\u503c\u5f97\u6ce8\u610f\u7684 CWEs \u5305\u62ec\u4e86 CWE-79\uff1a\u8de8\u7db2\u7ad9\u653b\u64ca\u3001CWE-89\uff1aSQL \u6ce8\u5165\u5f0f\u653b\u64ca\u4ee5\u53ca CWE-73\uff1a\u5728\u5916\u90e8\u63a7\u5236\u6a94\u6848\u540d\u7a31\u6216\u8def\u5f91\u3002 \u63cf\u8ff0 \u2693\ufe0e \u61c9\u7528\u7a0b\u5f0f\u5728\u4ee5\u4e0b\u60c5\u6cc1\u5bb9\u6613\u906d\u53d7\u653b\u64ca\uff1a \u61c9\u7528\u7a0b\u5f0f\u672a\u9a57\u8b49\u3001\u904e\u6ffe\u6216\u6e05\u7406\u4f7f\u7528\u8005\u63d0\u4f9b\u7684\u8cc7\u6599\u3002 \u5728\u76f4\u8b6f\u5668\u4e2d\u672a\u4f7f\u7528\u4e0a\u4e0b\u6587\u611f\u77e5\u8f49\u7fa9\u7684\u52d5\u614b\u67e5\u8a62\u6216\u7121\u53c3\u6578\u547c\u53eb\u3002 \u5728\u7269\u4ef6\u95dc\u4fc2\u5c0d\u6620 (ORM) \u7684\u641c\u5c0b\u53c3\u6578\u4e2d\uff0c\u4f7f\u7528\u60e1\u610f\u7684\u8cc7\u6599\u4f86\u63d0\u53d6\u984d\u5916\u7684\u654f\u611f\u7d00\u9304\u3002 \u5728\u52d5\u614b\u67e5\u8a62\u3001\u547d\u4ee4\u6216\u5132\u5b58\u7684\u7a0b\u5e8f\uff0cSQL\u3001\u6307\u4ee4\u6216\u5132\u5b58\u7684\u7a0b\u5e8f\u4e2d\uff0c\u76f4\u63a5\u4f7f\u7528\u6216\u9023\u7d50\u4e86\u60e1\u610f\u8cc7\u6599\u3002 \u4e00\u4e9b\u5e38\u898b\u7684\u6ce8\u5165\u5f0f\u653b\u64ca\u662f SQL\u3001NoSQL\u3001OS \u6307\u4ee4\u3001\u7269\u4ef6\u95dc\u4fc2\u5c0d\u6620 (ORM)\u3001LDAP\u4ee5\u53ca\u8868\u9054\u5f0f\u8a9e\u8a00 (EL) \u6216\u5c0d\u8c61\u5c0e\u822a\u5716\u8a9e\u8a00 (OGNL) \u6ce8\u5165\u3002\u9019\u500b\u6982\u5ff5\u5728\u6240\u6709\u7684\u76f4\u8b6f\u5668\u90fd\u662f\u76f8\u540c\u7684\u3002\u5047\u82e5\u61c9\u7528\u7a0b\u5f0f\u5b58\u5728\u6ce8\u5165\u5f0f\u653b\u64ca\u7684\u5f31\u9ede\uff0c\u6e90\u78bc\u6aa2\u6e2c\u662f\u6700\u597d\u7684\u65b9\u5f0f\u3002\u5f37\u70c8\u5efa\u8b70\u5c0d\u6240\u6709\u8f38\u5165\u7684\u53c3\u6578\u3001\u6a19\u982d\u3001URL\u3001cookies\u3001JSON\u3001SOAP \u4ee5\u53ca XML \u7684\u8cc7\u6599\u9032\u884c\u81ea\u52d5\u5316\u6e2c\u8a66\u3002\u7d44\u7e54\u53ef\u4ee5\u5c07\u975c\u614b\u6e90\u78bc\u6e2c\u8a66 (SAST) \u4ee5\u53ca\u52d5\u614b\u61c9\u7528\u7a0b\u5f0f\u6aa2\u6e2c (DAST) \u5de5\u5177\uff0c\u5305\u542b\u5230\u6301\u7e8c\u6574\u5408\u8207\u6301\u7e8c\u90e8\u7f72 (CI/CD)\u7ba1\u9053\u4e2d\uff0c\u4ee5\u9054\u6210\u5728\u4e0a\u7dda\u90e8\u7f72\u524d\u80fd\u8b58\u5225\u6ce8\u5165\u653b\u64ca\u7684\u7f3a\u9677\u3002 \u5982\u4f55\u9810\u9632 \u2693\ufe0e \u9700\u8981\u5c07\u547d\u4ee4\u8207\u67e5\u8a62\u8cc7\u6599\u5206\u958b\uff0c\u4ee5\u9632\u6b62\u6ce8\u5165\u5f0f\u653b\u64ca\u3002 \u9996\u8981\u7684\u9078\u9805\u662f\u4f7f\u7528\u5b89\u5168\u7684\u61c9\u7528\u7a0b\u5f0f\u754c\u9762 (API)\uff0c\u5b8c\u5168\u907f\u514d\u4f7f\u7528\u76f4\u8b6f\u5668\uff0c\u4ee5\u63d0\u4f9b\u53c3\u6578\u5316\u7684\u754c\u9762\u6216\u6574\u5408\u5230\u7269\u4ef6\u95dc\u4fc2\u5c0d\u6620 (ORMs) \u5de5\u5177\u4e2d\u3002 \u6ce8\u610f\uff1a\u5373\u4f7f\u5df2\u7d93\u53c3\u6578\u5316\u4e86\uff0c\u5728\u5132\u5b58\u7684\u7a0b\u5e8f\u4e2d\u4ecd\u7136\u53ef\u4ee5\u5f15\u5165 SQL \u6ce8\u5165\u653b\u64ca\uff0c\u5982\u679c\u900f\u904e PL/SQL \u6216 T-SQL \u9023\u63a5\u67e5\u8a62\u8207\u8cc7\u6599\uff0c\u4e26\u4f7f\u7528 EXECUTE IMMEDIATE \u6216 exec() \u57f7\u884c\u60e1\u610f\u8cc7\u6599\u3002 \u4f7f\u7528\u6b63\u9762\u6216\u767d\u540d\u55ae\u5728\u4f3a\u670d\u5668\u7aef\u9a57\u8b49\u8f38\u5165\u7684\u8cc7\u6599\u3002\u9019\u4e26\u4e0d\u662f\u4e00\u500b\u5b8c\u6574\u7684\u9632\u79a6\u6a5f\u5236\uff0c\u56e0\u8a31\u591a\u61c9\u7528\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u7279\u6b8a\u7684\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a\u61c9\u7528\u7a0b\u5f0f\u7684\u6587\u672c\u5340\u57df\u6216\u61c9\u7528\u7a0b\u5f0f\u754c\u9762 (API)\u61c9\u7528\u65bc\u884c\u52d5\u88dd\u7f6e\u4e0a\u7684\u61c9\u7528\u7a0b\u5f0f\u3002 \u5c0d\u65bc\u4efb\u4f55\u5269\u9918\u7684\u52d5\u614b\u67e5\u8a62\uff0c\u5728\u8f49\u8b6f\u4e2d\u4f7f\u7528\u7279\u6b8a\u7b26\u865f\u9032\u884c\u67e5\u8a62\u5c07\u5c0d\u67e5\u8a62\u8a9e\u6cd5\u5e36\u4f86\u4e0d\u540c\u7684\u6db5\u7fa9\u3002 \u6ce8\u610f\uff1a\u5728 SQL \u7d50\u69cb\u4e2d\uff0c\u4f8b\u5982\uff1a\u8cc7\u6599\u8868\u540d\u7a31\u3001\u6b04\u4f4d\u540d\u7a31\u662f\u7121\u6cd5\u88ab\u8f49\u8b6f\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u8005\u63d0\u4f9b\u8cc7\u6599\u7d50\u69cb\u7684\u540d\u7a31\u662f\u5371\u96aa\u7684\uff0c\u9019\u662f\u4e00\u500b\u5728\u7de8\u5beb\u8edf\u9ad4\u6642\u5e38\u898b\u7684\u554f\u984c\u3002 \u5728\u67e5\u8a62\u4e2d\u4f7f\u7528 LIMIT \u4ee5\u53ca\u5176\u5b83\u7684 SQL \u63a7\u5236\u5668\uff0c\u53ef\u4ee5\u9632\u6b62\u7576\u906d\u53d7 SQL \u6ce8\u5165\u5f0f\u653b\u64ca\u6642\u88ab\u5927\u91cf\u6d29\u9732\u7d00\u9304\u3002 \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b \u2693\ufe0e \u60c5\u5883 #1: \u61c9\u7528\u7a0b\u5f0f\u4f7f\u7528\u4e86\u4e0d\u88ab\u4fe1\u4efb\u7684\u8cc7\u6599\u5728\u8106\u5f31\u7684 SQL \u547c\u53eb\u4e2d\uff1a String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; \u60c5\u5883 #2: \u985e\u4f3c\u5730\uff0c\u61c9\u7528\u7a0b\u5f0f\u5c0d\u6846\u67b6\u7684\u76f2\u76ee\u4fe1\u4efb\uff0c\u53ef\u80fd\u5c0e\u81f4\u4ecd\u7136\u5728\u6f0f\u6d1e\u7684\u67e5\u8a62\uff0c(\u4f8b\u5982\uff1aHibernate \u67e5\u8a62\u8a9e\u8a00 (HQL))\uff1a Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); \u5728\u9019\u5169\u500b\u60c5\u5883\u4e2d\uff0c\u653b\u64ca\u8005\u5728\u4ed6\u5011\u7684\u700f\u89bd\u5668\u4fee\u6539\u4e86 \"id\" \u53c3\u6578\u503c\uff0c\u9001\u51fa \u2018 or \u20181\u2019=\u20191\uff0c\u4f8b\u5982\uff1a http://example.com/app/accountView?id=' or '1'='1 \u9019\u5169\u500b\u67e5\u8a62\u7684\u542b\u7fa9\u5c07\u7522\u751f\u6539\u8b8a\uff0c\u800c\u56de\u61c9\u6240\u6709\u5e33\u6236\u8cc7\u6599\u8868\u4e2d\u7684\u7d00\u9304\uff0c\u66f4\u5371\u96aa\u7684\u653b\u64ca\u5c07\u53ef\u80fd\u4fee\u6539\u6216\u522a\u9664\u8cc7\u6599\uff0c\u4ee5\u53ca\u5f71\u97ff\u8cc7\u6599\u7684\u5132\u5b58\u904e\u7a0b\u3002 \u53c3\u8003 \u2693\ufe0e OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection \u5c0d\u61c9\u7684 CWE \u5217\u8868 \u2693\ufe0e CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"A03 \u6ce8\u5165\u5f0f\u653b\u64ca"},{"location":"zh_TW/A03_2021-Injection/#a032021","text":"","title":"A03:2021 \u2013 \u6ce8\u5165\u5f0f\u653b\u64ca"},{"location":"zh_TW/A03_2021-Injection/#_1","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 33 19.09% 3.37% 94.04% 47.90% 7.25 7.15 274,228 32,078","title":"\u5c0d\u7167\u56e0\u7d20"},{"location":"zh_TW/A03_2021-Injection/#_2","text":"\u690d\u5165\u5f0f\u653b\u64ca\u4e0b\u6ed1\u5230\u4e86\u7b2c\u4e09\u540d\u300294% \u88ab\u6e2c\u8a66\u7684\u61c9\u7528\u7a0b\u5f0f\u90fd\u6709\u9a57\u6e2c\u5230\u67d0\u7a2e\u985e\u578b\u7684\u6ce8\u5165\u5f0f\u653b\u64ca\u554f\u984c\u3002\u503c\u5f97\u6ce8\u610f\u7684 CWEs \u5305\u62ec\u4e86 CWE-79\uff1a\u8de8\u7db2\u7ad9\u653b\u64ca\u3001CWE-89\uff1aSQL \u6ce8\u5165\u5f0f\u653b\u64ca\u4ee5\u53ca CWE-73\uff1a\u5728\u5916\u90e8\u63a7\u5236\u6a94\u6848\u540d\u7a31\u6216\u8def\u5f91\u3002","title":"\u6982\u8ff0"},{"location":"zh_TW/A03_2021-Injection/#_3","text":"\u61c9\u7528\u7a0b\u5f0f\u5728\u4ee5\u4e0b\u60c5\u6cc1\u5bb9\u6613\u906d\u53d7\u653b\u64ca\uff1a \u61c9\u7528\u7a0b\u5f0f\u672a\u9a57\u8b49\u3001\u904e\u6ffe\u6216\u6e05\u7406\u4f7f\u7528\u8005\u63d0\u4f9b\u7684\u8cc7\u6599\u3002 \u5728\u76f4\u8b6f\u5668\u4e2d\u672a\u4f7f\u7528\u4e0a\u4e0b\u6587\u611f\u77e5\u8f49\u7fa9\u7684\u52d5\u614b\u67e5\u8a62\u6216\u7121\u53c3\u6578\u547c\u53eb\u3002 \u5728\u7269\u4ef6\u95dc\u4fc2\u5c0d\u6620 (ORM) \u7684\u641c\u5c0b\u53c3\u6578\u4e2d\uff0c\u4f7f\u7528\u60e1\u610f\u7684\u8cc7\u6599\u4f86\u63d0\u53d6\u984d\u5916\u7684\u654f\u611f\u7d00\u9304\u3002 \u5728\u52d5\u614b\u67e5\u8a62\u3001\u547d\u4ee4\u6216\u5132\u5b58\u7684\u7a0b\u5e8f\uff0cSQL\u3001\u6307\u4ee4\u6216\u5132\u5b58\u7684\u7a0b\u5e8f\u4e2d\uff0c\u76f4\u63a5\u4f7f\u7528\u6216\u9023\u7d50\u4e86\u60e1\u610f\u8cc7\u6599\u3002 \u4e00\u4e9b\u5e38\u898b\u7684\u6ce8\u5165\u5f0f\u653b\u64ca\u662f SQL\u3001NoSQL\u3001OS \u6307\u4ee4\u3001\u7269\u4ef6\u95dc\u4fc2\u5c0d\u6620 (ORM)\u3001LDAP\u4ee5\u53ca\u8868\u9054\u5f0f\u8a9e\u8a00 (EL) \u6216\u5c0d\u8c61\u5c0e\u822a\u5716\u8a9e\u8a00 (OGNL) \u6ce8\u5165\u3002\u9019\u500b\u6982\u5ff5\u5728\u6240\u6709\u7684\u76f4\u8b6f\u5668\u90fd\u662f\u76f8\u540c\u7684\u3002\u5047\u82e5\u61c9\u7528\u7a0b\u5f0f\u5b58\u5728\u6ce8\u5165\u5f0f\u653b\u64ca\u7684\u5f31\u9ede\uff0c\u6e90\u78bc\u6aa2\u6e2c\u662f\u6700\u597d\u7684\u65b9\u5f0f\u3002\u5f37\u70c8\u5efa\u8b70\u5c0d\u6240\u6709\u8f38\u5165\u7684\u53c3\u6578\u3001\u6a19\u982d\u3001URL\u3001cookies\u3001JSON\u3001SOAP \u4ee5\u53ca XML \u7684\u8cc7\u6599\u9032\u884c\u81ea\u52d5\u5316\u6e2c\u8a66\u3002\u7d44\u7e54\u53ef\u4ee5\u5c07\u975c\u614b\u6e90\u78bc\u6e2c\u8a66 (SAST) \u4ee5\u53ca\u52d5\u614b\u61c9\u7528\u7a0b\u5f0f\u6aa2\u6e2c (DAST) \u5de5\u5177\uff0c\u5305\u542b\u5230\u6301\u7e8c\u6574\u5408\u8207\u6301\u7e8c\u90e8\u7f72 (CI/CD)\u7ba1\u9053\u4e2d\uff0c\u4ee5\u9054\u6210\u5728\u4e0a\u7dda\u90e8\u7f72\u524d\u80fd\u8b58\u5225\u6ce8\u5165\u653b\u64ca\u7684\u7f3a\u9677\u3002","title":"\u63cf\u8ff0"},{"location":"zh_TW/A03_2021-Injection/#_4","text":"\u9700\u8981\u5c07\u547d\u4ee4\u8207\u67e5\u8a62\u8cc7\u6599\u5206\u958b\uff0c\u4ee5\u9632\u6b62\u6ce8\u5165\u5f0f\u653b\u64ca\u3002 \u9996\u8981\u7684\u9078\u9805\u662f\u4f7f\u7528\u5b89\u5168\u7684\u61c9\u7528\u7a0b\u5f0f\u754c\u9762 (API)\uff0c\u5b8c\u5168\u907f\u514d\u4f7f\u7528\u76f4\u8b6f\u5668\uff0c\u4ee5\u63d0\u4f9b\u53c3\u6578\u5316\u7684\u754c\u9762\u6216\u6574\u5408\u5230\u7269\u4ef6\u95dc\u4fc2\u5c0d\u6620 (ORMs) \u5de5\u5177\u4e2d\u3002 \u6ce8\u610f\uff1a\u5373\u4f7f\u5df2\u7d93\u53c3\u6578\u5316\u4e86\uff0c\u5728\u5132\u5b58\u7684\u7a0b\u5e8f\u4e2d\u4ecd\u7136\u53ef\u4ee5\u5f15\u5165 SQL \u6ce8\u5165\u653b\u64ca\uff0c\u5982\u679c\u900f\u904e PL/SQL \u6216 T-SQL \u9023\u63a5\u67e5\u8a62\u8207\u8cc7\u6599\uff0c\u4e26\u4f7f\u7528 EXECUTE IMMEDIATE \u6216 exec() \u57f7\u884c\u60e1\u610f\u8cc7\u6599\u3002 \u4f7f\u7528\u6b63\u9762\u6216\u767d\u540d\u55ae\u5728\u4f3a\u670d\u5668\u7aef\u9a57\u8b49\u8f38\u5165\u7684\u8cc7\u6599\u3002\u9019\u4e26\u4e0d\u662f\u4e00\u500b\u5b8c\u6574\u7684\u9632\u79a6\u6a5f\u5236\uff0c\u56e0\u8a31\u591a\u61c9\u7528\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u7279\u6b8a\u7684\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a\u61c9\u7528\u7a0b\u5f0f\u7684\u6587\u672c\u5340\u57df\u6216\u61c9\u7528\u7a0b\u5f0f\u754c\u9762 (API)\u61c9\u7528\u65bc\u884c\u52d5\u88dd\u7f6e\u4e0a\u7684\u61c9\u7528\u7a0b\u5f0f\u3002 \u5c0d\u65bc\u4efb\u4f55\u5269\u9918\u7684\u52d5\u614b\u67e5\u8a62\uff0c\u5728\u8f49\u8b6f\u4e2d\u4f7f\u7528\u7279\u6b8a\u7b26\u865f\u9032\u884c\u67e5\u8a62\u5c07\u5c0d\u67e5\u8a62\u8a9e\u6cd5\u5e36\u4f86\u4e0d\u540c\u7684\u6db5\u7fa9\u3002 \u6ce8\u610f\uff1a\u5728 SQL \u7d50\u69cb\u4e2d\uff0c\u4f8b\u5982\uff1a\u8cc7\u6599\u8868\u540d\u7a31\u3001\u6b04\u4f4d\u540d\u7a31\u662f\u7121\u6cd5\u88ab\u8f49\u8b6f\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u8005\u63d0\u4f9b\u8cc7\u6599\u7d50\u69cb\u7684\u540d\u7a31\u662f\u5371\u96aa\u7684\uff0c\u9019\u662f\u4e00\u500b\u5728\u7de8\u5beb\u8edf\u9ad4\u6642\u5e38\u898b\u7684\u554f\u984c\u3002 \u5728\u67e5\u8a62\u4e2d\u4f7f\u7528 LIMIT \u4ee5\u53ca\u5176\u5b83\u7684 SQL \u63a7\u5236\u5668\uff0c\u53ef\u4ee5\u9632\u6b62\u7576\u906d\u53d7 SQL \u6ce8\u5165\u5f0f\u653b\u64ca\u6642\u88ab\u5927\u91cf\u6d29\u9732\u7d00\u9304\u3002","title":"\u5982\u4f55\u9810\u9632"},{"location":"zh_TW/A03_2021-Injection/#_5","text":"\u60c5\u5883 #1: \u61c9\u7528\u7a0b\u5f0f\u4f7f\u7528\u4e86\u4e0d\u88ab\u4fe1\u4efb\u7684\u8cc7\u6599\u5728\u8106\u5f31\u7684 SQL \u547c\u53eb\u4e2d\uff1a String query = \"SELECT * FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"; \u60c5\u5883 #2: \u985e\u4f3c\u5730\uff0c\u61c9\u7528\u7a0b\u5f0f\u5c0d\u6846\u67b6\u7684\u76f2\u76ee\u4fe1\u4efb\uff0c\u53ef\u80fd\u5c0e\u81f4\u4ecd\u7136\u5728\u6f0f\u6d1e\u7684\u67e5\u8a62\uff0c(\u4f8b\u5982\uff1aHibernate \u67e5\u8a62\u8a9e\u8a00 (HQL))\uff1a Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\"); \u5728\u9019\u5169\u500b\u60c5\u5883\u4e2d\uff0c\u653b\u64ca\u8005\u5728\u4ed6\u5011\u7684\u700f\u89bd\u5668\u4fee\u6539\u4e86 \"id\" \u53c3\u6578\u503c\uff0c\u9001\u51fa \u2018 or \u20181\u2019=\u20191\uff0c\u4f8b\u5982\uff1a http://example.com/app/accountView?id=' or '1'='1 \u9019\u5169\u500b\u67e5\u8a62\u7684\u542b\u7fa9\u5c07\u7522\u751f\u6539\u8b8a\uff0c\u800c\u56de\u61c9\u6240\u6709\u5e33\u6236\u8cc7\u6599\u8868\u4e2d\u7684\u7d00\u9304\uff0c\u66f4\u5371\u96aa\u7684\u653b\u64ca\u5c07\u53ef\u80fd\u4fee\u6539\u6216\u522a\u9664\u8cc7\u6599\uff0c\u4ee5\u53ca\u5f71\u97ff\u8cc7\u6599\u7684\u5132\u5b58\u904e\u7a0b\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b"},{"location":"zh_TW/A03_2021-Injection/#_6","text":"OWASP Proactive Controls: Secure Database Access OWASP ASVS: V5 Input Validation and Encoding OWASP Testing Guide: SQL Injection, Command Injection , and ORM Injection OWASP Cheat Sheet: Injection Prevention OWASP Cheat Sheet: SQL Injection Prevention OWASP Cheat Sheet: Injection Prevention in Java OWASP Cheat Sheet: Query Parameterization OWASP Automated Threats to Web Applications \u2013 OAT-014 PortSwigger: Server-side template injection","title":"\u53c3\u8003"},{"location":"zh_TW/A03_2021-Injection/#cwe","text":"CWE-20 Improper Input Validation CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') CWE-75 Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) CWE-83 Improper Neutralization of Script in Attributes in a Web Page CWE-87 Improper Neutralization of Alternate XSS Syntax CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') CWE-91 XML Injection (aka Blind XPath Injection) CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection') CWE-94 Improper Control of Generation of Code ('Code Injection') CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page CWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') CWE-99 Improper Control of Resource Identifiers ('Resource Injection') CWE-100 Deprecated: Was catch-all for input validation issues CWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') CWE-116 Improper Encoding or Escaping of Output CWE-138 Improper Neutralization of Special Elements CWE-184 Incomplete List of Disallowed Inputs CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') CWE-471 Modification of Assumed-Immutable Data (MAID) CWE-564 SQL Injection: Hibernate CWE-610 Externally Controlled Reference to a Resource in Another Sphere CWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection') CWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax CWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","title":"\u5c0d\u61c9\u7684 CWE \u5217\u8868"},{"location":"zh_TW/A04_2021-Insecure_Design/","text":"A04:2021 \u2013 \u4e0d\u5b89\u5168\u8a2d\u8a08 \u2693\ufe0e \u5f31\u9ede\u56e0\u7d20 \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 40 24.19% 3.00% 77.25% 42.51% 6.46 6.78 262,407 2,691 \u5f31\u9ede\u7c21\u4ecb \u2693\ufe0e 2021\u5e74\u4e2d\u7684\u4e00\u500b\u5168\u65b0\u985e\u5225\uff0c\u8457\u91cd\u65bc\u5728\u8a2d\u8a08\u8207\u67b6\u69cb\u4e2d\u7684\u98a8\u96aa\u3002\u4f86\u547c\u7c72\u66f4\u591a\u4f7f\u7528\u5230\u5a01\u8105\u5efa\u6a21\u3001\u5b89\u5168\u8a2d\u8a08\u6a21\u5f0f\u8207\u53c3\u8003\u67b6\u69cb\u3002 \u8457\u540d\u7684 CWE \u5305\u62ec\u4e0b\u5217 CWE-209: \u7522\u751f\u7684\u932f\u8aa4\u4fe1\u606f\u7684\u4e2d\u5305\u542b\u654f\u611f\u8a0a\u606f \u3001 CWE-256: \u672a\u53d7\u4fdd\u8b77\u7684\u6191\u8b49\u5132\u5b58\u65b9\u5f0f \u3001 CWE-501: \u9055\u53cd\u4fe1\u4efb\u908a\u754c \u8207 CWE-522: \u4e0d\u8db3\u5920\u7684\u6191\u8b49\u4fdd\u8b77 \u3002 \u5f31\u9ede\u63cf\u8ff0 \u2693\ufe0e \u4e0d\u5b89\u5168\u8a2d\u8a08\u662f\u4e00\u500b\u5ee3\u6cdb\u7684\u985e\u5225\u5448\u73fe\u8a31\u591a\u4e0d\u540c\u7684\u5f31\u9ede\uff0c\u4ee3\u8868\u70ba\"\u7f3a\u4e4f\u6216\u7121\u6548\u7684\u63a7\u5236\u8a2d\u8a08\"\u3002 \u7f3a\u4e4f\u4e0d\u5b89\u5168\u8a2d\u8a08\u662f\u6307\u6ca1\u6709\u63a7\u5236\u63aa\u65bd\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u60f3\u50cf\u4e00\u6bb5\u7a0b\u5f0f\u78bc\u61c9\u8a72\u52a0\u5bc6\u654f\u611f\u8cc7\u6599\u4f46\u662f\u6c92\u6709\u5c0d\u61c9\u7684\u5be6\u4f5c\u65b9\u6cd5\u3002\u7121\u6548\u7684\u4e0d\u5b89\u5168\u8a2d\u8a08\u662f\u53ef\u4ee5\u5be6\u73fe\u5a01\u8105\u7684\u5730\u65b9\uff0c\u4f46\u4e0d\u8db3\u7684\u9818\u57df\uff08\u5546\u696d\uff09\u908f\u8f2f\u9a57\u8b49\u6703\u963b\u6b62\u8a72\u52d5\u4f5c\u3002\u4ee5\u4e0b\u500b\u4f8b\u5b50\u8aaa\uff0c\u60f3\u50cf\u9818\u57df\u908f\u8f2f\u662f\u7528\u4f86\u8655\u7406\u57fa\u65bc\u6536\u5165\u7b49\u7d1a\u7684\u75ab\u60c5\u6e1b\u7a05\u4f46\u662f\u4e26\u672a\u78ba\u8a8d\u6240\u6709\u7684\u8f38\u5165\u90fd\u662f\u6709\u6b63\u78ba\u7684\u7c3d\u540d\uff0c\u56e0\u6b64\u63d0\u4f9b\u8d85\u904e\u539f\u672c\u53ef\u4ee5\u7372\u5f97\u800c\u4e14\u66f4\u986f\u8457\u7684\u6e1b\u7a05\u5229\u76ca\u3002 \u5b89\u5168\u8a2d\u8a08\u4e00\u500b\u6587\u5316\u8207\u65b9\u6cd5\u6301\u7e8c\u4e0d\u65b7\u7684\u4f86\u8a55\u4f30\u5a01\u8105\u4e26\u4fdd\u8b49\u7a0b\u5f0f\u78bc\u6709\u88ab\u7a69\u5065\u7684\u8a2d\u8a08\u8207\u6e2c\u8a66\u4f86\u9810\u9632\u5df2\u77e5\u7684\u653b\u64ca\u65b9\u6cd5\u3002\u5b89\u5168\u8a2d\u8a08\u9700\u8981\u5b89\u5168\u7684\u958b\u767c\u751f\u547d\u9031\u671f\u3001\u67d0\u7a2e\u5f62\u5f0f\u4e0a\u7684\u5b89\u5168\u8a2d\u8a08\u6a21\u5f0f\u6216\u662f\u5df2\u5b8c\u6210\u7684\u5143\u4ef6\u5eab\u6216\u5de5\u5177\u4ee5\u53ca\u5a01\u8105\u5efa\u6a21\u3002 \u5982\u4f55\u9810\u9632 \u2693\ufe0e \u5efa\u7acb\u8207\u4f7f\u7528\u5b89\u5168\u958b\u767c\u751f\u547d\u9031\u671f\u4e26\u4e14\u5354\u540c\u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u7684\u5c08\u696d\u4eba\u58eb\u4f86\u8a55\u4f30\u8207\u8a2d\u8a08\u5b89\u5168\u8207\u96b1\u79c1\u76f8\u95dc\u7684\u63a7\u5236\u63aa\u65bd\u3002 \u5efa\u7acb\u8207\u4f7f\u7528\u5b89\u5168\u8a2d\u8a08\u6a21\u5f0f\u7684\u51fd\u5f0f\u5eab\u6216\u662f\u5df2\u5b8c\u6210\u53ef\u4f7f\u7528\u7684\u5143\u4ef6\u3002 \u4f7f\u7528\u5a01\u8105\u5efa\u6a21\u5728\u95dc\u9375\u7684\u8a8d\u8b49\u3001\u5b58\u53d6\u63a7\u5236\u3001\u5546\u696d\u908f\u8f2f\u8207\u95dc\u9375\u7f3a\u9677\u4e0a\u3002 \u64b0\u5beb\u55ae\u5143\u6e2c\u8a66\u8207\u6574\u5408\u6e2c\u8a66\u4f86\u9a57\u8b49\u6240\u6709\u7684\u95dc\u9375\u6d41\u7a0b\u5c0d\u5a01\u8105\u5efa\u6a21\u90fd\u6709\u62b5\u6297\u3002 \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b \u2693\ufe0e \u60c5\u5883 #1 \u6191\u8b49\u6062\u5fa9\u7684\u6d41\u7a0b\u6216\u8a31\u6703\u5305\u542b\u201c\u554f\u984c\u8207\u7b54\u6848\u201d\uff0c\u8a72\u65b9\u5f0f\u662f\u88abNIST 800-63b\u3001OWASP ASVS\u8207WASP Top 10\u4e2d\u7981\u6b62\u3002\u201c\u554f\u984c\u8207\u7b54\u6848\u201d\u7121\u6cd5\u88ab\u4f5c\u70ba\u4fe1\u4efb\u8eab\u4efd\u7684\u8b49\u64da\u56e0\u70ba\u4e0d\u6b62\u4e00\u500b\u4eba\u53ef\u80fd\u6703\u77e5\u9053\u7b54\u6848\uff0c\u56e0\u6b64\u9019\u500b\u65b9\u6cd5\u6703\u88ab\u7981\u6b62\u7684\u539f\u56e0\u3002\u56e0\u6b64\u6b64\u985e\u7684\u7a0b\u5f0f\u78bc\u61c9\u8a72\u88ab\u79fb\u9664\u6216\u662f\u7528\u66f4\u5b89\u5168\u7684\u8a2d\u8a08\u4f86\u66ff\u4ee3\u3002 \u60c5\u5883 #2: \u96fb\u5f71\u9662\u5728\u8981\u6c42\u62bc\u91d1\u524d\u5141\u8a31\u5718\u9ad4\u9810\u8a02\u6298\u6263\u4e26\u4e14\u6700\u591a\u670915 \u540d\u89c0\u773e\u3002\u653b\u64ca\u8005\u53ef\u4ee5\u5a01\u8105\u6a21\u578b\u6b64\u6d41\u7a0b\u4e26\u6e2c\u8a66\u4ed6\u5011\u5728\u4e00\u6b21\u8acb\u6c42\u4e2d\u662f\u5426\u53ef\u4ee5\u9810\u8a02 600 \u500b\u5ea7\u4f4d\u548c\u7684\u6240\u6709\u96fb\u5f71\u9662\uff0c\u5c0e\u81f4\u96fb\u5f71\u9662\u5de8\u5927\u7684\u6536\u5165\u640d\u5931\u3002 \u60c5\u5883 #3: \u9023\u9396\u96f6\u552e\u7684\u96fb\u5b50\u5546\u52d9\u7db2\u7ad9\u6c92\u6709\u4fdd\u8b77\u6a5f\u5236\u4f86\u5c0d\u6297\u9ec3\u725b\u7684\u6a5f\u5668\u4eba\u8cfc\u8cb7\u9ad8\u7aef\u7684\u986f\u793a\u5361\u518d\u8f49\u552e\u5230\u62cd\u8ce3\u7db2\u7ad9\u3002\u5c0d\u65bc\u96f6\u552e\u5546\u8207\u986f\u793a\u5361\u88fd\u9020\u5546\u7522\u751f\u4e86\u53ef\u6015\u7684\u5ba3\u50b3\u6548\u61c9\u4e26\u4e14\u5c0e\u81f4\u8207\u90a3\u4e9b\u7121\u6cd5\u8cfc\u8cb7\u5230\u986f\u5361\u7684\u611b\u597d\u8005\u9593\u7522\u751f\u4e86\u4e0d\u6109\u5feb\u3002\u5de7\u5999\u7684\u9632\u6a5f\u5668\u4eba\u8a2d\u8a08\u8207\u9818\u57df\u908f\u8f2f\u898f\u5247\uff0c\u4f8b\u5982\u77ed\u66ab\u5e7e\u79d2\u7684\u8cfc\u8cb7\u6642\u9593\u6216\u8a31\u53ef\u4ee5\u8fa8\u8b58\u51fa\u4e0d\u53ef\u4fe1\u8cf4\u7684\u8cfc\u8cb7\u4e26\u4e14\u62d2\u7d55\u8a72\u4ea4\u6613\u3002 \u53c3\u8003\u6587\u737b \u2693\ufe0e [OWASP Cheat Sheet: Secure Design Principles] (TBD) NIST \u2013 Guidelines on Minimum Standards for Developer Verification of > Software > https://www.nist.gov/system/files/documents/2021/07/09/Developer%20Verification%20of%20Software.pdf \u5c0d\u61c9\u7684 CWEs \u6e05\u55ae \u2693\ufe0e CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"A04 \u4e0d\u5b89\u5168\u8a2d\u8a08"},{"location":"zh_TW/A04_2021-Insecure_Design/#a042021","text":"","title":"A04:2021 \u2013 \u4e0d\u5b89\u5168\u8a2d\u8a08"},{"location":"zh_TW/A04_2021-Insecure_Design/#_1","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 40 24.19% 3.00% 77.25% 42.51% 6.46 6.78 262,407 2,691","title":"\u5f31\u9ede\u56e0\u7d20"},{"location":"zh_TW/A04_2021-Insecure_Design/#_2","text":"2021\u5e74\u4e2d\u7684\u4e00\u500b\u5168\u65b0\u985e\u5225\uff0c\u8457\u91cd\u65bc\u5728\u8a2d\u8a08\u8207\u67b6\u69cb\u4e2d\u7684\u98a8\u96aa\u3002\u4f86\u547c\u7c72\u66f4\u591a\u4f7f\u7528\u5230\u5a01\u8105\u5efa\u6a21\u3001\u5b89\u5168\u8a2d\u8a08\u6a21\u5f0f\u8207\u53c3\u8003\u67b6\u69cb\u3002 \u8457\u540d\u7684 CWE \u5305\u62ec\u4e0b\u5217 CWE-209: \u7522\u751f\u7684\u932f\u8aa4\u4fe1\u606f\u7684\u4e2d\u5305\u542b\u654f\u611f\u8a0a\u606f \u3001 CWE-256: \u672a\u53d7\u4fdd\u8b77\u7684\u6191\u8b49\u5132\u5b58\u65b9\u5f0f \u3001 CWE-501: \u9055\u53cd\u4fe1\u4efb\u908a\u754c \u8207 CWE-522: \u4e0d\u8db3\u5920\u7684\u6191\u8b49\u4fdd\u8b77 \u3002","title":"\u5f31\u9ede\u7c21\u4ecb"},{"location":"zh_TW/A04_2021-Insecure_Design/#_3","text":"\u4e0d\u5b89\u5168\u8a2d\u8a08\u662f\u4e00\u500b\u5ee3\u6cdb\u7684\u985e\u5225\u5448\u73fe\u8a31\u591a\u4e0d\u540c\u7684\u5f31\u9ede\uff0c\u4ee3\u8868\u70ba\"\u7f3a\u4e4f\u6216\u7121\u6548\u7684\u63a7\u5236\u8a2d\u8a08\"\u3002 \u7f3a\u4e4f\u4e0d\u5b89\u5168\u8a2d\u8a08\u662f\u6307\u6ca1\u6709\u63a7\u5236\u63aa\u65bd\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u60f3\u50cf\u4e00\u6bb5\u7a0b\u5f0f\u78bc\u61c9\u8a72\u52a0\u5bc6\u654f\u611f\u8cc7\u6599\u4f46\u662f\u6c92\u6709\u5c0d\u61c9\u7684\u5be6\u4f5c\u65b9\u6cd5\u3002\u7121\u6548\u7684\u4e0d\u5b89\u5168\u8a2d\u8a08\u662f\u53ef\u4ee5\u5be6\u73fe\u5a01\u8105\u7684\u5730\u65b9\uff0c\u4f46\u4e0d\u8db3\u7684\u9818\u57df\uff08\u5546\u696d\uff09\u908f\u8f2f\u9a57\u8b49\u6703\u963b\u6b62\u8a72\u52d5\u4f5c\u3002\u4ee5\u4e0b\u500b\u4f8b\u5b50\u8aaa\uff0c\u60f3\u50cf\u9818\u57df\u908f\u8f2f\u662f\u7528\u4f86\u8655\u7406\u57fa\u65bc\u6536\u5165\u7b49\u7d1a\u7684\u75ab\u60c5\u6e1b\u7a05\u4f46\u662f\u4e26\u672a\u78ba\u8a8d\u6240\u6709\u7684\u8f38\u5165\u90fd\u662f\u6709\u6b63\u78ba\u7684\u7c3d\u540d\uff0c\u56e0\u6b64\u63d0\u4f9b\u8d85\u904e\u539f\u672c\u53ef\u4ee5\u7372\u5f97\u800c\u4e14\u66f4\u986f\u8457\u7684\u6e1b\u7a05\u5229\u76ca\u3002 \u5b89\u5168\u8a2d\u8a08\u4e00\u500b\u6587\u5316\u8207\u65b9\u6cd5\u6301\u7e8c\u4e0d\u65b7\u7684\u4f86\u8a55\u4f30\u5a01\u8105\u4e26\u4fdd\u8b49\u7a0b\u5f0f\u78bc\u6709\u88ab\u7a69\u5065\u7684\u8a2d\u8a08\u8207\u6e2c\u8a66\u4f86\u9810\u9632\u5df2\u77e5\u7684\u653b\u64ca\u65b9\u6cd5\u3002\u5b89\u5168\u8a2d\u8a08\u9700\u8981\u5b89\u5168\u7684\u958b\u767c\u751f\u547d\u9031\u671f\u3001\u67d0\u7a2e\u5f62\u5f0f\u4e0a\u7684\u5b89\u5168\u8a2d\u8a08\u6a21\u5f0f\u6216\u662f\u5df2\u5b8c\u6210\u7684\u5143\u4ef6\u5eab\u6216\u5de5\u5177\u4ee5\u53ca\u5a01\u8105\u5efa\u6a21\u3002","title":"\u5f31\u9ede\u63cf\u8ff0"},{"location":"zh_TW/A04_2021-Insecure_Design/#_4","text":"\u5efa\u7acb\u8207\u4f7f\u7528\u5b89\u5168\u958b\u767c\u751f\u547d\u9031\u671f\u4e26\u4e14\u5354\u540c\u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u7684\u5c08\u696d\u4eba\u58eb\u4f86\u8a55\u4f30\u8207\u8a2d\u8a08\u5b89\u5168\u8207\u96b1\u79c1\u76f8\u95dc\u7684\u63a7\u5236\u63aa\u65bd\u3002 \u5efa\u7acb\u8207\u4f7f\u7528\u5b89\u5168\u8a2d\u8a08\u6a21\u5f0f\u7684\u51fd\u5f0f\u5eab\u6216\u662f\u5df2\u5b8c\u6210\u53ef\u4f7f\u7528\u7684\u5143\u4ef6\u3002 \u4f7f\u7528\u5a01\u8105\u5efa\u6a21\u5728\u95dc\u9375\u7684\u8a8d\u8b49\u3001\u5b58\u53d6\u63a7\u5236\u3001\u5546\u696d\u908f\u8f2f\u8207\u95dc\u9375\u7f3a\u9677\u4e0a\u3002 \u64b0\u5beb\u55ae\u5143\u6e2c\u8a66\u8207\u6574\u5408\u6e2c\u8a66\u4f86\u9a57\u8b49\u6240\u6709\u7684\u95dc\u9375\u6d41\u7a0b\u5c0d\u5a01\u8105\u5efa\u6a21\u90fd\u6709\u62b5\u6297\u3002","title":"\u5982\u4f55\u9810\u9632"},{"location":"zh_TW/A04_2021-Insecure_Design/#_5","text":"\u60c5\u5883 #1 \u6191\u8b49\u6062\u5fa9\u7684\u6d41\u7a0b\u6216\u8a31\u6703\u5305\u542b\u201c\u554f\u984c\u8207\u7b54\u6848\u201d\uff0c\u8a72\u65b9\u5f0f\u662f\u88abNIST 800-63b\u3001OWASP ASVS\u8207WASP Top 10\u4e2d\u7981\u6b62\u3002\u201c\u554f\u984c\u8207\u7b54\u6848\u201d\u7121\u6cd5\u88ab\u4f5c\u70ba\u4fe1\u4efb\u8eab\u4efd\u7684\u8b49\u64da\u56e0\u70ba\u4e0d\u6b62\u4e00\u500b\u4eba\u53ef\u80fd\u6703\u77e5\u9053\u7b54\u6848\uff0c\u56e0\u6b64\u9019\u500b\u65b9\u6cd5\u6703\u88ab\u7981\u6b62\u7684\u539f\u56e0\u3002\u56e0\u6b64\u6b64\u985e\u7684\u7a0b\u5f0f\u78bc\u61c9\u8a72\u88ab\u79fb\u9664\u6216\u662f\u7528\u66f4\u5b89\u5168\u7684\u8a2d\u8a08\u4f86\u66ff\u4ee3\u3002 \u60c5\u5883 #2: \u96fb\u5f71\u9662\u5728\u8981\u6c42\u62bc\u91d1\u524d\u5141\u8a31\u5718\u9ad4\u9810\u8a02\u6298\u6263\u4e26\u4e14\u6700\u591a\u670915 \u540d\u89c0\u773e\u3002\u653b\u64ca\u8005\u53ef\u4ee5\u5a01\u8105\u6a21\u578b\u6b64\u6d41\u7a0b\u4e26\u6e2c\u8a66\u4ed6\u5011\u5728\u4e00\u6b21\u8acb\u6c42\u4e2d\u662f\u5426\u53ef\u4ee5\u9810\u8a02 600 \u500b\u5ea7\u4f4d\u548c\u7684\u6240\u6709\u96fb\u5f71\u9662\uff0c\u5c0e\u81f4\u96fb\u5f71\u9662\u5de8\u5927\u7684\u6536\u5165\u640d\u5931\u3002 \u60c5\u5883 #3: \u9023\u9396\u96f6\u552e\u7684\u96fb\u5b50\u5546\u52d9\u7db2\u7ad9\u6c92\u6709\u4fdd\u8b77\u6a5f\u5236\u4f86\u5c0d\u6297\u9ec3\u725b\u7684\u6a5f\u5668\u4eba\u8cfc\u8cb7\u9ad8\u7aef\u7684\u986f\u793a\u5361\u518d\u8f49\u552e\u5230\u62cd\u8ce3\u7db2\u7ad9\u3002\u5c0d\u65bc\u96f6\u552e\u5546\u8207\u986f\u793a\u5361\u88fd\u9020\u5546\u7522\u751f\u4e86\u53ef\u6015\u7684\u5ba3\u50b3\u6548\u61c9\u4e26\u4e14\u5c0e\u81f4\u8207\u90a3\u4e9b\u7121\u6cd5\u8cfc\u8cb7\u5230\u986f\u5361\u7684\u611b\u597d\u8005\u9593\u7522\u751f\u4e86\u4e0d\u6109\u5feb\u3002\u5de7\u5999\u7684\u9632\u6a5f\u5668\u4eba\u8a2d\u8a08\u8207\u9818\u57df\u908f\u8f2f\u898f\u5247\uff0c\u4f8b\u5982\u77ed\u66ab\u5e7e\u79d2\u7684\u8cfc\u8cb7\u6642\u9593\u6216\u8a31\u53ef\u4ee5\u8fa8\u8b58\u51fa\u4e0d\u53ef\u4fe1\u8cf4\u7684\u8cfc\u8cb7\u4e26\u4e14\u62d2\u7d55\u8a72\u4ea4\u6613\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b"},{"location":"zh_TW/A04_2021-Insecure_Design/#_6","text":"[OWASP Cheat Sheet: Secure Design Principles] (TBD) NIST \u2013 Guidelines on Minimum Standards for Developer Verification of > Software > https://www.nist.gov/system/files/documents/2021/07/09/Developer%20Verification%20of%20Software.pdf","title":"\u53c3\u8003\u6587\u737b"},{"location":"zh_TW/A04_2021-Insecure_Design/#cwes","text":"CWE-73 External Control of File Name or Path CWE-183 Permissive List of Allowed Inputs CWE-209 Generation of Error Message Containing Sensitive Information CWE-213 Exposure of Sensitive Information Due to Incompatible Policies CWE-235 Improper Handling of Extra Parameters CWE-256 Unprotected Storage of Credentials CWE-257 Storing Passwords in a Recoverable Format CWE-266 Incorrect Privilege Assignment CWE-269 Improper Privilege Management CWE-280 Improper Handling of Insufficient Permissions or Privileges CWE-311 Missing Encryption of Sensitive Data CWE-312 Cleartext Storage of Sensitive Information CWE-313 Cleartext Storage in a File or on Disk CWE-316 Cleartext Storage of Sensitive Information in Memory CWE-419 Unprotected Primary Channel CWE-430 Deployment of Wrong Handler CWE-434 Unrestricted Upload of File with Dangerous Type CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling') CWE-451 User Interface (UI) Misrepresentation of Critical Information CWE-472 External Control of Assumed-Immutable Web Parameter CWE-501 Trust Boundary Violation CWE-522 Insufficiently Protected Credentials CWE-525 Use of Web Browser Cache Containing Sensitive Information CWE-539 Use of Persistent Cookies Containing Sensitive Information CWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session CWE-598 Use of GET Request Method With Sensitive Query Strings CWE-602 Client-Side Enforcement of Server-Side Security CWE-642 External Control of Critical State Data CWE-646 Reliance on File Name or Extension of Externally-Supplied File CWE-650 Trusting HTTP Permission Methods on the Server Side CWE-653 Insufficient Compartmentalization CWE-656 Reliance on Security Through Obscurity CWE-657 Violation of Secure Design Principles CWE-799 Improper Control of Interaction Frequency CWE-807 Reliance on Untrusted Inputs in a Security Decision CWE-840 Business Logic Errors CWE-841 Improper Enforcement of Behavioral Workflow CWE-927 Use of Implicit Intent for Sensitive Communication CWE-1021 Improper Restriction of Rendered UI Layers or Frames CWE-1173 Improper Use of Validation Framework","title":"\u5c0d\u61c9\u7684 CWEs \u6e05\u55ae"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/","text":"A05:2021 \u2013 \u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677 \u2693\ufe0e \u5f31\u9ede\u56e0\u7d20(Factors) \u2693\ufe0e \u53ef\u5c0d\u7167CWEs\u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f15\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs 20 19.84% 4.51% 89.58% 44.84% 8.12 6.56 208,387 789 \u5f31\u9ede\u7c21\u4ecb(Overview) \u2693\ufe0e Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference . \u5f9e\u5148\u524d\u7248\u672c\u7684\u7b2c\u516d\u540d\u6392\u540d\uff0c\u5411\u4e0a\u8abf\u5347\uff0c90%\u7684\u7a0b\u5f0f\u90fd\u88ab\u6e2c\u8a66\u627e\u51fa\u5404\u985e\u7684\u8a2d\u5b9a\u7f3a\u9677\u3002\u96a8\u8457\u8d8a\u4f86\u8d8a\u591a\u7684\u53ef\u8a2d\u5b9a\u5f0f\u8edf\u9ad4\u6578\u91cf\u589e\u52a0\uff0c\u770b\u5230\u6b64\u985e\u5225\u7684\u6392\u540d\u4e0a\u5347\uff0c\u4e26\u4e0d\u662f\u4ef6\u610f\u5916\u7684\u4e8b\u3002\u660e\u986f\u76f8\u5c0d\u61c9\u7684CWEs\u5305\u542b\u4e86 CWE16 \u8a2d\u5b9a \u4ee5\u53ca CWE-611 \u4e0d\u5145\u8db3\u7684XML\u5916\u90e8\u5be6\u9ad4\u5f15\u7528\u9650\u5236 \u5f31\u9ede\u63cf\u8ff0(Description) \u2693\ufe0e The application might be vulnerable if the application is: \u5982\u679c\u7a0b\u5f0f\u5305\u542b\u4e86\u4ee5\u4e0b\u5e7e\u500b\u56e0\u7d20\uff0c\u5247\u53ef\u80fd\u6709\u6613\u53d7\u653b\u64ca\u7684\u8106\u5f31\u6027\u3002 Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. \u5728\u7a0b\u5f0f\u5404\u5806\u758a\u5c64\u9762\uff0c\u7f3a\u5c11\u9069\u5207\u7684\u5b89\u5168\u5f37\u5316\uff0c\u6216\u662f\u65bc\u96f2\u7aef\u670d\u52d9\u4e0a\u6709\u8457\u4e0d\u7576\u7684\u6b0a\u9650\u8a2d\u5b9a\u3002 Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). \u4e0d\u5fc5\u8981\u7684\u529f\u80fd\u555f\u7528\u6216\u662f\u5b89\u88dd (\u4f8b\u5982\uff0c\u4e0d\u5fc5\u8981\u7684\u7aef\u53e3\uff0c\u670d\u52d9\uff0c\u9801\u9762\uff0c\u5e33\u865f\uff0c\u6216\u662f\u7279\u6b0a)\u3002 Default accounts and their passwords are still enabled and unchanged. \u9810\u8a2d\u5e33\u865f\u8207\u5bc6\u78bc\u9084\u53ef\u4f7f\u7528\uff0c\u4e26\u4e14\u672a\u66f4\u6539\u3002 Error handling reveals stack traces or other overly informative error messages to users. \u56e0\u932f\u8aa4\u8655\u7406\u800c\u66b4\u9732\u51fa\u7684\u5806\u758a\u8ffd\u8e64\uff0c\u6216\u662f\u5411\u4f7f\u7528\u8005\uff0c\u66b4\u9732\u51fa\u904e\u591a\u7684\u932f\u8aa4\u8b66\u544a\u8cc7\u8a0a For upgraded systems, the latest security features are disabled or not configured securely. \u56e0\u70ba\u7cfb\u7d71\u5347\u7d1a\uff0c\u5c0e\u81f4\u6700\u65b0\u7684\u5b89\u5168\u529f\u80fd\u88ab\u95dc\u9589\uff0c\u6216\u662f\u9020\u6210\u4e0d\u5b89\u5168\u7684\u8a2d\u5b9a The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. \u5728\u4f48\u7f72\u7a0b\u5f0f\u7684\u4f3a\u670d\u5668\uff0c\u7a0b\u5f0f\u6846\u67b6(\u4f8b\u5982Struts, Spring, ASP net\uff0c\u5404\u7a2e\u51fd\u793a\u5eab\uff0c\u8cc7\u6599\u5eab\u7b49\u3002\u4e26\u672a\u8a2d\u5b9a\u8a72\u6709\u7684\u5b89\u5168\u53c3\u6578\u3002 The server does not send security headers or directives, or they are not set to secure values. \u4f3a\u670d\u5668\u4e26\u672a\u50b3\u9001\u5b89\u5168\u7684\u6a19\u982d\u6216\u662f\u6307\u4ee4\uff0c\u6216\u672a\u88ab\u8a2d\u5b9a\u5b89\u5168\u53c3\u6578\u3002 The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components). \u8edf\u9ad4\u5df2\u7d93\u904e\u6642\u5df2\u6dd8\u6c70\uff0c\u6216\u8005\u5e36\u6709\u8106\u5f31\u6027 (\u8acb\u53c3\u7167 A06:2021-\u6613\u53d7\u653b\u64ca\u548c\u5df2\u6dd8\u6c70\u7684\u7d44\u4ef6 ) Without a concerted, repeatable application security configuration process, systems are at a higher risk. \u7576\u6c92\u6709\u4e00\u500b\u4e00\u81f4\u6027\uff0c\u53ef\u91cd\u8907\u7684\u7a0b\u5f0f\u5b89\u5168\u8a2d\u5b9a\u6d41\u7a0b\u6642\uff0c\u7cfb\u7d71\u5c07\u6703\u9762\u5c0d\u9ad8\u98a8\u96aa\u3002 \u5982\u4f55\u9810\u9632(How to Prevent) \u2693\ufe0e Secure installation processes should be implemented, including: \u5b89\u5168\u7684\u5b89\u88dd\u6b65\u9a5f\u6d41\u7a0b\uff0c\u61c9\u8a72\u88ab\u5be6\u969b\u4f48\u7f72\uff0c\u5305\u542b\u4ee5\u4e0b A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. \u4e00\u500b\u53ef\u91cd\u8907\u7684\u5b89\u5168\u5f37\u5316\u6d41\u7a0b\uff0c\u5fc5\u9700\u53ef\u9054\u5230\u5feb\u901f\u4e14\u7c21\u55ae\u7684\u4f48\u7f72\uff0c\u800c\u4e14\u80fd\u5728\u5206\u9694\u4e14\u5c01\u9396\u7684\u74b0\u5883\u4e0b\u57f7\u884c\u3002\u958b\u767c\uff0c\u54c1\u8cea\u7ba1\u7406\uff0c\u4ee5\u53ca\u5be6\u969b\u71df\u904b\u7684\u74b0\u5883\uff0c\u90fd\u9808\u6709\u4e00\u81f4\u76f8\u540c\u7684\u8a2d\u5b9a\uff0c\u4e26\u4e14\u4f7f\u7528\u4e0d\u540c\u7684\u8a8d\u8b49\u8cc7\u8a0a\u3002\u9019\u7a2e\u6b65\u9a5f\u9700\u8981\u76e1\u53ef\u80fd\u7684\u81ea\u52d5\u5316\uff0c\u964d\u4f4e\u9700\u8981\u5efa\u7acb\u5b89\u5168\u74b0\u5883\u6642\uff0c\u6240\u9700\u8981\u7684\u6295\u5165\u3002 A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. \u4e00\u500b\u6700\u7cbe\u7c21\u7684\u5e73\u53f0\uff0c\u4e0a\u9762\u4e0d\u6703\u642d\u914d\u4efb\u4f55\u4e0d\u9700\u8981\u7684\u529f\u80fd\uff0c\u5957\u4ef6\uff0c\u6a94\u6848\uff0c\u4ee5\u53ca\u7bc4\u672c\u3002\u79fb\u9664\u6216\u4e0d\u5b89\u88dd\u4efb\u4f55\uff0c\u4e0d\u9808\u4f7f\u7528\u7684\u529f\u80fd\u6216\u6846\u67b6\u3002 A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components). Review cloud storage permissions (e.g., S3 bucket permissions). \u5728\u8b8a\u66f4\u7ba1\u7406\u4e0b\uff0c\u9700\u6709\u7279\u5b9a\u7684\u4efb\u52d9\uff0c\u4f9d\u64da\u5b89\u5168\u544a\u77e5\uff0c\u76f8\u95dc\u66f4\u65b0\uff0c\u4f86\u57f7\u884c\u5b89\u5168\u5be9\u8996\u53ca\u66f4\u52d5(\u53ef\u53c3\u7167 A06:2021-\u6613\u53d7\u653b\u64ca\u548c\u5df2\u6dd8\u6c70\u7684\u7d44\u4ef6)\u3002\u5be9\u8996\u96f2\u7aef\u5132\u5b58\u7684\u6b0a\u9650(\u4f8b\u5982 S3 bucket\u7684\u6b0a\u9650) A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). \u4e00\u500b\u53ef\u5206\u5272\u7684\u7a0b\u5f0f\u67b6\u69cb\uff0c\u5c0d\u65bc\u5404\u5143\u4ef6\uff0c\u7528\u6236\uff0c\u53ef\u900f\u904e\u5206\u96e2\uff0c\u5bb9\u5668\u5316\uff0c\u96f2\u7aef\u5b89\u5168\u7fa4\u7d44\u8a2d\u5b9a(ACLs)\uff0c\u4f86\u9054\u5230\u5206\u5272\u7684\u6548\u679c\u3002\u63d0\u4f9b\u6709\u6548\u4e14\u5b89\u5168\u7684\u5206\u96e2\u3002 Sending security directives to clients, e.g., Security Headers. \u5bc4\u9001\u5b89\u5168\u6307\u4ee4\u7d66\u7528\u6236\u7aef\uff0c\u4f8b\u5982 \u5b89\u5168\u6a19\u982d\u3002 An automated process to verify the effectiveness of the configurations and settings in all environments. \u4e00\u500b\u81ea\u52d5\u5316\u7684\u6d41\u7a0b\uff0c\u53ef\u4ee5\u78ba\u8a8d\u74b0\u5883\u4e2d\u5404\u985e\u7684\u5b89\u5168\u8a2d\u5b9a\u3002 \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b(Example Attack Scenarios) \u2693\ufe0e Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. \u60c5\u5883 #1: \u71df\u904b\u7528\u7684\u7a0b\u5f0f\u4f3a\u670d\u5668\uff0c\u5e36\u6709\u9810\u8a2d\u7684\u6a23\u672c\u7a0b\u5f0f\uff0c\u4e26\u672a\u79fb\u9664\u3002\u9019\u500b\u6a23\u672c\u7a0b\u5f0f\u5e36\u6709\u5df2\u77e5\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u53ef\u88ab\u653b\u64ca\u8005\u5229\u7528\u5165\u4fb5\u4f3a\u670d\u5668\u3002\u4f8b\u5982\uff0c\u9810\u8a2d\u7684\u7a0b\u5f0f\u5e36\u6709\u7ba1\u7406\u8005\u4ecb\u9762\uff0c\u4e26\u4e14\u6709\u672a\u8b8a\u66f4\u7684\u5e33\u865f\uff0c\u653b\u64ca\u8005\u53ef\u4ee5\u900f\u904e\u9810\u8a2d\u7684\u5bc6\u78bc\u767b\u5165\uff0c\u4e26\u53d6\u5f97\u63a7\u5236\u6b0a\u3002 Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. \u60c5\u5883 #2: \u8cc7\u6599\u593e\u5217\u8868\u6307\u4ee4\u4e26\u672a\u5728\u4f3a\u670d\u5668\u4e0a\u95dc\u9589\u3002\u653b\u64ca\u8005\u53ef\u4ee5\u627e\u51fa\u4e26\u4e14\u4e0b\u8f09\uff0c\u5df2\u7de8\u8b6f\u904eJava\u6a94\u6848\uff0c\u4e26\u4e14\u900f\u904e\u53cd\u7de8\u8b6f\u8207\u9006\u5411\u5de5\u7a0b\u7b49\u624b\u6cd5\uff0c\u67e5\u770b\u539f\u59cb\u78bc\u3002\u518d\u56e0\u6b64\u627e\u51fa\u7a0b\u5f0f\u4e2d\uff0c\u56b4\u91cd\u7684\u5b58\u53d6\u63a7\u5236\u7f3a\u9677\u3002 Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. \u60c5\u5883 #3: \u7a0b\u5f0f\u4f3a\u670d\u5668\u7684\u8a2d\u5b9a\uff0c\u52fb\u8a31\u8f38\u51fa\u5e36\u6709\u8a73\u7d30\u5167\u5bb9\u7684\u932f\u8aa4\u8a0a\u606f\uff0c\u4f8b\u5982\u5806\u758a\u8ffd\u8e64\uff0c\u4f9b\u7528\u6236\u67e5\u770b\u3002\u9019\u6709\u53ef\u80fd\u5c0e\u81f4\u654f\u611f\u8a0a\u606f\u7684\u5916\u6d29\uff0c\u6216\u9593\u63a5\u900f\u9732\u51fa\uff0c\u4f7f\u7528\u4e2d\uff0c\u4e26\u5e36\u6709\u8106\u5f31\u6027\u7684\u5143\u4ef6\u7248\u672c\u3002 Scenario #4: A cloud service provider has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed. \u60c5\u5883 #4: \u4e00\u500b\u96f2\u7aef\u4f3a\u670d\u5668\uff0c\u63d0\u4f9b\u4e86\u9810\u8a2d\u6b0a\u9650\u5206\u4eab\uff0c\u7d66\u5176\u4ed6\u5728\u7db2\u969b\u7db2\u8def\u7684CSP\u7528\u6236\u3002\u9019\u5c07\u5c0e\u81f4\u96f2\u7aef\u5132\u5b58\u7684\u654f\u611f\u8cc7\u6599\u53ef\u4ee5\u88ab\u5b58\u53d6\u3002 References \u2693\ufe0e OWASP Testing Guide: Configuration Management OWASP \u6e2c\u8a66\u6307\u5357: \u8a2d\u5b9a\u7ba1\u7406 OWASP Testing Guide: Testing for Error Codes OWASP \u6e2c\u8a66\u6307\u5357: \u932f\u8aa4\u4ee3\u78bc\u6e2c\u8a66 Application Security Verification Standard V19 Configuration \u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u78ba\u8a8d\u6a19\u6e96 v19 \u8a2d\u5b9a\u7bc7 NIST Guide to General Server Hardening NIST \u6cdb\u7528\u4f3a\u670d\u5668\u5f37\u5316\u6307\u5357 CIS Security Configuration Guides/Benchmarks CIS \u5b89\u5168\u8a2d\u5b9a\u6307\u5357/\u57fa\u6e96 Amazon S3 Bucket Discovery and Enumeration Amazon S3 \u5132\u5b58\u8caf\u9ad4\u5075\u6e2c\u8207\u63a2\u7d22 \u5c0d\u61c9\u7684CWEs\u6e05\u55ae(List of Mapped CWEs) \u2693\ufe0e CWE-2 Configuration CWE-2 \u8a2d\u5b9a CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-11 ASP.NET \u932f\u8aa4\u8a2d\u5b9a:\u5275\u5efa\u9664\u932f\u4e8c\u9032\u5236\u6a94 CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-13 ASP.NET \u932f\u8aa4\u8a2d\u5b9a: \u8a2d\u5b9a\u6a94\u4e2d\u6240\u5b58\u7684\u5bc6\u78bc CWE-15 External Control of System or Configuration Setting CWE-15 \u7cfb\u7d71\u7684\u5916\u90e8\u63a7\u5236\u8207\u8a2d\u5b9a CWE-16 Configuration CWE-16 \u8a2d\u5b9a CWE-260 Password in Configuration File CWE-260 \u8a2d\u5b9a\u6a94\u4e2d\u6240\u5b58\u7684\u5bc6\u78bc CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-315 cookies\u4e2d\u7684\u660e\u6587\u5b58\u653e\u654f\u611f\u8cc7\u6599 CWE-520 .NET Misconfiguration: Use of Impersonation CWE-520 .NET \u932f\u8aa4\u8a2d\u5b9a: \u5192\u5145\u4f7f\u7528 CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-526 \u74b0\u5883\u7269\u4ef6\u6240\u6d29\u6f0f\u7684\u654f\u611f\u8cc7\u8a0a CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-537 Java\u904b\u884c\u74b0\u5883\u4e0b\uff0c\u932f\u8aa4\u8a0a\u606f\u5305\u542b\u654f\u611f\u8cc7\u8a0a CWE-541 Inclusion of Sensitive Information in an Include File CWE-541 \u5305\u5bb9\u6a94\u6848\u4e2d\uff0c\u5305\u542b\u654f\u611f\u8cc7\u8a0a CWE-547 Use of Hard-coded, Security-relevant Constants CWE-547 \u4f7f\u7528\u5beb\u6b7b\u7684\u5b89\u5168\u76f8\u95dc\u53c3\u6578 CWE-611 Improper Restriction of XML External Entity Reference CWE-611 \u4e0d\u5145\u8db3\u7684XML\u5916\u90e8\u5be6\u9ad4\u5f15\u7528\u9650\u5236 CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-614 HTTPS\u4e0b\uff0c\u654f\u611fCookies\u6c92\u6709\u4f7f\u7528\"\u5b89\u5168\"\u53c3\u6578\u8a2d\u5b9a CWE-756 Missing Custom Error Page CWE-756 \u907a\u6f0f\u5ba2\u5236\u7684\u932f\u8aa4\u9801\u9762 CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-776 DTDs\u4e2d\uff0c\u4e0d\u5145\u8db3\u7684\u905e\u8ff4\u7269\u4ef6\u5f15\u7528\u9650\u5236 (XML \u7269\u4ef6\u64f4\u5f35) CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-942 \u8de8\u7db2\u57df\u767d\u540d\u55ae\u7684\u904e\u5ea6\u6b0a\u9650 CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1004 \u654f\u611fCookie\u6c92\u6709\u4f7f\u7528'HttpOnly'\u53c3\u6578\u8a2d\u5b9a CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1032 OWASP 2017 \u524d\u5341\u5927 A6\u7fa4\u7d44 - \u5b89\u5168\u932f\u8aa4\u8a2d\u5b9a CWE-1174 ASP.NET Misconfiguration: Improper Model Validation CWE-1174 ASP.NET \u932f\u8aa4\u8a2d\u5b9a: \u4e0d\u5145\u8db3\u7684\u6a21\u7d44\u9a57\u8b49","title":"A05 \u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#a052021","text":"","title":"A05:2021 \u2013 \u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#factors","text":"\u53ef\u5c0d\u7167CWEs\u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f15\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs 20 19.84% 4.51% 89.58% 44.84% 8.12 6.56 208,387 789","title":"\u5f31\u9ede\u56e0\u7d20(Factors)"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#overview","text":"Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference . \u5f9e\u5148\u524d\u7248\u672c\u7684\u7b2c\u516d\u540d\u6392\u540d\uff0c\u5411\u4e0a\u8abf\u5347\uff0c90%\u7684\u7a0b\u5f0f\u90fd\u88ab\u6e2c\u8a66\u627e\u51fa\u5404\u985e\u7684\u8a2d\u5b9a\u7f3a\u9677\u3002\u96a8\u8457\u8d8a\u4f86\u8d8a\u591a\u7684\u53ef\u8a2d\u5b9a\u5f0f\u8edf\u9ad4\u6578\u91cf\u589e\u52a0\uff0c\u770b\u5230\u6b64\u985e\u5225\u7684\u6392\u540d\u4e0a\u5347\uff0c\u4e26\u4e0d\u662f\u4ef6\u610f\u5916\u7684\u4e8b\u3002\u660e\u986f\u76f8\u5c0d\u61c9\u7684CWEs\u5305\u542b\u4e86 CWE16 \u8a2d\u5b9a \u4ee5\u53ca CWE-611 \u4e0d\u5145\u8db3\u7684XML\u5916\u90e8\u5be6\u9ad4\u5f15\u7528\u9650\u5236","title":"\u5f31\u9ede\u7c21\u4ecb(Overview)"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#description","text":"The application might be vulnerable if the application is: \u5982\u679c\u7a0b\u5f0f\u5305\u542b\u4e86\u4ee5\u4e0b\u5e7e\u500b\u56e0\u7d20\uff0c\u5247\u53ef\u80fd\u6709\u6613\u53d7\u653b\u64ca\u7684\u8106\u5f31\u6027\u3002 Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. \u5728\u7a0b\u5f0f\u5404\u5806\u758a\u5c64\u9762\uff0c\u7f3a\u5c11\u9069\u5207\u7684\u5b89\u5168\u5f37\u5316\uff0c\u6216\u662f\u65bc\u96f2\u7aef\u670d\u52d9\u4e0a\u6709\u8457\u4e0d\u7576\u7684\u6b0a\u9650\u8a2d\u5b9a\u3002 Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). \u4e0d\u5fc5\u8981\u7684\u529f\u80fd\u555f\u7528\u6216\u662f\u5b89\u88dd (\u4f8b\u5982\uff0c\u4e0d\u5fc5\u8981\u7684\u7aef\u53e3\uff0c\u670d\u52d9\uff0c\u9801\u9762\uff0c\u5e33\u865f\uff0c\u6216\u662f\u7279\u6b0a)\u3002 Default accounts and their passwords are still enabled and unchanged. \u9810\u8a2d\u5e33\u865f\u8207\u5bc6\u78bc\u9084\u53ef\u4f7f\u7528\uff0c\u4e26\u4e14\u672a\u66f4\u6539\u3002 Error handling reveals stack traces or other overly informative error messages to users. \u56e0\u932f\u8aa4\u8655\u7406\u800c\u66b4\u9732\u51fa\u7684\u5806\u758a\u8ffd\u8e64\uff0c\u6216\u662f\u5411\u4f7f\u7528\u8005\uff0c\u66b4\u9732\u51fa\u904e\u591a\u7684\u932f\u8aa4\u8b66\u544a\u8cc7\u8a0a For upgraded systems, the latest security features are disabled or not configured securely. \u56e0\u70ba\u7cfb\u7d71\u5347\u7d1a\uff0c\u5c0e\u81f4\u6700\u65b0\u7684\u5b89\u5168\u529f\u80fd\u88ab\u95dc\u9589\uff0c\u6216\u662f\u9020\u6210\u4e0d\u5b89\u5168\u7684\u8a2d\u5b9a The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. \u5728\u4f48\u7f72\u7a0b\u5f0f\u7684\u4f3a\u670d\u5668\uff0c\u7a0b\u5f0f\u6846\u67b6(\u4f8b\u5982Struts, Spring, ASP net\uff0c\u5404\u7a2e\u51fd\u793a\u5eab\uff0c\u8cc7\u6599\u5eab\u7b49\u3002\u4e26\u672a\u8a2d\u5b9a\u8a72\u6709\u7684\u5b89\u5168\u53c3\u6578\u3002 The server does not send security headers or directives, or they are not set to secure values. \u4f3a\u670d\u5668\u4e26\u672a\u50b3\u9001\u5b89\u5168\u7684\u6a19\u982d\u6216\u662f\u6307\u4ee4\uff0c\u6216\u672a\u88ab\u8a2d\u5b9a\u5b89\u5168\u53c3\u6578\u3002 The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components). \u8edf\u9ad4\u5df2\u7d93\u904e\u6642\u5df2\u6dd8\u6c70\uff0c\u6216\u8005\u5e36\u6709\u8106\u5f31\u6027 (\u8acb\u53c3\u7167 A06:2021-\u6613\u53d7\u653b\u64ca\u548c\u5df2\u6dd8\u6c70\u7684\u7d44\u4ef6 ) Without a concerted, repeatable application security configuration process, systems are at a higher risk. \u7576\u6c92\u6709\u4e00\u500b\u4e00\u81f4\u6027\uff0c\u53ef\u91cd\u8907\u7684\u7a0b\u5f0f\u5b89\u5168\u8a2d\u5b9a\u6d41\u7a0b\u6642\uff0c\u7cfb\u7d71\u5c07\u6703\u9762\u5c0d\u9ad8\u98a8\u96aa\u3002","title":"\u5f31\u9ede\u63cf\u8ff0(Description)"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#how-to-prevent","text":"Secure installation processes should be implemented, including: \u5b89\u5168\u7684\u5b89\u88dd\u6b65\u9a5f\u6d41\u7a0b\uff0c\u61c9\u8a72\u88ab\u5be6\u969b\u4f48\u7f72\uff0c\u5305\u542b\u4ee5\u4e0b A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment. \u4e00\u500b\u53ef\u91cd\u8907\u7684\u5b89\u5168\u5f37\u5316\u6d41\u7a0b\uff0c\u5fc5\u9700\u53ef\u9054\u5230\u5feb\u901f\u4e14\u7c21\u55ae\u7684\u4f48\u7f72\uff0c\u800c\u4e14\u80fd\u5728\u5206\u9694\u4e14\u5c01\u9396\u7684\u74b0\u5883\u4e0b\u57f7\u884c\u3002\u958b\u767c\uff0c\u54c1\u8cea\u7ba1\u7406\uff0c\u4ee5\u53ca\u5be6\u969b\u71df\u904b\u7684\u74b0\u5883\uff0c\u90fd\u9808\u6709\u4e00\u81f4\u76f8\u540c\u7684\u8a2d\u5b9a\uff0c\u4e26\u4e14\u4f7f\u7528\u4e0d\u540c\u7684\u8a8d\u8b49\u8cc7\u8a0a\u3002\u9019\u7a2e\u6b65\u9a5f\u9700\u8981\u76e1\u53ef\u80fd\u7684\u81ea\u52d5\u5316\uff0c\u964d\u4f4e\u9700\u8981\u5efa\u7acb\u5b89\u5168\u74b0\u5883\u6642\uff0c\u6240\u9700\u8981\u7684\u6295\u5165\u3002 A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks. \u4e00\u500b\u6700\u7cbe\u7c21\u7684\u5e73\u53f0\uff0c\u4e0a\u9762\u4e0d\u6703\u642d\u914d\u4efb\u4f55\u4e0d\u9700\u8981\u7684\u529f\u80fd\uff0c\u5957\u4ef6\uff0c\u6a94\u6848\uff0c\u4ee5\u53ca\u7bc4\u672c\u3002\u79fb\u9664\u6216\u4e0d\u5b89\u88dd\u4efb\u4f55\uff0c\u4e0d\u9808\u4f7f\u7528\u7684\u529f\u80fd\u6216\u6846\u67b6\u3002 A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components). Review cloud storage permissions (e.g., S3 bucket permissions). \u5728\u8b8a\u66f4\u7ba1\u7406\u4e0b\uff0c\u9700\u6709\u7279\u5b9a\u7684\u4efb\u52d9\uff0c\u4f9d\u64da\u5b89\u5168\u544a\u77e5\uff0c\u76f8\u95dc\u66f4\u65b0\uff0c\u4f86\u57f7\u884c\u5b89\u5168\u5be9\u8996\u53ca\u66f4\u52d5(\u53ef\u53c3\u7167 A06:2021-\u6613\u53d7\u653b\u64ca\u548c\u5df2\u6dd8\u6c70\u7684\u7d44\u4ef6)\u3002\u5be9\u8996\u96f2\u7aef\u5132\u5b58\u7684\u6b0a\u9650(\u4f8b\u5982 S3 bucket\u7684\u6b0a\u9650) A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs). \u4e00\u500b\u53ef\u5206\u5272\u7684\u7a0b\u5f0f\u67b6\u69cb\uff0c\u5c0d\u65bc\u5404\u5143\u4ef6\uff0c\u7528\u6236\uff0c\u53ef\u900f\u904e\u5206\u96e2\uff0c\u5bb9\u5668\u5316\uff0c\u96f2\u7aef\u5b89\u5168\u7fa4\u7d44\u8a2d\u5b9a(ACLs)\uff0c\u4f86\u9054\u5230\u5206\u5272\u7684\u6548\u679c\u3002\u63d0\u4f9b\u6709\u6548\u4e14\u5b89\u5168\u7684\u5206\u96e2\u3002 Sending security directives to clients, e.g., Security Headers. \u5bc4\u9001\u5b89\u5168\u6307\u4ee4\u7d66\u7528\u6236\u7aef\uff0c\u4f8b\u5982 \u5b89\u5168\u6a19\u982d\u3002 An automated process to verify the effectiveness of the configurations and settings in all environments. \u4e00\u500b\u81ea\u52d5\u5316\u7684\u6d41\u7a0b\uff0c\u53ef\u4ee5\u78ba\u8a8d\u74b0\u5883\u4e2d\u5404\u985e\u7684\u5b89\u5168\u8a2d\u5b9a\u3002","title":"\u5982\u4f55\u9810\u9632(How to Prevent)"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#example-attack-scenarios","text":"Scenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over. \u60c5\u5883 #1: \u71df\u904b\u7528\u7684\u7a0b\u5f0f\u4f3a\u670d\u5668\uff0c\u5e36\u6709\u9810\u8a2d\u7684\u6a23\u672c\u7a0b\u5f0f\uff0c\u4e26\u672a\u79fb\u9664\u3002\u9019\u500b\u6a23\u672c\u7a0b\u5f0f\u5e36\u6709\u5df2\u77e5\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u53ef\u88ab\u653b\u64ca\u8005\u5229\u7528\u5165\u4fb5\u4f3a\u670d\u5668\u3002\u4f8b\u5982\uff0c\u9810\u8a2d\u7684\u7a0b\u5f0f\u5e36\u6709\u7ba1\u7406\u8005\u4ecb\u9762\uff0c\u4e26\u4e14\u6709\u672a\u8b8a\u66f4\u7684\u5e33\u865f\uff0c\u653b\u64ca\u8005\u53ef\u4ee5\u900f\u904e\u9810\u8a2d\u7684\u5bc6\u78bc\u767b\u5165\uff0c\u4e26\u53d6\u5f97\u63a7\u5236\u6b0a\u3002 Scenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application. \u60c5\u5883 #2: \u8cc7\u6599\u593e\u5217\u8868\u6307\u4ee4\u4e26\u672a\u5728\u4f3a\u670d\u5668\u4e0a\u95dc\u9589\u3002\u653b\u64ca\u8005\u53ef\u4ee5\u627e\u51fa\u4e26\u4e14\u4e0b\u8f09\uff0c\u5df2\u7de8\u8b6f\u904eJava\u6a94\u6848\uff0c\u4e26\u4e14\u900f\u904e\u53cd\u7de8\u8b6f\u8207\u9006\u5411\u5de5\u7a0b\u7b49\u624b\u6cd5\uff0c\u67e5\u770b\u539f\u59cb\u78bc\u3002\u518d\u56e0\u6b64\u627e\u51fa\u7a0b\u5f0f\u4e2d\uff0c\u56b4\u91cd\u7684\u5b58\u53d6\u63a7\u5236\u7f3a\u9677\u3002 Scenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable. \u60c5\u5883 #3: \u7a0b\u5f0f\u4f3a\u670d\u5668\u7684\u8a2d\u5b9a\uff0c\u52fb\u8a31\u8f38\u51fa\u5e36\u6709\u8a73\u7d30\u5167\u5bb9\u7684\u932f\u8aa4\u8a0a\u606f\uff0c\u4f8b\u5982\u5806\u758a\u8ffd\u8e64\uff0c\u4f9b\u7528\u6236\u67e5\u770b\u3002\u9019\u6709\u53ef\u80fd\u5c0e\u81f4\u654f\u611f\u8a0a\u606f\u7684\u5916\u6d29\uff0c\u6216\u9593\u63a5\u900f\u9732\u51fa\uff0c\u4f7f\u7528\u4e2d\uff0c\u4e26\u5e36\u6709\u8106\u5f31\u6027\u7684\u5143\u4ef6\u7248\u672c\u3002 Scenario #4: A cloud service provider has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed. \u60c5\u5883 #4: \u4e00\u500b\u96f2\u7aef\u4f3a\u670d\u5668\uff0c\u63d0\u4f9b\u4e86\u9810\u8a2d\u6b0a\u9650\u5206\u4eab\uff0c\u7d66\u5176\u4ed6\u5728\u7db2\u969b\u7db2\u8def\u7684CSP\u7528\u6236\u3002\u9019\u5c07\u5c0e\u81f4\u96f2\u7aef\u5132\u5b58\u7684\u654f\u611f\u8cc7\u6599\u53ef\u4ee5\u88ab\u5b58\u53d6\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b(Example Attack Scenarios)"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#references","text":"OWASP Testing Guide: Configuration Management OWASP \u6e2c\u8a66\u6307\u5357: \u8a2d\u5b9a\u7ba1\u7406 OWASP Testing Guide: Testing for Error Codes OWASP \u6e2c\u8a66\u6307\u5357: \u932f\u8aa4\u4ee3\u78bc\u6e2c\u8a66 Application Security Verification Standard V19 Configuration \u61c9\u7528\u7a0b\u5f0f\u5b89\u5168\u78ba\u8a8d\u6a19\u6e96 v19 \u8a2d\u5b9a\u7bc7 NIST Guide to General Server Hardening NIST \u6cdb\u7528\u4f3a\u670d\u5668\u5f37\u5316\u6307\u5357 CIS Security Configuration Guides/Benchmarks CIS \u5b89\u5168\u8a2d\u5b9a\u6307\u5357/\u57fa\u6e96 Amazon S3 Bucket Discovery and Enumeration Amazon S3 \u5132\u5b58\u8caf\u9ad4\u5075\u6e2c\u8207\u63a2\u7d22","title":"References"},{"location":"zh_TW/A05_2021-Security_Misconfiguration/#cweslist-of-mapped-cwes","text":"CWE-2 Configuration CWE-2 \u8a2d\u5b9a CWE-11 ASP.NET Misconfiguration: Creating Debug Binary CWE-11 ASP.NET \u932f\u8aa4\u8a2d\u5b9a:\u5275\u5efa\u9664\u932f\u4e8c\u9032\u5236\u6a94 CWE-13 ASP.NET Misconfiguration: Password in Configuration File CWE-13 ASP.NET \u932f\u8aa4\u8a2d\u5b9a: \u8a2d\u5b9a\u6a94\u4e2d\u6240\u5b58\u7684\u5bc6\u78bc CWE-15 External Control of System or Configuration Setting CWE-15 \u7cfb\u7d71\u7684\u5916\u90e8\u63a7\u5236\u8207\u8a2d\u5b9a CWE-16 Configuration CWE-16 \u8a2d\u5b9a CWE-260 Password in Configuration File CWE-260 \u8a2d\u5b9a\u6a94\u4e2d\u6240\u5b58\u7684\u5bc6\u78bc CWE-315 Cleartext Storage of Sensitive Information in a Cookie CWE-315 cookies\u4e2d\u7684\u660e\u6587\u5b58\u653e\u654f\u611f\u8cc7\u6599 CWE-520 .NET Misconfiguration: Use of Impersonation CWE-520 .NET \u932f\u8aa4\u8a2d\u5b9a: \u5192\u5145\u4f7f\u7528 CWE-526 Exposure of Sensitive Information Through Environmental Variables CWE-526 \u74b0\u5883\u7269\u4ef6\u6240\u6d29\u6f0f\u7684\u654f\u611f\u8cc7\u8a0a CWE-537 Java Runtime Error Message Containing Sensitive Information CWE-537 Java\u904b\u884c\u74b0\u5883\u4e0b\uff0c\u932f\u8aa4\u8a0a\u606f\u5305\u542b\u654f\u611f\u8cc7\u8a0a CWE-541 Inclusion of Sensitive Information in an Include File CWE-541 \u5305\u5bb9\u6a94\u6848\u4e2d\uff0c\u5305\u542b\u654f\u611f\u8cc7\u8a0a CWE-547 Use of Hard-coded, Security-relevant Constants CWE-547 \u4f7f\u7528\u5beb\u6b7b\u7684\u5b89\u5168\u76f8\u95dc\u53c3\u6578 CWE-611 Improper Restriction of XML External Entity Reference CWE-611 \u4e0d\u5145\u8db3\u7684XML\u5916\u90e8\u5be6\u9ad4\u5f15\u7528\u9650\u5236 CWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute CWE-614 HTTPS\u4e0b\uff0c\u654f\u611fCookies\u6c92\u6709\u4f7f\u7528\"\u5b89\u5168\"\u53c3\u6578\u8a2d\u5b9a CWE-756 Missing Custom Error Page CWE-756 \u907a\u6f0f\u5ba2\u5236\u7684\u932f\u8aa4\u9801\u9762 CWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') CWE-776 DTDs\u4e2d\uff0c\u4e0d\u5145\u8db3\u7684\u905e\u8ff4\u7269\u4ef6\u5f15\u7528\u9650\u5236 (XML \u7269\u4ef6\u64f4\u5f35) CWE-942 Permissive Cross-domain Policy with Untrusted Domains CWE-942 \u8de8\u7db2\u57df\u767d\u540d\u55ae\u7684\u904e\u5ea6\u6b0a\u9650 CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag CWE-1004 \u654f\u611fCookie\u6c92\u6709\u4f7f\u7528'HttpOnly'\u53c3\u6578\u8a2d\u5b9a CWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration CWE-1032 OWASP 2017 \u524d\u5341\u5927 A6\u7fa4\u7d44 - \u5b89\u5168\u932f\u8aa4\u8a2d\u5b9a CWE-1174 ASP.NET Misconfiguration: Improper Model Validation CWE-1174 ASP.NET \u932f\u8aa4\u8a2d\u5b9a: \u4e0d\u5145\u8db3\u7684\u6a21\u7d44\u9a57\u8b49","title":"\u5c0d\u61c9\u7684CWEs\u6e05\u55ae(List of Mapped CWEs)"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/","text":"A06:2021 \u2013 \u6613\u53d7\u653b\u64ca\u548c\u5df2\u6dd8\u6c70\u7684\u7d44\u4ef6(Vulnerable and Outdated Components) \u2693\ufe0e \u5f31\u9ede\u56e0\u7d20(Factors) \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0 \u5f31\u9ede\u7c21\u4ecb \u2693\ufe0e \u6b64\u5f31\u9ede\u5728\u7522\u696d\u8abf\u67e5\u4e2d\u6392\u540d\u7b2c\u4e8c\uff0c\u4f46\u6709\u8db3\u5920\u7684\u8cc7\u6599\u8b93\u5b83\u9032\u5165\u524d\u5341\u3002 \u6613\u53d7\u653b\u64ca\u7684\u7d44\u4ef6\u662f\u6211\u5011\u52aa\u529b\u6e2c\u8a66\u548c\u8a55\u4f30\u98a8\u96aa\u7684\u5df2\u77e5\u554f\u984c\uff0c\u8a72\u5f31\u9ede\u662f\u5728 CWEs \u4e2d\u552f\u4e00\u6c92\u6709\u4efb\u4f55 CVE \u5c0d\u61c9\u7684\u985e\u5225\uff0c\u56e0\u6b64\u4f7f\u7528\u9810\u8a2d\u7684 5.0 \u6f0f\u6d1e\u5229\u7528/\u5f71\u97ff\u6b0a\u91cd\u3002 \u77e5\u540d\u7684 CWEs\u5305\u62ec\uff1a *CWE-1104\uff1a\u4f7f\u7528\u672a\u7dad\u8b77\u7684\u7b2c\u4e09\u65b9\u7d44\u4ef6 \u4ee5\u53ca\u5169\u500b 2013 \u5e74\u5ea6\u30012017 \u5e74\u5ea6 \u524d 10 \u540d\u7684 CWEs\u3002 \u5f31\u9ede\u63cf\u8ff0 \u2693\ufe0e \u60a8\u53ef\u80fd\u5bb9\u6613\u53d7\u5230\u653b\u64ca\uff1a \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u60a8\u4f7f\u7528\u7684\u6240\u6709\u7d44\u4ef6\u7684\u7248\u672c\uff08\u7528\u6236\u7aef\u548c\u4f3a\u670d\u5668\u7aef\uff09\u3002 \u9019\u5305\u62ec\u60a8\u76f4\u63a5\u4f7f\u7528\u7684\u7d44\u4ef6\u4ee5\u53ca\u5d4c\u5165\u7684\u76f8\u4f9d\u5957\u4ef6(nested dependencies)\u3002 \u5982\u679c\u8edf\u9ad4\u5bb9\u6613\u53d7\u5230\u653b\u64ca\u3001\u5df2\u4e0d\u652f\u63f4\u6216\u5df2\u6dd8\u6c70\u3002 \u5305\u62ec\u4f5c\u696d\u7cfb\u7d71\u3001\u7db2\u9801/\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u3001\u8cc7\u6599\u5eab\u7ba1\u7406\u7cfb\u7d71 (DBMS)\u3001\u61c9\u7528\u7a0b\u5f0f\u3001 API \u4ee5\u53ca\u6240\u6709\u7d44\u4ef6\u3001\u57f7\u884c\u74b0\u5883\u548c\u7a0b\u5f0f\u5eab(libraries)\u3002 \u5982\u679c\u60a8\u6c92\u6709\u5b9a\u671f\u57f7\u884c\u5f31\u9ede\u6383\u7784\u4e26\u8a02\u95b1\u8207\u60a8\u4f7f\u7528\u7d44\u4ef6\u76f8\u95dc\u7684\u8cc7\u5b89\u901a\u5831\u3002 \u5982\u679c\u60a8\u672a\u6191\u85c9\u57fa\u65bc\u98a8\u96aa\u7684\u65b9\u5f0f\u53ca\u6642\u4fee\u88dc\u6216\u5347\u7d1a\u5e95\u5c64\u5e73\u53f0\u3001\u6846\u67b6\u548c\u76f8\u4f9d\u5957\u4ef6\u3002 \u9019\u901a\u5e38\u767c\u751f\u5728\u4fee\u88dc\u5de5\u4f5c\u662f\u8b8a\u66f4\u63a7\u5236\u4e0b\u7684\u6bcf\u6708\u6216\u6bcf\u5b63\u5ea6\u4efb\u52d9\u7684\u74b0\u5883\u4e2d\uff0c\u6703\u4f7f\u7d44\u7e54\u6578\u5929\u751a\u81f3\u6578\u6708\u4e0d\u5fc5\u8981\u5730\u66b4\u9732\u65bc\u53ef\u4fee\u88dc\u7684\u6f0f\u6d1e\u98a8\u96aa\u3002 \u5982\u679c\u8edf\u9ad4\u958b\u767c\u4eba\u54e1\u672a\u6e2c\u8a66\u66f4\u65b0\u3001\u5347\u7d1a\u6216\u4fee\u88dc\u5f8c\u7a0b\u5f0f\u5eab\u7684\u76f8\u5bb9\u6027\u3002 \u5982\u679c\u4f60\u672a\u4fdd\u8b77\u7d44\u4ef6\u7684\u8a2d\u5b9a\u6a94\u6848\u3002\uff08\u8acb\u53c3\u95b1 A05:2021 - \u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677 Security Misconfiguration\uff09\u3002 \u5982\u4f55\u9810\u9632(How to Prevent) \u2693\ufe0e \u61c9\u8a72\u8a2d\u7f6e\u4fee\u88dc\u7a0b\u5f0f\u7ba1\u7406\u6d41\u7a0b\u4f86\uff1a \u522a\u9664\u672a\u4f7f\u7528\u7684\u76f8\u4f9d\u5957\u4ef6\u3001\u4e0d\u5fc5\u8981\u7684\u529f\u80fd\u3001\u7d44\u4ef6\u3001\u6a94\u6848\u53ca\u6587\u4ef6\u3002 \u6301\u7e8c\u4f7f\u7528\u7248\u63a7\u5de5\u5177\u4f86\u76e4\u9ede\u5ba2\u6236\u7aef\u548c\u4f3a\u670d\u5668\u7aef\u7d44\u4ef6\uff08\u4f8b\u5982\u6846\u67b6\u3001\u7a0b\u5f0f\u5eab\uff09\u53ca\u76f8\u4f9d\u7d44\u4ef6\u7684\u7248\u672c\uff0c\u5982\u7248\u63a7\u5de5\u5177\u3001OWASP Dependency Check\u3001retire.js \u7b49\u3002 \u6301\u7e8c\u76e3\u63a7 CVE \u548c NVD \u7b49\u7b49\u4f86\u6e90\u4f86\u78ba\u8a8d\u662f\u7d44\u4ef6\u662f\u5426\u5b58\u5728\u7684\u6f0f\u6d1e\u3002\u4f7f\u7528\u8edf\u9ad4\u7d44\u5408\u5206\u6790\u5de5\u5177\u4f86\u81ea\u52d5\u5316\u8a72\u6d41\u7a0b\u3002 \u8a02\u95b1\u60a8\u4f7f\u7528\u7684\u7d44\u4ef6\u76f8\u95dc\u7684\u5b89\u5168\u6f0f\u6d1e\u7684\u8cc7\u5b89\u901a\u5831\u3002 \u6301\u7e8c\u76e4\u9ede\u5ba2\u6236\u7aef\u548c\u4f3a\u670d\u5668\u7aef\u7d44\u4ef6\uff08\u4f8b\u5982\u6846\u67b6\u3001\u7a0b\u5f0f\u5eab\uff09\u53ca\u76f8\u4f9d\u7d44\u4ef6\u7684\u7248\u672c\uff0c\u5982\u7248\u63a7\u5de5\u5177\u3001OWASP Dependency Check\u3001retire.js \u7b49\u3002 \u6301\u7e8c\u76e3\u63a7 CVE \u548c NVD \u7b49\u7b49\u4f86\u6e90\u4f86\u78ba\u8a8d\u662f\u7d44\u4ef6\u662f\u5426\u5b58\u5728\u7684\u6f0f\u6d1e\u3002 \u4f7f\u7528\u8edf\u9ad4\u7d44\u5408\u5206\u6790\u5de5\u5177\u4f86\u81ea\u52d5\u5316\u8a72\u6d41\u7a0b\u3002 \u8a02\u95b1\u60a8\u4f7f\u7528\u7684\u7d44\u4ef6\u76f8\u95dc\u7684\u5b89\u5168\u6f0f\u6d1e\u7684\u8cc7\u5b89\u901a\u5831\u3002 \u4f7f\u7528\u8af8\u5982\u7248\u63a7\u5de5\u5177\u3001OWASP Dependency Check\u3001retire.js \u7b49\u5de5\u5177\u6301\u7e8c\u76e4\u9ede\u5ba2\u6236\u7aef\u548c\u670d\u52d9\u5668\u7aef\u7d44\u4ef6\uff08\u4f8b\u5982\u6846\u67b6\u3001\u7a0b\u5f0f\u5eab\uff09\u53ca\u5176\u76f8\u4f9d\u7d44\u4ef6\u7684\u7248\u672c\u3002 \u50c5\u900f\u904e\u5b98\u65b9\u63d0\u4f9b\u7684\u5b89\u5168\u9023\u7d50\u4f86\u53d6\u5f97\u7d44\u4ef6\u3002 \u512a\u5148\u9078\u64c7\u5df2\u7c3d\u7f72\u7684\u66f4\u65b0\u5305\uff0c\u4ee5\u964d\u4f4e\u66f4\u65b0\u5305\u88ab\u52a0\u5165\u60e1\u610f\u7d44\u4ef6\u7684\u53ef\u80fd\u3002\uff08\u8acb\u53c3\u95b1 A08:2021-\u8edf\u9ad4\u53ca\u8cc7\u6599\u5b8c\u6574\u6027\u5931\u6548\uff09\u3002 \u76e3\u63a7\u672a\u7dad\u8b77\u6216\u672a\u70ba\u820a\u7248\u672c\u5275\u5efa\u5b89\u5168\u4fee\u88dc\u7a0b\u5f0f\u7684\u7a0b\u5f0f\u5eab\u548c\u7d44\u4ef6\u3002 \u5982\u679c\u7121\u6cd5\u4fee\u88dc\u7a0b\u5f0f\uff0c\u8acb\u8003\u616e\u90e8\u7f72\u865b\u64ec\u4fee\u88dc\u7a0b\u5f0f\u4f86\u76e3\u63a7\u3001\u6aa2\u6e2c\u6216\u9632\u79a6\u5df2\u767c\u73fe\u7684\u7279\u5b9a\u5f31\u9ede\u3002 \u6bcf\u500b\u7d44\u7e54\u90fd\u5fc5\u9808\u78ba\u4fdd\u5728\u61c9\u7528\u7a0b\u5f0f\u6216\u958b\u767c\u5c08\u6848(portfolio)\u7684\u751f\u547d\u9031\u671f\u5167\u5236\u8a02\u6301\u7e8c\u76e3\u63a7\u3001\u9452\u5225\u5206\u985e(triaging) \u53ca \u7533\u8acb\u66f4\u65b0 \u6216\u662f \u66f4\u6539\u914d\u7f6e\u7684\u8a08\u5283\u3002 \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b(Example Attack Scenarios) \u2693\ufe0e \u60c5\u5883 #1\uff1a \u7d44\u4ef6\u901a\u5e38\u4ee5\u8207\u61c9\u7528\u7a0b\u5f0f\u672c\u8eab\u76f8\u540c\u7684\u6b0a\u9650\u904b\u884c\uff0c\u56e0\u6b64\u4efb\u4f55\u7d44\u4ef6\u4e2d\u7684\u7f3a\u9677\u90fd\u53ef\u80fd\u5c0e\u81f4\u56b4\u91cd\u7684\u5f71\u97ff\u3002 \u6b64\u985e\u7f3a\u9677\u53ef\u80fd\u662f\u5076\u7136\u7684\uff08\u4f8b\u5982\uff0c\u7de8\u78bc\u932f\u8aa4\uff09\u6216\u6709\u610f\u7684\uff08\u4f8b\u5982\uff0c\u7d44\u4ef6\u4e2d\u7684\u5f8c\u9580\uff09\u3002 \u4e00\u4e9b\u5df2\u77e5\u6613\u53d7\u653b\u64ca\u7d44\u4ef6\u7684\u7bc4\u4f8b\u70ba\uff1a CVE-2017-5638\uff1a\u4e00\u500b Struts 2 \u9060\u7aef\u7a0b\u5f0f\u78bc\u57f7\u884c\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5728\u4f3a\u670d\u5668\u4e0a\u57f7\u884c\u4efb\u610f\u4ee3\u78bc\uff0c\u5df2\u88ab\u6b78\u548e\u65bc\u91cd\u5927\u6f0f\u6d1e\u3002 \u96d6\u7136\u7269\u806f\u7db2 (IoT) \u8a2d\u5099\u901a\u5e38\u5f88\u96e3\u6216\u7121\u6cd5\u4fee\u88dc\uff0c\u4f46\u4fee\u88dc\u5b83\u5011\u53ef\u80fd\u6709\u5f88\u9ad8\u7684\u91cd\u8981\u6027\u3002\uff08\u4f8b\u5982\uff0c\u751f\u7269\u91ab\u5b78\u8a2d\u5099\uff09\u3002 \u6709\u4e00\u4e9b\u81ea\u52d5\u5316\u5de5\u5177\u53ef\u4ee5\u5e6b\u52a9\u653b\u64ca\u8005\u627e\u5230\u672a\u4fee\u88dc\u6216\u914d\u7f6e\u932f\u8aa4\u7684\u7cfb\u7d71\u3002 \u4f8b\u5982\uff0cShodan IoT \u641c\u7d22\u5f15\u64ce\u53ef\u4ee5\u5e6b\u52a9\u60a8\u627e\u5230\u5b58\u5728 2014 \u5e74 4 \u6708\u672a\u4fee\u88dc Heartbleed \u6f0f\u6d1e\u7684\u8a2d\u5099\u3002 \u53c3\u8003\u6587\u737b(References) \u2693\ufe0e OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries - MITRE Common Vulnerabilities and Exposures (CVE) search \u2693\ufe0e National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf \u5c0d\u61c9\u7684 CWEs \u6e05\u55ae(List of Mapped CWEs) \u2693\ufe0e CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"A06 \u5371\u96aa\u6216\u904e\u820a\u7684\u5143\u4ef6"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#a062021-vulnerable-and-outdated-components","text":"","title":"A06:2021 \u2013 \u6613\u53d7\u653b\u64ca\u548c\u5df2\u6dd8\u6c70\u7684\u7d44\u4ef6(Vulnerable and Outdated Components)"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#factors","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 3 27.96% 8.77% 51.78% 22.47% 5.00 5.00 30,457 0","title":"\u5f31\u9ede\u56e0\u7d20(Factors)"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#_1","text":"\u6b64\u5f31\u9ede\u5728\u7522\u696d\u8abf\u67e5\u4e2d\u6392\u540d\u7b2c\u4e8c\uff0c\u4f46\u6709\u8db3\u5920\u7684\u8cc7\u6599\u8b93\u5b83\u9032\u5165\u524d\u5341\u3002 \u6613\u53d7\u653b\u64ca\u7684\u7d44\u4ef6\u662f\u6211\u5011\u52aa\u529b\u6e2c\u8a66\u548c\u8a55\u4f30\u98a8\u96aa\u7684\u5df2\u77e5\u554f\u984c\uff0c\u8a72\u5f31\u9ede\u662f\u5728 CWEs \u4e2d\u552f\u4e00\u6c92\u6709\u4efb\u4f55 CVE \u5c0d\u61c9\u7684\u985e\u5225\uff0c\u56e0\u6b64\u4f7f\u7528\u9810\u8a2d\u7684 5.0 \u6f0f\u6d1e\u5229\u7528/\u5f71\u97ff\u6b0a\u91cd\u3002 \u77e5\u540d\u7684 CWEs\u5305\u62ec\uff1a *CWE-1104\uff1a\u4f7f\u7528\u672a\u7dad\u8b77\u7684\u7b2c\u4e09\u65b9\u7d44\u4ef6 \u4ee5\u53ca\u5169\u500b 2013 \u5e74\u5ea6\u30012017 \u5e74\u5ea6 \u524d 10 \u540d\u7684 CWEs\u3002","title":"\u5f31\u9ede\u7c21\u4ecb"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#_2","text":"\u60a8\u53ef\u80fd\u5bb9\u6613\u53d7\u5230\u653b\u64ca\uff1a \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u60a8\u4f7f\u7528\u7684\u6240\u6709\u7d44\u4ef6\u7684\u7248\u672c\uff08\u7528\u6236\u7aef\u548c\u4f3a\u670d\u5668\u7aef\uff09\u3002 \u9019\u5305\u62ec\u60a8\u76f4\u63a5\u4f7f\u7528\u7684\u7d44\u4ef6\u4ee5\u53ca\u5d4c\u5165\u7684\u76f8\u4f9d\u5957\u4ef6(nested dependencies)\u3002 \u5982\u679c\u8edf\u9ad4\u5bb9\u6613\u53d7\u5230\u653b\u64ca\u3001\u5df2\u4e0d\u652f\u63f4\u6216\u5df2\u6dd8\u6c70\u3002 \u5305\u62ec\u4f5c\u696d\u7cfb\u7d71\u3001\u7db2\u9801/\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u3001\u8cc7\u6599\u5eab\u7ba1\u7406\u7cfb\u7d71 (DBMS)\u3001\u61c9\u7528\u7a0b\u5f0f\u3001 API \u4ee5\u53ca\u6240\u6709\u7d44\u4ef6\u3001\u57f7\u884c\u74b0\u5883\u548c\u7a0b\u5f0f\u5eab(libraries)\u3002 \u5982\u679c\u60a8\u6c92\u6709\u5b9a\u671f\u57f7\u884c\u5f31\u9ede\u6383\u7784\u4e26\u8a02\u95b1\u8207\u60a8\u4f7f\u7528\u7d44\u4ef6\u76f8\u95dc\u7684\u8cc7\u5b89\u901a\u5831\u3002 \u5982\u679c\u60a8\u672a\u6191\u85c9\u57fa\u65bc\u98a8\u96aa\u7684\u65b9\u5f0f\u53ca\u6642\u4fee\u88dc\u6216\u5347\u7d1a\u5e95\u5c64\u5e73\u53f0\u3001\u6846\u67b6\u548c\u76f8\u4f9d\u5957\u4ef6\u3002 \u9019\u901a\u5e38\u767c\u751f\u5728\u4fee\u88dc\u5de5\u4f5c\u662f\u8b8a\u66f4\u63a7\u5236\u4e0b\u7684\u6bcf\u6708\u6216\u6bcf\u5b63\u5ea6\u4efb\u52d9\u7684\u74b0\u5883\u4e2d\uff0c\u6703\u4f7f\u7d44\u7e54\u6578\u5929\u751a\u81f3\u6578\u6708\u4e0d\u5fc5\u8981\u5730\u66b4\u9732\u65bc\u53ef\u4fee\u88dc\u7684\u6f0f\u6d1e\u98a8\u96aa\u3002 \u5982\u679c\u8edf\u9ad4\u958b\u767c\u4eba\u54e1\u672a\u6e2c\u8a66\u66f4\u65b0\u3001\u5347\u7d1a\u6216\u4fee\u88dc\u5f8c\u7a0b\u5f0f\u5eab\u7684\u76f8\u5bb9\u6027\u3002 \u5982\u679c\u4f60\u672a\u4fdd\u8b77\u7d44\u4ef6\u7684\u8a2d\u5b9a\u6a94\u6848\u3002\uff08\u8acb\u53c3\u95b1 A05:2021 - \u5b89\u5168\u8a2d\u5b9a\u7f3a\u9677 Security Misconfiguration\uff09\u3002","title":"\u5f31\u9ede\u63cf\u8ff0"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#how-to-prevent","text":"\u61c9\u8a72\u8a2d\u7f6e\u4fee\u88dc\u7a0b\u5f0f\u7ba1\u7406\u6d41\u7a0b\u4f86\uff1a \u522a\u9664\u672a\u4f7f\u7528\u7684\u76f8\u4f9d\u5957\u4ef6\u3001\u4e0d\u5fc5\u8981\u7684\u529f\u80fd\u3001\u7d44\u4ef6\u3001\u6a94\u6848\u53ca\u6587\u4ef6\u3002 \u6301\u7e8c\u4f7f\u7528\u7248\u63a7\u5de5\u5177\u4f86\u76e4\u9ede\u5ba2\u6236\u7aef\u548c\u4f3a\u670d\u5668\u7aef\u7d44\u4ef6\uff08\u4f8b\u5982\u6846\u67b6\u3001\u7a0b\u5f0f\u5eab\uff09\u53ca\u76f8\u4f9d\u7d44\u4ef6\u7684\u7248\u672c\uff0c\u5982\u7248\u63a7\u5de5\u5177\u3001OWASP Dependency Check\u3001retire.js \u7b49\u3002 \u6301\u7e8c\u76e3\u63a7 CVE \u548c NVD \u7b49\u7b49\u4f86\u6e90\u4f86\u78ba\u8a8d\u662f\u7d44\u4ef6\u662f\u5426\u5b58\u5728\u7684\u6f0f\u6d1e\u3002\u4f7f\u7528\u8edf\u9ad4\u7d44\u5408\u5206\u6790\u5de5\u5177\u4f86\u81ea\u52d5\u5316\u8a72\u6d41\u7a0b\u3002 \u8a02\u95b1\u60a8\u4f7f\u7528\u7684\u7d44\u4ef6\u76f8\u95dc\u7684\u5b89\u5168\u6f0f\u6d1e\u7684\u8cc7\u5b89\u901a\u5831\u3002 \u6301\u7e8c\u76e4\u9ede\u5ba2\u6236\u7aef\u548c\u4f3a\u670d\u5668\u7aef\u7d44\u4ef6\uff08\u4f8b\u5982\u6846\u67b6\u3001\u7a0b\u5f0f\u5eab\uff09\u53ca\u76f8\u4f9d\u7d44\u4ef6\u7684\u7248\u672c\uff0c\u5982\u7248\u63a7\u5de5\u5177\u3001OWASP Dependency Check\u3001retire.js \u7b49\u3002 \u6301\u7e8c\u76e3\u63a7 CVE \u548c NVD \u7b49\u7b49\u4f86\u6e90\u4f86\u78ba\u8a8d\u662f\u7d44\u4ef6\u662f\u5426\u5b58\u5728\u7684\u6f0f\u6d1e\u3002 \u4f7f\u7528\u8edf\u9ad4\u7d44\u5408\u5206\u6790\u5de5\u5177\u4f86\u81ea\u52d5\u5316\u8a72\u6d41\u7a0b\u3002 \u8a02\u95b1\u60a8\u4f7f\u7528\u7684\u7d44\u4ef6\u76f8\u95dc\u7684\u5b89\u5168\u6f0f\u6d1e\u7684\u8cc7\u5b89\u901a\u5831\u3002 \u4f7f\u7528\u8af8\u5982\u7248\u63a7\u5de5\u5177\u3001OWASP Dependency Check\u3001retire.js \u7b49\u5de5\u5177\u6301\u7e8c\u76e4\u9ede\u5ba2\u6236\u7aef\u548c\u670d\u52d9\u5668\u7aef\u7d44\u4ef6\uff08\u4f8b\u5982\u6846\u67b6\u3001\u7a0b\u5f0f\u5eab\uff09\u53ca\u5176\u76f8\u4f9d\u7d44\u4ef6\u7684\u7248\u672c\u3002 \u50c5\u900f\u904e\u5b98\u65b9\u63d0\u4f9b\u7684\u5b89\u5168\u9023\u7d50\u4f86\u53d6\u5f97\u7d44\u4ef6\u3002 \u512a\u5148\u9078\u64c7\u5df2\u7c3d\u7f72\u7684\u66f4\u65b0\u5305\uff0c\u4ee5\u964d\u4f4e\u66f4\u65b0\u5305\u88ab\u52a0\u5165\u60e1\u610f\u7d44\u4ef6\u7684\u53ef\u80fd\u3002\uff08\u8acb\u53c3\u95b1 A08:2021-\u8edf\u9ad4\u53ca\u8cc7\u6599\u5b8c\u6574\u6027\u5931\u6548\uff09\u3002 \u76e3\u63a7\u672a\u7dad\u8b77\u6216\u672a\u70ba\u820a\u7248\u672c\u5275\u5efa\u5b89\u5168\u4fee\u88dc\u7a0b\u5f0f\u7684\u7a0b\u5f0f\u5eab\u548c\u7d44\u4ef6\u3002 \u5982\u679c\u7121\u6cd5\u4fee\u88dc\u7a0b\u5f0f\uff0c\u8acb\u8003\u616e\u90e8\u7f72\u865b\u64ec\u4fee\u88dc\u7a0b\u5f0f\u4f86\u76e3\u63a7\u3001\u6aa2\u6e2c\u6216\u9632\u79a6\u5df2\u767c\u73fe\u7684\u7279\u5b9a\u5f31\u9ede\u3002 \u6bcf\u500b\u7d44\u7e54\u90fd\u5fc5\u9808\u78ba\u4fdd\u5728\u61c9\u7528\u7a0b\u5f0f\u6216\u958b\u767c\u5c08\u6848(portfolio)\u7684\u751f\u547d\u9031\u671f\u5167\u5236\u8a02\u6301\u7e8c\u76e3\u63a7\u3001\u9452\u5225\u5206\u985e(triaging) \u53ca \u7533\u8acb\u66f4\u65b0 \u6216\u662f \u66f4\u6539\u914d\u7f6e\u7684\u8a08\u5283\u3002","title":"\u5982\u4f55\u9810\u9632(How to Prevent)"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#example-attack-scenarios","text":"\u60c5\u5883 #1\uff1a \u7d44\u4ef6\u901a\u5e38\u4ee5\u8207\u61c9\u7528\u7a0b\u5f0f\u672c\u8eab\u76f8\u540c\u7684\u6b0a\u9650\u904b\u884c\uff0c\u56e0\u6b64\u4efb\u4f55\u7d44\u4ef6\u4e2d\u7684\u7f3a\u9677\u90fd\u53ef\u80fd\u5c0e\u81f4\u56b4\u91cd\u7684\u5f71\u97ff\u3002 \u6b64\u985e\u7f3a\u9677\u53ef\u80fd\u662f\u5076\u7136\u7684\uff08\u4f8b\u5982\uff0c\u7de8\u78bc\u932f\u8aa4\uff09\u6216\u6709\u610f\u7684\uff08\u4f8b\u5982\uff0c\u7d44\u4ef6\u4e2d\u7684\u5f8c\u9580\uff09\u3002 \u4e00\u4e9b\u5df2\u77e5\u6613\u53d7\u653b\u64ca\u7d44\u4ef6\u7684\u7bc4\u4f8b\u70ba\uff1a CVE-2017-5638\uff1a\u4e00\u500b Struts 2 \u9060\u7aef\u7a0b\u5f0f\u78bc\u57f7\u884c\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5728\u4f3a\u670d\u5668\u4e0a\u57f7\u884c\u4efb\u610f\u4ee3\u78bc\uff0c\u5df2\u88ab\u6b78\u548e\u65bc\u91cd\u5927\u6f0f\u6d1e\u3002 \u96d6\u7136\u7269\u806f\u7db2 (IoT) \u8a2d\u5099\u901a\u5e38\u5f88\u96e3\u6216\u7121\u6cd5\u4fee\u88dc\uff0c\u4f46\u4fee\u88dc\u5b83\u5011\u53ef\u80fd\u6709\u5f88\u9ad8\u7684\u91cd\u8981\u6027\u3002\uff08\u4f8b\u5982\uff0c\u751f\u7269\u91ab\u5b78\u8a2d\u5099\uff09\u3002 \u6709\u4e00\u4e9b\u81ea\u52d5\u5316\u5de5\u5177\u53ef\u4ee5\u5e6b\u52a9\u653b\u64ca\u8005\u627e\u5230\u672a\u4fee\u88dc\u6216\u914d\u7f6e\u932f\u8aa4\u7684\u7cfb\u7d71\u3002 \u4f8b\u5982\uff0cShodan IoT \u641c\u7d22\u5f15\u64ce\u53ef\u4ee5\u5e6b\u52a9\u60a8\u627e\u5230\u5b58\u5728 2014 \u5e74 4 \u6708\u672a\u4fee\u88dc Heartbleed \u6f0f\u6d1e\u7684\u8a2d\u5099\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b(Example Attack Scenarios)"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#references","text":"OWASP Application Security Verification Standard: V1 Architecture, design and threat modelling OWASP Dependency Check (for Java and .NET libraries) OWASP Testing Guide - Map Application Architecture (OTG-INFO-010) OWASP Virtual Patching Best Practices The Unfortunate Reality of Insecure Libraries","title":"\u53c3\u8003\u6587\u737b(References)"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#-mitre-common-vulnerabilities-and-exposures-cve-search","text":"National Vulnerability Database (NVD) Retire.js for detecting known vulnerable JavaScript libraries Node Libraries Security Advisories Ruby Libraries Security Advisory Database and Tools https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf","title":"-   MITRE Common Vulnerabilities and Exposures (CVE) search"},{"location":"zh_TW/A06_2021-Vulnerable_and_Outdated_Components/#cwes-list-of-mapped-cwes","text":"CWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities CWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities CWE-1104 Use of Unmaintained Third Party Components","title":"\u5c0d\u61c9\u7684 CWEs \u6e05\u55ae(List of Mapped CWEs)"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/","text":"A07:2021 \u2013 \u8a8d\u8b49\u53ca\u9a57\u8b49\u6a5f\u5236\u5931\u6548 \u2693\ufe0e \u5f31\u9ede\u56e0\u7d20 \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897 \u5f31\u9ede\u7c21\u4ecb \u2693\ufe0e \u4e4b\u524d\u88ab\u7a31\u4e4b\u70ba\"\u7121\u6548\u7684\u8eab\u4efd\u8a8d\u8b49\"\uff0c\u6b64\u985e\u5225\u5f9e\u7b2c\u4e8c\u540d\u4e0b\u6ed1\uff0c\u73fe\u5728\u5305\u542b\u4e86\u8207\u8eab\u4efd\u8b58\u5225\u5931\u6548\u76f8\u95dc\u7684CWEs\uff0c\u5982\u77e5\u540d\u7684\"CWE-297: \u8207\u4e0d\u5339\u914d\u7684\u670d\u52d9\u7aef\u9032\u884c\u4e0d\u9069\u7576\u7684\u6191\u8b49\u78ba\u8a8d\", \"CWE-287: \u4e0d\u9069\u7576\u7684\u8a8d\u8b49\", \"CWE-384: \u6703\u8a71(session)\u56fa\u5b9a\u653b\u64ca\" \u5f31\u9ede\u63cf\u8ff0 \u2693\ufe0e \u78ba\u8a8d\u7528\u6236\u7684\u8eab\u5206\u3001\u8a8d\u8b49\u3001\u6703\u8a71(session)\u7ba1\u7406\u5c0d\u65bc\u9632\u6b62\u8207\u8a8d\u8b49\u76f8\u95dc\u7684\u653b\u64ca\u81f3\u95dc\u91cd\u8981\uff0c\u5982\u679c\u61c9\u7528\u7a0b\u5f0f\u5b58\u5728\u4ee5\u4e0b\u60c5\u6cc1\uff0c\u5247\u53ef\u80fd\u6709\u8a8d\u8b49\u7684\u6f0f\u6d1e: \u5141\u8a31\u50cf\u662f\u653b\u64ca\u8005\u5df2\u7d93\u64c1\u6709\u6709\u6548\u7528\u6236\u540d\u7a31\u548c\u5bc6\u78bc\u5217\u8868\u7684\u649e\u5eab\u81ea\u52d5\u5316\u653b\u64ca\u3002 \u5141\u8a31\u66b4\u529b\u6216\u5176\u4ed6\u81ea\u52d5\u5316\u653b\u64ca\u3002 \u5141\u8a31\u9810\u8a2d\u3001\u8106\u5f31\u3001\u5e38\u898b\u7684\u5bc6\u78bc\uff0c\u50cf\u662f\"Password1\"\u6216\"admin/admin\"\u3002 \u4f7f\u7528\u8106\u5f31\u6216\u7121\u6548\u7684\u8a8d\u8b49\u8cc7\u8a0a\u56de\u5fa9\u6216\u5fd8\u8a18\u5bc6\u78bc\u7684\u6d41\u7a0b\uff0c\u5982\u4e0d\u5b89\u5168\u7684\"\u77e5\u8b58\u76f8\u95dc\u554f\u7b54\"\u3002 \u5c07\u5bc6\u78bc\u4f7f\u7528\u660e\u78bc\u3001\u52a0\u5bc6\u6216\u8f03\u8106\u5f31\u96dc\u6e4a\u6cd5\u7684\u65b9\u5f0f\u5132\u5b58(\u53c3\u8003A3: 2017-\u654f\u611f\u6027\u8cc7\u6599\u6d29\u6f0f)\u3002 \u4e0d\u5177\u6709\u6216\u662f\u7121\u6548\u7684\u591a\u56e0\u7d20\u8a8d\u8b49\u3002 \u65bcURL\u4e2d\u6d29\u6f0f\u6703\u8a71(session) ID(\u5982 URL\u91cd\u5beb)\u3002 \u6210\u529f\u767b\u5165\u5f8c\u6c92\u6709\u8f2a\u63db\u6703\u8a71(session) ID\u3002 \u6c92\u6709\u6b63\u78ba\u7684\u8a3b\u92b7\u6703\u8a71(session) ID\u3002 \u7528\u6236\u7684\u6703\u8a71(session)\u6216\u8a8d\u8b49tokens(\u4e3b\u8981\u662f\u55ae\u4e00\u767b\u5165(SSO)token) \u6c92\u6709\u5728\u767b\u51fa\u6642\u6216\u4e00\u6bb5\u6642\u9593\u6c92\u6d3b\u52d5\u6642\u88ab\u9069\u7576\u7684\u8a3b\u92b7\u3002 \u5982\u4f55\u9810\u9632 \u2693\ufe0e \u5728\u53ef\u80fd\u7684\u60c5\u6cc1\u4e0b\uff0c\u5be6\u4f5c\u591a\u56e0\u7d20\u8a8d\u8b49\u4f86\u9632\u6b62\u81ea\u52d5\u5316\u649e\u5eab\u653b\u64ca\u3001\u66b4\u529b\u7834\u89e3\u3001\u4ee5\u53ca\u906d\u7aca\u8a8d\u8b49\u8cc7\u8a0a\u88ab\u91cd\u8907\u5229\u7528\u7684\u653b\u64ca\u3002 \u4e0d\u8981\u4ea4\u4ed8\u6216\u90e8\u7f72\u4efb\u4f55\u9810\u8a2d\u7684\u8a8d\u8b49\u8cc7\u8a0a\uff0c\u7279\u5225\u662f\u7ba1\u7406\u8005\u3002 \u5be6\u4f5c\u8106\u5f31\u5bc6\u78bc\u7684\u6aa2\u67e5\uff0c\u5982\u6e2c\u8a66\u65b0\u8a2d\u5b9a\u6216\u8b8a\u66f4\u7684\u5bc6\u78bc\u662f\u5426\u5b58\u5728\u65bc\u524d10,000\u500b\u6700\u5dee\u5bc6\u78bc\u6e05\u55ae\u3002 \u5c07\u5bc6\u78bc\u9577\u5ea6\u3001\u8907\u96dc\u5ea6\u3001\u548c\u8f2a\u63db\u653f\u7b56\u8207\"NIST 800-63b\u7b2c5.1.1\u7bc0-\u88ab\u8a18\u61b6\u7684\u79d8\u5bc6\u6216\u5176\u4ed6\u73fe\u4ee3\u57fa\u65bc\u8b49\u64da\u7684\u5bc6\u78bc\u653f\u7b56\"\u4fdd\u6301\u4e00\u81f4\u3002 \u5c0d\u6240\u6709\u7d50\u679c\u4f7f\u7528\u76f8\u540c\u7684\u8a0a\u606f\u56de\u61c9\uff0c\u78ba\u4fdd\u8a3b\u518a\u3001\u8a8d\u8b49\u8cc7\u8a0a\u56de\u5fa9\u3001\u4ee5\u53caAPI\u8def\u5f91\u80fd\u5920\u62b5\u79a6\u5e33\u865f\u5217\u8209\u653b\u64ca\u3002 \u9650\u5236\u6216\u589e\u52a0\u5931\u6557\u767b\u5165\u5617\u8a66\u7684\u5ef6\u9072\u3002\u8a18\u9304\u6240\u6709\u5931\u6557\u4e26\u65bc\u5075\u6e2c\u5230\u649e\u5eab\u3001\u66b4\u529b\u7834\u89e3\u6216\u5176\u4ed6\u653b\u64ca\u6642\u767c\u51fa\u544a\u8b66\u3002 \u4f7f\u7528\u4f3a\u670d\u5668\u7aef\u3001\u5b89\u5168\u7684\u5167\u5efa\u6703\u8a71(session)\u7ba1\u7406\u5668\uff0c\u5728\u767b\u5165\u5f8c\u7522\u751f\u65b0\u7684\u9ad8\u4e82\u6578\u96a8\u6a5f\u7a0b\u5ea6(entropy)\u7684\u96a8\u6a5f\u6703\u8a71(session)ID\u3002\u6703\u8a71(session)ID\u4e0d\u61c9\u51fa\u73fe\u5728URL\u4e2d\uff0c\u5fc5\u9808\u88ab\u5b89\u5168\u7684\u5132\u5b58\uff0c\u4e26\u4e14\u5728\u767b\u51fa\u5f8c\u3001\u9592\u7f6e\u3001\u8d85\u6642\u5f8c\u88ab\u8a3b\u92b7\u3002 \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b \u2693\ufe0e \u60c5\u5883 #1: \u4f7f\u7528\u5df2\u77e5\u5217\u8868\u5bc6\u78bc\u7684\u649e\u5eab\u653b\u64ca\u662f\u4e00\u7a2e\u5e38\u898b\u7684\u653b\u64ca\u65b9\u5f0f\uff0c\u5047\u8a2d\u61c9\u7528\u7a0b\u5f0f\u6c92\u6709\u5be6\u65bd\u81ea\u52d5\u5316\u5a01\u8105\u6216\u649e\u5eab\u653b\u64ca\u7684\u4fdd\u8b77\uff0c\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u61c9\u7528\u7a0b\u5f0f\u6703\u88ab\u5229\u7528\u70ba\u5bc6\u78bc\u9810\u5831\u7684\u5de5\u5177\u4f86\u5224\u65b7\u8a8d\u8b49\u8cc7\u8a0a\u662f\u5426\u6709\u6548\u3002 \u60c5\u5883 #2: \u5927\u591a\u6578\u7684\u8a8d\u8b49\u653b\u64ca\u662f\u56e0\u70ba\u6301\u7e8c\u7684\u4f7f\u7528\u5bc6\u78bc\u4f5c\u70ba\u552f\u4e00\u56e0\u7d20\uff0c\u6700\u4f73\u5be6\u52d9\u3001\u5bc6\u78bc\u8f2a\u63db\u3001\u4ee5\u53ca\u8907\u96dc\u5ea6\u7684\u8981\u6c42\u6703\u9f13\u52f5\u7528\u6236\u4f7f\u7528\u548c\u91cd\u8907\u4f7f\u7528\u8106\u5f31\u7684\u5bc6\u78bc\u3002\u5efa\u8b70\u7d44\u7e54\u6309\u7167NIST 800-63\u505c\u6b62\u9019\u4e9b\u505a\u6cd5\u4e26\u4f7f\u7528\u591a\u56e0\u7d20\u8a8d\u8b49\u3002 \u60c5\u5883 #3: \u61c9\u7528\u7a0b\u5f0f\u7684\u6703\u8a71\u8d85\u6642\u6c92\u6709\u88ab\u8a2d\u5b9a\u6b63\u78ba\u3002\u4e00\u500b\u7528\u6236\u4f7f\u7528\u516c\u7528\u96fb\u8166\u4f86\u5b58\u53d6\u61c9\u7528\u7a0b\u5f0f\u6642\uff0c\u7528\u6236\u6c92\u6709\u9078\u64c7\"\u767b\u51fa\"\u800c\u662f\u7c21\u55ae\u7684\u95dc\u9589\u700f\u89bd\u5668\u5206\u9801\u5c31\u96e2\u958b\uff0c\u6b64\u6642\u4e00\u500b\u653b\u64ca\u8005\u5728\u4e00\u5c0f\u6642\u5f8c\u4f7f\u7528\u540c\u4e00\u500b\u700f\u89bd\u5668\uff0c\u524d\u4e00\u500b\u7528\u6236\u4ecd\u7136\u8655\u65bc\u901a\u904e\u8a8d\u8b49\u7684\u72c0\u614b\u3002 \u53c3\u8003\u6587\u737b \u2693\ufe0e OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity, Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets \u5c0d\u61c9\u7684 CWEs \u6e05\u55ae \u2693\ufe0e CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"A07 \u8a8d\u8b49\u53ca\u9a57\u8b49\u6a5f\u5236\u5931\u6548"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#a072021","text":"","title":"A07:2021 \u2013 \u8a8d\u8b49\u53ca\u9a57\u8b49\u6a5f\u5236\u5931\u6548"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#_1","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf 22 14.84% 2.55% 79.51% 45.72% 7.40 6.50 132,195 3,897","title":"\u5f31\u9ede\u56e0\u7d20"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#_2","text":"\u4e4b\u524d\u88ab\u7a31\u4e4b\u70ba\"\u7121\u6548\u7684\u8eab\u4efd\u8a8d\u8b49\"\uff0c\u6b64\u985e\u5225\u5f9e\u7b2c\u4e8c\u540d\u4e0b\u6ed1\uff0c\u73fe\u5728\u5305\u542b\u4e86\u8207\u8eab\u4efd\u8b58\u5225\u5931\u6548\u76f8\u95dc\u7684CWEs\uff0c\u5982\u77e5\u540d\u7684\"CWE-297: \u8207\u4e0d\u5339\u914d\u7684\u670d\u52d9\u7aef\u9032\u884c\u4e0d\u9069\u7576\u7684\u6191\u8b49\u78ba\u8a8d\", \"CWE-287: \u4e0d\u9069\u7576\u7684\u8a8d\u8b49\", \"CWE-384: \u6703\u8a71(session)\u56fa\u5b9a\u653b\u64ca\"","title":"\u5f31\u9ede\u7c21\u4ecb"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#_3","text":"\u78ba\u8a8d\u7528\u6236\u7684\u8eab\u5206\u3001\u8a8d\u8b49\u3001\u6703\u8a71(session)\u7ba1\u7406\u5c0d\u65bc\u9632\u6b62\u8207\u8a8d\u8b49\u76f8\u95dc\u7684\u653b\u64ca\u81f3\u95dc\u91cd\u8981\uff0c\u5982\u679c\u61c9\u7528\u7a0b\u5f0f\u5b58\u5728\u4ee5\u4e0b\u60c5\u6cc1\uff0c\u5247\u53ef\u80fd\u6709\u8a8d\u8b49\u7684\u6f0f\u6d1e: \u5141\u8a31\u50cf\u662f\u653b\u64ca\u8005\u5df2\u7d93\u64c1\u6709\u6709\u6548\u7528\u6236\u540d\u7a31\u548c\u5bc6\u78bc\u5217\u8868\u7684\u649e\u5eab\u81ea\u52d5\u5316\u653b\u64ca\u3002 \u5141\u8a31\u66b4\u529b\u6216\u5176\u4ed6\u81ea\u52d5\u5316\u653b\u64ca\u3002 \u5141\u8a31\u9810\u8a2d\u3001\u8106\u5f31\u3001\u5e38\u898b\u7684\u5bc6\u78bc\uff0c\u50cf\u662f\"Password1\"\u6216\"admin/admin\"\u3002 \u4f7f\u7528\u8106\u5f31\u6216\u7121\u6548\u7684\u8a8d\u8b49\u8cc7\u8a0a\u56de\u5fa9\u6216\u5fd8\u8a18\u5bc6\u78bc\u7684\u6d41\u7a0b\uff0c\u5982\u4e0d\u5b89\u5168\u7684\"\u77e5\u8b58\u76f8\u95dc\u554f\u7b54\"\u3002 \u5c07\u5bc6\u78bc\u4f7f\u7528\u660e\u78bc\u3001\u52a0\u5bc6\u6216\u8f03\u8106\u5f31\u96dc\u6e4a\u6cd5\u7684\u65b9\u5f0f\u5132\u5b58(\u53c3\u8003A3: 2017-\u654f\u611f\u6027\u8cc7\u6599\u6d29\u6f0f)\u3002 \u4e0d\u5177\u6709\u6216\u662f\u7121\u6548\u7684\u591a\u56e0\u7d20\u8a8d\u8b49\u3002 \u65bcURL\u4e2d\u6d29\u6f0f\u6703\u8a71(session) ID(\u5982 URL\u91cd\u5beb)\u3002 \u6210\u529f\u767b\u5165\u5f8c\u6c92\u6709\u8f2a\u63db\u6703\u8a71(session) ID\u3002 \u6c92\u6709\u6b63\u78ba\u7684\u8a3b\u92b7\u6703\u8a71(session) ID\u3002 \u7528\u6236\u7684\u6703\u8a71(session)\u6216\u8a8d\u8b49tokens(\u4e3b\u8981\u662f\u55ae\u4e00\u767b\u5165(SSO)token) \u6c92\u6709\u5728\u767b\u51fa\u6642\u6216\u4e00\u6bb5\u6642\u9593\u6c92\u6d3b\u52d5\u6642\u88ab\u9069\u7576\u7684\u8a3b\u92b7\u3002","title":"\u5f31\u9ede\u63cf\u8ff0"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#_4","text":"\u5728\u53ef\u80fd\u7684\u60c5\u6cc1\u4e0b\uff0c\u5be6\u4f5c\u591a\u56e0\u7d20\u8a8d\u8b49\u4f86\u9632\u6b62\u81ea\u52d5\u5316\u649e\u5eab\u653b\u64ca\u3001\u66b4\u529b\u7834\u89e3\u3001\u4ee5\u53ca\u906d\u7aca\u8a8d\u8b49\u8cc7\u8a0a\u88ab\u91cd\u8907\u5229\u7528\u7684\u653b\u64ca\u3002 \u4e0d\u8981\u4ea4\u4ed8\u6216\u90e8\u7f72\u4efb\u4f55\u9810\u8a2d\u7684\u8a8d\u8b49\u8cc7\u8a0a\uff0c\u7279\u5225\u662f\u7ba1\u7406\u8005\u3002 \u5be6\u4f5c\u8106\u5f31\u5bc6\u78bc\u7684\u6aa2\u67e5\uff0c\u5982\u6e2c\u8a66\u65b0\u8a2d\u5b9a\u6216\u8b8a\u66f4\u7684\u5bc6\u78bc\u662f\u5426\u5b58\u5728\u65bc\u524d10,000\u500b\u6700\u5dee\u5bc6\u78bc\u6e05\u55ae\u3002 \u5c07\u5bc6\u78bc\u9577\u5ea6\u3001\u8907\u96dc\u5ea6\u3001\u548c\u8f2a\u63db\u653f\u7b56\u8207\"NIST 800-63b\u7b2c5.1.1\u7bc0-\u88ab\u8a18\u61b6\u7684\u79d8\u5bc6\u6216\u5176\u4ed6\u73fe\u4ee3\u57fa\u65bc\u8b49\u64da\u7684\u5bc6\u78bc\u653f\u7b56\"\u4fdd\u6301\u4e00\u81f4\u3002 \u5c0d\u6240\u6709\u7d50\u679c\u4f7f\u7528\u76f8\u540c\u7684\u8a0a\u606f\u56de\u61c9\uff0c\u78ba\u4fdd\u8a3b\u518a\u3001\u8a8d\u8b49\u8cc7\u8a0a\u56de\u5fa9\u3001\u4ee5\u53caAPI\u8def\u5f91\u80fd\u5920\u62b5\u79a6\u5e33\u865f\u5217\u8209\u653b\u64ca\u3002 \u9650\u5236\u6216\u589e\u52a0\u5931\u6557\u767b\u5165\u5617\u8a66\u7684\u5ef6\u9072\u3002\u8a18\u9304\u6240\u6709\u5931\u6557\u4e26\u65bc\u5075\u6e2c\u5230\u649e\u5eab\u3001\u66b4\u529b\u7834\u89e3\u6216\u5176\u4ed6\u653b\u64ca\u6642\u767c\u51fa\u544a\u8b66\u3002 \u4f7f\u7528\u4f3a\u670d\u5668\u7aef\u3001\u5b89\u5168\u7684\u5167\u5efa\u6703\u8a71(session)\u7ba1\u7406\u5668\uff0c\u5728\u767b\u5165\u5f8c\u7522\u751f\u65b0\u7684\u9ad8\u4e82\u6578\u96a8\u6a5f\u7a0b\u5ea6(entropy)\u7684\u96a8\u6a5f\u6703\u8a71(session)ID\u3002\u6703\u8a71(session)ID\u4e0d\u61c9\u51fa\u73fe\u5728URL\u4e2d\uff0c\u5fc5\u9808\u88ab\u5b89\u5168\u7684\u5132\u5b58\uff0c\u4e26\u4e14\u5728\u767b\u51fa\u5f8c\u3001\u9592\u7f6e\u3001\u8d85\u6642\u5f8c\u88ab\u8a3b\u92b7\u3002","title":"\u5982\u4f55\u9810\u9632"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#_5","text":"\u60c5\u5883 #1: \u4f7f\u7528\u5df2\u77e5\u5217\u8868\u5bc6\u78bc\u7684\u649e\u5eab\u653b\u64ca\u662f\u4e00\u7a2e\u5e38\u898b\u7684\u653b\u64ca\u65b9\u5f0f\uff0c\u5047\u8a2d\u61c9\u7528\u7a0b\u5f0f\u6c92\u6709\u5be6\u65bd\u81ea\u52d5\u5316\u5a01\u8105\u6216\u649e\u5eab\u653b\u64ca\u7684\u4fdd\u8b77\uff0c\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u61c9\u7528\u7a0b\u5f0f\u6703\u88ab\u5229\u7528\u70ba\u5bc6\u78bc\u9810\u5831\u7684\u5de5\u5177\u4f86\u5224\u65b7\u8a8d\u8b49\u8cc7\u8a0a\u662f\u5426\u6709\u6548\u3002 \u60c5\u5883 #2: \u5927\u591a\u6578\u7684\u8a8d\u8b49\u653b\u64ca\u662f\u56e0\u70ba\u6301\u7e8c\u7684\u4f7f\u7528\u5bc6\u78bc\u4f5c\u70ba\u552f\u4e00\u56e0\u7d20\uff0c\u6700\u4f73\u5be6\u52d9\u3001\u5bc6\u78bc\u8f2a\u63db\u3001\u4ee5\u53ca\u8907\u96dc\u5ea6\u7684\u8981\u6c42\u6703\u9f13\u52f5\u7528\u6236\u4f7f\u7528\u548c\u91cd\u8907\u4f7f\u7528\u8106\u5f31\u7684\u5bc6\u78bc\u3002\u5efa\u8b70\u7d44\u7e54\u6309\u7167NIST 800-63\u505c\u6b62\u9019\u4e9b\u505a\u6cd5\u4e26\u4f7f\u7528\u591a\u56e0\u7d20\u8a8d\u8b49\u3002 \u60c5\u5883 #3: \u61c9\u7528\u7a0b\u5f0f\u7684\u6703\u8a71\u8d85\u6642\u6c92\u6709\u88ab\u8a2d\u5b9a\u6b63\u78ba\u3002\u4e00\u500b\u7528\u6236\u4f7f\u7528\u516c\u7528\u96fb\u8166\u4f86\u5b58\u53d6\u61c9\u7528\u7a0b\u5f0f\u6642\uff0c\u7528\u6236\u6c92\u6709\u9078\u64c7\"\u767b\u51fa\"\u800c\u662f\u7c21\u55ae\u7684\u95dc\u9589\u700f\u89bd\u5668\u5206\u9801\u5c31\u96e2\u958b\uff0c\u6b64\u6642\u4e00\u500b\u653b\u64ca\u8005\u5728\u4e00\u5c0f\u6642\u5f8c\u4f7f\u7528\u540c\u4e00\u500b\u700f\u89bd\u5668\uff0c\u524d\u4e00\u500b\u7528\u6236\u4ecd\u7136\u8655\u65bc\u901a\u904e\u8a8d\u8b49\u7684\u72c0\u614b\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#_6","text":"OWASP Proactive Controls: Implement Digital Identity OWASP Application Security Verification Standard: V2 authentication OWASP Application Security Verification Standard: V3 Session Management OWASP Testing Guide: Identity, Authentication OWASP Cheat Sheet: Authentication OWASP Cheat Sheet: Credential Stuffing OWASP Cheat Sheet: Forgot Password OWASP Cheat Sheet: Session Management OWASP Automated Threats Handbook NIST 800-63b: 5.1.1 Memorized Secrets","title":"\u53c3\u8003\u6587\u737b"},{"location":"zh_TW/A07_2021-Identification_and_Authentication_Failures/#cwes","text":"CWE-255 Credentials Management Errors CWE-259 Use of Hard-coded Password CWE-287 Improper Authentication CWE-288 Authentication Bypass Using an Alternate Path or Channel CWE-290 Authentication Bypass by Spoofing CWE-294 Authentication Bypass by Capture-replay CWE-295 Improper Certificate Validation CWE-297 Improper Validation of Certificate with Host Mismatch CWE-300 Channel Accessible by Non-Endpoint CWE-302 Authentication Bypass by Assumed-Immutable Data CWE-304 Missing Critical Step in Authentication CWE-306 Missing Authentication for Critical Function CWE-307 Improper Restriction of Excessive Authentication Attempts CWE-346 Origin Validation Error CWE-384 Session Fixation CWE-521 Weak Password Requirements CWE-613 Insufficient Session Expiration CWE-620 Unverified Password Change CWE-640 Weak Password Recovery Mechanism for Forgotten Password CWE-798 Use of Hard-coded Credentials CWE-940 Improper Verification of Source of a Communication Channel CWE-1216 Lockout Mechanism Errors","title":"\u5c0d\u61c9\u7684 CWEs \u6e05\u55ae"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/","text":"A08:2021 \u2013 Software and Data Integrity Failures \u2693\ufe0e Factors \u2693\ufe0e \u5f31\u9ede\u56e0\u7d20 \u2693\ufe0e \u5c0d\u61c9\u7684 CWEs\u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u76f8\u95dc CVEs \u7e3d\u91cf 10 16.67% 2.05% 75.04% 45.35% 6.94 7.94 47,972 1,152 Overview \u2693\ufe0e \u5f31\u9ede\u7c21\u4ecb \u2693\ufe0e A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from CVE/CVSS data. Notable CWEs include CWE-502: Deserialization of Untrusted Data , CWE-829: Inclusion of Functionality from Untrusted Control Sphere , and CWE-494: Download of Code Without Integrity Check . \u9019\u662f2021\u5e74\u7684\u65b0\u985e\u578b\uff0c\u8457\u91cd\u5728\u8edf\u9ad4\u66f4\u65b0\uff0c\u95dc\u9375\u8cc7\u6599\u53ca\u6301\u7e8c\u6027\u6574\u5408/\u90e8\u7f72(CI/CD)\u6d41\u7a0b\u672a\u7d93\u5b8c\u6574\u6027\u9a57\u8b49\u4e4b\u5047\u8a2d\u3002\u540c\u6642\u5728CVE/CVSS\u8cc7\u6599\u52a0\u6b0a\u5f8c\u4e4b\u6700\u9ad8\u5f71\u97ff\u4e4b\u4e00\u3002\u503c\u5f97\u6ce8\u610f\u7684CWE\u5305\u542bCWE-502\uff1a\u4e0d\u53d7\u4fe1\u4efb\u8cc7\u6599\u4e4b\u53cd\u5e8f\u5217\u5316\uff0cCWE-829\uff1a\u5305\u542b\u4f86\u81ea\u4e0d\u53d7\u4fe1\u4efb\u63a7\u5236\u9818\u57df\u4e4b\u529f\u80fd\u53caCWE-494\uff1a\u4e0b\u8f09\u672a\u7d93\u5b8c\u6574\u6027\u9a57\u8b49\u4e4b\u7a0b\u5f0f\u78bc\u3002 Description \u2693\ufe0e \u5f31\u9ede\u63cf\u8ff0 \u2693\ufe0e Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. For example, where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization. Another form of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. \u7a0b\u5f0f\u78bc\u6216\u57fa\u790e\u67b6\u69cb\u672a\u80fd\u4fdd\u8b77\u8edf\u9ad4\u53ca\u8cc7\u6599\u4e4b\u5b8c\u6574\u6027\u53d7\u5230\u7834\u58de\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u7269\u4ef6\u6216\u8cc7\u6599\u7d93\u7de8\u78bc\u6216\u5e8f\u5217\u5316\u5230\u4e00\u500b\u5c0d\u653b\u64ca\u8005\u53ef\u8b80\u5beb\u4e4b\u7d50\u69cb\u4e2d\u5c07\u5c0e\u81f4\u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\u3002\u53e6\u4e00\u7a2e\u5f62\u5f0f\u5247\u662f\u61c9\u7528\u7a0b\u5f0f\u4f9d\u8cf4\u4f86\u81ea\u65bc\u4e0d\u53d7\u4fe1\u4efb\u4f86\u6e90\uff0c\u5178\u85cf\u5eab\u53ca\u5167\u5bb9\u905e\u9001\u7db2\u8def\u4e4b\u5916\u639b\uff0c\u51fd\u5f0f\u5eab\u6216\u6a21\u7d44\u3002\u4e0d\u5b89\u5168\u7684\u6301\u7e8c\u6027\u6574\u5408/\u90e8\u7f72(CI/CD)\u6d41\u7a0b\u5247\u6703\u9020\u6210\u6f5b\u5728\u7684\u672a\u7d93\u6388\u6b0a\u5b58\u53d6\uff0c\u60e1\u610f\u7a0b\u5f0f\u78bc\u6216\u7cfb\u7d71\u7834\u58de\u3002\u6700\u5f8c\uff0c\u73fe\u5728\u8a31\u591a\u61c9\u7528\u7a0b\u5f0f\u64c1\u6709\u81ea\u52d5\u66f4\u65b0\u529f\u80fd\uff0c\u4f46\u81ea\u52d5\u66f4\u65b0\u529f\u80fd\u5728\u7f3a\u4e4f\u5145\u8db3\u5b8c\u6574\u6027\u9a57\u8b49\u529f\u80fd\u6642\u5c31\u4e0b\u8f09\u4e26\u5b89\u88dd\u66f4\u65b0\u5230\u8655\u65bc\u5b89\u5168\u72c0\u614b\u4e0b\u7684\u61c9\u7528\u7a0b\u5f0f\u3002\u653b\u64ca\u8005\u80fd\u4e0a\u50b3\u81ea\u88fd\u66f4\u65b0\u6a94\u6848\uff0c\u66f4\u65b0\u6a94\u6848\u5c07\u50b3\u64ad\u5230\u6240\u6709\u5df2\u5b89\u88dd\u4e4b\u61c9\u7528\u7a0b\u5f0f\u4e26\u5728\u9019\u4e9b\u61c9\u7528\u7a0b\u5f0f\u4e0a\u57f7\u884c\u3002 How to Prevent \u2693\ufe0e \u5f31\u9ede\u63cf\u8ff0 \u2693\ufe0e Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data \u78ba\u4fdd\u4e0d\u53d7\u4fe1\u4efb\u4e4b\u5ba2\u6236\u7aef\u4e0d\u6703\u6536\u5230\u672a\u7c3d\u7f72\u6216\u52a0\u5bc6\u4e4b\u5e8f\u5217\u5316\u8cc7\u6599\u4e26\u5229\u7528\u5b8c\u6574\u6027\u6aa2\u67e5\u6216\u6578\u4f4d\u7c3d\u7ae0\u4f86\u5075\u6e2c\u7ac4\u6539\u6216\u91cd\u653e\u653b\u64ca\u3002 Verify the software or data is from the expected source via signing or similar mechanisms \u5229\u7528\u6578\u4f4d\u7c3d\u7ae0\u6216\u985e\u4f3c\u6a5f\u5236\u78ba\u4fdd\u8edf\u9ad4\u6216\u8cc7\u6599\u4f86\u81ea\u9810\u671f\u4e4b\u63d0\u4f9b\u8005 Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories \u78ba\u4fdd\u51fd\u5f0f\u5eab\u53ca\u5f9e\u5c6c\u5957\u4ef6\uff0c\u4f8b\u5982npm\u6216Maven\uff0c\u662f\u5f9e\u53d7\u4fe1\u4efb\u7684\u5178\u85cf\u5eab\u53d6\u5f97\u3002 Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities \u4f7f\u7528\u8edf\u9ad4\u4f9b\u61c9\u93c8\u5b89\u5168\u5de5\u5177(\u4f8b\u5982OWASP Dependency Check \u6216 OWASP CycloneDX)\u78ba\u4fdd\u5143\u4ef6\u6c92\u6709\u5df2\u77e5\u5f31\u9ede\u3002 Ensure that your CI/CD pipeline has proper configuration and access control to ensure the integrity of the code flowing through the build and deploy processes. \u9069\u7576\u5730\u8a2d\u5b9a\u6301\u7e8c\u6027\u6574\u5408/\u90e8\u7f72(CI/CD)\u6d41\u7a0b\u7684\u7d44\u614b\u53ca\u5b58\u53d6\u63a7\u5236\u4ee5\u78ba\u4fdd\u7a0b\u5f0f\u78bc\u5728\u7d44\u5efa\u53ca\u90e8\u7f72\u6d41\u7a0b\u4e2d\u7684\u5b8c\u6574\u6027\u3002 Example Attack Scenarios \u2693\ufe0e \u653b\u64ca\u60c5\u5883\u7bc4\u4f8b \u2693\ufe0e Scenario #1 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"R00\" Java object signature and uses the Java Serial Killer tool to gain remote code execution on the application server. \u60c5\u58831 \u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\uff1a\u4e00\u500b\u53cd\u61c9\u5f0f\u61c9\u7528\u7a0b\u5f0f\u547c\u53ebSpring Boot\u5fae\u670d\u52d9\u3002\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u5011\u8a66\u5716\u78ba\u4fdd\u4ed6\u5011\u7684\u4ee3\u78bc\u662f\u4e0d\u53ef\u8b8a\u7684\u3002\u4ed6\u5011\u7684\u89e3\u6c7a\u65b9\u6848\u662f\u5728\u96d9\u5411\u6240\u6709\u8acb\u6c42\u8a0a\u606f\u4e2d\u5305\u542b\u5e8f\u5217\u5316\u7684\u7528\u6236\u72c0\u614b\u3002\u653b\u64ca\u8005\u6ce8\u610f\u5230\u201cR00\u201dJava\u7269\u4ef6\u7c3d\u7ae0\u4e26\u4f7f\u7528 Java Serial Killer \u5de5\u5177(\u7528\u4f86\u57f7\u884cJava\u53cd\u5e8f\u5217\u5316\u653b\u64ca)\u5728\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u9060\u7aef\u57f7\u884c\u7a0b\u5f0f\u78bc\u3002 Scenario #2 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. \u60c5\u58832 \u672a\u7c3d\u7f72\u4e4b\u66f4\u65b0\uff1a\u8a31\u591a\u5bb6\u7528\u8def\u7531\u5668\u3001\u6a5f\u4e0a\u76d2\u3001\u88dd\u7f6e\u97cc\u9ad4\u7b49\u672a\u4ee5\u901a\u904e\u7c3d\u7f72\u4e4b\u97cc\u9ad4\u9a57\u8b49\u66f4\u65b0\u6a94\u6848\u3002\u672a\u7c3d\u7f72\u97cc\u9ad4\u662f\u8d8a\u4f86\u8d8a\u591a\u653b\u64ca\u8005\u7684\u76ee\u6a19\u4e14\u60c5\u6cc1\u53ea\u6703\u8b8a\u5f97\u66f4\u7cdf\u3002\u9019\u662f\u4e00\u500b\u4e3b\u8981\u554f\u984c\uff0c\u56e0\u70ba\u53ea\u80fd\u4ee5\u65b0\u7248\u672c\u4fee\u5fa9\u6b64\u6a5f\u5236\u4e26\u671f\u5f85\u820a\u7248\u672c\u81ea\u7136\u6dd8\u6c70\uff0c\u6c92\u6709\u5176\u4ed6\u65b9\u6cd5\u3002 Scenario #3 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. \u60c5\u58833 SolarWinds \u60e1\u610f\u66f4\u65b0\uff1a\u773e\u6240\u5468\u77e5\uff0c\u67d0\u4e9b\u570b\u5bb6\u6703\u653b\u64ca\u66f4\u65b0\u6a5f\u5236\uff0c\u6700\u8fd1\u4e00\u6b21\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5c0dSolarWinds Orion\u7684\u653b\u64ca\u3002\u8a72\u8edf\u9ad4\u958b\u767c\u5546\u64c1\u6709\u5b89\u5168\u7d44\u5efa\u548c\u66f4\u65b0\u5b8c\u6574\u6027\u6d41\u7a0b\u3002\u5118\u7ba1\u5982\u6b64\uff0c\u9019\u4e9b\u6d41\u7a0b\u4ecd\u88ab\u7834\u58de\u4e26\u5728\u5e7e\u500b\u6708\u6642\u9593\u4e2d\u5411 18,000 \u591a\u500b\u7d44\u7e54\u9001\u51fa\u9ad8\u5ea6\u91dd\u5c0d\u6027\u7684\u60e1\u610f\u66f4\u65b0\uff0c\u5176\u4e2d\u5927\u7d04 100 \u500b\u7d44\u7e54\u53d7\u5230\u4e86\u5f71\u97ff\u3002 \u9019\u662f\u6b77\u53f2\u4e0a\u6b64\u985e\u6027\u8cea\u6700\u6df1\u9060\u3001\u6700\u91cd\u5927\u7684\u8cc7\u5b89\u4e8b\u4ef6\u4e4b\u4e00\u3002 References \u2693\ufe0e \u53c3\u8003\u6587\u737b \u2693\ufe0e [OWASP Cheat Sheet: Deserialization]( https://www.owasp.org/index.php/Deserialization_Cheat_Sheet ) [OWASP Cheat Sheet: Software Supply Chain Security]() [OWASP Cheat Sheet: Secure build and deployment]() [SAFECode Software Integrity Controls]( https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf) [A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack]( https://www.npr.org/2021/04/16/985439655/a-worst-nightmare-cyberattack-the-untold-story-of-the-solarwinds-hack ) https://www.manning.com/books/securing-devops List of Mapped CWEs \u2693\ufe0e \u5c0d\u61c9\u7684 CWEs \u6e05\u55ae \u2693\ufe0e CWE-345 Insufficient Verification of Data Authenticity CWE-345 \u4e0d\u8db3\u7684\u8cc7\u6599\u771f\u5be6\u6027\u9a57\u8b49 CWE-353 Missing Support for Integrity Check CWE-353 \u7f3a\u4e4f\u5c0d\u5b8c\u6574\u6027\u78ba\u8a8d\u4e4b\u652f\u63f4 CWE-426 Untrusted Search Path CWE-426 \u4e0d\u53d7\u4fe1\u4efb\u7684\u641c\u5c0b\u8def\u5f91 CWE-494 Download of Code Without Integrity Check CWE-494 \u4e0b\u8f09\u672a\u7d93\u5b8c\u6574\u6027\u9a57\u8b49\u4e4b\u7a0b\u5f0f\u78bc CWE-502 Deserialization of Untrusted Data CWE-502 \u4e0d\u53d7\u4fe1\u4efb\u8cc7\u6599\u4e4b\u53cd\u5e8f\u5217\u5316 CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-565 \u4fe1\u4efb\u672a\u7d93\u9a57\u8b49\u53ca\u5b8c\u6574\u6027\u78ba\u8a8d\u7684Cookies CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-784 \u5728\u5b89\u5168\u6027\u6c7a\u7b56\u4e2d\u4fe1\u4efb\u672a\u7d93\u9a57\u8b49\u53ca\u5b8c\u6574\u6027\u78ba\u8a8d\u7684Cookies CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-829 \u5305\u542b\u4f86\u81ea\u4e0d\u53d7\u4fe1\u4efb\u63a7\u5236\u9818\u57df\u4e4b\u529f\u80fd CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-830 \u5305\u542b\u4f86\u81ea\u4e0d\u53d7\u4fe1\u4efb\u63a7\u5236\u4f86\u6e90\u4e4b\u7db2\u9801\u529f\u80fd CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes CWE-915 \u52d5\u614b\u6c7a\u5b9a\u7269\u4ef6\u5c6c\u6027\u65bc\u4e0d\u7576\u63a7\u5236\u4e0b\u4e4b\u4fee\u6539","title":"A08 \u8edf\u9ad4\u53ca\u8cc7\u6599\u5b8c\u6574\u6027\u5931\u6548"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#a082021-software-and-data-integrity-failures","text":"","title":"A08:2021 \u2013 Software and Data Integrity Failures"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#factors","text":"","title":"Factors"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#_1","text":"\u5c0d\u61c9\u7684 CWEs\u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u76f8\u95dc CVEs \u7e3d\u91cf 10 16.67% 2.05% 75.04% 45.35% 6.94 7.94 47,972 1,152","title":"\u5f31\u9ede\u56e0\u7d20"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#overview","text":"","title":"Overview"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#_2","text":"A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from CVE/CVSS data. Notable CWEs include CWE-502: Deserialization of Untrusted Data , CWE-829: Inclusion of Functionality from Untrusted Control Sphere , and CWE-494: Download of Code Without Integrity Check . \u9019\u662f2021\u5e74\u7684\u65b0\u985e\u578b\uff0c\u8457\u91cd\u5728\u8edf\u9ad4\u66f4\u65b0\uff0c\u95dc\u9375\u8cc7\u6599\u53ca\u6301\u7e8c\u6027\u6574\u5408/\u90e8\u7f72(CI/CD)\u6d41\u7a0b\u672a\u7d93\u5b8c\u6574\u6027\u9a57\u8b49\u4e4b\u5047\u8a2d\u3002\u540c\u6642\u5728CVE/CVSS\u8cc7\u6599\u52a0\u6b0a\u5f8c\u4e4b\u6700\u9ad8\u5f71\u97ff\u4e4b\u4e00\u3002\u503c\u5f97\u6ce8\u610f\u7684CWE\u5305\u542bCWE-502\uff1a\u4e0d\u53d7\u4fe1\u4efb\u8cc7\u6599\u4e4b\u53cd\u5e8f\u5217\u5316\uff0cCWE-829\uff1a\u5305\u542b\u4f86\u81ea\u4e0d\u53d7\u4fe1\u4efb\u63a7\u5236\u9818\u57df\u4e4b\u529f\u80fd\u53caCWE-494\uff1a\u4e0b\u8f09\u672a\u7d93\u5b8c\u6574\u6027\u9a57\u8b49\u4e4b\u7a0b\u5f0f\u78bc\u3002","title":"\u5f31\u9ede\u7c21\u4ecb"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#description","text":"","title":"Description"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#_3","text":"Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. For example, where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization. Another form of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. \u7a0b\u5f0f\u78bc\u6216\u57fa\u790e\u67b6\u69cb\u672a\u80fd\u4fdd\u8b77\u8edf\u9ad4\u53ca\u8cc7\u6599\u4e4b\u5b8c\u6574\u6027\u53d7\u5230\u7834\u58de\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u7269\u4ef6\u6216\u8cc7\u6599\u7d93\u7de8\u78bc\u6216\u5e8f\u5217\u5316\u5230\u4e00\u500b\u5c0d\u653b\u64ca\u8005\u53ef\u8b80\u5beb\u4e4b\u7d50\u69cb\u4e2d\u5c07\u5c0e\u81f4\u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\u3002\u53e6\u4e00\u7a2e\u5f62\u5f0f\u5247\u662f\u61c9\u7528\u7a0b\u5f0f\u4f9d\u8cf4\u4f86\u81ea\u65bc\u4e0d\u53d7\u4fe1\u4efb\u4f86\u6e90\uff0c\u5178\u85cf\u5eab\u53ca\u5167\u5bb9\u905e\u9001\u7db2\u8def\u4e4b\u5916\u639b\uff0c\u51fd\u5f0f\u5eab\u6216\u6a21\u7d44\u3002\u4e0d\u5b89\u5168\u7684\u6301\u7e8c\u6027\u6574\u5408/\u90e8\u7f72(CI/CD)\u6d41\u7a0b\u5247\u6703\u9020\u6210\u6f5b\u5728\u7684\u672a\u7d93\u6388\u6b0a\u5b58\u53d6\uff0c\u60e1\u610f\u7a0b\u5f0f\u78bc\u6216\u7cfb\u7d71\u7834\u58de\u3002\u6700\u5f8c\uff0c\u73fe\u5728\u8a31\u591a\u61c9\u7528\u7a0b\u5f0f\u64c1\u6709\u81ea\u52d5\u66f4\u65b0\u529f\u80fd\uff0c\u4f46\u81ea\u52d5\u66f4\u65b0\u529f\u80fd\u5728\u7f3a\u4e4f\u5145\u8db3\u5b8c\u6574\u6027\u9a57\u8b49\u529f\u80fd\u6642\u5c31\u4e0b\u8f09\u4e26\u5b89\u88dd\u66f4\u65b0\u5230\u8655\u65bc\u5b89\u5168\u72c0\u614b\u4e0b\u7684\u61c9\u7528\u7a0b\u5f0f\u3002\u653b\u64ca\u8005\u80fd\u4e0a\u50b3\u81ea\u88fd\u66f4\u65b0\u6a94\u6848\uff0c\u66f4\u65b0\u6a94\u6848\u5c07\u50b3\u64ad\u5230\u6240\u6709\u5df2\u5b89\u88dd\u4e4b\u61c9\u7528\u7a0b\u5f0f\u4e26\u5728\u9019\u4e9b\u61c9\u7528\u7a0b\u5f0f\u4e0a\u57f7\u884c\u3002","title":"\u5f31\u9ede\u63cf\u8ff0"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#how-to-prevent","text":"","title":"How to Prevent"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#_4","text":"Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data \u78ba\u4fdd\u4e0d\u53d7\u4fe1\u4efb\u4e4b\u5ba2\u6236\u7aef\u4e0d\u6703\u6536\u5230\u672a\u7c3d\u7f72\u6216\u52a0\u5bc6\u4e4b\u5e8f\u5217\u5316\u8cc7\u6599\u4e26\u5229\u7528\u5b8c\u6574\u6027\u6aa2\u67e5\u6216\u6578\u4f4d\u7c3d\u7ae0\u4f86\u5075\u6e2c\u7ac4\u6539\u6216\u91cd\u653e\u653b\u64ca\u3002 Verify the software or data is from the expected source via signing or similar mechanisms \u5229\u7528\u6578\u4f4d\u7c3d\u7ae0\u6216\u985e\u4f3c\u6a5f\u5236\u78ba\u4fdd\u8edf\u9ad4\u6216\u8cc7\u6599\u4f86\u81ea\u9810\u671f\u4e4b\u63d0\u4f9b\u8005 Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories \u78ba\u4fdd\u51fd\u5f0f\u5eab\u53ca\u5f9e\u5c6c\u5957\u4ef6\uff0c\u4f8b\u5982npm\u6216Maven\uff0c\u662f\u5f9e\u53d7\u4fe1\u4efb\u7684\u5178\u85cf\u5eab\u53d6\u5f97\u3002 Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities \u4f7f\u7528\u8edf\u9ad4\u4f9b\u61c9\u93c8\u5b89\u5168\u5de5\u5177(\u4f8b\u5982OWASP Dependency Check \u6216 OWASP CycloneDX)\u78ba\u4fdd\u5143\u4ef6\u6c92\u6709\u5df2\u77e5\u5f31\u9ede\u3002 Ensure that your CI/CD pipeline has proper configuration and access control to ensure the integrity of the code flowing through the build and deploy processes. \u9069\u7576\u5730\u8a2d\u5b9a\u6301\u7e8c\u6027\u6574\u5408/\u90e8\u7f72(CI/CD)\u6d41\u7a0b\u7684\u7d44\u614b\u53ca\u5b58\u53d6\u63a7\u5236\u4ee5\u78ba\u4fdd\u7a0b\u5f0f\u78bc\u5728\u7d44\u5efa\u53ca\u90e8\u7f72\u6d41\u7a0b\u4e2d\u7684\u5b8c\u6574\u6027\u3002","title":"\u5f31\u9ede\u63cf\u8ff0"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#example-attack-scenarios","text":"","title":"Example Attack Scenarios"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#_5","text":"Scenario #1 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"R00\" Java object signature and uses the Java Serial Killer tool to gain remote code execution on the application server. \u60c5\u58831 \u4e0d\u5b89\u5168\u7684\u53cd\u5e8f\u5217\u5316\uff1a\u4e00\u500b\u53cd\u61c9\u5f0f\u61c9\u7528\u7a0b\u5f0f\u547c\u53ebSpring Boot\u5fae\u670d\u52d9\u3002\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u5011\u8a66\u5716\u78ba\u4fdd\u4ed6\u5011\u7684\u4ee3\u78bc\u662f\u4e0d\u53ef\u8b8a\u7684\u3002\u4ed6\u5011\u7684\u89e3\u6c7a\u65b9\u6848\u662f\u5728\u96d9\u5411\u6240\u6709\u8acb\u6c42\u8a0a\u606f\u4e2d\u5305\u542b\u5e8f\u5217\u5316\u7684\u7528\u6236\u72c0\u614b\u3002\u653b\u64ca\u8005\u6ce8\u610f\u5230\u201cR00\u201dJava\u7269\u4ef6\u7c3d\u7ae0\u4e26\u4f7f\u7528 Java Serial Killer \u5de5\u5177(\u7528\u4f86\u57f7\u884cJava\u53cd\u5e8f\u5217\u5316\u653b\u64ca)\u5728\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u9060\u7aef\u57f7\u884c\u7a0b\u5f0f\u78bc\u3002 Scenario #2 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out. \u60c5\u58832 \u672a\u7c3d\u7f72\u4e4b\u66f4\u65b0\uff1a\u8a31\u591a\u5bb6\u7528\u8def\u7531\u5668\u3001\u6a5f\u4e0a\u76d2\u3001\u88dd\u7f6e\u97cc\u9ad4\u7b49\u672a\u4ee5\u901a\u904e\u7c3d\u7f72\u4e4b\u97cc\u9ad4\u9a57\u8b49\u66f4\u65b0\u6a94\u6848\u3002\u672a\u7c3d\u7f72\u97cc\u9ad4\u662f\u8d8a\u4f86\u8d8a\u591a\u653b\u64ca\u8005\u7684\u76ee\u6a19\u4e14\u60c5\u6cc1\u53ea\u6703\u8b8a\u5f97\u66f4\u7cdf\u3002\u9019\u662f\u4e00\u500b\u4e3b\u8981\u554f\u984c\uff0c\u56e0\u70ba\u53ea\u80fd\u4ee5\u65b0\u7248\u672c\u4fee\u5fa9\u6b64\u6a5f\u5236\u4e26\u671f\u5f85\u820a\u7248\u672c\u81ea\u7136\u6dd8\u6c70\uff0c\u6c92\u6709\u5176\u4ed6\u65b9\u6cd5\u3002 Scenario #3 SolarWinds malicious update : Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history. \u60c5\u58833 SolarWinds \u60e1\u610f\u66f4\u65b0\uff1a\u773e\u6240\u5468\u77e5\uff0c\u67d0\u4e9b\u570b\u5bb6\u6703\u653b\u64ca\u66f4\u65b0\u6a5f\u5236\uff0c\u6700\u8fd1\u4e00\u6b21\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5c0dSolarWinds Orion\u7684\u653b\u64ca\u3002\u8a72\u8edf\u9ad4\u958b\u767c\u5546\u64c1\u6709\u5b89\u5168\u7d44\u5efa\u548c\u66f4\u65b0\u5b8c\u6574\u6027\u6d41\u7a0b\u3002\u5118\u7ba1\u5982\u6b64\uff0c\u9019\u4e9b\u6d41\u7a0b\u4ecd\u88ab\u7834\u58de\u4e26\u5728\u5e7e\u500b\u6708\u6642\u9593\u4e2d\u5411 18,000 \u591a\u500b\u7d44\u7e54\u9001\u51fa\u9ad8\u5ea6\u91dd\u5c0d\u6027\u7684\u60e1\u610f\u66f4\u65b0\uff0c\u5176\u4e2d\u5927\u7d04 100 \u500b\u7d44\u7e54\u53d7\u5230\u4e86\u5f71\u97ff\u3002 \u9019\u662f\u6b77\u53f2\u4e0a\u6b64\u985e\u6027\u8cea\u6700\u6df1\u9060\u3001\u6700\u91cd\u5927\u7684\u8cc7\u5b89\u4e8b\u4ef6\u4e4b\u4e00\u3002","title":"\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#references","text":"","title":"References"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#_6","text":"[OWASP Cheat Sheet: Deserialization]( https://www.owasp.org/index.php/Deserialization_Cheat_Sheet ) [OWASP Cheat Sheet: Software Supply Chain Security]() [OWASP Cheat Sheet: Secure build and deployment]() [SAFECode Software Integrity Controls]( https://safecode.org/publication/SAFECode_Software_Integrity_Controls0610.pdf) [A 'Worst Nightmare' Cyberattack: The Untold Story Of The SolarWinds Hack]( https://www.npr.org/2021/04/16/985439655/a-worst-nightmare-cyberattack-the-untold-story-of-the-solarwinds-hack ) https://www.manning.com/books/securing-devops","title":"\u53c3\u8003\u6587\u737b"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#list-of-mapped-cwes","text":"","title":"List of Mapped CWEs"},{"location":"zh_TW/A08_2021-Software_and_Data_Integrity_Failures/#cwes","text":"CWE-345 Insufficient Verification of Data Authenticity CWE-345 \u4e0d\u8db3\u7684\u8cc7\u6599\u771f\u5be6\u6027\u9a57\u8b49 CWE-353 Missing Support for Integrity Check CWE-353 \u7f3a\u4e4f\u5c0d\u5b8c\u6574\u6027\u78ba\u8a8d\u4e4b\u652f\u63f4 CWE-426 Untrusted Search Path CWE-426 \u4e0d\u53d7\u4fe1\u4efb\u7684\u641c\u5c0b\u8def\u5f91 CWE-494 Download of Code Without Integrity Check CWE-494 \u4e0b\u8f09\u672a\u7d93\u5b8c\u6574\u6027\u9a57\u8b49\u4e4b\u7a0b\u5f0f\u78bc CWE-502 Deserialization of Untrusted Data CWE-502 \u4e0d\u53d7\u4fe1\u4efb\u8cc7\u6599\u4e4b\u53cd\u5e8f\u5217\u5316 CWE-565 Reliance on Cookies without Validation and Integrity Checking CWE-565 \u4fe1\u4efb\u672a\u7d93\u9a57\u8b49\u53ca\u5b8c\u6574\u6027\u78ba\u8a8d\u7684Cookies CWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision CWE-784 \u5728\u5b89\u5168\u6027\u6c7a\u7b56\u4e2d\u4fe1\u4efb\u672a\u7d93\u9a57\u8b49\u53ca\u5b8c\u6574\u6027\u78ba\u8a8d\u7684Cookies CWE-829 Inclusion of Functionality from Untrusted Control Sphere CWE-829 \u5305\u542b\u4f86\u81ea\u4e0d\u53d7\u4fe1\u4efb\u63a7\u5236\u9818\u57df\u4e4b\u529f\u80fd CWE-830 Inclusion of Web Functionality from an Untrusted Source CWE-830 \u5305\u542b\u4f86\u81ea\u4e0d\u53d7\u4fe1\u4efb\u63a7\u5236\u4f86\u6e90\u4e4b\u7db2\u9801\u529f\u80fd CWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes CWE-915 \u52d5\u614b\u6c7a\u5b9a\u7269\u4ef6\u5c6c\u6027\u65bc\u4e0d\u7576\u63a7\u5236\u4e0b\u4e4b\u4fee\u6539","title":"\u5c0d\u61c9\u7684 CWEs \u6e05\u55ae"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/","text":"A09:2021 \u2013 Security Logging and Monitoring Failures \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 4 19.23% 6.51% 53.67% 39.97% 6.87 4.99 53,615 242 \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u7e3d\u767c\u751f\u6578 \u76f8\u95dc CVEs \u7e3d\u6578\u91cf 4 19.23% 6.51% 53.67% 39.97% 6.87 4.99 53,615 242 Overview \u2693\ufe0e Security logging and monitoring came from the industry survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File . \u5b89\u5168\u8a18\u9304\u53ca\u76e3\u63a7\u662f\u696d\u754c\u8abf\u67e5\u7d50\u679c (#3)\uff0c\u75312017\u5e74\u7684\u7b2c\u5341\u540d\u7a0d\u5fae\u4e0a\u5347\u3002\u8a18\u9304\u53ca\u76e3\u63a7\u529f\u80fd\u9a57\u8b49\u975e\u5e38\u6709\u6311\u6230\u6027\uff0c\u901a\u5e38\u9700\u8981\u4ee5\u8a2a\u8ac7\u6216\u8a62\u554f\u4e4b\u65b9\u5f0f\u6aa2\u9a57\u6709\u7121\u5075\u6e2c\u6ef2\u900f\u6e2c\u8a66\u7684\u653b\u64ca\u6d3b\u52d5\u3002\u5075\u6e2c\u53ca\u61c9\u8b8a\u5c0d\u8cc7\u5b89\u4e8b\u4ef6\u81f3\u95dc\u91cd\u8981\uff0c\u4f46\u6b64\u985e\u578b\u4e4bCVE/CVSS\u8cc7\u6599\u4e0d\u591a\u3002\u5118\u7ba1\u5982\u6b64\uff0c\u6b64\u985e\u578b\u5c0d\u65bc\u4e8b\u4ef6\u544a\u8b66\u3001\u53ef\u898b\u6027\u548c\u9451\u8b58\u4ecd\u7136\u975e\u5e38\u6709\u5f71\u97ff\u529b\u3002\u6b64\u985e\u578b\u6db5\u84cbCWE-778\u4e0d\u8db3\u5730\u8a18\u9304\uff0cCWE-117\u672a\u7d93\u9069\u7576\u8655\u7406\u4e4b\u65e5\u8a8c\u8f38\u51fa\uff0cCWE-223\u907a\u6f0f\u5b89\u5168\u76f8\u95dc\u8cc7\u8a0a\u53caCWE-532\u65bc\u65e5\u8a8c\u6a94\u6848\u7f6e\u5165\u654f\u611f\u8cc7\u8a0a\u3002 Description \u2693\ufe0e Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: \u57282021\u5e74OWASP Top 10\uff0c\u6b64\u985e\u578b\u6709\u52a9\u65bc\u5c0d\u9032\u884c\u4e2d\u8cc7\u5b89\u4e8b\u4ef6\u4e4b\u5075\u6e2c\uff0c\u5347\u7d1a\u53ca\u61c9\u8b8a\u3002\u7f3a\u4e4f\u8a18\u9304\u53ca\u76e3\u63a7\u6642\u7121\u6cd5\u5075\u6e2c\u8cc7\u5b89\u4e8b\u4ef6\u767c\u751f\u3002\u4e0d\u8db3\u5730\u8a18\u9304\uff0c\u5075\u6e2c\uff0c\u76e3\u63a7\u53ca\u4e3b\u52d5\u61c9\u8b8a\u96a8\u6642\u6703\u767c\u751f\uff1a Auditable events, such as logins, failed logins, and high-value transactions, are not logged. \u53ef\u7a3d\u6838\u4e8b\u4ef6\u672a\u8a18\u9304\uff0c\u5982\u767b\u5165\u6210\u529f\uff0c\u767b\u5165\u5931\u6557\u53ca\u9ad8\u50f9\u503c\u4ea4\u6613\u3002 Warnings and errors generate no, inadequate, or unclear log messages. \u8b66\u544a\u6216\u932f\u8aa4\u767c\u751f\u6642\u672a\u7522\u751f\uff0c\u7522\u751f\u4e0d\u5145\u8db3\u6216\u7522\u751f\u4e0d\u660e\u78ba\u65e5\u8a8c\u3002 Logs of applications and APIs are not monitored for suspicious activity. \u672a\u76e3\u63a7\u61c9\u7528\u7a0b\u5f0f\u6216\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762(API)\u65e5\u8a8c\u4e2d\u7684\u53ef\u7591\u6d3b\u52d5\u3002 Logs are only stored locally. \u65e5\u8a8c\u50c5\u5132\u5b58\u65bc\u672c\u5730\u7aef\u3002 Appropriate alerting thresholds and response escalation processes are not in place or effective. \u672a\u8a2d\u6709\u6216\u8a2d\u6709\u7121\u6548\u4e4b\u9069\u7576\u544a\u8b66\u95a5\u503c\u53ca\u61c9\u8b8a\u5347\u7d1a\u7a0b\u5e8f\u3002 Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts. \u6ef2\u900f\u6e2c\u8a66\u53caDAST\u5de5\u5177(\u5982OWASP ZAP)\u6383\u63cf\u6c92\u6709\u89f8\u767c\u544a\u8b66\u3002 The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. \u61c9\u7528\u7a0b\u5f0f\u7121\u6cd5\u63a5\u8fd1\u5373\u6642\u6216\u5373\u6642\u5075\u6e2c\uff0c\u5347\u7d1a\u6216\u8b66\u544a\u9032\u884c\u4e2d\u4e4b\u653b\u64ca\u3002 You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021 \u2013 Broken Access Control). \u5141\u8a31\u4f7f\u7528\u8005\u6216\u653b\u64ca\u8005\u8b80\u53d6\u65e5\u8a8c\u6216\u544a\u8b66\u4e8b\u4ef6\u53ef\u80fd\u65e9\u6210\u8cc7\u8a0a\u6d29\u6f0f(\u53c3\u8003A01:2021\u6b0a\u9650\u63a7\u5236\u5931\u6548) How to Prevent \u2693\ufe0e Developers should implement some or all the following controls, d epending on the risk of the application: \u958b\u767c\u8005\u61c9\u4f9d\u64da\u61c9\u7528\u7a0b\u5f0f\u6240\u9762\u81e8\u98a8\u96aa\u5be6\u4f5c\u4e0b\u5217\u90e8\u5206\u6216\u5168\u90e8\u7684\u63a7\u5236\u9805\uff1a Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. \u78ba\u4fdd\u8a18\u9304\u6240\u6709\u767b\u5165\uff0c\u5b58\u53d6\u63a7\u5236\u53ca\u4f3a\u670d\u5668\u7aef\u8f38\u5165\u9a57\u8b49\u4e4b\u5931\u6557\uff0c\u65e5\u8a8c\u61c9\u5305\u542b\u5145\u8db3\u4f7f\u7528\u8005\u60c5\u5883\u4ee5\u8b58\u5225\u53ef\u7591\u6216\u60e1\u610f\u5e33\u865f\uff0c\u65e5\u8a8c\u61c9\u5b58\u7559\u5145\u8db3\u6642\u9593\u4ee5\u5229\u672a\u4f86\u53ef\u80fd\u4e4b\u9451\u8b58\u5206\u6790\u8981\u6c42\u3002 Ensure that logs are generated in a format that log management solutions can easily consume. \u78ba\u4fdd\u65e5\u8a8c\u683c\u5f0f\u7b26\u5408\u4e00\u822c\u65e5\u8a8c\u7ba1\u7406\u7cfb\u7d71\u5e38\u7528\u683c\u5f0f\u3002 Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. \u78ba\u4fdd\u65e5\u8a8c\u7d93\u6b63\u78ba\u7de8\u78bc\u4ee5\u9632\u6b62\u906d\u53d7\u6ce8\u5165\u653b\u64ca\u6216\u65e5\u8a8c/\u76e3\u63a7\u7cfb\u7d71\u906d\u53d7\u653b\u64ca\u3002 Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. \u78ba\u4fdd\u9ad8\u50f9\u503c\u4ea4\u6613\u9032\u884c\u6642\u7522\u751f\u7a3d\u6838\u8ecc\u8de1(\u65e5\u8a8c)\u4e26\u5be6\u4f5c\u5b8c\u6574\u6027\u63a7\u5236\u4ee5\u907f\u514d\u7ac4\u6539\u6216\u522a\u9664\uff0c\u5982\u50c5\u9650\u9644\u52a0\u7684\u8cc7\u6599\u8868\u6216\u985e\u4f3c\u5de5\u5177\u3002 DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. DevSecOps\u5718\u968a\u61c9\u5efa\u7acb\u6709\u6548\u5730\u76e3\u63a7\u53ca\u544a\u8b66\u6a5f\u5236\u4ee5\u5229\u5075\u6e2c\u53ef\u7591\u6d3b\u52d5\u4e26\u5feb\u901f\u61c9\u8b8a\u3002 Establish or adopt an incident response and recovery plan, such as NIST 800-61r2 or later. \u5efa\u7acb\u6216\u5c0e\u5165\u4e8b\u4ef6\u61c9\u8b8a\u53ca\u5fa9\u539f\u8a08\u756b\uff0c\u5982NIST 800-61r2\u6216\u66f4\u65b0\u7248\u672c\u3002 There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the ELK stack, that feature custom dashboards and alerting. \u73fe\u6709\u591a\u7a2e\u5546\u696d\u5316\u53ca\u958b\u653e\u539f\u59cb\u78bc\u61c9\u7528\u7a0b\u5f0f\u4fdd\u8b77\u67b6\u69cb\uff0c\u5982OWASP ModSecurity Core Rule Set\u53ca\u958b\u653e\u539f\u59cb\u78bc\u65e5\u8a8c\u95dc\u806f\u8edf\u9ad4\u53ef\u5ba2\u88fd\u5316\u5100\u8868\u677f\u53ca\u544a\u8b66\uff0c\u5982 ELK stack\u3002 Example Attack Scenarios \u2693\ufe0e Scenario #1: A childrens' health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. \u60c5\u58831\uff1a\u4e00\u5bb6\u5152\u7ae5\u5065\u5eb7\u8a08\u5283\u4f9b\u61c9\u5546\u7684\u7db2\u7ad9\u904b\u71df\u5546\u56e0\u7f3a\u4e4f\u76e3\u63a7\u548c\u8a18\u9304\u7121\u6cd5\u5075\u6e2c\u8cc7\u5b89\u4e8b\u4ef6\u3002\u5916\u90e8\u901a\u77e5\u8a72\u5065\u5eb7\u8a08\u5283\u4f9b\u61c9\u5546\uff0c\u653b\u64ca\u8005\u5df2\u5b58\u53d6\u53ca\u4fee\u6539\u8d85\u904e 350 \u842c\u540d\u5152\u7ae5\u7684\u654f\u611f\u5065\u5eb7\u8a18\u9304\u3002\u4e8b\u5f8c\u5be9\u67e5\u767c\u73fe\u7db2\u7ad9\u958b\u767c\u8005\u6c92\u6709\u8655\u7406\u91cd\u5927\u5f31\u9ede\u3002\u7531\u65bc\u7cfb\u7d71\u6c92\u6709\u8a18\u9304\u6216\u76e3\u63a7\uff0c\u8cc7\u6599\u6d29\u6f0f\u53ef\u80fd\u5f9e 2013 \u5e74\u958b\u59cb\u81f3\u4eca\uff0c\u6642\u9593\u8d85\u904e\u4e03\u5e74\u3002 Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. \u60c5\u58832\uff1a\u5370\u5ea6\u4e00\u5bb6\u5927\u578b\u822a\u7a7a\u516c\u53f8\u767c\u751f\u6d89\u53ca\u6578\u767e\u842c\u4e58\u5ba2\u8d85\u904e\u5341\u5e74\u5305\u62ec\u8b77\u7167\u53ca\u4fe1\u7528\u5361\u8cc7\u6599\u7b49\u500b\u4eba\u8cc7\u6599\u7684\u8cc7\u6599\u6d29\u6f0f\u3002\u8cc7\u6599\u6d29\u6f0f\u767c\u751f\u5728\u7b2c\u4e09\u65b9\u4f9b\u61c9\u5546\u63d0\u4f9b\u7684\u96f2\u7aef\u670d\u52d9\uff0c\u8a72\u4f9b\u61c9\u5546\u5728\u8cc7\u6599\u6d29\u6f0f\u767c\u751f\u4e00\u6bb5\u6642\u9593\u5f8c\u901a\u77e5\u822a\u7a7a\u516c\u53f8\u3002 Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator. \u60c5\u58833\uff1a\u4e00\u5bb6\u5927\u578b\u6b50\u6d32\u822a\u7a7a\u516c\u53f8\u767c\u751f\u4f9dGDPR\u61c9\u5831\u544a\u4e4b\u500b\u8cc7\u4e8b\u6545\u3002 \u64da\u5831\u5c0e\uff0c\u653b\u64ca\u8005\u5229\u7528\u652f\u4ed8\u61c9\u7528\u7cfb\u7d71\u4e4b\u5b89\u5168\u6f0f\u6d1e\uff0c\u53d6\u5f97\u8d85\u904e40\u842c\u7b46\u5ba2\u6236\u652f\u4ed8\u7d00\u9304\u3002 \u8a72\u822a\u7a7a\u516c\u53f8\u906d\u96b1\u79c1\u4e3b\u7ba1\u6a5f\u95dc\u88c1\u7f70\u5169\u5343\u842c\u82f1\u938a\u3002 References \u2693\ufe0e OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events List of Mapped CWEs \u2693\ufe0e CWE-117 Improper Output Neutralization for Logs CWE-117 \u672a\u7d93\u9069\u7576\u8655\u7406\u4e4b\u65e5\u8a8c\u8f38\u51fa CWE-223 Omission of Security-relevant Information CWE-223 \u907a\u6f0f\u5b89\u5168\u76f8\u95dc\u8cc7\u8a0a CWE-532 Insertion of Sensitive Information into Log File CWE-532 \u65bc\u65e5\u8a8c\u6a94\u6848\u7f6e\u5165\u654f\u611f\u8cc7\u8a0a CWE-778 Insufficient Logging CWE-778 \u4e0d\u8db3\u5730\u8a18\u9304","title":"A09 \u8cc7\u5b89\u8a18\u9304\u53ca\u76e3\u63a7\u5931\u6548"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#a092021-security-logging-and-monitoring-failures","text":"","title":"A09:2021 \u2013 Security Logging and Monitoring Failures"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 4 19.23% 6.51% 53.67% 39.97% 6.87 4.99 53,615 242 \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u7e3d\u767c\u751f\u6578 \u76f8\u95dc CVEs \u7e3d\u6578\u91cf 4 19.23% 6.51% 53.67% 39.97% 6.87 4.99 53,615 242","title":"Factors"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#overview","text":"Security logging and monitoring came from the industry survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs , CWE-223 Omission of Security-relevant Information , and CWE-532 Insertion of Sensitive Information into Log File . \u5b89\u5168\u8a18\u9304\u53ca\u76e3\u63a7\u662f\u696d\u754c\u8abf\u67e5\u7d50\u679c (#3)\uff0c\u75312017\u5e74\u7684\u7b2c\u5341\u540d\u7a0d\u5fae\u4e0a\u5347\u3002\u8a18\u9304\u53ca\u76e3\u63a7\u529f\u80fd\u9a57\u8b49\u975e\u5e38\u6709\u6311\u6230\u6027\uff0c\u901a\u5e38\u9700\u8981\u4ee5\u8a2a\u8ac7\u6216\u8a62\u554f\u4e4b\u65b9\u5f0f\u6aa2\u9a57\u6709\u7121\u5075\u6e2c\u6ef2\u900f\u6e2c\u8a66\u7684\u653b\u64ca\u6d3b\u52d5\u3002\u5075\u6e2c\u53ca\u61c9\u8b8a\u5c0d\u8cc7\u5b89\u4e8b\u4ef6\u81f3\u95dc\u91cd\u8981\uff0c\u4f46\u6b64\u985e\u578b\u4e4bCVE/CVSS\u8cc7\u6599\u4e0d\u591a\u3002\u5118\u7ba1\u5982\u6b64\uff0c\u6b64\u985e\u578b\u5c0d\u65bc\u4e8b\u4ef6\u544a\u8b66\u3001\u53ef\u898b\u6027\u548c\u9451\u8b58\u4ecd\u7136\u975e\u5e38\u6709\u5f71\u97ff\u529b\u3002\u6b64\u985e\u578b\u6db5\u84cbCWE-778\u4e0d\u8db3\u5730\u8a18\u9304\uff0cCWE-117\u672a\u7d93\u9069\u7576\u8655\u7406\u4e4b\u65e5\u8a8c\u8f38\u51fa\uff0cCWE-223\u907a\u6f0f\u5b89\u5168\u76f8\u95dc\u8cc7\u8a0a\u53caCWE-532\u65bc\u65e5\u8a8c\u6a94\u6848\u7f6e\u5165\u654f\u611f\u8cc7\u8a0a\u3002","title":"Overview"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#description","text":"Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: \u57282021\u5e74OWASP Top 10\uff0c\u6b64\u985e\u578b\u6709\u52a9\u65bc\u5c0d\u9032\u884c\u4e2d\u8cc7\u5b89\u4e8b\u4ef6\u4e4b\u5075\u6e2c\uff0c\u5347\u7d1a\u53ca\u61c9\u8b8a\u3002\u7f3a\u4e4f\u8a18\u9304\u53ca\u76e3\u63a7\u6642\u7121\u6cd5\u5075\u6e2c\u8cc7\u5b89\u4e8b\u4ef6\u767c\u751f\u3002\u4e0d\u8db3\u5730\u8a18\u9304\uff0c\u5075\u6e2c\uff0c\u76e3\u63a7\u53ca\u4e3b\u52d5\u61c9\u8b8a\u96a8\u6642\u6703\u767c\u751f\uff1a Auditable events, such as logins, failed logins, and high-value transactions, are not logged. \u53ef\u7a3d\u6838\u4e8b\u4ef6\u672a\u8a18\u9304\uff0c\u5982\u767b\u5165\u6210\u529f\uff0c\u767b\u5165\u5931\u6557\u53ca\u9ad8\u50f9\u503c\u4ea4\u6613\u3002 Warnings and errors generate no, inadequate, or unclear log messages. \u8b66\u544a\u6216\u932f\u8aa4\u767c\u751f\u6642\u672a\u7522\u751f\uff0c\u7522\u751f\u4e0d\u5145\u8db3\u6216\u7522\u751f\u4e0d\u660e\u78ba\u65e5\u8a8c\u3002 Logs of applications and APIs are not monitored for suspicious activity. \u672a\u76e3\u63a7\u61c9\u7528\u7a0b\u5f0f\u6216\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762(API)\u65e5\u8a8c\u4e2d\u7684\u53ef\u7591\u6d3b\u52d5\u3002 Logs are only stored locally. \u65e5\u8a8c\u50c5\u5132\u5b58\u65bc\u672c\u5730\u7aef\u3002 Appropriate alerting thresholds and response escalation processes are not in place or effective. \u672a\u8a2d\u6709\u6216\u8a2d\u6709\u7121\u6548\u4e4b\u9069\u7576\u544a\u8b66\u95a5\u503c\u53ca\u61c9\u8b8a\u5347\u7d1a\u7a0b\u5e8f\u3002 Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts. \u6ef2\u900f\u6e2c\u8a66\u53caDAST\u5de5\u5177(\u5982OWASP ZAP)\u6383\u63cf\u6c92\u6709\u89f8\u767c\u544a\u8b66\u3002 The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. \u61c9\u7528\u7a0b\u5f0f\u7121\u6cd5\u63a5\u8fd1\u5373\u6642\u6216\u5373\u6642\u5075\u6e2c\uff0c\u5347\u7d1a\u6216\u8b66\u544a\u9032\u884c\u4e2d\u4e4b\u653b\u64ca\u3002 You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021 \u2013 Broken Access Control). \u5141\u8a31\u4f7f\u7528\u8005\u6216\u653b\u64ca\u8005\u8b80\u53d6\u65e5\u8a8c\u6216\u544a\u8b66\u4e8b\u4ef6\u53ef\u80fd\u65e9\u6210\u8cc7\u8a0a\u6d29\u6f0f(\u53c3\u8003A01:2021\u6b0a\u9650\u63a7\u5236\u5931\u6548)","title":"Description"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#how-to-prevent","text":"Developers should implement some or all the following controls, d epending on the risk of the application: \u958b\u767c\u8005\u61c9\u4f9d\u64da\u61c9\u7528\u7a0b\u5f0f\u6240\u9762\u81e8\u98a8\u96aa\u5be6\u4f5c\u4e0b\u5217\u90e8\u5206\u6216\u5168\u90e8\u7684\u63a7\u5236\u9805\uff1a Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis. \u78ba\u4fdd\u8a18\u9304\u6240\u6709\u767b\u5165\uff0c\u5b58\u53d6\u63a7\u5236\u53ca\u4f3a\u670d\u5668\u7aef\u8f38\u5165\u9a57\u8b49\u4e4b\u5931\u6557\uff0c\u65e5\u8a8c\u61c9\u5305\u542b\u5145\u8db3\u4f7f\u7528\u8005\u60c5\u5883\u4ee5\u8b58\u5225\u53ef\u7591\u6216\u60e1\u610f\u5e33\u865f\uff0c\u65e5\u8a8c\u61c9\u5b58\u7559\u5145\u8db3\u6642\u9593\u4ee5\u5229\u672a\u4f86\u53ef\u80fd\u4e4b\u9451\u8b58\u5206\u6790\u8981\u6c42\u3002 Ensure that logs are generated in a format that log management solutions can easily consume. \u78ba\u4fdd\u65e5\u8a8c\u683c\u5f0f\u7b26\u5408\u4e00\u822c\u65e5\u8a8c\u7ba1\u7406\u7cfb\u7d71\u5e38\u7528\u683c\u5f0f\u3002 Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems. \u78ba\u4fdd\u65e5\u8a8c\u7d93\u6b63\u78ba\u7de8\u78bc\u4ee5\u9632\u6b62\u906d\u53d7\u6ce8\u5165\u653b\u64ca\u6216\u65e5\u8a8c/\u76e3\u63a7\u7cfb\u7d71\u906d\u53d7\u653b\u64ca\u3002 Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar. \u78ba\u4fdd\u9ad8\u50f9\u503c\u4ea4\u6613\u9032\u884c\u6642\u7522\u751f\u7a3d\u6838\u8ecc\u8de1(\u65e5\u8a8c)\u4e26\u5be6\u4f5c\u5b8c\u6574\u6027\u63a7\u5236\u4ee5\u907f\u514d\u7ac4\u6539\u6216\u522a\u9664\uff0c\u5982\u50c5\u9650\u9644\u52a0\u7684\u8cc7\u6599\u8868\u6216\u985e\u4f3c\u5de5\u5177\u3002 DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly. DevSecOps\u5718\u968a\u61c9\u5efa\u7acb\u6709\u6548\u5730\u76e3\u63a7\u53ca\u544a\u8b66\u6a5f\u5236\u4ee5\u5229\u5075\u6e2c\u53ef\u7591\u6d3b\u52d5\u4e26\u5feb\u901f\u61c9\u8b8a\u3002 Establish or adopt an incident response and recovery plan, such as NIST 800-61r2 or later. \u5efa\u7acb\u6216\u5c0e\u5165\u4e8b\u4ef6\u61c9\u8b8a\u53ca\u5fa9\u539f\u8a08\u756b\uff0c\u5982NIST 800-61r2\u6216\u66f4\u65b0\u7248\u672c\u3002 There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the ELK stack, that feature custom dashboards and alerting. \u73fe\u6709\u591a\u7a2e\u5546\u696d\u5316\u53ca\u958b\u653e\u539f\u59cb\u78bc\u61c9\u7528\u7a0b\u5f0f\u4fdd\u8b77\u67b6\u69cb\uff0c\u5982OWASP ModSecurity Core Rule Set\u53ca\u958b\u653e\u539f\u59cb\u78bc\u65e5\u8a8c\u95dc\u806f\u8edf\u9ad4\u53ef\u5ba2\u88fd\u5316\u5100\u8868\u677f\u53ca\u544a\u8b66\uff0c\u5982 ELK stack\u3002","title":"How to Prevent"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#example-attack-scenarios","text":"Scenario #1: A childrens' health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years. \u60c5\u58831\uff1a\u4e00\u5bb6\u5152\u7ae5\u5065\u5eb7\u8a08\u5283\u4f9b\u61c9\u5546\u7684\u7db2\u7ad9\u904b\u71df\u5546\u56e0\u7f3a\u4e4f\u76e3\u63a7\u548c\u8a18\u9304\u7121\u6cd5\u5075\u6e2c\u8cc7\u5b89\u4e8b\u4ef6\u3002\u5916\u90e8\u901a\u77e5\u8a72\u5065\u5eb7\u8a08\u5283\u4f9b\u61c9\u5546\uff0c\u653b\u64ca\u8005\u5df2\u5b58\u53d6\u53ca\u4fee\u6539\u8d85\u904e 350 \u842c\u540d\u5152\u7ae5\u7684\u654f\u611f\u5065\u5eb7\u8a18\u9304\u3002\u4e8b\u5f8c\u5be9\u67e5\u767c\u73fe\u7db2\u7ad9\u958b\u767c\u8005\u6c92\u6709\u8655\u7406\u91cd\u5927\u5f31\u9ede\u3002\u7531\u65bc\u7cfb\u7d71\u6c92\u6709\u8a18\u9304\u6216\u76e3\u63a7\uff0c\u8cc7\u6599\u6d29\u6f0f\u53ef\u80fd\u5f9e 2013 \u5e74\u958b\u59cb\u81f3\u4eca\uff0c\u6642\u9593\u8d85\u904e\u4e03\u5e74\u3002 Scenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time. \u60c5\u58832\uff1a\u5370\u5ea6\u4e00\u5bb6\u5927\u578b\u822a\u7a7a\u516c\u53f8\u767c\u751f\u6d89\u53ca\u6578\u767e\u842c\u4e58\u5ba2\u8d85\u904e\u5341\u5e74\u5305\u62ec\u8b77\u7167\u53ca\u4fe1\u7528\u5361\u8cc7\u6599\u7b49\u500b\u4eba\u8cc7\u6599\u7684\u8cc7\u6599\u6d29\u6f0f\u3002\u8cc7\u6599\u6d29\u6f0f\u767c\u751f\u5728\u7b2c\u4e09\u65b9\u4f9b\u61c9\u5546\u63d0\u4f9b\u7684\u96f2\u7aef\u670d\u52d9\uff0c\u8a72\u4f9b\u61c9\u5546\u5728\u8cc7\u6599\u6d29\u6f0f\u767c\u751f\u4e00\u6bb5\u6642\u9593\u5f8c\u901a\u77e5\u822a\u7a7a\u516c\u53f8\u3002 Scenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator. \u60c5\u58833\uff1a\u4e00\u5bb6\u5927\u578b\u6b50\u6d32\u822a\u7a7a\u516c\u53f8\u767c\u751f\u4f9dGDPR\u61c9\u5831\u544a\u4e4b\u500b\u8cc7\u4e8b\u6545\u3002 \u64da\u5831\u5c0e\uff0c\u653b\u64ca\u8005\u5229\u7528\u652f\u4ed8\u61c9\u7528\u7cfb\u7d71\u4e4b\u5b89\u5168\u6f0f\u6d1e\uff0c\u53d6\u5f97\u8d85\u904e40\u842c\u7b46\u5ba2\u6236\u652f\u4ed8\u7d00\u9304\u3002 \u8a72\u822a\u7a7a\u516c\u53f8\u906d\u96b1\u79c1\u4e3b\u7ba1\u6a5f\u95dc\u88c1\u7f70\u5169\u5343\u842c\u82f1\u938a\u3002","title":"Example Attack Scenarios"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#references","text":"OWASP Proactive Controls: Implement Logging and Monitoring OWASP Application Security Verification Standard: V8 Logging and Monitoring OWASP Testing Guide: Testing for Detailed Error Code OWASP Cheat Sheet: Logging Data Integrity: Recovering from Ransomware and Other Destructive Events Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events","title":"References"},{"location":"zh_TW/A09_2021-Security_Logging_and_Monitoring_Failures/#list-of-mapped-cwes","text":"CWE-117 Improper Output Neutralization for Logs CWE-117 \u672a\u7d93\u9069\u7576\u8655\u7406\u4e4b\u65e5\u8a8c\u8f38\u51fa CWE-223 Omission of Security-relevant Information CWE-223 \u907a\u6f0f\u5b89\u5168\u76f8\u95dc\u8cc7\u8a0a CWE-532 Insertion of Sensitive Information into Log File CWE-532 \u65bc\u65e5\u8a8c\u6a94\u6848\u7f6e\u5165\u654f\u611f\u8cc7\u8a0a CWE-778 Insufficient Logging CWE-778 \u4e0d\u8db3\u5730\u8a18\u9304","title":"List of Mapped CWEs"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/","text":"A10:2021 \u2013 Server-Side Request Forgery (SSRF) \u2693\ufe0e Factors \u2693\ufe0e CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385 | \u53ef\u5c0d\u7167 CWEs \u6578\u91cf | \u6700\u5927\u767c\u751f\u7387 | \u5e73\u5747\u767c\u751f\u7387 |\u6700\u5927\u8986\u84cb\u7bc4\u570d | \u5e73\u5747\u8986\u84cb\u7bc4\u570d | \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e | \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff | \u51fa\u73fe\u6b21\u6578 | \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf | | 1 | 2.72% | 2.72% | 67.72% | 67.72% | 8.28 | 6.72 | 9,503 | 385 | Overview (\u6982\u89bd) \u2693\ufe0e This category is added from the industry survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of CWEs for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition. \u9019\u500b\u985e\u5225\u662f\u5f9e\u7522\u696d\u8abf\u67e5\u7d50\u679c\u52a0\u5165\u81f3\u6b64\u7684(#1)\u3002\u8cc7\u6599\u986f\u793a\u5728\u6e2c\u8a66\u8986\u84cb\u7387\u9ad8\u65bc\u5e73\u5747\u6c34\u6e96\u4ee5\u53ca\u5229\u7528(Exploit)\u548c\u885d\u64ca(Impact)\u6f5b\u529b\u8a55\u7b49\u9ad8\u65bc\u5e73\u5747\u6c34\u6e96\u7684\u60c5\u6cc1\u4e0b\uff0c\u6b64\u985e\u5225\u767c\u751f\u6a5f\u7387\u76f8\u5c0d\u8f03\u4f4e\u3002\u56e0\u70ba\u65b0\u5831\u5230\u7684\u985e\u5225\u6709\u53ef\u80fd\u662f\u5728CWEs\u7576\u4e2d\u53d7\u5230\u55ae\u4e00\u6216\u5c0f\u7fa4\u95dc\u6ce8\u7684\u985e\u5225\u800c\u5df2\uff0c\u56e0\u6b64\u6211\u5011\u5e0c\u671b\u6b64\u9805\u76ee\u53ef\u4ee5\u5f15\u4f86\u66f4\u591a\u4eba\u95dc\u6ce8\uff0c\u9032\u800c\u5728\u672a\u4f86\u7248\u672c\u8b8a\u6210\u4e00\u500b\u8f03\u5927\u7684\u985e\u5225\u3002 Description (\u8aaa\u660e) \u2693\ufe0e SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network ACL. (\u7576\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u6b63\u5728\u53d6\u5f97\u9060\u7aef\u8cc7\u6e90\uff0c\u537b\u672a\u9a57\u8b49\u7531\u4f7f\u7528\u8005\u63d0\u4f9b\u7684\u7db2\u5740\uff0c\u6b64\u6642\u5c31\u6703\u767c\u751f\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u3002\u5373\u4fbf\u6709\u9632\u706b\u7246\u3001VPN\u6216\u5176\u4ed6\u7db2\u8defACL\u4fdd\u8b77\u7684\u60c5\u6cc1\u4e0b\uff0c\u653b\u64ca\u8005\u4ecd\u5f97\u4ee5\u5f37\u8feb\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u767c\u9001\u4e00\u500b\u7d93\u904e\u634f\u9020\u7684\u8acb\u6c42\u7d66\u4e00\u500b\u975e\u9810\u671f\u7684\u76ee\u7684\u7aef\u3002) As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures. (\u73fe\u4eca\u7684\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u63d0\u4f9b\u7d42\u7aef\u4f7f\u7528\u8005\u4fbf\u5229\u7684\u7279\u8272\uff0c\u53d6\u5f97\u7db2\u5740\u5df2\u7d93\u662f\u5e38\u898b\u7684\u4e86\u3002\u56e0\u6b64\uff0c\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u7684\u767c\u751f\u7387\u662f\u5728\u589e\u52a0\u7576\u4e2d\u7684\u3002\u800c\u4e14\uff0c\u56e0\u70ba\u96f2\u7aef\u670d\u52d9\u548c\u96f2\u7aef\u7d50\u69cb\u7684\u8907\u96dc\u6027\uff0c\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u7684\u56b4\u91cd\u6027\u5c07\u6703\u6108\u4f86\u6108\u56b4\u5cfb\u3002) How to Prevent (\u5982\u4f55\u9810\u9632) \u2693\ufe0e Developers can prevent SSRF by implementing some or all the following defense in depth controls: (\u958b\u767c\u8005\u53ef\u4ee5\u9810\u9632\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\uff0c\u900f\u904e\u5be6\u65bd\u4e0b\u5217\u4e00\u90e8\u5206\u6216\u5168\u90e8\u7684\u7e31\u8eab\u9632\u79a6\u63a7\u5236\u63aa\u65bd\uff1a) From Network layer (\u5f9e\u7db2\u8def\u5c64\u8457\u624b) \u2693\ufe0e Segment remote resource access functionality in separate networks to reduce the impact of SSRF (\u5c07\u9060\u7aef\u8cc7\u6e90\u5b58\u53d6\u529f\u80fd\u5207\u5272\u6210\u4e0d\u540c\u5b50\u7db2\u8def\u4ee5\u964d\u4f4e\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u4e4b\u885d\u64ca) Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic (\u65bc\u9632\u706b\u7246\u653f\u7b56\u6216\u65bc\u7db2\u8def\u5b58\u53d6\u63a7\u5236\u898f\u5247\u5be6\u65bd\"\u9810\u8a2d\u5168\u62d2\u7d55(deny by default)\" \uff0c\u4ee5\u5c01\u9396\u5168\u90e8\u4f86\u81ea\u5916\u90e8\u4e4b\u7db2\u8def\u6d41\u91cf) From Application layer: (\u5f9e\u61c9\u7528\u5c64) \u2693\ufe0e Sanitize and validate all client-supplied input data (\u904e\u6ffe\u4e26\u9a57\u8b49\u4f86\u81ea\u65bc\u7528\u6236\u7aef\u63d0\u4f9b\u4e4b\u5168\u90e8\u8f38\u5165) Enforce the URL schema, port, and destination with a positive allow list (\u4ee5\u6b63\u9762\u8868\u5217\u65b9\u5f0f\u5217\u51faURL\u3001port\u3001\u76ee\u7684\u5730\u6e05\u55ae) Do not send raw responses to clients (\u4e0d\u50b3\u9001\u539f\u59cb\u56de\u61c9\u7d66\u7528\u6236\u7aef) Disable HTTP redirections (\u505c\u7528HTTP\u91cd\u65b0\u5c0e\u5411) Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions (\u7559\u610f\u7db2\u5740\u4e4b\u4e00\u81f4\u6027\uff0c\u4ee5\u907f\u514d\u4f8b\u5982DNS rebinding\u653b\u64ca\u3001TOCTOU\u653b\u64ca) Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists. (\u5225\u900f\u904e\u62d2\u7d55\u6e05\u55ae\u6216\u6b63\u898f\u8868\u793a\u5f0f\u4f86\u6e1b\u7de9\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u3002\u653b\u64ca\u8005\u6709 payload \u6e05\u55ae\u3001\u5de5\u5177\u548c\u6280\u5de7\u53ef\u4ee5\u7e5e\u904e\u9019\u4e9b\u62d2\u7d55\u6e05\u55ae\u3002) Example Attack Scenarios (\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b) \u2693\ufe0e Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: (\u653b\u64ca\u8005\u53ef\u4ee5\u5229\u7528\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u4f86\u653b\u64ca\u5728WAF\u3001\u9632\u706b\u7246\u3001\u6216\u7db2\u8defACL\u5f8c\u9762\u7684\u7cfb\u7d71\uff0c\u53ef\u80fd\u63a1\u53d6\u4e4b\u60c5\u5883\u5982\u4e0b\uff1a) Scenario #1: Port scan internal servers. If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. (\u60c5\u5883\u4e00\uff1a\u5c0d\u5167\u90e8\u4f3a\u670d\u5668 port scan\u3002\u5982\u679c\u7db2\u8def\u67b6\u69cb\u672a\u88ab\u5207\u5272\uff0c\u653b\u64ca\u8005\u53ef\u4ee5\u900f\u904e\u9023\u7dda\u7d50\u679c\u6216\u9023\u7dda\u6240\u7d93\u904e\u7684\u6642\u9593\u6216\u62d2\u7d55SSRF payload\u9023\u7dda\u7684\u72c0\u614b\uff0c\u52a0\u4ee5\u5c0d\u61c9\u51fa\u5167\u90e8\u7db2\u8def\u4e26\u4e14\u5224\u65b7\u8a72\u7b49 port\u5728\u5167\u90e8\u4f3a\u670d\u5668\u662f\u5426\u958b\u555f\u6216\u95dc\u9589\u72c0\u614b) Scenario #2: Sensitive data exposure. Attackers can access local files such as or internal services to gain sensitive information. (\u60c5\u5883\u4e8c\uff1a\u6a5f\u654f\u8cc7\u6599\u6d29\u6f0f\u3002\u653b\u64ca\u8005\u53ef\u4ee5\u5b58\u53d6\u672c\u5730\u7aef\u6a94\u6848(\u4f8b\u5982 ) \u6216\u5167\u90e8\u670d\u52d9\u5df2\u53d6\u5f97\u6a5f\u654f\u8cc7\u6599\u3002) Scenario #3: Access metadata storage of cloud services. Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. (\u60c5\u5883\u4e09\uff1a\u5b58\u53d6\u96f2\u670d\u52d9\u4e4b metadata storage\u3002\u5927\u90e8\u5206\u96f2\u7aef\u63d0\u4f9b\u8005\u90fd\u6709 metadata storage\uff0c\u4f8b\u5982 http://169.254.169.254/ \u3002\u653b\u64ca\u8005\u53ef\u4ee5\u8b80\u53d6metadata\u4ee5\u53d6\u5f97\u6a5f\u654f\u8cc7\u8a0a\u3002) Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS). (\u60c5\u5883\u56db\uff1a\u6ef2\u900f\u5167\u90e8\u670d\u52d9 - \u653b\u64ca\u8005\u53ef\u4ee5\u6feb\u7528\u5167\u90e8\u670d\u52d9\u53bb\u57f7\u884c\u66f4\u9032\u4e00\u6b65\u7684\u653b\u64ca\uff0c\u4f8b\u5982RCE\u6216Dos\u3002 References \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! List of Mapped CWEs \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10 \u4f3a\u670d\u7aef\u8acb\u6c42\u507d\u9020"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#a102021-server-side-request-forgery-ssrf","text":"","title":"A10:2021 \u2013 Server-Side Request Forgery (SSRF)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#factors","text":"CWEs Mapped Max Incidence Rate Avg Incidence Rate Max Coverage Avg Coverage Avg Weighted Exploit Avg Weighted Impact Total Occurrences Total CVEs 1 2.72% 2.72% 67.72% 67.72% 8.28 6.72 9,503 385 | \u53ef\u5c0d\u7167 CWEs \u6578\u91cf | \u6700\u5927\u767c\u751f\u7387 | \u5e73\u5747\u767c\u751f\u7387 |\u6700\u5927\u8986\u84cb\u7bc4\u570d | \u5e73\u5747\u8986\u84cb\u7bc4\u570d | \u5e73\u5747\u52a0\u6b0a\u6f0f\u6d1e | \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff | \u51fa\u73fe\u6b21\u6578 | \u6240\u6709\u76f8\u95dc CVEs \u6578\u91cf | | 1 | 2.72% | 2.72% | 67.72% | 67.72% | 8.28 | 6.72 | 9,503 | 385 |","title":"Factors"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#overview","text":"This category is added from the industry survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of CWEs for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition. \u9019\u500b\u985e\u5225\u662f\u5f9e\u7522\u696d\u8abf\u67e5\u7d50\u679c\u52a0\u5165\u81f3\u6b64\u7684(#1)\u3002\u8cc7\u6599\u986f\u793a\u5728\u6e2c\u8a66\u8986\u84cb\u7387\u9ad8\u65bc\u5e73\u5747\u6c34\u6e96\u4ee5\u53ca\u5229\u7528(Exploit)\u548c\u885d\u64ca(Impact)\u6f5b\u529b\u8a55\u7b49\u9ad8\u65bc\u5e73\u5747\u6c34\u6e96\u7684\u60c5\u6cc1\u4e0b\uff0c\u6b64\u985e\u5225\u767c\u751f\u6a5f\u7387\u76f8\u5c0d\u8f03\u4f4e\u3002\u56e0\u70ba\u65b0\u5831\u5230\u7684\u985e\u5225\u6709\u53ef\u80fd\u662f\u5728CWEs\u7576\u4e2d\u53d7\u5230\u55ae\u4e00\u6216\u5c0f\u7fa4\u95dc\u6ce8\u7684\u985e\u5225\u800c\u5df2\uff0c\u56e0\u6b64\u6211\u5011\u5e0c\u671b\u6b64\u9805\u76ee\u53ef\u4ee5\u5f15\u4f86\u66f4\u591a\u4eba\u95dc\u6ce8\uff0c\u9032\u800c\u5728\u672a\u4f86\u7248\u672c\u8b8a\u6210\u4e00\u500b\u8f03\u5927\u7684\u985e\u5225\u3002","title":"Overview (\u6982\u89bd)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#description","text":"SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network ACL. (\u7576\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u6b63\u5728\u53d6\u5f97\u9060\u7aef\u8cc7\u6e90\uff0c\u537b\u672a\u9a57\u8b49\u7531\u4f7f\u7528\u8005\u63d0\u4f9b\u7684\u7db2\u5740\uff0c\u6b64\u6642\u5c31\u6703\u767c\u751f\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u3002\u5373\u4fbf\u6709\u9632\u706b\u7246\u3001VPN\u6216\u5176\u4ed6\u7db2\u8defACL\u4fdd\u8b77\u7684\u60c5\u6cc1\u4e0b\uff0c\u653b\u64ca\u8005\u4ecd\u5f97\u4ee5\u5f37\u8feb\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u767c\u9001\u4e00\u500b\u7d93\u904e\u634f\u9020\u7684\u8acb\u6c42\u7d66\u4e00\u500b\u975e\u9810\u671f\u7684\u76ee\u7684\u7aef\u3002) As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures. (\u73fe\u4eca\u7684\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u63d0\u4f9b\u7d42\u7aef\u4f7f\u7528\u8005\u4fbf\u5229\u7684\u7279\u8272\uff0c\u53d6\u5f97\u7db2\u5740\u5df2\u7d93\u662f\u5e38\u898b\u7684\u4e86\u3002\u56e0\u6b64\uff0c\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u7684\u767c\u751f\u7387\u662f\u5728\u589e\u52a0\u7576\u4e2d\u7684\u3002\u800c\u4e14\uff0c\u56e0\u70ba\u96f2\u7aef\u670d\u52d9\u548c\u96f2\u7aef\u7d50\u69cb\u7684\u8907\u96dc\u6027\uff0c\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u7684\u56b4\u91cd\u6027\u5c07\u6703\u6108\u4f86\u6108\u56b4\u5cfb\u3002)","title":"Description (\u8aaa\u660e)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#how-to-prevent","text":"Developers can prevent SSRF by implementing some or all the following defense in depth controls: (\u958b\u767c\u8005\u53ef\u4ee5\u9810\u9632\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\uff0c\u900f\u904e\u5be6\u65bd\u4e0b\u5217\u4e00\u90e8\u5206\u6216\u5168\u90e8\u7684\u7e31\u8eab\u9632\u79a6\u63a7\u5236\u63aa\u65bd\uff1a)","title":"How to Prevent (\u5982\u4f55\u9810\u9632)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#from-network-layer","text":"Segment remote resource access functionality in separate networks to reduce the impact of SSRF (\u5c07\u9060\u7aef\u8cc7\u6e90\u5b58\u53d6\u529f\u80fd\u5207\u5272\u6210\u4e0d\u540c\u5b50\u7db2\u8def\u4ee5\u964d\u4f4e\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u4e4b\u885d\u64ca) Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic (\u65bc\u9632\u706b\u7246\u653f\u7b56\u6216\u65bc\u7db2\u8def\u5b58\u53d6\u63a7\u5236\u898f\u5247\u5be6\u65bd\"\u9810\u8a2d\u5168\u62d2\u7d55(deny by default)\" \uff0c\u4ee5\u5c01\u9396\u5168\u90e8\u4f86\u81ea\u5916\u90e8\u4e4b\u7db2\u8def\u6d41\u91cf)","title":"From Network layer (\u5f9e\u7db2\u8def\u5c64\u8457\u624b)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#from-application-layer","text":"Sanitize and validate all client-supplied input data (\u904e\u6ffe\u4e26\u9a57\u8b49\u4f86\u81ea\u65bc\u7528\u6236\u7aef\u63d0\u4f9b\u4e4b\u5168\u90e8\u8f38\u5165) Enforce the URL schema, port, and destination with a positive allow list (\u4ee5\u6b63\u9762\u8868\u5217\u65b9\u5f0f\u5217\u51faURL\u3001port\u3001\u76ee\u7684\u5730\u6e05\u55ae) Do not send raw responses to clients (\u4e0d\u50b3\u9001\u539f\u59cb\u56de\u61c9\u7d66\u7528\u6236\u7aef) Disable HTTP redirections (\u505c\u7528HTTP\u91cd\u65b0\u5c0e\u5411) Be aware of the URL consistency to avoid attacks such as DNS rebinding and \u201ctime of check, time of use\u201d (TOCTOU) race conditions (\u7559\u610f\u7db2\u5740\u4e4b\u4e00\u81f4\u6027\uff0c\u4ee5\u907f\u514d\u4f8b\u5982DNS rebinding\u653b\u64ca\u3001TOCTOU\u653b\u64ca) Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists. (\u5225\u900f\u904e\u62d2\u7d55\u6e05\u55ae\u6216\u6b63\u898f\u8868\u793a\u5f0f\u4f86\u6e1b\u7de9\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u3002\u653b\u64ca\u8005\u6709 payload \u6e05\u55ae\u3001\u5de5\u5177\u548c\u6280\u5de7\u53ef\u4ee5\u7e5e\u904e\u9019\u4e9b\u62d2\u7d55\u6e05\u55ae\u3002)","title":"From Application layer: (\u5f9e\u61c9\u7528\u5c64)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#example-attack-scenarios","text":"Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as: (\u653b\u64ca\u8005\u53ef\u4ee5\u5229\u7528\u507d\u9020\u4f3a\u670d\u7aef\u8acb\u6c42\u4f86\u653b\u64ca\u5728WAF\u3001\u9632\u706b\u7246\u3001\u6216\u7db2\u8defACL\u5f8c\u9762\u7684\u7cfb\u7d71\uff0c\u53ef\u80fd\u63a1\u53d6\u4e4b\u60c5\u5883\u5982\u4e0b\uff1a) Scenario #1: Port scan internal servers. If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections. (\u60c5\u5883\u4e00\uff1a\u5c0d\u5167\u90e8\u4f3a\u670d\u5668 port scan\u3002\u5982\u679c\u7db2\u8def\u67b6\u69cb\u672a\u88ab\u5207\u5272\uff0c\u653b\u64ca\u8005\u53ef\u4ee5\u900f\u904e\u9023\u7dda\u7d50\u679c\u6216\u9023\u7dda\u6240\u7d93\u904e\u7684\u6642\u9593\u6216\u62d2\u7d55SSRF payload\u9023\u7dda\u7684\u72c0\u614b\uff0c\u52a0\u4ee5\u5c0d\u61c9\u51fa\u5167\u90e8\u7db2\u8def\u4e26\u4e14\u5224\u65b7\u8a72\u7b49 port\u5728\u5167\u90e8\u4f3a\u670d\u5668\u662f\u5426\u958b\u555f\u6216\u95dc\u9589\u72c0\u614b) Scenario #2: Sensitive data exposure. Attackers can access local files such as or internal services to gain sensitive information. (\u60c5\u5883\u4e8c\uff1a\u6a5f\u654f\u8cc7\u6599\u6d29\u6f0f\u3002\u653b\u64ca\u8005\u53ef\u4ee5\u5b58\u53d6\u672c\u5730\u7aef\u6a94\u6848(\u4f8b\u5982 ) \u6216\u5167\u90e8\u670d\u52d9\u5df2\u53d6\u5f97\u6a5f\u654f\u8cc7\u6599\u3002) Scenario #3: Access metadata storage of cloud services. Most cloud providers have metadata storage such as http://169.254.169.254/ . An attacker can read the metadata to gain sensitive information. (\u60c5\u5883\u4e09\uff1a\u5b58\u53d6\u96f2\u670d\u52d9\u4e4b metadata storage\u3002\u5927\u90e8\u5206\u96f2\u7aef\u63d0\u4f9b\u8005\u90fd\u6709 metadata storage\uff0c\u4f8b\u5982 http://169.254.169.254/ \u3002\u653b\u64ca\u8005\u53ef\u4ee5\u8b80\u53d6metadata\u4ee5\u53d6\u5f97\u6a5f\u654f\u8cc7\u8a0a\u3002) Scenario #4: Compromise internal services \u2013 The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS). (\u60c5\u5883\u56db\uff1a\u6ef2\u900f\u5167\u90e8\u670d\u52d9 - \u653b\u64ca\u8005\u53ef\u4ee5\u6feb\u7528\u5167\u90e8\u670d\u52d9\u53bb\u57f7\u884c\u66f4\u9032\u4e00\u6b65\u7684\u653b\u64ca\uff0c\u4f8b\u5982RCE\u6216Dos\u3002","title":"Example Attack Scenarios (\u653b\u64ca\u60c5\u5883\u7bc4\u4f8b)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#references","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"References"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_(SSRF)/#list-of-mapped-cwes","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"List of Mapped CWEs"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/","text":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF) \u2693\ufe0e Fatores \u2693\ufe0e CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385 Vis\u00e3o Geral \u2693\ufe0e Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura. Descri\u00e7\u00e3o \u2693\ufe0e As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas. Como Previnir \u2693\ufe0e Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade: Para a Camada de Rede \u2693\ufe0e Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ). Para a Camada de Aplica\u00e7\u00e3o: \u2693\ufe0e Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o. Medidas Adicionais a Considerar: \u2693\ufe0e N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas. Cen\u00e1rio de exemplo de um ataque \u2693\ufe0e Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS). Refer\u00eancias \u2693\ufe0e OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! Lista de CWEs mapeadas \u2693\ufe0e CWE-918 Server-Side Request Forgery (SSRF)","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)    ![icon](assets/TOP_10_Icons_Final_SSRF.png)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#a102021-falsificacao-de-solicitacao-do-lado-do-servidor-ssrf","text":"","title":"A10:2021 \u2013 Falsifica\u00e7\u00e3o de Solicita\u00e7\u00e3o do Lado do Servidor (SSRF)"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#fatores","text":"CWEs Mapeadas Taxa de Incid\u00eancia M\u00e1xima Taxa M\u00e9dia de Incid\u00eancia Explora\u00e7\u00e3o M\u00e9dia Ponderada Impacto M\u00e9dio Ponderado Cobertura M\u00e1xima M\u00e9dia de Cobertura Total de Ocorr\u00eancias Total de CVEs 1 2.72% 2.72% 8.28 6.72 67.72% 67.72% 9,503 385","title":"Fatores"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#visao-geral","text":"Esta categoria foi adicionada a partir de uma pesquisa com a comunidade levando o primeiro lugar no Top 10. Os dados mostram uma taxa de incid\u00eancia relativamente baixa com cobertura de teste acima da m\u00e9dia e classifica\u00e7\u00f5es de potencial de explora\u00e7\u00e3o e impacto acima da m\u00e9dia. Como acontece com novas entradas, provavelmente seja um \u00fanico ou pequeno grupo de CWEs para aten\u00e7\u00e3o e conscientiza\u00e7\u00e3o, a esperan\u00e7a \u00e9 que eles estejam sujeitos ao foco de estudo da comunidade e possamos incluir em uma categoria maior em uma edi\u00e7\u00e3o futura.","title":"Vis\u00e3o Geral"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#descricao","text":"As falhas de SSRF ocorrem sempre que um aplicativo da web busca um recurso remoto sem validar a URL fornecida pelo usu\u00e1rio. Ele permite que um invasor force o aplicativo a enviar uma solicita\u00e7\u00e3o criada para um destino inesperado, mesmo quando protegido por um firewall, VPN ou outro tipo de lista de controle de acesso \u00e0 rede (ACL). Como os aplicativos da web modernos fornecem aos usu\u00e1rios finais recursos convenientes, buscar uma URL se torna um cen\u00e1rio comum. Como resultado, a incid\u00eancia de SSRF est\u00e1 aumentando. Al\u00e9m disso, a gravidade do SSRF est\u00e1 se tornando mais alta devido aos servi\u00e7os em nuvem e \u00e0 complexidade crescente das arquiteturas.","title":"Descri\u00e7\u00e3o"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#como-previnir","text":"Os desenvolvedores podem evitar o SSRF implementando alguns ou todos os seguintes controles de defesa em profundidade:","title":"Como Previnir"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-rede","text":"Segmente a funcionalidade de acesso a recursos remotos em redes separadas para reduzir o impacto de SSRF; Imponha pol\u00edticas de firewall para \u201cnegar por padr\u00e3o\u201d ou regras de controle de acesso \u00e0 rede para bloquear todo o tr\u00e1fego da intranet, exceto o essencial. Dicas: ~ Estabele\u00e7a uma propriedade e um ciclo de vida para regras de firewall baseadas em aplicativos. ~ Registrar todos os fluxos de rede aceitos e bloqueados em firewalls. (veja A09:2021-Monitoramento de Falhas e Registros de Seguran\u00e7a ).","title":"Para a Camada de Rede"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#para-a-camada-de-aplicacao","text":"Higienize e valide todos os dados de entrada fornecidos pelo cliente; Aplique o esquema de URL, porta e destino com uma lista de permiss\u00f5es positiva; N\u00e3o envie a resposta crua ao cliente Desabilite redirecionamentos de HTTP; Tenha cuidado com a consist\u00eancia URL contra ataques que mirem a resolu\u00e7\u00e3o de nomes atrav\u00e9s do DNS e CWE-367. N\u00e3o reduza o SSRF por meio do uso de uma lista de nega\u00e7\u00e3o ou express\u00e3o regular. Os invasores t\u00eam listas gigantes de poss\u00edveis entradas, ferramentas e habilidades para contornar as listas de nega\u00e7\u00e3o.","title":"Para a Camada de Aplica\u00e7\u00e3o:"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#medidas-adicionais-a-considerar","text":"N\u00e3o implemente outros servi\u00e7os de seguran\u00e7a relevantes em sistemas frontais (por exemplo, OpenID). Controle o tr\u00e1fego local nesses sistemas (por exemplo, localhost) Para frontends com grupos de usu\u00e1rios dedicados e gerenci\u00e1veis, use criptografia de rede (por exemplo, VPNs) em sistemas independentes para as necessidades de prote\u00e7\u00e3o muito altas.","title":"Medidas Adicionais a Considerar:"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#cenario-de-exemplo-de-um-ataque","text":"Os invasores podem usar SSRF para atacar sistemas protegidos por firewalls de aplicativos da web, firewalls ou ACLs de rede, usando cen\u00e1rios como: Cen\u00e1rio #1: Varredura de portas em servidores internos - se a arquitetura de rede n\u00e3o for segmentada, os invasores podem mapear as redes internas e determinar se as portas est\u00e3o abertas ou fechadas em servidores internos a partir dos resultados da conex\u00e3o ou do tempo decorrido para conectar ou rejeitar as conex\u00f5es de carga SSRF. Cen\u00e1rio #2: Exposi\u00e7\u00e3o de dados confidenciais - os invasores podem acessar arquivos locais, como ou servi\u00e7os internos, para obter informa\u00e7\u00f5es confidenciais, como file:///etc/passwd e http://localhost:28017/ . Cen\u00e1rio #3: Acesse o armazenamento de metadados de servi\u00e7os em nuvem - a maioria dos provedores de nuvem possui armazenamento de metadados, como http://169.254.169.254/ . Um invasor pode ler os metadados para obter informa\u00e7\u00f5es confidenciais. Cen\u00e1rio #4: Comprometimento dos servi\u00e7os internos - O invasor pode abusar dos servi\u00e7os internos para conduzir outros ataques, como Execu\u00e7\u00e3o Remota de C\u00f3digo/Remote Code Execution (RCE) ou Nega\u00e7\u00e3o de Servi\u00e7o/Denial of Service (DoS).","title":"Cen\u00e1rio de exemplo de um ataque"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#referencias","text":"OWASP - Server-Side Request Forgery Prevention Cheat Sheet PortSwigger - Server-side request forgery (SSRF) Acunetix - What is Server-Side Request Forgery (SSRF)? SSRF bible A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!","title":"Refer\u00eancias"},{"location":"zh_TW/A10_2021-Server-Side_Request_Forgery_%28SSRF%29.pt-BR/#lista-de-cwes-mapeadas","text":"CWE-918 Server-Side Request Forgery (SSRF)","title":"Lista de CWEs mapeadas"},{"location":"zh_TW/A11_2021-Next_Steps/","text":"A11:2021 \u2013 \u4e0b\u4e00\u6b65 \u2693\ufe0e By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate. \u7a0b\u5f0f\u78bc\u54c1\u8cea\u554f\u984c \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 38 49.46% 2.22% 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References . TBA \u963b\u65b7\u670d\u52d9\u653b\u64ca \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 8 17.54% 4.89% 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References . TBA \u8a18\u61b6\u9ad4\u7ba1\u7406\u932f\u8aa4 \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 14 7.03% 1.16% 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of References . TBA \u5b89\u5168\u63a7\u5236\u5931\u8aa4 \u2693\ufe0e \u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 2 11.35% 9.64% 76.60% 45.23% 44911 329 Description . How to prevent . Example attack scenarios . References . TBA","title":"\u4e0b\u4e00\u6b65"},{"location":"zh_TW/A11_2021-Next_Steps/#a112021","text":"By design, the OWASP Top 10 is innately limited to the ten most significant risks. Every OWASP Top 10 has \u201con the cusp\u201d risks considered at length for inclusion, but in the end, they didn\u2019t make it. No matter how we tried to interpret or twist the data, the other risks were more prevalent and impactful. Organizations working towards a mature appsec program or security consultancies or tool vendors wishing to expand coverage for their offerings, the following four issues are well worth the effort to identify and remediate.","title":"A11:2021 \u2013 \u4e0b\u4e00\u6b65"},{"location":"zh_TW/A11_2021-Next_Steps/#_1","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 38 49.46% 2.22% 60.85% 23.42% 101736 7564 Description. Code quality issues include known security defects or patterns, reusing variables for multiple purposes, exposure of sensitive information in debugging output, off-by-one errors, time of check/time of use (TOCTOU) race conditions, unsigned or signed conversion errors, use after free, and more. The hallmark of this section is that they can usually be identified with stringent compiler flags, static code analysis tools, and linter IDE plugins. Modern languages by design eliminated many of these issues, such as Rust\u2019s memory ownership and borrowing concept, Rust\u2019s threading design, and Go\u2019s strict typing and bounds checking. How to prevent . Enable and use your editor and language\u2019s static code analysis options. Consider using a static code analysis tool. Consider if it might be possible to use or migrate to a language or framework that eliminates bug classes, such as Rust or Go. Example attack scenarios . An attacker might obtain or update sensitive information by exploiting a race condition using a statically shared variable across multiple threads. References . TBA","title":"\u7a0b\u5f0f\u78bc\u54c1\u8cea\u554f\u984c"},{"location":"zh_TW/A11_2021-Next_Steps/#_2","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 8 17.54% 4.89% 79.58% 33.26% 66985 973 Description . Denial of service is always possible given sufficient resources. However, design and coding practices have a significant bearing on the magnitude of the denial of service. Suppose anyone with the link can access a large file, or a computationally expensive transaction occurs on every page. In that case, denial of service requires less effort to conduct. How to prevent . Performance test code for CPU, I/O, and memory usage, re-architect, optimize, or cache expensive operations. Consider access controls for larger objects to ensure that only authorized individuals can access huge files or objects or serve them by an edge caching network. Example attack scenarios . An attacker might determine that an operation takes 5-10 seconds to complete. When running four concurrent threads, the server seems to stop responding. The attacker uses 1000 threads and takes the entire system offline. References . TBA","title":"\u963b\u65b7\u670d\u52d9\u653b\u64ca"},{"location":"zh_TW/A11_2021-Next_Steps/#_3","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 14 7.03% 1.16% 56.06% 31.74% 26576 16184 Description . Web applications tend to be written in managed memory languages, such as Java, .NET, or node.js (JavaScript or TypeScript). However, these languages are written in systems languages that have memory management issues, such as buffer or heap overflows, use after free, integer overflows, and more. There have been many sandbox escapes over the years that prove that just because the web application language is nominally memory \u201csafe,\u201d the foundations are not. How to prevent . Many modern APIs are now written in memory-safe languages such as Rust or Go. In the case of Rust, memory safety is a crucial feature of the language. For existing code, the use of strict compiler flags, strong typing, static code analysis, and fuzz testing can be beneficial in identifying memory leaks, memory, and array overruns, and more. Example attack scenarios . Buffer and heap overflows have been a mainstay of References . TBA","title":"\u8a18\u61b6\u9ad4\u7ba1\u7406\u932f\u8aa4"},{"location":"zh_TW/A11_2021-Next_Steps/#_4","text":"\u53ef\u5c0d\u7167 CWEs \u6578\u91cf \u6700\u5927\u767c\u751f\u7387 \u5e73\u5747\u767c\u751f\u7387 \u6700\u5927\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u8986\u84cb\u7bc4\u570d \u5e73\u5747\u52a0\u6b0a\u5f31\u9ede \u5e73\u5747\u52a0\u6b0a\u5f71\u97ff \u51fa\u73fe\u6b21\u6578 \u6240\u6709\u6709\u95dc CVEs \u6578\u91cf 2 11.35% 9.64% 76.60% 45.23% 44911 329 Description . How to prevent . Example attack scenarios . References . TBA","title":"\u5b89\u5168\u63a7\u5236\u5931\u8aa4"},{"location":"zh_TW/ar/assets/readme/","text":"","title":"Readme"}]}